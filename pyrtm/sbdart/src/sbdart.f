ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c            SBDART version 1.5
c            
c            Created on Mon Feb 26 16:28:45 PST 2001
c
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c
c sbdart


c
C============================================================================
c
C PURPOSE: COMPUTE PLANE-PARALLEL RADIATIVE TRANSFER IN THE EARTH'S ATMOSPHERE
C
C INPUT/OUTPUT VARIABLES   described in rt.doc
C
c============================================================================
c
c
c The maximum number of radiation streams is set by the parameter NSTRMS
c while the maximum number of atmospheric layers is set by the parameter MXLYR
c To increase the number of streams or layers beyond the current limits, these 
c parameters must be changed in each of the subroutines in which they appear
c (i.e., do a global replace, changing nstrms=40 to nstrms=??, or changing
c mxlyr=50 to mxlry=??).  Remember to recompile after the changes are saved.
c
C  SUBROUTINE CALLS
c
c absgas          transfer gas absorption data
c absint          compute path integrals for gaseous absorption
c atms            load standard atmospheres (P,T,WH,WO)
c chkin           check input parameters
c chkprn          diagnostic print out
c cloudpar        compute cloud rt properties (single scatter albedo...)
c depthscl        compute radiative quantities for DISORT input
c disort          solve multi-stream rt equation
c getmom          compute phase functions
c kdistr          compute k-distribution fits
c locate          search on a 1-D table 
c modatm          modify atmosphere according to user inputs
c modmix          modify constituent mix of atmosphere
c modrsc          modify Rayleigh scattering strength for sensitivity studies
c openckf         open diagnostic output files (when specified)
c rayleigh        compute rayleigh scattering optical depth
c stdaer          setup standard boundary layer aerosols
c saturate        set relative humidity of cloud layer
c setfilt         select sensor filter function
c stdout0         write output file header
c stdout1         write information at each frequency
c stdout2         write frequency integrated information
c suralb          load surface albedo
c tauaero         compute aerosol optical depth
c taugas          compute absorption due to molecular species
c usraer          setup user defined boundary layer aerosols.
c zensun          compute solar zenith and azimuth given day and time
c zlayer          find the computational layer with altitude z
c
c logical units            files
c
c    11           INPUT
c
c    12           pmom direct access file
c                 (stays open throughout run)
c
c    13           usrcloud.dat, atms.dat, filter.dat, albedo.dat,
c                 aerosol.dat, aeroden.dat
c                 (each file is closed after read)
c
c    20-35        diagnostic output rtinfo.?? (?? = 00 --> 15)
c 
C=======================================================================

      program sbdart

      parameter (lunc=20)
      parameter (lun=11)
      parameter (nstrms=40)
      parameter (mxly=50)
      parameter (maxulv=mxly+1)
      parameter (naerz=5, ncldz=5)
      parameter (re=6371.2)
      parameter (nk=3)
      real*8 zip
      parameter (zip=-1.D0)         

      dimension z(mxly),p(mxly),t(mxly),wh(mxly),wo(mxly)

      dimension taucld(mxly),gcld(mxly),wcld(mxly)
      dimension dtaug(mxly),wreal(mxly)
      dimension dtaur(mxly),taur(mxly)
      dimension dtaua(mxly),waer(mxly),gaer(mxly),dtauab(mxly)

      dimension dtcs(mxly),dtls(mxly)
      dimension dtcv(mxly),dtlv(mxly)
      dimension tauk(mxly,nk),dtauk(mxly,nk),wtk(mxly,nk),
     &          work(mxly,nk)

      dimension umu(nstrms),utau(mxly)

      parameter (nrstrm=nstrms)

      dimension uzen(nrstrm),phi(nrstrm)
      dimension sc(4)

      parameter (mxq=63)
      
      dimension uu(mxq,mxly)
      parameter (nta=9)

      parameter (naerw=47)
      parameter (naerwm=naerw*nstrms)
      
      dimension wlbaer(naerw),qbaer(naerw),wbaer(naerw),gbaer(naerw)
      dimension pmaer(naerwm)

      dimension airmass(mxly),gasabs(nta,mxly),trnsgas(nta,mxly)

      dimension fdird(maxulv),flxdn(maxulv),flxup(maxulv),
     &   dfdt(maxulv),uavg(maxulv),uur(nrstrm,maxulv,nrstrm),
     &   u0u(nrstrm,maxulv),albmed(nstrms),trnmed(nstrms),hl(0:nstrms)
      dimension zout(2)
      dimension zcloud(ncldz),tcloud(ncldz),lcld(ncldz)
      dimension zaer(naerz),taerst(naerz),jaer(naerz),laer(naerz)
      dimension zbaer(mxly),dbaer(mxly)
      dimension pmom(0:nstrms,mxly),temper(0:mxly)

      parameter (npa=200)        ! phase function arrays for high 
      dimension sphase(npa)      ! angular resolution scattering
      dimension sangle(npa)      ! 

      logical prnt(7),deltam,lamber,onlyfl,azmavg,usrtau,usrang,plank

      real lwp(ncldz),nre(ncldz)

      logical prnton, zflag
      character*127 header

c=======================================================================

      data pi/3.1415926536/,wvnmlo/0.0/,wvnmhi/0.0/,accur/0.0/

      data  nz, idatm,isat,nf,iaer,isalb,ickp,iout,imom
     &    / 33,   4,   0,  2,   0,    0,   0,  10,   0 /
      data wlinf,   wlsup,   wlinc
     &     / .55,     .55,     0./
      data   vis,  rhaer, albcon,   sza, csza, rhcld, amix
     &     / 23., zip,      0.,    0.,  zip,   zip,   zip /

      data  tbaer  /zip/
      data  wlbaer /naerw*zip/
      data  qbaer  /naerw*zip/
      data  wbaer  /naerw*zip/
      data  gbaer  /naerw*zip/
      data  dbaer  /mxly*zip/
      data  zbaer  /mxly*zip/
      data  abaer  /zip/
      data  pmaer  /naerwm*zip/

      data sc/1.,0.,0.,0./
      
      data iday,alat,alon,time      /0,-64.767,-64.067,16./
      data solfac                   /1.0/

      data sclh2o,  pbar,    uw,   uo3, o3trp,  ztrp
     &     /  zip,   zip,   zip,   zip,   zip,   0./
      data    xn2,   xo2,  xco2,  xch4,  xn2o
     &     /  zip,   zip,   zip,   zip,   zip/
      data    xco,  xno2,  xso2,  xnh3,   xno,  xhno3
     &     /  zip,   zip,   zip,   zip,   zip,  zip/

      data xo4/1.0/

      data nosct/0/
      data xrsc/1.0/
      data zpres/zip/
c             
      data  zcloud,  tcloud,     nre,     lcld
     &     /ncldz*0, ncldz*0.,  ncldz*8., ncldz*0/
      data zaer,      taerst,   jaer,    laer
     &     /naerz*0, naerz*0., naerz*0, naerz*0/
      data prnt/ 7*.false./
      data  deltam,  lamber, onlyfl, azmavg, usrang, usrtau
     &   /  .true.,   .true., .true., .true., .false., .false./
      data zflag /.false./

      data ntau,numu,nzen,nphi/4*0/
      data umu/nstrms*0./ 
      data uzen/nrstrm*zip/
      data phi/nrstrm*zip/
      data nothrm,ibcnd,phi0,fisot,temis/-1,0,0.,0.,0./
      data btemp,ttemp /zip,zip/
      data zout/0.,100./ 
      data kdist/3/
      data negprn/0/

      data zgrid1,zgrid2,ngrid          /0.,30.,mxly/
      data krhclr /0/

      data ipth /1/

      data maxcmu/nstrms/
      data maxumu,maxphi/2*nrstrm/
      data nstr/4/

      data lwp/ncldz*0./

      data sphase/npa*zip/
      data sangle/npa*zip/

c     wavenumber resolution in CM-1
      data wnres/20./

      data ibeam/0/
c-----------------------------------------------------------------------

      namelist /input/

     &     idatm, amix, isat, wlinf, wlsup, wlinc, sza, csza, solfac,
     &     nf, iday, time, alat, alon, zpres, pbar, sclh2o, uw, uo3,
     &     o3trp, ztrp, xrsc, xn2, xo2, xco2, xch4, xn2o, xco, xno2,
     &     xso2, xnh3, xno, xhno3, xo4, isalb, albcon, sc, zcloud,
     &     tcloud, lwp, nre, rhcld, krhclr, jaer, zaer, taerst, iaer,
     &     vis, rhaer, tbaer, wlbaer, qbaer, abaer, wbaer, gbaer, pmaer,
     &     zbaer, dbaer, nothrm, nosct, kdist, zgrid1, zgrid2, ngrid,
     &     ickp, zout, iout, deltam, lamber, ibcnd, phi0, prnt, ipth,
     &     fisot, temis, nstr, nzen, uzen, nphi, phi, imom, negprn,
     &     sphase, sangle, ttemp, btemp, ibeam


      namelist /dinput/
     &     deltam,lamber,ibcnd,phi0,prnt,ipth,fisot,temis,nstr,
     &     nzen,uzen,nphi,phi,ttemp,btemp,imom


c-----------------------------------------------------------------------
c*****
      iprint(kkk,nnn)=mod((kkk/2**nnn),2)
      prnton(kkk,nnn)=iprint(kkk,nnn) .eq. 1
      lunit(kkk,nnn)=iprint(kkk,nnn)*(lunc+nnn)
c*****
      
      open(unit=11,file='INPUT.DAT',status='unknown',iostat=ios)
      open(unit=2,file='OUTPUT.dat',status='unknown')

      if(ios.eq.0) then
        read(11,input,end=1)
        read(11,dinput,end=2)
        goto 2
 1      continue
        WRITE(*,*),'error: namelist block $INPUT not found'
	   PAUSE
	  stop
 2      continue
      else
        write(*,input)
        pause
	  stop
      endif
      zipp=zip
	
c      pause
c assign user radiance angles

      if(nphi.gt.1) then
        if(numset(zipp,phi,nrstrm).ne.2)
     &       write(*,'(a)') 'Error in MAIN -- ' //
     &       'must specify exactly 2 values of phi when nphi is set'
        if(nphi.gt.nrstrm)
     &       write(*,'(a)') 'Error in Main -- ' //
     &       'specified nphi larger than nrstrm'
        p1=min(phi(1),phi(2))
        p2=max(phi(1),phi(2))
        do i=1,nphi
          phi(i)=p1+(i-1)*(p2-p1)/float(nphi-1)
        enddo
      else
        nphi=numset(zipp,phi,nrstrm)
      endif

      if(nzen.ne.0) then
        if(numset(zipp,uzen,nrstrm).ne.2)
     &       write(*,'(a)') 'Error in MAIN -- ' //
     &       'must specify exactly 2 values of uzen when nzen is set'
        if(nzen.gt.nrstrm)
     &       write(*,'(a)') 'Error in Main -- ' //
     &       'specified nzen larger than nrstrm'
        z1=min(uzen(1),uzen(2))
        z2=max(uzen(1),uzen(2))
        ii=0
        do i=1,nzen
          xxx=z1+(i-1)*(z2-z1)/float(nzen-1)
          if(abs(xxx-90.).gt..05) then
            ii=ii+1
            uzen(ii)=xxx
          endif
        enddo
        nzen=ii
      else
        nzen=numset(zipp,uzen,nrstrm)
      endif

c check input parameters

      call chkin(isat,nf,wlinf,wlsup,solfac,isalb,albcon,
     &     sc,idatm,zpres,pbar,zcloud,tcloud,nre,jaer,zaer,
     &     taerst,iaer,zout,iout,prnt,lwp,nphi,nzen)

      if(iout.le.0) then
	  write(*,*) 'No Iout !!'
	  pause
	  stop
      endif

      call openckf(ickp,lunc)

c solar spectrum, atmosphric profile, satellite sensor
c filtering, surface albedo and aerosol parameters

      if(iday.ne.0) then
        call zensun(abs(iday),time,alat,alon,sza,sazm,solfac)
        if(iday.lt.0) then 
          write(*,'(i5,6f9.3)') abs(iday),time,alat,alon,sza,sazm,solfac
	    pause
          stop
        endif
      elseif(csza.ge.0.) then 
        sza=acos(csza)*180/pi
      endif
      if(abs(sza-90).lt..01) sza=95.

      call atms(idatm,amix,nz,z,p,t,wh,wo)

      if(zgrid1.ne.0.) call zgrid(nz,z,p,t,wh,wo,zgrid1,zgrid2,ngrid)

      if(zpres.gt.zip)  then
        call locate(z,nz,zpres,j)
        fj=(zpres-z(j))/(z(j+1)-z(j))
        pbar=p(j)*(p(j+1)/p(j))**fj
      endif

      call modatm(nz,sclh2o,uw,uo3,o3trp,ztrp,pbar,z,p,wh,wo)
      call modmix(xn2,xo2,xco2,xch4,xn2o,xco,xno2,xso2,xnh3,xno,xhno3)
 
c array dimensions

      nstr1=nstr

      mcldz=max(numset(0.,zcloud,ncldz),
     &          numset(0.,tcloud,ncldz),
     &          numset(0.,lwp,ncldz))

      call zlayer(nz,z,mcldz,zcloud,lcld)
      call zlayer(nz,z,numset(0.,taerst,naerz),zaer,laer)
      lu1=lunit(ickp,1)
      if(rhcld.ge.0) then
        if(krhclr.eq.1) then 
          call satcloud(nz,ncldz,lcld,t,rhcld,wh,lu1)
        else
          call saturate(nz,ncldz,lcld,z,t,rhcld,wh,lu1)
        endif
      endif

      call absint(uu,nz,z,p,t,wh,wo,lunit(ickp,0))
      if(xrsc.ne.1.0) call modrsc(xrsc)

      temper(0)=t(nz)
      do 5 j=1,nz
        temper(j)=t(nz+1-j)
 5    continue
      if(btemp.lt.0.) btemp=temper(nz)
      if(ttemp.lt.0.) ttemp=temper(0)
	      
c find nearest computational levels to given output altitudes
      
      if(min(zout(1),zout(2)) .lt.0.) then
        zout(1)=abs(zout(1))
        zout(2)=abs(zout(2))
        zflag=.true.
      endif
      call closest(z,nz,zout(1),nbot)
      call closest(z,nz,zout(2),ntop)

      ntop=nz-ntop+1
      nbot=nz-nbot+2

      if(zflag) then
        print '(a,3i10)','nz,ntop,nbot: ',nz,ntop,nbot
	  pause
        stop
      endif

c set up for radiance calculation

      if(nzen.ne.0) then
        
        mpa=numset(zipp,sangle,npa) ! number of angles at which aerosol
                                   ! phase function is specified
        
        if(mpa.gt.0.and.tcloud(1).ne.0.) then
          write(*,*) 'Error -- cloud optical depth cannot be ',
     &         ' treated in high precision radiance mode'
	    pause
          stop
        endif
        if(mpa.gt.0) then
          if(numset(zipp,sphase,npa).eq.0) then
            g=gbaer(1)
c            write(*,'(2a11)') 'sangle','sphase'
            do i=1,mpa
              am=cos(sangle(i)*pi/180)
              sphase(i)=(1.-g**2)/(1.+g**2-2.*g*am)**1.5
c              write(*,'(1p,2e11.3)') sangle(i),sphase(i)
            enddo
          endif
        endif

        usrang=.true.
        onlyfl=.false.
        numu=nzen

        do 20 j=1,numu
          umu(j)=min(1.,max(cos(uzen(numu+1-j)*pi/180.),-1.))
          if(umu(j).eq.0.) then
            if(j.eq.numu) then 
              umu(j)=-.0001
            else
              umu(j)=.0001
            endif
          endif
 20     continue

        if(nphi.ne.0) then
          azmavg=.false.
        else
          nphi=1
          phi(1)=0.
        endif
      endif
        
      if(prnton(ickp,0)) 
     &   call chkprn(lunc,iday,time,alat,alon,sza,solfac,pbar,sclh2o,
     &               uw,uo3,o3trp,tcloud,zcloud,taerst,zaer,laer,
     &               zout,ntop,nbot,nz,z,p,t,wh,wo,uu)
      

      call suralb(isalb,albcon,sc)

c load extinction, absorption, and asymmetry parameters for boundary
c layer aerosols, i.e., either rural, urban, oceanic or tropospheric aerosols
c and performs interpolation over relative humidity
      
      if(rhaer.lt.0.) then
        rh=relhum(t(1),wh(1))
      else
        rh=rhaer
      endif

c set vertical profile 

      nzbaer=numset(zipp,zbaer,mxly)
      ndbaer=numset(zipp,dbaer,mxly)
      if(ndbaer.gt.0) then
        if(nzbaer.eq.1) then
          write(*,*) 'Error -- only one value of zbaer set'
	    pause
          stop
        endif
        if(nzbaer.ne.ndbaer.and.nzbaer.gt.1) then
          write(*,*) 'Error -- number of elements must match:'
          write(*,'(a,/,(1p10e11.3))') 'zbaer',(zbaer(i),i=1,nzbaer)
          write(*,'(a,/,(1p10e11.3))') 'dbaer',(dbaer(i),i=1,ndbaer)
	    pause
          stop
        endif
        call uaerden(max(nzbaer,ndbaer),zbaer,dbaer)
      endif
       
c     write(*,*) 'Wlbaer = ',wlbaer
c	pause

      if(iaer.eq.5) then
        call usraer(wlbaer,qbaer,wbaer,gbaer,pmaer,abaer,q55,imoma)
        if(tbaer.eq.zip) tbaer=q55
      else
        call stdaer(iaer,rh)
      endif

      amu0=cos(sza*pi/180.0)

c load spectral response function 

      call setfilt(isat,wlinf,wlsup,wlinc,wl1,wl2,nwl)

      call stdout0(iout,nwl,nz)
      call zeroit(trnsgas,nta*mxly)

c beginning of wavelength looping

      do 100 il=0,nwl-1
        if(wlinc.gt.1) then
          wl=(nwl-1)/(float(il)/wl2+float(nwl-1-il)/wl1)
          dw1=wl-(nwl-1)/(float(il-1)/wl2+float(nwl-il)/wl1)
          dw2=(nwl-1)/(float(il+1)/wl2+float(nwl-2-il)/wl1)-wl
        elseif(wlinc.lt.0.) then
          wr=wl2/wl1
          wl=wl1*wr**(float(il)/(nwl-1))
          dw1=wl-wl1*wr**(float(il-1)/(nwl-1))
          dw2=wl1*wr**(float(il+1)/(nwl-1))-wl
        else
          wl=wl1+il*wlinc
          dw1=wlinc
          dw2=wlinc
        endif

        if(nothrm.lt.0) then 
          plank=wl.gt.2.
        else
          plank=nothrm.eq.0
        endif

        if(il.eq.0.and.il.ne.nwl-1)     dw1=0.
        if(il.eq.nwl-1.and.il.ne.0)     dw2=0.
        dw=.5*(dw1+dw2)

        wvnm=(10000./wl)
        dwvn=.0001*wvnm
        wvnmlo=wvnm-dwvn
        wvnmhi=wvnm+dwvn
        
c input flxin as solar energy (W/m2/um) or an arbitrary constant 

        ff=filter(wl)

        if(nf.eq.0) then
          flxin=1.
        else
          flxin=solfac*solirr(wl,nf)
        endif
        
        if(iout.eq.3) ff=ff*flxin

        if(nosct.eq.1.or.sza.ge.90.) then
           flxin=0.
           amu0=1.
        endif

        rsfc=min(salbedo(wl),1.)

c calculate cloud optical depth and scattering parameters

        if(tcloud(1).ge.0) then
          call taucloud(nz,ncldz,wl,lcld,lwp,tcloud,
     &             nre,wcld,gcld,taucld,imom,pmom,lu1)
        else 
          imom=0
          call usrcloud(nz,wl,p,wcld,gcld,taucld,lu1)
        endif

        !write(*,'(a/1p(10e11.3))') 'wl',wl
        !write(*,'(a/1p(10e11.3))') 'z',(z(jj),jj=nz,1,-1)
        !write(*,'(a/1p(10e11.3))') 'wcld',(wcld(jj),jj=1,nz)
        !write(*,'(a/1p(10e11.3))') 'gcld',(gcld(jj),jj=1,nz)
        !write(*,'(a/1p(10e11.3))') 'taucld',(taucld(jj),jj=1,nz)
        !write(*,'(a,1p2e11.3)') 'wl,total ',wl,total(taucld,1,nz)

c boundary layer and stratospheric aerosols

        call tauaero(wl,nz,z,vis,tbaer,naerz,taerst,laer,jaer,
     &       waer,gaer,dtaua,dtauab,imoma)

        !write(*,'(a/1p(10e11.3))') 'wl,tbaer',wl,tbear
        !write(*,'(a/1p(10e11.3))') 'z',(z(jj),jj=nz,1,-1)
        !write(*,'(a/1p(10e11.3))') 'dtaua',(dtaua(jj),jj=1,nz)
        !write(*,'(a,1p2e11.3)') 'wl,tauaer ',wl,total(dtaua,1,nz)
        
c calculate optical thickness of gaseous absorption 
c and rayleigh scattering (taur, dtaur) 

        call rayleigh(wl,uu,nz,taur,dtaur)

c TAUGAS returns -ln(molecular_transmission)

        if(xo4.ne.1.0) call o4cfac(xo4)

        call taugas(wl,uu,amu0,nz,z,dtcs,dtls,lunit(ickp,2))
        call taugas(wl,uu,1.,nz,z,dtcv,dtlv,0)
        
        if(iout.eq.4) then 
          print '(2i10,2f13.5)',1,nz,wlinf,wlsup
          print '(14x,1pe14.5)',1.
          do i=1,nz
            print '(1p2e14.5)', z(nz-i+1),dtcv(i)+dtlv(i)
          enddo
	    pause
          stop
        endif

        call absgas(airmass,gasabs)

        if(iout.eq.2.or.iout.eq.10.or.iout.eq.20) then
          kdist=0
          tauraytot=total(dtaur,1,nz)
          tauaertot=total(dtaua,1,nz)
        endif

c find number of passes, set up esft parameters for this wavelenth
        
        if(kdist.eq.0.or.total(dtlv,1,nz).lt..01) then
          kd=0
          npass=1
        else
          kd=kdist
          call kdistr(nz,mxly,mxq,uu,dtauk,tauk,wtk,work)
          
          test=max(tauk(nz,1),tauk(nz,2),tauk(nz,3))
          if(test.lt.0.01) then
            npass=1
          else
            npass=nk
          endif            
c            write(*,*) 'test = ',test,'  npass = ',npass
        endif
        
c       loop through k-distribution terms, calculate total optical
c       thickness (gases, rayleigh and clouds)
        
        
        do 90 k=1,npass
          
c           write(*,*) '0. maxulv=',maxulv
          

c skip call to DISORT if regular output not requested

          if(.not. (iout.eq.2.or.iout.eq.3)) then 

 60         continue
            
            call depthscl(kd,nz,k,npass,nstr,wl,amu0,z,dtls,
     &           dtcs,dtcv,dtlv,dtaur,dtaua,dtauab,taucld,dtauk,
     &           wtk,wcld,waer,gcld,gaer,dtaug,wreal,pmom,wt,
     &           imom,imoma,lunit(ickp,3))

            if(npass.gt.1) ipth=0
            
c            write(*,'(f10.3,3i4,1p7e12.4)')
c     &       wl,kd,k,npass,total(dtaur,1,nz),total(dtaua,1,nz),
c     &       total(taucld,1,nz),total(dtcv,1,nz),total(dtlv,1,nz),
c     &       total(dtaug,1,nz),dtaug(nz)

            call disort(nz,dtaug,wreal,pmom,temper,wvnmlo,wvnmhi,
     &           usrtau,ntau,utau,nstr,usrang,numu,umu,nphi,phi,ibcnd,
     &           flxin,amu0,phi0,fisot,lamber,rsfc,hl,btemp,ttemp,
     &           temis,deltam,plank,onlyfl,accur,prnt,header,mxly,
     &           maxulv,maxumu,maxcmu,maxphi,fdird,flxdn,flxup,dfdt,
     &           uavg,uur,u0u,albmed,trnmed)

c    add in atmospheric single scattering contribution when aerosol
c    phase function (not moments) is specified.

c      call zeroit(uur,nstrms*maxulv*nstrms)

            if(ibeam.eq.2) call beamsct(nphi,phi,numu,umu,phi0,amu0,
     &           nz,dtaug,wreal,mpa,sangle,sphase,flxin,dtaur,iout,
     &           nbot,ntop,uur)
c      stop
            numu=nzen

c            
c    change nstr if a negative radiance is found within 5 layers
c    of the output layer.
c
            
            rmin=0.
            if(iout.eq.20) then
              call radrng(uur,nzen,nz+1,nphi,ntop,5,radmin,radmax)
            elseif(iout.eq.21) then 
              call radrng(uur,nzen,nz+1,nphi,nbot,5,radmin,radmax)
            elseif(iout.eq.22) then 
              call radrng(uur,nzen,nz+1,nphi,ntop,nz+1,radmin,radmax)
            elseif(iout.eq.23) then 
              call radrng(uur,nzen,nz+1,nphi,ntop,5,radmin,radmax)
              call radrng(uur,nzen,nz+1,nphi,nbot,5,radmn,radmx)
              radmin=min(radmin,radmn)
              radmax=max(radmax,radmx)
            endif
          
            if(negprn.eq.1.and.rmin.lt.0.) then 
              write(*,*) 'number of streams:',nstr
              write(*,*) 'min,max radiance: ',radmin,radmax
              do iz=1,nz+1,nz
                write(*,'(x,a,i4)') 'iz = ',iz
                do izen=1,nzen
                  write(*,'(f10.3,1p11e11.3)') uzen(izen),
     &                 (uur(izen,iz,iphi),iphi=1,min(nphi,11))
                enddo
              enddo
            endif

             if(radmin.lt.-1.e-8*abs(radmax)) then
               nstr=nstr-2
               if(nstr.lt.max(4,nstr1-2)) nstr=min(nstrms,nstr1+2)
               if(nstr.eq.nstr1) then
                 write(*,*)'%%% Could not repair negative radiance'
                 write(*,*)'%%% ntsr = ',ntsr
                 go to 69

c	           pause
c                 stop
               endif
               go to 60
             else
               nstr=nstr1
             endif
            
c        write(*,*) 'numu: ',numu
c        write(*,*) 'umu:  ',umu
c        write(*,*) 'nphi: ',nphi
c        write(*,*) 'phi:  ',phi
c        write(*,*) 'uur:'
c        do ii=1,nzen
c          write(*,'(1p10e11.3)') (uur(ii,nz+1,kk),kk=1,nphi)
c        enddo
            
            if(prnton(ickp,4)) then
              write(lunc+4,'(a,i5,e11.3)') 'k, wt ',k,wt
              write(lunc+4,'(3x,5a11)')
     &          'dfdt','dflxup','fdird','flxnd','uavg'
              write(lunc+4,'(i3,1p5e11.3)')
     &          (i,dfdt(i),flxup(i),fdird(i),flxdn(i),uavg(i),i=1,nz+1)
            endif
            
          endif

          call stdout1(nz,z,ntop,nbot,iout,wl,dw,wt,
     &         fdird,flxdn,flxup,ff,nphi,nzen,sazm,phi,uzen,uur,
     &         gasabs,trnsgas,tauraytot,tauaertot,taucldtot,k,npass)

 90     continue

 100  continue
      
      call stdout2(nz,iout,wl1,wl2,nphi,nzen,sazm,phi,uzen,z,p,
     &     airmass,trnsgas,tauaertot)
      
 1000 format(/a/(1p10e11.3))
 
 69   continue 

      end
c===============================================================

      subroutine chkin(isat,nf,wlinf,wlsup,solfac,isalb,albcon,
     &     sc,idatm,zpres,pbar,zcloud,tcloud,nre,jaer,zaer,
     &     taerst,iaer,zout,iout,prnt,lwp,nphi,nzen)


c PURPOSE     check input for invalid values.
c             if input is bad, issue error messages and stop
c
c input:  all arguments
c output: none
c
      parameter (nstrms=40)
      parameter (ncldz=5,naerz=5)
      real zcloud(ncldz),tcloud(ncldz)
      real lwp(ncldz),nre(ncldz)
      dimension zaer(naerz),taerst(naerz),jaer(naerz),sc(4),zout(2)
      logical prnt(7)
c
      kill=0

      call ckint('idatm',idatm,1,-6,100,kill)
      call ckreal('wlinf',wlinf,1,.20,100.,kill)
      if(isat.le.-2) then
        call ckreal('wlsup',wlsup,1,0.,wlinf,kill)
      else
        call ckreal('wlsup',wlsup,1,wlinf,100.,kill)
      endif
c      if(wlsup.ne.wlinf)
c     &     call ckreal('wlinc',wlinc,1,-wlsup/wlinf,wlsup-wlinf,kill)
      call ckint('isat',isat,1,-4,40,kill)
      call ckreal('solfac',solfac,1,0.,1.e30,kill)
      call ckreal('zcloud',zcloud,ncldz,-100.,100.,kill)
      call ckreal('nre',nre,ncldz,-1.e30,1.e30,kill)
      call ckreal('lwp',lwp,ncldz,0.,1.e30,kill)
      call ckreal('zaer',zaer,naerz,0.,100.,kill)
      call ckreal('taerst',taerst,naerz,0.,1.e30,kill)

      call ckint('jaer',jaer,naerz,0,4,kill)
      call ckint('nf',nf,1,-1,3,kill)
      call ckint('iaer',iaer,1,0,5,kill)
      call ckint('isalb',isalb,-1,-999999,-2,kill)
      call ckreal('albcon',albcon,1,0.,1.e30,kill)
      call ckreal('sc',sc,4,0.,1.e30,kill)
      call ckreal('zout',zout,2,-100.,100.,kill)

      call ckint('isalb',isalb,-1,7,9,kill)
      call ckint('isalb',isalb,-1,11,999999,kill)
      call ckint('iout',iout,-1,-999999,-1,kill)
      call ckint('iout',iout,-1,8,9,kill)
      call ckint('iout',iout,-1,12,19,kill)
      call ckint('iout',iout,-1,24,999999,kill)
      call ckint('nphi',nphi,1,0,nstrms,kill)

      if((prnt(5).or.
     &   iout.eq.20.or.
     &   iout.eq.21.or.
     &   iout.eq.22.or.
     &   iout.eq.23).and.nzen.eq.0) then
        write(*,'(x,a,i2,a,a)') 'iout =',iout,
     &       ' implies radiance calculation, ',
     &       'but nzen=0 produces no radiance output'
        kill=1
      endif

      if(zpres.gt.0.and.pbar.gt.0.) then
        write(*,'(x,a)') 'set zpres or pbar but not both'
        write(*,*) 'zpres,pbar ',zpres,pbar
        kill=1
      endif
      if((numset(0.,tcloud,ncldz).ne.0).and.
     &   (numset(0.,lwp,ncldz).ne.0)) then
        write (*,*) 'set TCLOUD or LWP, but not both'
        kill=1
      endif

      if(kill.eq.1) then
	 pause
	 stop
      endif

      return
      end
c=======================================================================
      subroutine ckreal(label,xx,nn,valmin,valmax,kill)
c
c purpose:   issue an error message for an incorrectly specified
c            input parameter.
c input:
c   label    variable name
c   xx       real input parameter
c   nn       the absolute value of nn is the number of values in xx
c   valmin   lower limit of valid values
c   valmax   upper limit of valid values
c            
c            if nn is positive an error condition occurs if xx is
c            outside the range (valmin,valmax) (endpoints excluded).
c
c            if nn is negative an error condition occurs if xx is
c            inside the range [valmin,valmax] (endpoints included).
c output:
c   kill     set to one if error condition is detected.
c
      character*(*) label
      dimension xx(*)
      integer kill,nn,n
      n=abs(nn)
      do i=1,n
        if(nn.gt.0.eqv.(xx(i).lt.valmin.or.xx(i).gt.valmax)) then
          if(kill.eq.0) write(*,'(x,a)') 'Check INPUT: '
          write(*,'(3(5x,a," =",1pe10.3))') label,xx(i),
     &                   'valmin',valmin,'valmax',valmax
          kill=1
        endif
      enddo
      return
      end
c======================================================================
      subroutine ckint(label,kk,nn,minval,maxval,kill)
c
c purpose:   issue an error message for an incorrectly specified
c            input parameter.
c input:
c   label    variable name
c   kk       integer input parameter
c   nn       the absolute value of nn is the number of values in kk
c   minval   lower limit of valid values
c   maxval   upper limit of valid values
c            
c            if nn is positive an error condition occurs if kk is
c            outside the range (minval,maxval).
c
c            if nn is negative an error condition occurs if kk is
c            inside the range [minval,maxval].
c output:
c   kill     set to one if error condition is detected.

      character*(*) label
      dimension kk(*)
      integer kill,nn,n
      n=abs(nn)
      do i=1,nn
        if(nn.gt.0.eqv.(kk(i).lt.minval.or.kk(i).gt.maxval)) then
          if(kill.eq.0) write(*,'(x,a)') 'Check INPUT: '
          write(*,'(3(5x,a," =",i5))') label,kk(i),
     &                   'minval',minval,'maxval',maxval
          kill=1
        endif
      enddo
      return
      end
c======================================================================
      subroutine chkprn(lun,iday,time,alat,alon,sza,solfac,
     &                  pbar,sclh2o,uw,uo3,o3trp,tcloud,zcloud,
     &                  taerst,zaer,laer,zout,ntop,nbot,
     &                  nz,z,p,t,wh,wo,uu)

      parameter (mxly=50)
      parameter (max=2*mxly)
      parameter (ncldz=5)
      parameter (naerz=5)
      parameter (mxq=63)

      dimension tcloud(ncldz),zcloud(ncldz),lcld(ncldz),
     &          taerst(naerz),zaer(naerz),laer(naerz),
     &          zout(2),z(mxly),p(mxly),t(mxly),
     &          wh(mxly),wo(mxly),uu(mxq,mxly)
c
      if(iday.ne.0) then
        write(lun,'(a,i3)')     'Day of year: ',abs(iday)
        write(lun,'(a,f8.4)')   '        GMT: ',time        
        write(lun,'(a,2f10.4)') '    lat,lon: ',alat,alon
        write(lun,*) ' '
      endif
      write(lun,'(a,2f10.4)') '  sza,solfac: ',sza,solfac
      write(lun,'(a,2f10.4)') '        zout: ',zout
      write(lun,'(a,3i10)')   'nbot,ntop,nz: ',nbot,ntop,nz
      write(lun,*) ' '
      if(pbar.lt.0)   write(lun,1000) 'PBAR'
      if(uw.lt.0)     write(lun,1000) 'UW'
      if(uo3.lt.0)    write(lun,1000) 'UO3'
      if(o3trp.lt.0)  write(lun,1000) 'O3TRP'
      if(sclh2o.lt.0) write(lun,1000) 'SCLH2O'
      write(lun,*) ' '
      if(tcloud(1).ne.0.) then
        call zlayer(nz,z,numset(0.,tcloud,ncldz),zcloud,lcld)
        write(lun,'(a,5f10.4)')'    zcloud:' ,zcloud
        write(lun,'(a,5i10)')  '      lcld:' ,lcld
      endif
      
      if(taerst(1).ne.0.) then
        call zlayer(nz,z,numset(0.,taerst,naerz),zaer,laer)
        write(lun,'(a,5f10.4)') '      zaer:' ,zaer
        write(lun,'(a,5i10)')   '      laer:' ,laer
      endif
      write(lun,*) '"ATM'
      write(lun,*) nz
      write(lun,'(a/1p(10e11.3))') 'z',(z(i),i=1,nz)
      write(lun,'(a/1p(10e11.3))') 'p',(p(i),i=1,nz)
      write(lun,'(a/1p(10e11.3))') 't',(t(i),i=1,nz)
      write(lun,'(a/1p(10e11.3))') 'h2o',(wh(i),i=1,nz)
      write(lun,'(a/1p(10e11.3))') 'o3',(wo(i),i=1,nz)

      write(lun,'(/a/)') 'atmospheric integrals, uu(k,i):'
      do 10 k=1,mxq
        write(lun,'(i3,/,1p(10e11.3))') k,(uu(k,i),i=1,nz)
 10   continue
 1000 format('default value used for ',a)
      return
      end
c====================================================================
      subroutine stdout0(iout,nwl,nz)
      if(iout.eq.1 .or.
     &   iout.eq.5 .or.
     &   iout.eq.6) write(*,'(/,a)') '"tbf'

      if(iout.eq.2) write(*,'(i5,a4,12a11)') nwl,'wl',
     &     'h2o','co2','o3','n2o','co','ch4','o2+n2','trace',
     &     'total gas','rayleigh','aerosol','cloud'
      if(iout.eq.7) then
        write(*,'(/,a)') '"fzw'
        write(*,'(i15)') nz        
      endif
      if(iout.eq.1 .or.
     &   iout.eq.5 .or.
c     &   iout.eq.6) write(*,'(i15)') nwl
     &   iout.eq.6) write(2,'(i15)') nwl
      return
      end
c=======================================================================
      function plkavg(wvnmlo,wvnmhi,t)
      wl=20000./(wvnmlo+wvnmhi)
      plkavg=planck(wl,t)
      return
      end
c=======================================================================
      block data initout
      parameter (nstrms=40)
      parameter (nrstrm=50)
      parameter (mxly=50)
      parameter (maxulv=mxly+1)

      common / out / phidw,topdn,topup,topdir,botdn,botup,botdir,
     &               fxup(maxulv),fxdn(maxulv),fxdir(maxulv),
     &               uurs(nrstrm,nrstrm),uurl(nrstrm,nrstrm,maxulv)

      parameter (nu1=nrstrm*nrstrm)
      parameter (nu2=nu1*maxulv)
      data uurs/nu1*0.0/
      data uurl/nu2*0.0/
      data phidw,topdn,topup,topdir,botdn,botup,botdir/7*0./
      data fxup,fxdn,fxdir/maxulv*0.,maxulv*0.,maxulv*0./

      end
c=======================================================================
      subroutine stdout1(nz,z,ntop,nbot,iout,wl,dwl,wt,
     &           fdird,flxdn,flxup,ff,nphi,nzen,sazm,phi,uzen,uur,
     &           gasabs,trnsgas,tauraytot,tauaertot,taucldtot,kp,npass)
c
c performs these functions (depending on value of iout):
c  iout
c    1   print output at each wavelength (fluxes in w/m2/micron)
c    2   print gaseous absorption quantities
c    3   print radiance output at each user level summed over wavelength
c    5   print radiance output at top at each wavelength
c    6   print radiance output at bot at each wavelength
c   10   compute total inband flux (w/m2) by summing flux over wavelength 
c   11   flux at each level integrated over wavelength
c   20   compute total inband radiance (w/m2/str) at ZOUT(2)
c   21   compute total inband radiance (w/m2/str) at ZOUT(1)
c   22   compute inband radiance (w/m2/str) at each level
c   23   compute inband radiance (w/m2/str) at zout(1) and zout(2)
c        upper hemisphere radiance corresponds to conditions at zout(2)
c        lower hemisphere radiance corresponds to conditions at zout(1)

c
c common block OUT is used to pass information to STDOUT2

      parameter (nstrms=40)
      parameter (nrstrm=50)
      parameter (mxly=50)
      parameter (maxulv=mxly+1)
      parameter (nr=mxly*3)

      dimension fdird(*),flxdn(*),flxup(*),phi(*),uzen(*),z(*)
      dimension uur(nstrms,maxulv,nstrms)

      parameter (nta=9)
      dimension gasabs(nta,*),trnsgas(nta,*)

      common / out / phidw,topdn,topup,topdir,botdn,botup,botdir,
     &               fxup(maxulv),fxdn(maxulv),fxdir(maxulv),
     &               uurs(nrstrm,nrstrm),uurl(nrstrm,nrstrm,maxulv)

c      parameter (nu1=nstrms*nstrms)
c      parameter (nu2=nu1*maxulv)
c      data uurs/nu1*0.0/
c      data uurl/nu2*0.0/
c      data phidw,topdn,topup,topdir,botdn,botup,botdir/7*0./
c      data fxup,fxdn,fxdir/maxulv*0.,maxulv*0.,maxulv*0./

c

 1000 format(1p10e12.4)

      if(iout.eq.1 .or. iout.eq.5 .or. iout.eq.6) then
        if(kp.eq.1) then
          topdn=0.
          topup=0.
          topdir=0.
          botdn=0.
          botup=0.
          botdir=0.
        endif
        topdn  = topdn  + (flxdn(ntop)+fdird(ntop))*wt*ff
        topup  = topup  + flxup(ntop)*wt*ff
        topdir = topdir + fdird(ntop)*wt*ff
        botdn  = botdn  + (flxdn(nbot)+fdird(nbot))*wt*ff
        botup  = botup  + flxup(nbot)*wt*ff
        botdir = botdir + fdird(nbot)*wt*ff

c        if(kp.eq.npass) write(*,'(f12.8,f9.5,1p6e12.4)')
        if(kp.eq.npass) write(2,'(f12.8,f9.5,1p6e12.4)')
     &                   wl,ff,topdn,topup,topdir,botdn,botup,botdir

        if(iout.eq.5 .or. iout.eq.6 ) then
          j=ntop
          if(iout.eq.6) j=nbot

          if(kp.eq.1) call zeroit(uurs,nstrms*nstrms)
          
          do 3 k=1,nphi
            do 2 i=1,nzen
              uurs(i,k)=uurs(i,k)+uur(i,j,k)*wt*ff
 2          continue
 3        continue

          if(kp.eq.npass) then
c            write(*,'(3i4)')       nphi,nzen
c            write(*,1000) (sazm+phi(j),j=1,nphi)
c            write(*,1000) (uzen(j),j=1,nzen)
            write(2,'(3i4)')       nphi,nzen
            write(2,1000) (sazm+phi(j),j=1,nphi)
            write(2,1000) (uzen(j),j=1,nzen)

            do 4 i=nzen,1,-1
c              write(*,1000) (uurs(i,k),k=1,nphi)
              write(2,1000) (uurs(i,k),k=1,nphi)
 4          continue
          endif
        endif
      endif

      if(iout.eq.2) write(2,'(f9.4,1p12e11.3)')
     &     wl,(gasabs(i,1),i=1,9),tauraytot,tauaertot,taucldtot

      dw=dwl*wt*ff

      if((iout.eq.3  .or.
     &    iout.eq.10 .or.
     &    iout.eq.11 .or.
     &    iout.eq.20 .or.
     &    iout.eq.21 .or.
     &    iout.eq.22 .or.
     &    iout.eq.23) .and. kp.eq.npass) phidw=phidw+dwl*ff

      if(iout.eq.3) then
        do j=1,nz
          do i=1,nta
            trnsgas(i,j)=trnsgas(i,j)+dwl*ff*exp(-gasabs(i,j))
          enddo
        enddo
      endif

      if(iout.eq.7 .or. iout.eq.11 .or. iout.eq.22) then
        if(iout.eq.7) then
          dwx=wt*ff
          if(kp.eq.1) then
            call zeroit(fxdn,nz)
            call zeroit(fxup,nz)
            call zeroit(fxdir,nz)
          endif
        else
          dwx=dw
        endif
        do 10 i=1,nz
          fxdn(i)=fxdn(i)+(flxdn(i+1)+fdird(i+1))*dwx
          fxup(i)=fxup(i)+flxup(i+1)*dwx
          fxdir(i)=fxdir(i)+fdird(i+1)*dwx
 10     continue
      endif

      if(iout.eq.7.and.kp.eq.npass) then
        write(*,'(//,f12.8)') wl
        write(*,'(/,1p,(10e11.3))') (z(im),im=nz,1,-1)
        write(*,'(/,1p,(10e11.3))') (fxdir(i),i=1,nz)
        write(*,'(/,1p,(10e11.3))') (fxdn(i)-fxdir(i),i=1,nz)
        write(*,'(/,1p,(10e11.3))') (fxdn(i),i=1,nz)
        write(*,'(/,1p,(10e11.3))') (fxup(i),i=1,nz)
      endif

      if(iout.eq.10.or.iout.eq.20.or.iout.eq.21.or.iout.eq.23) then
        topdn  = topdn  + (flxdn(ntop)+fdird(ntop))*dw
        topup  = topup  + flxup(ntop)*dw
        topdir = topdir + fdird(ntop)*dw
        botdn  = botdn  + (flxdn(nbot)+fdird(nbot))*dw
        botup  = botup  + flxup(nbot)*dw
        botdir = botdir + fdird(nbot)*dw
      endif

      if(iout.eq.20 .or. iout.eq.21) then
        j=ntop
        if(iout.eq.21) j=nbot
        do 30 k=1,nphi
          do 20 i=1,nzen
            uurs(i,k)=uurs(i,k)+uur(i,j,k)*dw
 20       continue
 30     continue
      endif

      if(iout.eq.22) then
        do 60 j=1,nz
          do 50 k=1,nphi
            do 40 i=1,nzen
              uurl(k,i,j)=uurl(k,i,j)+uur(i,j+1,k)*dw
 40         continue
 50       continue
 60     continue
      endif
      
      if(iout.eq.23) then
        do 80 k=1,nphi
          do 70 i=1,nzen
            if(uzen(nzen-i+1).lt.90.) then           
              j=ntop
            else
              j=nbot
            endif
            uurs(i,k)=uurs(i,k)+uur(i,j,k)*dw
 70       continue
 80     continue
      endif

      return
      end

c======================================================================
      subroutine stdout2(nz,iout,wlinf,wlsup,nphi,nzen,sazm,phi,uzen,
     &     z,p,airmass,trnsgas,tauaertot)
      parameter (nstrms=40)
      parameter (nrstrm=50)
      parameter (mxly=50)
      parameter (maxulv=mxly+1)
      parameter (cp=1004.)     ! heat capacity of air at constant p (J/K/kg)
      parameter (g=9.80665)
      
      dimension z(*),p(*)
      parameter (nta=9)
      dimension airmass(*),trnsgas(nta,*)

      common / out / phidw,topdn,topup,topdir,botdn,botup,botdir,
     &               fxup(maxulv),fxdn(maxulv),fxdir(maxulv),
     &               uurs(nrstrm,nrstrm),uurl(nrstrm,nrstrm,maxulv)

      dimension phi(*),uzen(*)

      data eps/1.e-30/
c
 1000 format(1p10e12.4)

      if(iout.eq.3) then 
        write(*,'(5x,11a13)') 'z','airmass','h2o','co2','o3',
     &       'n2o','co','ch4','o2+n2','trace','total' 
        do j=nz,1,-1
          write(*,'(i5,1p11e13.5)') j,z(j),airmass(j),
     &         (-log(eps+trnsgas(i,j)/phidw),i=1,nta) 
        enddo
      endif

      if(iout.eq.11) then
        write(*,'(i4,1pe15.7)') nz,phidw
c       fxdn(nz) corresponds to total downward flux at surface
        fntm=0.
        do 10 i=1,nz
          zz=z(nz-i+1)
          pp=p(nz-i+1)
          fnt=fxdn(i)-fxup(i)
          if(i.gt.1) then
            dfdz=(fntm-fnt)/(zm-zz)
            heat=.01*3600*24*g*(fntm-fnt)/(cp*(pp-pm)) ! kelvin/day
          else
            dfdz=0.
            heat=0.
          endif
          fntm=fnt
          zm=zz
          pm=pp
          write(*,1000) zz,pp,fxdn(i),fxup(i),fxdir(i),dfdz,heat
 10     continue
      endif

      if(iout.eq.10.or.iout.eq.20.or.iout.eq.21.or.iout.eq.23)
     &   write(2,'(3f11.4,1p,7e12.4)') 
     &  wlinf,wlsup,phidw,topdn,topup,topdir,botdn,botup,botdir,
     &  tauaertot
      

      if(iout.eq.20.or.iout.eq.21.or.iout.eq.23) then
        write(2,'(3i4)')       nphi,nzen
        write(2,1000) (sazm+phi(j),j=1,nphi)
        write(2,1000) (uzen(j),j=1,nzen)
        do 20 i=nzen,1,-1
          write(2,'(1p20e11.3)' ) (uurs(i,k),k=1,nphi)
 20     continue
      endif

      if(iout.eq.22) then
        write(*,'(3i4,1pe12.4)') nphi,nzen,nz,phidw
        write(*,1000) (sazm+phi(i),i=1,nphi)
        write(*,1000) (uzen(j),j=1,nzen)
        write(*,1000) (z(k),k=nz,1,-1)
        write(*,1000) (fxdn(k),k=1,nz)
        write(*,1000) (fxup(k),k=1,nz)
        write(*,1000) (fxdir(k),k=1,nz)
        write(*,1000) (((uurl(i,j,k),i=1,nphi),j=nzen,1,-1),k=1,nz)
      endif
      return
      end
c=======================================================================
      subroutine openckf(ickp,lun)
      character*30 file
      logical prnton
c*****
      iprint(kkk,nnn)=mod((kkk/2**nnn),2)
      prnton(kkk,nnn)=iprint(kkk,nnn) .eq. 1
c*****
      do 10 i=0,15
        if(prnton(ickp,i)) then
          write(file,'(a,i2.2)') 'rtinfo.',i
          lu=lun+i
          open(unit=lun+i,file=file,status='unknown')
        endif
 10   continue
      return
      end
c=======================================================================
      subroutine depthscl(kdist,nz,k,npass,nstr,wl,amu0,z,dtls,
     &     dtcs,dtcv,dtlv,dtaur,dtaua,dtauab,taucld,dtauk,wtk,wcld,waer,
     &     gcld,gaer,dtaug,wreal,pmom,wt,imom,imoma,lun)
c
c routine:   depthscl
c
c purpose:   compute optical depths and other layer-by-layer info
c
c input:
c  nz       number of atmospheric layers
c  k        term in k-distribution expansion
c  npass    total number of k-distribution terms in expansion
c  wl       wavelength (microns) 
c  amu0     cosine of solar zenith
c  z        height of layer (km)
c  dtcs     optical depth increment along slant path due to gaseous continua
c  dtls     o.d.i. along slant path due to gaseous lines (non beers)
c  dtcv     o.d.i. along vertical due to gaseous continua
c  dtlv     o.d.i. along vertical due to gaseous lines (non beers)
c  dtaua    o.d.i. along vertical due to all aerosols
c  dtauab   o.d.i. along vertical due to boundary layer aerosols
c  taucld   o.d.i. along vertical due to clouds
c  dtauk    o.d.i. of all three k-distibution terms
c  wtk      probabilities of k-distribution terms
c  wcld     single scatter albedo due to clouds
c  waer     single scatter albedo due to aerosols
c  gcld     asymmetry factor for clouds
c  gaer     asymmetry factor for aerosols
c  pmom     moments of the the CLOUD phase function (set in taucloud)
c  imom     0 use Henyey-Greenstein phase function for cloud scattering
c           1 use cloud scattering phase function read from pmom.dat
c  imoma    0 use Henyey-Greenstein phase function for b.l. aerosol scattering
c           1 use aerosol scattering phase function read from INPUT
c  lun      logical unit for diagnostic output, no output for lun=0

c
c   output:
c  dtaug    optical depth increment along vertical
c  wreal    effective single scatter albedo
c  pmom     moments of TOTAL phase function
c  wt       probabilities for the k'th k-distribution pass 


      parameter (nstrms=40)
      parameter (mxly=50)
      parameter (mxq=63)
      parameter (re=6371.2, pi=3.1415926536)
      parameter (prec=1.0d-7)

      dimension z(*),dtls(*),dtcs(*),dtcv(*),dtlv(*),
     &     dtaur(*),dtaua(*),dtauab(*),taucld(*),dtauk(mxly,3),
     &     wtk(mxly,3),wcld(*),waer(*),
     &     gcld(*),gaer(*),wreal(*),pmom(0:nstrms,*)

      dimension pmcld(0:nstrms),pmaer(0:nstrms),
     &          greal(mxly),dtaug(mxly),taug(mxly)
c
c
      tautot=0.
      tauray=0.
      tauaer=0.
      tcloud=0.
      tauls=0.      
      taulv=0.
      tauc=0.
      tauk=0.
      tauscat=0.
      tgline=0.
      tgcont=0.
      taug1=0.
      taug2=0.
      taug3=0.       

      if(npass.gt.1) then
        wnorm=0.
        w1=0.
        w2=0.
        w3=0.
        do 10 j=1,nz
          w1=wtk(j,1)*dtlv(j)+w1
          w2=wtk(j,2)*dtlv(j)+w2
          w3=wtk(j,3)*dtlv(j)+w3
 10     continue
        wnorm=w1+w2+w3
        if(wnorm.eq.0) then
          w1=1.
          w2=0.
          w3=0.
        else
          w1=w1/wnorm
          w2=w2/wnorm
          w3=w3/wnorm
        endif
        if(k.eq.1) wt=w1
        if(k.eq.2) wt=w2
        if(k.eq.3) wt=w3
      else
        wt=1.0
      endif

      if(lun.ne.0) then
        if(npass.gt.1.and.k.eq.1) then
          write(lun,'(a/1p(10e11.3))') 'dtauk(j,1)',(dtauk(j,1),j=1,nz)
          write(lun,'(a/1p(10e11.3))') 'dtauk(j,2)',(dtauk(j,2),j=1,nz)
          write(lun,'(a/1p(10e11.3))') 'dtauk(j,3)',(dtauk(j,3),j=1,nz)
          write(lun,'(a/1p(10e11.3))') 'wtk(j,1)',(wtk(j,1),j=1,nz)
          write(lun,'(a/1p(10e11.3))') 'wtk(j,2)',(wtk(j,2),j=1,nz)
          write(lun,'(a/1p(10e11.3))') 'wtk(j,3)',(wtk(j,3),j=1,nz)
          write(lun,'(/a,1p3e11.3/)') 'w1,w2,w3: ',w1,w2,w3
        endif
        write(lun,'(a,i3,a,f10.4)') 'k =',k,'    wl =',wl
        write(lun,'(2x,a8,8a11)')
     &       'z','dtau','dtaua','dtaur','dtcld','dtauc','dtaul',
     &       'w','g'
      endif

      do 30 j=1,nz
        dtauc=dtaur(j)+dtaua(j)+taucld(j)+dtcv(j)
        tauc=tauc+dtauc
        dtsct=dtaur(j)+wcld(j)*taucld(j)+waer(j)*dtaua(j)
        tauscat=tauscat+dtsct
        tauls=tauls+dtls(j)
        taulv=taulv+dtlv(j)
        ultrans=exp(-tauls)

c NOTE: gas continua absorption is grouped with other continuous
c       opacities,  this assumes dtcs=dtcv/amu


c normalize direct beam to slant path transmission by
c adjusting k-distributions optical depths.  
c kdist=1 no renormalization
c kdist=2 renormalize (clear sky situation)
c kdist=3 ramp correction factor to one as tauscat goes > 1

        if(npass.gt.1) then 
          taugx1=taug1+dtauk(j,1)
          taugx2=taug2+dtauk(j,2)
          taugx3=taug3+dtauk(j,3)

          if(tauls.lt.12. .and. kdist.ge.2) then
            call taucor(w1,w2,w3,taugx1,taugx2,taugx3,amu0,tauls,cf)
            if(kdist.eq.3.and.tauscat.gt.1) then
              ramp=exp(-tauscat)/exp(-1.)
              cf=cf*ramp+(1.-ramp)
            endif
            taugx1=taugx1*cf
            taugx2=taugx2*cf
            taugx3=taugx3*cf
          endif
          
          if(k.eq.1) dtgasl=(taugx1-taug1)
          if(k.eq.2) dtgasl=(taugx2-taug2)
          if(k.eq.3) dtgasl=(taugx3-taug3)
          dtgasl=max(dtgasl,0.)

          taug1=taugx1
          taug2=taugx2
          taug3=taugx3
          transk=w1*exp(-taug1/amu0)
     &          +w2*exp(-taug2/amu0)
     &          +w3*exp(-taug3/amu0)
        else
          if(taulv.gt..001) then
            afac=amu0*tauls/taulv
          else 
            afac=1.
          endif
          if(tauscat.gt.1.) then
            ramp=exp(-tauscat)/exp(-1.)
            afac=afac*ramp+(1.-ramp)
          endif
          dtgasl=afac*dtlv(j)
          transk=ultrans
        endif
        
        dtaug(j)=dtgasl+dtauc
        tautot=tautot+dtgasl+dtauc
        taug(j)=tautot
        wreal(j)=0.
        if(dtaug(j).ne.0.) wreal(j)=dtsct/dtaug(j)

c NOTE: WREAL is limited to values below (1.0 - prec) to prevent a 
c divide by zero error in DISORT when the gas absorption is very low.

        wreal(j)=min(wreal(j),1.-prec)

        if(dtsct.ne.0.) greal(j)=
     &       (gcld(j)*wcld(j)*taucld(j)+gaer(j)*waer(j)*dtaua(j))/dtsct
         
        call getmom(3,gaer(j),nstrms,pmaer)

        if(imoma.eq.1) call phaerw(wl,dtaua(j),dtauab(j),pmaer)
        if(imom.ne.1) call getmom(3,gcld(j),nstr,pmcld)

        do 20 i=0,nstrms
          if(imom.eq.1) pmcld(i)=pmom(i,j)
          pmom(i,j)=0.
          if(dtsct.ne.0.) pmom(i,j)=(pmcld(i)*wcld(j)*taucld(j)+
     &                               pmaer(i)*waer(j)*dtaua(j))/dtsct
 20     continue

        pmom(0,j)=1.0

c add in contribution from Rayleigh scattering

        if(dtsct.ne.0.) pmom(2,j)=pmom(2,j)+0.1*dtaur(j)/dtsct

c      write(*,'(a,/,1p(10e11.3))') 'pmaer4',
c     &     (pmom(i,j),i=0,nstrms)

c print diagnostics

        if(lun.ne.0) then 
           tauaer=tauaer+dtaua(j)
           tauray=tauray+dtaur(j)
           tcloud=tcloud+taucld(j)
           tgcont=tgcont+dtcv(j)
           tgline=tgline+dtgasl
           
           write(lun,'(i2,f8.2,1p8e11.3)')
     &         j,z(nz-j+1),dtaug(j),dtaua(j),dtaur(j),taucld(j),
     &          dtcv(j),dtgasl,wreal(j),greal(j)
        endif
        
 30   continue

      if(lun.ne.0.) then 
        write(lun,'(10x,8("  ---------"))') 
        write(lun,'(2x,a8,1p6e11.3)') "totals: ",
     &       tauaer+tauray+tcloud+tgcont+tgline,
     &       tauaer,tauray,tcloud,tgcont,tgline
        
        if(imom.ne.0.or.imoma.ne.0) then
          write(lun,*)
          write(lun,'(a,/,1p(10e11.3))') 'pmom:',(pmom(i,nz),i=0,nstrms)
          write(lun,'(a,/,1p(10e11.3))') 'pmaer:',(pmaer(i),i=0,nstrms)
        endif
      endif
c  compute optical depth correction to user angle slant paths

      return
      end

c======================================================================
      subroutine taucor(w1,w2,w3,t1,t2,t3,amu,utau,cf)
c
c purpose: find a correction factor, cf, which corrects the
c  k-distribution optical depths so that 
c
c   w1*exp(-cf*t1/amu)+w2*exp(-cf*t2/amu)+w3*exp(-cf*t3/amu)=exp(-utau)
c
c input:
c 
c   w1,w2,w3    k-distribution weights
c   t1,t2,t3    k-distribution optical depths
c   amu         cosine of solar zenith
c   utau        optical depth along slant path due to line absorption
c
c output:
c   t1,t2,t3    modified optical depths
c
c  
      cf=1.
      do 10 i=1,20
        e1=exp(-cf*t1/amu)
        e2=exp(-cf*t2/amu)
        e3=exp(-cf*t3/amu)
        ff=w1*e1+w2*e2+w3*e3
        f=log(ff)+utau
        if(abs(f).lt..000001) goto 20
        fp=-(w1*e1*t1+w2*e2*t2+w3*e3*t3)/(ff*amu)
        dcf=-f/fp
        cf=cf+dcf
 10   continue
      write(*,'(8a12)') 'w1','w2','w3','t1','t2','t3','amu','utau'
      write(*,'(1p8e12.4)') w1,w2,w3,t1,t2,t3,amu,utau
	pause
      stop 'TAUCOR: iteration did not converge'
 20   continue
      return
      end
c=======================================================================
      subroutine beamsct(nphi,phi,numu,umu,phi0,amu0,nz,dtaug,wreal,
     &     mpa,sangle,sphase,flxin,dtaur,iout,nbot,ntop,uur)

c     PURPOSE: Add atmospheric single scattering contribution
c     to the radiance array uur.  This routine is only called
c     when an aerosol phase function is specified. The beam contribution
c     is given by equation 6.28 and 6.29 of Liou.  Ignoring boundary
c     contributions, the upwelling radiance is
c
c            nz         /t_j+1                          dt
c    u(i)=sum    w  S P |       exp(-(t-tau)/mu -t/mu0) --
c           j=i   j     /t_j                            mu
c
c           where S is the extraterrestrial solar flux (w/m2/um) (i.e.,
c           what Liou calls pi*Fo), w_j is the single scattering
c           albedo at layer j, P is the phase function, and t_j is the
c           optical depth at boundary j.  The expression for
c           the downwelling radiance is
c
c           i-1         /t_j+1                          dt
c    u(i)=sum    w  S P |       exp(-(tau-t)/mu -t/mu0) --
c           j=1   j     /t_j                            mu
c
c           In these two equations mu and mu0 are the absolute values
c           of the cosine of the viewing and zenith angle, respectively,
c           and the optical depths are computed from input parameter dtaug.
c           u and tau are defined at the boundary between layers, while
c           w, and dtau are defined at the midpoint of each layer.
c
c
c            layer              boundary
c            index              index
c                  ------------   1
c              1
c                  ------------   2
c              2
c                  ------------   3
c              3
c                  ------------   4
c
c
c     on input   uur=Im               multiple scattering (from disort)
c     on output  uur=Im+Is            multiple + single scattering.
c
c

c INPUT:
c  nphi     number of azimuth angles
c  phi      azimuth angles
c  numu     number of zenith angles
c  umu      cosine of zenith angles
c  phi0     zero point of azimuth
c  amu0     solar zenith angle
c  nz       number of levels
c  dtaug    optical depth increments within layer due to aerosol, rayleigh,
c           and gas. Effects of cloud optical depth have not yet been
c           implemented
c  wreal    single scattering albedo
c  mpa      number of entries in phase function array
c  sangle   scattering angles corresponding to entries in phase function array
c  sphase   phase function array.  sphase should be normalized so that
c           integral( sphase, d omega ) = 4pi (same as Liou equation 3.63)
c  flxin    extraterrestrial solar flux density (w/m2/um) 
c  dtaur    optical depth increment within layer due to rayleigh scattering
c  uur      radiance array at computational polar angles

c
c OUTPUT:
c  uur      radiance array with atmospheric single scattering contribution

c discussion:
c
c     may want to change procedure to include spherical earth correction
      parameter (nstrms=40)
      parameter (mxly=50)
      parameter (maxulv=mxly+1)
      parameter (re=6371.2)

      integer nphi,numu,nz,mpa
      real phi(*),umu(*),dtaug(*),dtaur(*),wreal(*),sangle(*),sphase(*)
      real uur(nstrms,maxulv,nstrms)

      real tau(maxulv),expb(maxulv)
      logical debug
      data debug/.false./
      data pi/0./

ccc
c
c spherical earth correction for cosine of zenith angle
c
c      amuz(zzz)=sqrt(1.-(1.-amu0**2)*(re/(re+zzz))**2)
ccc
      !write(*,*) 'db 1'
      if(pi.eq.0.) pi=acos(-1.)

      dtor=pi/180.

      src=flxin/(4.*pi)
      rnorm=pi/(flxin*amu0)  ! conversion to planetary albedo
      sz=amu0
      sx=sqrt(1.-sz**2)

      ! to save time limit calculation to only those
      ! layers destined for output

      nzi=1
      if(iout.eq.5) then
        nz1=ntop
        nz2=ntop
      elseif(iout.eq.6) then
        nz1=nbot
        nz2=nbot
      elseif(iout.eq.20) then
        nz1=ntop
        nz2=ntop
      elseif(iout.eq.21) then 
        nz1=nbot
        nz2=nbot
      elseif(iout.eq.22) then
        nz1=1
        nz2=nz+1
      elseif(iout.eq.23) then
        nz1=ntop
        nz2=nbot
        nzi=nbot-ntop-1
      else
        write(*,*) 'Error -- beamsct '
        write(*,*) '  invalid value of iout: ', iout
	pause
        stop 
      endif
        

      ! find total optical depth and extinction factor for direct beam

      !write(*,*) 'db 2'
      tt=0.
      tau(1)=0.
      expb(1)=1.
      do iz=2,nz+1
        tt=tt+dtaug(iz-1)
        tau(iz)=tt
        expb(iz)=exp(-tt/amu0)
      enddo

      phnorm=2.

      ! loop over all angles

      do izen=1,numu
        vz=-umu(izen)  ! in this routine negative mu means up
        vza=abs(vz)
        do iphi=1,nphi

          ! find scattering angle and phase function value

          vx=sqrt(1.-vz**2)*cos((phi(iphi)-phi0)*dtor)
          smu=max(-1.,min(sz*vz+sx*vx,1.))
          sang=acos(smu)/dtor
          call locate(sangle,mpa,sang,j)
          wt=(sang-sangle(j))/(sangle(j+1)-sangle(j))
          sphaer=(1.-wt)*sphase(j)+wt*sphase(j+1)
          sphaer=2.*sphaer/phnorm  ! integral(mu,sphaer)=2
          sphray=.75*(1.+smu**2)   ! integral(mu,sphray)=2

          ! loop over all layers

          do iz=nz1,nz2,nzi

            ! upwelling

            ! write(*,'(a,3f10.5)') 'amu0,vz,phi: ',amu0,vz,phi

            if(vz.lt.0.) then
              thin=0.
              usum=0.
              do izu=iz,nz
                wtray=min(0.,dtaur(izu)/dtaug(izu))
                sph=sphaer*(1.-wtray)+sphray*wtray
                ff=sph*src*wreal(izu)
                amufac=amu0/(vza+amu0)
                exp1=exp(-(tau(izu)-tau(iz))/vza)
                earg=dtaug(izu)*(1./amu0+1./vza)
                if(earg.lt.0.0001) then
                  efac=earg
                else
                  efac=1.-exp(-earg)
                endif
                usum=usum+ff*amufac*expb(izu)*exp1*efac

                if(debug) then
                  thin=thin+ff*dtaug(izu)/vza
                 
                  if(izu.eq.iz) write(*,'(4a4,11a11)')'iz','izu','phi',
     &                 'zen','tau','e*e','efac','wtray','sph',
     &                 'wreal','u','thin'
                  
                  write(*,'(4i4,1p11e11.3)') iz,izu,iphi,izen,
     &                 tau(izu),expb(izu)*exp1,efac,wtray,sph,
     &                 wreal(izu),usum,thin
                endif

              enddo

            ! downwelling

            elseif(vz.gt.0.) then

              thin=0.
              usum=0.
              do izd=1,iz-1
                wtray=min(0.,dtaur(izu)/dtaug(izd))
                sph=(sphaer*(1.-wtray)+sphray*wtray)
                ff=sph*src*wreal(izd)
                earg=dtaug(izd)*abs(1./amu0-1./vza)
                if(earg.lt.0.0001) then
                  efac=earg
                else
                  efac=1.-exp(-earg)
                endif
                if(vza.gt.amu0) then
                  amufac=amu0/(vza-amu0)
                  exp1=exp(-(tau(iz)-tau(izd))/vza)
                  usum=usum+ff*amufac*exp1*expb(izd)*efac
                elseif(vza.lt.amu0) then 
                  amufac=amu0/(amu0-vza)
                  exp1=exp(-(tau(iz)-tau(izd+1))/vza)
                  usum=usum+ff*amufac*exp1*expb(izd+1)*efac
                else
                  usum=usum+ff*expb(iz)*dtaug(izd)/amu0
                endif
                if(debug) then
                  thin=thin+ff*dtaug(izd)/vza

                  if(izd.eq.1) write(*,'(4a4,11a11)')'iz0','izd',
     &                 'phi','zen','tau','e*e','efac','wtray','sph',
     &                 'wreal','u','thin'
                  write(*,'(4i4,1p11e11.3)') iz,izd,iphi,izen,
     &                 tau(izd),expb(izd)*exp1,efac,wtray,sph,
     &                 wreal(izd),usum,thin
                endif
              enddo

            else

              write(*,*) 'Error -- beamsct'
              write(*,*) ' viewing zenith angle = 90'
              write(*,*) 'iz,vz  ',iz,vz
	pause
              stop

            endif

            uur(izen,iz,iphi)=uur(izen,iz,iphi)+usum

          enddo
        enddo
      enddo

      return
      end
c=======================================================================
      subroutine disdb( nlyr, dtauc, ssalb, pmom, temper, wvnmlo,
     &                    wvnmhi, usrtau, ntau, utau, nstr, usrang,
     &                    numu, umu, nphi, phi, ibcnd, fbeam, umu0,
     &                    phi0, fisot, lamber, albedo, hl, btemp,
     &                    ttemp, temis, deltam, plnk, onlyfl,
     &                    accur, prnt, header, maxcly, maxulv,
     &                    maxumu, maxcmu, maxphi, rfldir, rfldn,
     &                    flup, dfdt, uavg, uu, u0u, albmed, trnmed,
     &                    dpth, upth, ipth, icnt, nbaeca )

      character*127  header
      logical  deltam, lamber, plnk, onlyfl, prnt(7), usrang, usrtau
      integer  ibcnd, maxcly, maxumu, maxulv, maxcmu, maxphi, nlyr,
     &         numu, nstr, nphi, ntau, nbaeca
      real     accur, albedo, btemp, dtauc( maxcly ), fbeam, fisot,
     &         hl( 0:maxcmu ), phi( maxphi ), pmom( 0:maxcmu, maxcly ),
     &         phi0, ssalb( maxcly ), temper( 0:maxcly ), temis, ttemp,
     &         wvnmlo, wvnmhi, umu( maxumu ), umu0, utau( maxulv )
      real     rfldir( maxulv ), rfldn( maxulv ), flup( maxulv ),
     &         uavg( maxulv ), dfdt( maxulv ), u0u( maxumu, maxulv ),
     &         uu( maxumu, maxulv, maxphi ), albmed( maxumu ),
     &         trnmed( maxumu )

      real     dpth( maxcly ), upth(maxulv,maxumu)
	write(*,*) 'icnt = ',icnt
      write(*,*) 'nlyr: '
      write(*,*) nlyr
      write(*,*) 'header:'
      write(*,*) header
      write(*,*) 'deltam: '
      write(*,*) deltam
      write(*,*) 'lamber: '
      write(*,*) lamber
      write(*,*) 'plnk: '
      write(*,*) plnk
      write(*,*) 'onlyfl: '
      write(*,*) onlyfl
      write(*,*) 'prnt(7): '
      write(*,*) prnt
      write(*,*) 'usrang: '
      write(*,*) usrang
      write(*,*) 'usrtau: '
      write(*,*) usrtau
      write(*,*) 'ibcnd: '
      write(*,*) ibcnd
      write(*,*) 'maxcly: '
      write(*,*) maxcly
      write(*,*) 'maxumu: '
      write(*,*) maxumu
      write(*,*) 'maxulv: '
      write(*,*) maxulv
      write(*,*) 'maxcmu: '
      write(*,*) maxcmu
      write(*,*) 'maxphi: '
      write(*,*) maxphi
      write(*,*) 'numu: '
      write(*,*) numu
      write(*,*) 'nstr: '
      write(*,*) nstr
      write(*,*) 'nphi: '
      write(*,*) nphi
      write(*,*) 'ntau: '
      write(*,*) ntau
      write(*,*) 'nbaeca: '
      write(*,*) nbaeca
      write(*,*) 'accur: '
      write(*,*) accur
      write(*,*) 'albedo: '
      write(*,*) albedo
      write(*,*) 'btemp: '
      write(*,*) btemp
      write(*,*) 'fbeam: '
      write(*,*) fbeam
      write(*,*) 'fisot: '
      write(*,*) fisot
      write(*,*) 'dtauc(maxcly): '
      write(*,*) dtauc
      write(*,*) 'ssalb( maxcly ): '
      write(*,*) ssalb
      write(*,*) 'hl( 0:maxcmu):'
      write(*,*) hl
      write(*,*) 'phi( maxphi ): '
      write(*,*) phi
      write(*,*) 'pmom( 0:maxcmu,maxcly)'
      write(*,*) pmom
      write(*,*) 'phi0: '
      write(*,*) phi0
      write(*,*) 'temper( 0:maxcly): '
      write(*,*) temper
      write(*,*) 'temis: '
      write(*,*) temis
      write(*,*) 'ttemp: '
      write(*,*) ttemp
      write(*,*) 'wvnmlo: '
      write(*,*) wvnmlo
      write(*,*) 'wvnmhi: '
      write(*,*) wvnmhi
      write(*,*) 'umu( maxumu ): '
      write(*,*) umu
      write(*,*) 'umu0: '
      write(*,*) umu0
      write(*,*) 'utau( maxulv: '
      write(*,*) utau
      write(*,*) 'rfldir( maxulv ): '
      write(*,*) rfldir
      write(*,*) 'rfldn( maxulv ): '
      write(*,*) rfldn
      write(*,*) 'flup( maxulv : '
      write(*,*) flup
      write(*,*) 'uavg( maxulv ): '
      write(*,*) uavg
      write(*,*) 'dfdt( maxulv ): '
      write(*,*) dfdt
      write(*,*) 'u0u( maxumu, maxulv : '
      write(*,*) u0u
      write(*,*) 'uu( maxumu, maxulv, maxphi ): '
      write(*,*) uu
      write(*,*) 'albmed(maxumu) : '
      write(*,*) albmed
      write(*,*) 'trnmed(maxumu): '
      write(*,*) trnmed
	write(*,*) 'ipth '
	write(*,*) ipth
      write(*,*) 'dpth(maxulv) '
      write(*,*) dpth
      write(*,*) 'upth(maxulv,maxumu): '
      write(*,*) upth
      return
      end

c=======================================================================
c purpose: returns the largest index i, such zz(i).ne.zip

      integer	function numset(zip,zz,nz)
      dimension zz(nz)
      numset=0
      do 10 i=1,nz
        if(zz(i).ne.zip) numset=i
 10   continue
      return
      end      

c=======================================================================
c purpose: returns the number of parameters in array not zip
      integer	function numberset(zip,zz,nz)
      dimension zz(nz)
	real*8 zip
      numberset=0
c	write(*,*),zip,zz,nz
c	pause
      do 10 i=1,nz
        if(zz(i).gt.zip) numberset=numberset+1
	!write(*,*),zip,zz(i),numberset
 10   continue
      return
      end      

c=======================================================================
c purpose: returns the sum of zz(i), for i=i1,i2

      function total(zz,i1,i2)
      dimension zz(*)
      total=0.
      do 10 i=i1,i2
        total=total+zz(i)
 10   continue
      return
      end
c=======================================================================
      subroutine locate(xx,n,x,j)
c
c purpose:  given an array xx of length n, and given a value X, returns
c           a value J such that X is between xx(j) and xx(j+1). xx must
c           be monotonic, either increasing of decreasing. this function
c           returns j=1 or j=n-1 if x is out of range. 
c
c input:
c   xx      monitonic table
c   n       size of xx
c   x       single floating point value perhaps within the range of xx
c
c output:
c           function returns index value j, such that 
c          
c            for an increasing table
c
c                xx(j) .lt. x .le. xx(j+1),  
c                j=1    for x .lt. xx(1)
c                j=n-1  for x .gt. xx(n)
c
c            for a decreasing table
c                xx(j) .le. x .lt. xx(j+1)
c                j=n-1  for x .lt. xx(n)
c                j=1    for x .gt. xx(1)
c
      integer j,n
      real x,xx(n)
      integer jl,jm,ju

c . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

      if(x.eq.xx(1)) then 
        j=1
        return
      endif
      if(x.eq.xx(n)) then
        j=n-1
        return
      endif
      jl=1
      ju=n
10    if(ju-jl.gt.1) then
        jm=(ju+jl)/2
        if((xx(n).gt.xx(1)).eqv.(x.gt.xx(jm)))then
          jl=jm
        else
          ju=jm
        endif
      goto 10
      endif
      j=jl
      return
      end
c=======================================================================
c purpose: for array xx of size n, find j such that xx(j) is nearest x

      subroutine closest(xx,n,x,j)
      dimension xx(*)
      call locate(xx,n,x,k)
      j=k
      if(abs(x-xx(k+1)).lt.abs(x-xx(k))) j=k+1
      return
      end
c=======================================================================
c purpose: for array xx of size nz, return xx in reverse order

      subroutine reverse(nz,xx)
      dimension xx(*)
      do 10 i=1,nz/2
        ir=nz-i+1
        x=xx(i)
        xx(i)=xx(ir)
        xx(ir)=x
 10   continue
      return
      end
c=======================================================================

      subroutine zlayer(nz,z,nzz,zz,lz)
c   
c purpose: given an array of "special" altitudes, zz(k), ZLAYER will
c          find the index array lz(k) such that z(nz-lz(k)+1) is the
c          largest element of z less than or equal to abs(zz(i)+.001)
c          (note reversal of array order).  if zz(k) < 0 then lz(k) 
c          will also be tagged negative. Other routines use this info
c          to indicate altitude ranges.  
c
c          Note that setting zz(i) to a negative integer makes
c          abs(zz(i)+.001) slightly less than the integer.  Thus
c          zz=[1,-3,0,0,0] will select altitude layers at 1 and 2 km
c          only, which is appropriate since choosing the 2km layer
c          affects conditions throughout the computational layer
c          between 2 and 3 km.
c
c          REMEMBER: z, t, p, wh, wo all use bottom up numbering while
c                    everthing else uses top-down numbering 
c

c input:
c   nz     number of atmospheric layers
c
c   z      array of layer altitudes (monotonically increasing)
c
c   nzz    number of "special" altitude layers
c
c   zz     array of "special" altitudes. zz<-1.e20 signals the end of list
c
c
c output:
c lz       index array
c
c example: nz = 9 
c                   9    8   7   6    5   4   3   2   1
c          z  = [   0,   1,  3,  5,   7,  9, 10, 12, 15 ]
c          zz = [   0,   2, -3,  3,  -8]
c          lz = [   9,   8,   8,   7, 5]
c
      dimension z(*),zz(*),lz(*)
c

      do 30 kk=1,nzz
        isgn=1
        if(zz(kk).lt.0.) isgn=-1
        do 10 j=nz,1,-1
          if(z(j).le.abs(zz(kk)+.001)) goto 20
 10     continue
        isgn=0
 20     continue
        lz(kk)=isgn*(nz-j+1)
 30   continue
      
      return
      end
c=======================================================================
      subroutine levrng(nzz,lz,n,lbot,ltop)
c
c     purpose: used specify a computational level range on the 
c              the flag array lz
c     
      dimension lz(*)

      lbot=0
      ltop=0
      if(n.gt.nzz) return
      if(lz(n).le.0) return

      lbot=lz(n)
      ltop=lbot
      if(n.ne.nzz.and.lz(n+1).lt.0) ltop=-lz(n+1)

      return
      end
c===========================================================================
      function planck(wl,t)

c     compute planck function at wavelength wl and temperature t.  
c     units are w/m2/sr/micron (note that w/m2/sr/micron = w/cm2/sr/cm)

      parameter (h=6.6262e-27, bk=1.3807e-16, c=2.9979e10)
      parameter (c1=1.e13*2*h*c**2)
      parameter (c2=1.e4*h*c/bk)
c 
      planck=0.
      if(wl.gt.1.) planck=c1/(wl**5*(exp(c2/(wl*t))-1.))
      return
      end
c-----------------------------------------------------------------------
      subroutine radrng(uur,nzen,nzp,nphi,iz,idz,radmin,radmax)

c purpose: find minimum and maxium value of radiance array within a
c          range of atmospheric layers
c
c input:
c   uur    radiance array uur(nzen,nzp,nphi)
c   nzen   number of zenith angles
c   nzp    number of layers plus one
c   nphi   number of azimuth angles
c   iz     center of layer range
c   idz    half-width of layer range
      parameter (nstrms=40)
      parameter (mxly=50)
      parameter (maxulv=mxly+1)

      dimension uur(nstrms,maxulv,nstrms)

      radmin=1.e30
      radmax=-1.e30

      nz1=max(iz-idz+1,1)
      nz2=min(iz+idz-1,nzp)
      do 30 k=1,nphi
        do 20 j=nz1,nz2
          do 10 i=1,nzen
            radmin=min(radmin,uur(i,j,k))
            radmax=max(radmax,uur(i,j,k))
 10       continue
 20     continue
 30   continue
      return
      end
c=======================================================================

      subroutine thflux(lev,nz,taug,bplnk,fup,fdn)
c
c compute upward and downward thermal flux at level lev
c both surface reflectance and atmospheric scattering are 
c assumed negligible.  The transmission is assumed to be given
c by exp(-taug).
c
      dimension taug(*),bplnk(*)
      parameter (mxly=50)
      parameter (pi=3.141592654)
      dimension e3(mxly),e4(mxly)
c
      recurs(x,f)=(exp(-x)-x*f)/3
c
      e3(lev)=1./2.
      e4(lev)=1./3.
c
c upward flux (contribution from below level LEV)
c
      do 10 i=lev+1,nz
        t=taug(i)-taug(lev)
        e3(i)=expint(3,t)
        e4(i)=recurs(t,e3(i))
 10   continue
c 
      fup=bplnk(nz)*e3(nz)

cdb1  write(*,'(3x,7a11)') 't','dt','e3','e4','slope','fup','pi*bplnk'
      do 20 i=lev,nz-1
        dt=taug(i+1)-taug(i)
        if(dt.eq.0.) goto 20
        slope=(bplnk(i+1)-bplnk(i))/dt
        fup=fup+e3(i)*bplnk(i)-e3(i+1)*bplnk(i+1)
     &         +slope*(e4(i)-e4(i+1))
cdb1    write(*,'(i3,1p7e11.3)') i,taug(i)-taug(1),dt,
cdb1 &                e3(i),e4(i),slope,2*pi*fup,pi*bplnk(i)
 20   continue        
cdb1  write(*,'(i3,1p7e11.3)') nz,0.,0.,e3(nz),e4(nz),
cdb1 &                0.,2*pi*fdn,pi*bplnk(nz)
      fup=2*pi*fup
c
c downward flux (contribution from above level LEV)
c
      do 30 i=1,lev-1
        t=taug(lev)-taug(i)
        e3(i)=expint(3,t)
        e4(i)=recurs(t,e3(i))
 30   continue

      fdn=0.
cdb2  write(*,'(3x,6a11)') 't','dt','e3','e4','slope','fdn','pi*bplnk'
      do 40 i=1,lev-1
        dt=taug(i+1)-taug(i)
        if(dt.eq.0.) goto 40
        slope=(bplnk(i+1)-bplnk(i))/dt
        fdn=fdn+e3(i+1)*bplnk(i+1)-e3(i)*bplnk(i)
     &         -slope*(e4(i+1)-e4(i))
cdb2  write(*,'(i3,1p7e11.3)') i,taug(nz)-taug(i),dt,
cdb2 &                e3(i),e4(i),slope,2*pi*fdn,pi*bplnk(i)
 40   continue
cdb2  write(*,'(i3,1p7e11.3)') nz,0.,0.,e3(nz),e4(nz),
cdb2 &                         0,2*pi*fdn,pi*bplnk(nz)
      fdn=2*pi*fdn
      return
      end
c-------------------------------------------------------------------------
      function expint(ind,x)
c  
c   ROUTINE:   expint
c   PURPOSE:   compute the exponential integral of x.
c              the exponential integral of index n is given by
c              integral( exp(-tx)/x^n dx), x ranges from 1 to infinity
c  
c   USEAGE:    result=expint(ind,x,nz)
c  
c   INPUT:
c     ind      type of exponential integral, for example use ind=1
c              to get first exponential integral, E1
c     x        argument to exponential integral ( 0 < x < infinity)
c
c   OUTPUT:
c     result   exponential integral
c  
      dimension a(4),b(4),c(6)
     
      data a/0.2677737343,8.6347608925,18.0590169730,8.5733287401/
      data b/3.9584969228,21.0996530827,25.6329561486,9.5733223454/
      data c/-0.57721566,0.99999193,-0.24991055,0.05519968,
     &       -0.00976004, 0.00107857/
c
      if(ind .le. 0) then 
        write(*,*) 'illegal value of IND in EXPINT'
	pause
        stop
      endif
c
      expx=exp(-x)
      if (x.le.1.) then
        expint=((((c(6)*x+c(5))*x+c(4))*x+c(3))*x+c(2))*x+c(1)-log(x)
      else
        a1=(((x+a(4))*x+a(3))*x+a(2))*x+a(1)
        a2=(((x+b(4))*x+b(3))*x+b(2))*x+b(1)
        expint=expx*a1/(a2*x)
      endif
c
c use recursion to get higher order exponential integrals
c

      if(ind.eq.1) return
      do 10 n=1,ind-1 
        expint=(expx-x*expint)/n 
 10   continue
      return
      end
c
c
c diagnostic main program
c
c        write(*,*)'---------'
c        do 1 t=.1,.5,.1
c          e1=expint(1,t)
c          ex=(e1+log(t)+0.5772156649)/t
c          write(*,'(1p7e15.7)') t,e1,ex
c   1    continue
c        write(*,*)'---------'
c        do 5 t=.5,1.,.1
c          e1=expint(1,t)
c          write(*,'(1p7e15.7)') t,e1
c   5    continue
c        write(*,*)'---------'
c        do 10 t=1.,8.
c          e1=expint(1,t)
c   10   continue
c        write(*,*)'---------'
c        end

c file:                  atms.f
c
c external routines:     atms,modatm,taucloud,saturate,satcloud,usrcloud
c
c internal routines      midsum,midwin,subsum,subwin,tropic,us62,useratm
c                        zgrid,icepar
c
c logical units:         unit 13, used to read user atmosphere from atms.dat

c=======================================================================
      subroutine taucloud(nz,ncldz,wl,lcld,lwp,tcloud,
     &              nre,wcld,gcld,taucld,imom,pmom,lunc)
c
c purpose:  compute cloud radiometric properties
c
c input: 
c
c  nz      number of atmospheric layers
c  ncldz   maximum number of cloud layers
c  wl      wavelength
c  lcld    cloud layer indecies
c  lwp     liquid water path of each cloud layer
c  tcloud  optical depth of each cloud layer
c  nre     effective radius within each cloud layer
c  lunc    logical unit for diagnostic print
c
c output:
c
c  wcld    cloud single scatter albedo at each vertical grid point
c  gcld    asymmetry factor at each vertical grid point
c  taucld  cloud optical thickness at each vertical grid point
c
c                            the effective radius of ice particles:
      parameter (reice=106.)
c                            the bulk density of ice (g/cm3):
      parameter (rhoice=.917) 

      parameter (mxly=50)
      parameter (nstrms=40)
      dimension pmcld(nstrms)
      dimension pmom(0:nstrms,*)

      real lwp(*),tcloud(*),nre(*),lwpth
      integer lcld(*),icnt(mxly)
      dimension wcld(*),gcld(*),taucld(*)
      dimension qcld(mxly),q550(mxly)

      save q550
     
      data ifirst/1/, ipo/1/
      
c      write(*,*) '.lcld1 ',lcld1      
c      write(*,*) '.lcld2 ',lcld2      

      do 5 j=1,nz
        qcld(j)=0.
        wcld(j)=0.
        gcld(j)=0.
        taucld(j)=0.
        icnt(j)=0
        do i=0,nstrms
          pmom(i,j)=0.
        enddo
 5    continue

      do 20 i=1,ncldz
        call levrng(ncldz,lcld,i,lbot,ltop)
        if(lbot.eq.0) goto 20
        if(tcloud(i).eq.0..and.lwp(i).eq.0.) goto 20
        do 10 j=ltop,lbot
          if(ltop.eq.lbot) then
            reff=nre(i)
            tcld=tcloud(i)
            lwpth=lwp(i)
          else
            wt=float(j-ltop)/(lbot-ltop)
            reff=nre(i+1)*(nre(i)/nre(i+1))**wt

c           if tcloud(i+1) is zero, spread the opacity uniformly over
c           the affected layers.  if tcloud(i+1) is nonzero then the
c           opacity is distrbuted such that it linearly increases
c           (or decreases) from the bottom to the top layer.  The rate
c           of increase is controled by tcloud(i+1) which sets the ratio
c           of the the opacity in the top layer to that of the bottom
c           layer.  The total opacity over all layers adds up to
c           tcloud(i)

            if(tcloud(i+1).eq.0.) then
              tcld=tcloud(i)/(lbot-ltop+1)
            else
              tcld=2*tcloud(i)/((lbot-ltop+1)*(1.+tcloud(i+1)))
              tcld=tcld+(lbot-j)*tcld*(tcloud(i+1)-1.)/(lbot-ltop)
            endif
            
            if(lwp(i+1).eq.0.) then
              lwpth=lwp(i)/(lbot-ltop+1)
            else
              lwpth=2*lwp(i)/((lbot-ltop+1)*(1.+lwp(i+1)))
              lwpth=lwpth+(lbot-j)*lwpth*(lwp(i+1)-1.)/(lbot-ltop)
            endif
          endif

          if(imom.ge.1) then 
            call cloudqwp(wl,reff,qc,wc,pmcld)
            gc=pmcld(1)
            do k=1,nstrms
              pmom(k,j)=pmcld(k)+pmom(k,j)
            enddo
          else
            call cloudpar(wl,reff,qc,wc,gc)
          endif
          qcld(j)=qc+qcld(j)
          wcld(j)=wc+wcld(j)
          gcld(j)=gc+gcld(j)
          icnt(j)=1+icnt(j)
          if(tcloud(i).ne.0.) then
            if(ifirst.eq.1) then
              if(imom.ge.1) then
                call cloudqwp(0.55,reff,qc550,wc550,pmcld)
              else
                call cloudpar(0.55,reff,qc550,wc550,gc550)
              endif
              q550(j)=qc550
            endif
            taucld(j)=tcld*qc/q550(j)+taucld(j)
          else
            if(lwpth.ne.0.) then
              if(reff.lt.0.) then
                taucld(j)=.75*qc*lwpth/reice/rhoice+taucld(j)
              else
                taucld(j)=.75*qc*lwpth/reff+taucld(j)
              endif
            endif
          endif
          
 10     continue
 20   continue

      do 30 j=1,nz
        if(icnt(j).ne.0) then
          qcld(j)=qcld(j)/icnt(j)
          wcld(j)=wcld(j)/icnt(j)
          gcld(j)=gcld(j)/icnt(j)
          if(imom.ge.1) then 
            do i=1,nstrms
              pmom(i,j)=pmom(i,j)/icnt(j)
            enddo
          endif
        endif
        
        if (lunc.gt.0 .and. ifirst.eq.1 .and. taucld(j).ne.0.) then
          if(ipo.eq.1) write(lunc,'(8a11)')
     &         'wl','layer ','taucld','qc','ssa','g'
          ipo=0
          write (lunc,'(f11.5,i11,4(f11.5),i11)')
     &         wl,j,taucld(j),qcld(j),wcld(j),gcld(j),icnt(j)
        endif
 30   continue

      ifirst=0
      return
      end
c=======================================================================
      subroutine usrcloud(nz,wl,p,wcld,gcld,taucld,lunc)
c
c purpose:  read user specified cloud properties
c           this routine is called when tcloud(1) < 0
c
c input:   
c   wl      wavelength
c    p      pressure array (mb), pressure at surface=p(1)
c
c output:
c
c   wcld    cloud single scatter albedo at each vertical grid point
c   gcld    asymmetry factor at each vertical grid point
c   taucld  cloud optical thickness at each vertical grid point
c
c usrcloud format (read on first call only):
c
c read(13,*) (lwp(i),reff(i),fwp(i),reice(i),cldfrac(i)),i=1,nzz)
cc
c   lwp     liquid water path within layer (g/m2)          (default=0)
c   reff    effective radius of water droplets (microns).  (default=10.)
c   fwp     frozen water path within layer (g/m2)          (default=0)
c   reice   effective radius of ice particles (microns)    (default=-1)
c           CCM3 model is used if reice < 0 
c   cldfrac fraction of cloud within layer.  to simulate   (default=1)
c           the effect of partial cloud cover, optical depth is
c           reduced by cldfrac**1.5, an empirical result from
c           the NCAR Community Climate Model (CCM)
c 
c   DISCUSSION:

c           Cloud records are read from file usrcld.dat starting with
c           the lowest layer in the atmosphere. The input file need not
c           specify values above the altitude where clouds are present.
c           In addition the input record may be terminated before
c           reading all the input variables by inserting a forward slash
c           in place of the first variable to be ignord.  If left
c           unspecified, input quantities retain their default of
c           lwp=0. reff=10, fwp=0, reice=-1, and cldfrac=1.  The radiative
c           properties of ice are computed from a CCM3 model
c           parameterization contained in subroutine icepar

c
      parameter (mxly=50)

c                            the bulk density of ice (g/cm3):
      parameter (rhoice=.917) 
      real p(*)

      real lwp(mxly),reff(mxly),fwp(mxly),reice(mxly),cldfrac(mxly)
      
      dimension wcld(*),gcld(*),taucld(*)
      real ww,gw,qw,wi,gi,qi
      dimension qcld(mxly)
     
      data ifirst/1/
      data lwp/mxly*0./
      data reff/mxly*10./
      data fwp/mxly*0./
      data reice/mxly*-1./
      data cldfrac/mxly*1./

      save lwp,reff,fwp,cldfrac

      if(ifirst.eq.1) then 
        open(unit=13,file='usrcld.dat',form='formatted',status='old')
        do i=nz,1,-1
          read(13,*,end=100) lwp(i),reff(i),fwp(i),reice(i),cldfrac(i)
        enddo
        close(unit=13)
 100    continue
        ifirst=0
      endif

c        print '(a5,10a11)',
c     &   'i','p','taucld','tauw','taui','qw','qi','ww','wi','gw','gi'
      do i=1,nz

        if(lwp(i).gt.0.) then 
          call cloudpar(wl,reff(i),qw,ww,gw)
          tauw=.75*qw*lwp(i)/reff(i)
        else
          qw=0.
          ww=0.
          gw=0.
          tauw=0.
        endif

        if(fwp(i).gt.0.) then
          prat=p(nz-i+1)/p(1)
          ri=reice(i)
          call icepar(wl,prat,qi,wi,gi,ri)
          taui=.75*qi*fwp(i)/(rhoice*ri)
        else
          qi=0.
          wi=0.
          gi=0.
          taui=0.
        endif

        taucld(i)=tauw+taui
        if(taucld(i).ne.0.) then
          wcld(i)=(tauw*ww+taui*wi)/taucld(i)
          gcld(i)=(tauw*gw+taui*gi)/taucld(i)
        endif
        taucld(i)=taucld(i)*cldfrac(i)**1.5
c        print '(i5,1p10e11.3)',
c     &       i,p(nz-i+1),taucld(i),tauw,taui,qw,qi,ww,wi,gw,gi
      enddo

      return
      end
c_end
c=======================================================================
      subroutine icepar(wl,prat,qice,wice,gice,rei)
c
c purpose: compute ice radiative parameters using CCM3 ice coefficients.
c
c input:
c   wl        wavelength (um)
c   prat      pressure ratio p(z)/p_surface
c
c input/output:
c   rei       effective radius.  if negative on input replace with
c             effective radius from ccm3 ice model 
c             
c
c output:
c   qice      extinction coefficient
c   wice      single scattering albedo of ice
c   gice      asymmetry factor of ice 
c   rei       effective radius of ice (um)
c
      real abari(4),bbari(4),cbari(4),dbari(4),ebari(4),fbari(4),
     &     pllow,plhgh,reimax,reimin
 
      data abari /3.448e-03,3.448e-03,3.448e-03,3.448e-03/
      data bbari /2.431    ,2.431    ,2.431    ,2.431    /
      data cbari /1.00e-05 ,1.10e-04 ,1.861e-02,.46658   /
      data dbari /0.0      ,1.405e-05,8.328e-04,2.05e-05 /
      data ebari /0.7661   ,0.7730   ,0.794    ,0.9595   /
      data fbari /5.851e-04,5.665e-04,7.267e-04,1.076e-04/
      data pllow  /.0/
      data plhgh  /.4/
      data reimax /30./
      data reimin /10./
 
c     CCM3 code - partitions solar spectrum to 4 bands.
 
      if(wl.lt.0.69) then
        iceindx=1
      else if(wl.lt.1.19) then
        iceindx=2
      else if(wl.lt.2.38) then
        iceindx=3
      else
        iceindx=4
      endif
 
      if(rei.lt.0.) then 
        if(prat.gt.plhgh) then
          rei=reimin
        else
          rei=reimax-((reimax-reimin)*((prat-plhgh)/(plhgh-pllow)))
        endif
      endif

      gice=ebari(iceindx)+fbari(iceindx)*rei
      wice=1.-cbari(iceindx)-dbari(iceindx)*rei
      qice=(abari(iceindx)+(bbari(iceindx)/rei))

      return
      end
c=======================================================================
      subroutine satcloud(nz,ncldz,lcld,t,rhcld,wh,lunc)
      parameter (tzero=273.15)
      dimension t(*),wh(*),lcld(*)
c
c purpose: modify the watervapor density inside clouds to have a
c          relative humidity of RHCLD.
c
c INPUT:
c   nz        number of atmospheric levels
c   ncldz     size cloud layer arrays
c   lcld      cloud layer array
c   t         temperature at altitude z
c   rhcld     relative humidity of cloud layer, used to specify
c             water vapor density.
c
c
c h2osat is the mass density (g/m3) of water vapor at 100% saturation
c (source: handbook of chemistry and physics, h2o vapor pressure
c table d-112, assuming density related to pressure by ideal gas law)
c
            satden(a)=a*exp(18.916758-a*(14.845878+a*2.4918766))

      if(lunc.gt.0) write(lunc,'(a/1p(10e11.3))') 'wh_in  ',
     &           (wh(i)/satden(tzero/t(i)),i=1,nz)
c
c  adjust cloud layer, don't adjust clear layers
c
      do 20 i=1,ncldz
        call levrng(ncldz,lcld,i,lbot,ltop)
        if(lbot.ne.0) then
          do 10 j=ltop,lbot
            jj=nz-j+1
            wh(jj)=rhcld*satden(tzero/t(jj))
 10       continue
        endif
 20   continue

      if(lunc.gt.0) then

        write(lunc,'(a/1p(10e11.3))') 'rh_out  ',
     &           (wh(i)/satden(tzero/t(i)),i=1,nz)
        write(lunc,'(a/1p(10e11.3))') 'wh_out  ',
     &           (wh(i),i=1,nz)
      endif

      return
      end

c=======================================================================
      subroutine saturate(nz,ncldz,lcld,z,t,rhcld,wh,lunc)
      parameter (tzero=273.15)
      dimension t(*),z(*),wh(*),lcld(*)
c
c purpose: modify the watervapor density inside clouds to have a relative
c          humidity of RHCLD.  reduce water vapor density outside
c          of cloud to maintain total water vapor path
c
c          NOTE: due to normalization procedure the final water vapor
c                density inside the cloud may not exactly match 
c                (rhcld)*(saturated water vapor density), 
c                but it should be close.
c
c INPUT:
c   nz        number of atmospheric levels
c   ncldz     size cloud layer arrays
c   lcld      cloud layer array
c   z         altitude (km) of atmospheric layers (z(nz)=surface)
c   t         temperature at altitude z
c   rhcld     relative humidity of cloud layer, used to specify
c             water vapor density.  
c                                   
c
c h2osat is the mass density (g/m3) of water vapor at 100% saturation 
c (source: handbook of chemistry and physics, h2o vapor pressure table d-112,
c assuming density related to pressure by ideal gas law)
c
            satden(a)=a*exp(18.916758-a*(14.845878+a*2.4918766))
c
c  adjust cloud layer, don't adjust clear layers
c
c  adjust cloud layer and adjust clear layer to compensate for increased wvp
c
      if(lunc.gt.0) write(lunc,'(a/1p(10e11.3))') 'wh_in  ',
     &           (wh(i)/satden(tzero/t(i)),i=1,nz)

      wvp=0.
      zbot=z(1)
      do 5 i=1,nz
        if(i.eq.1) then
          ztop=.5*(z(2)+zbot)
        elseif(i.eq.nz) then
          ztop=z(nz)
        else
          ztop=.5*(z(i+1)+z(i))
        endif
        wvp=wvp+.1*(ztop-zbot)*wh(i)
        zbot=ztop
 5    continue
      if(wvp.eq.0.) return

      do 20 i=1,ncldz
        call levrng(ncldz,lcld,i,lbot,ltop)
        if(lbot.ne.0) then
          do 10 j=ltop,lbot
            jj=nz-j+1
            wh(jj)=-rhcld*satden(tzero/t(jj))
 10       continue
        endif
 20   continue

      wvpclr=0.
      wvpcld=0.
      zbot=z(1)
      do 30 i=1,nz-1
        if(i.eq.1) then
          ztop=.5*(z(2)+zbot)
        elseif(i.eq.nz) then
          ztop=z(nz)
        else
          ztop=.5*(z(i+1)+z(i))
        endif
        if(wh(i).gt.0.) wvpclr=wvpclr+.1*(ztop-zbot)*wh(i)
        if(wh(i).lt.0.) wvpcld=wvpcld-.1*(ztop-zbot)*wh(i)
        zbot=ztop
 30   continue

      if(wvpcld.eq.0) return

      if(wvpclr.eq.0) then
        cldfac=wvp/wvpcld
        clrfac=0.
      else
        clrfac=(wvp-wvpcld)/wvpclr
        cldfac=1.
        if(clrfac.lt.0) then
          clrfac=0.
          cldfac=wvp/wvpcld
        endif
      endif

      do 40 i=1,nz
        if(wh(i).lt.0) then
          wh(i)=-cldfac*wh(i)
        else
          wh(i)=clrfac*wh(i)
        endif
 40   continue

      wvpn=0.
      do 50 i=1,nz-1
        dz=(z(i+1)-z(i))
        den1=wh(i)
        den2=wh(i+1)
        tst1=abs(den1-den2)
        tst2=min(den1,den2)
        if(tst1.le..001*den1 .or. tst2.eq.0.) then
          du=.5*dz*(den1+den2)
        else
          du=dz*(den1-den2)/log(den1/den2)
        endif
        wvpn=wvpn+.1*du
 50   continue

      do 60 i=1,nz
        wh(i)=wh(i)*wvp/wvpn
 60   continue

      if(lunc.gt.0) then
      
        write(lunc,'(4a10/4f10.3)') 'wvp','wvpn','wvpclr','wvpcld',
     &       wvp,wvpn,wvpclr,wvpcld
        write(lunc,'(a/1p(10e11.3))') 'rh_out  ',
     &           (wh(i)/satden(tzero/t(i)),i=1,nz)
        write(lunc,'(a/1p(10e11.3))') 'wh_out  ',
     &           (wh(i),i=1,nz)
      endif      
      return
      end
c===========================================================================
      subroutine modatm(nz,sclh2o,uw,uo3,o3trp,ztrp,pbar,z,p,wh,wo)
c
c purpose:  modify the atmospheric profiles of water vapor, ozone and
c           pressure.  the vertical water vapor and ozone profiles
c           will be scaled by a constant factor so that the integrated
c           amounts will match those specified in the input.  
c
c           when a water vapor scale height is specified the original
c           model atmosphere vertical profile is ignored and the water
c           vapor is distributed with the specified scale hieght and
c           total water vapor content.
c
c           the pressure profile is scaled by the ratio of the
c           specified surface pressure and default surface pressure,
c           p(1), for the model atmosphere. (if the original
c           atmosphere is in pressure equilibrium then the scaled one
c           will be also.)
c
c           Certain input values for SCLH2O, UW, UO3 and PBAR can be used
c           to select default atmospheric profiles:
c 
c           sclh2o <  0     use default water vapor scale height
c           uw     <  0     use default water vapor content
c           uo3    <  0     use default ozone content for z.ge.ztrp
c           o3trp  <  0     use default ozone content for z.lt.ztrp
c           ztrp            altitude of tropopause for ozone adjustment 
c                           (since the default value of ztrp is usually
c                           zero, uo3 usually controls the total ozone amount)
c           pbar   <= 0     use default surface pressure
c
c
c input:    units
c
c   sclh2o    km        water vapor scale height 
c
c   uw       g/cm**2    water vapor column depth        
c
c   uo3      atm-cm     ozone column depth for z.ge.ztrp. 
c                       ozone density is adjusted up or down to match uo3.  
c
c   o3trp    atm-cm     ozone column depth for z.lt.ztrp.
c
c   ztrp     km         altitude of tropopause for ozone density adjustment
c                       if o3trp.eq.0, uo3 control total ozone amount.
c
c   pbar     mb         surface pressure 
c
c   nz                  number of atmospheric levels
c
c           note: 1 atm-cm = 1 loschmidt / cm**2 = 1000 dobson units
c           
      parameter (alosch=2.6868e19)
      parameter (pmo=2.6568e-23)
c
c pmo    = mass of oxygen atom (g)
c
      dimension z(*),p(*),wh(*),wo(*)
c
c modify water vapor
c
      if(uw.ge.0.) then
c      if(uw.ne.0.) then
cdb     write(12,*) 'h2o before'
cdb     write(12,'(1p10e11.3)') wh
        if(sclh2o.gt.0.) then
          w0=uw/sclh2o
          do 10 i=1,nz
            wh(i)=w0*exp(-z(i)/sclh2o)
 10       continue
        else
          toth2o=0.
          do 20 i=nz-1,1,-1
            dz=z(i+1)-z(i)
            den1=wh(i)
            den2=wh(i+1)
            tst1=abs(den1-den2)
            tst2=min(den1,den2)
            if(tst1.le..001*den1 .or. tst2.eq.0.) then
              du=.5*dz*(den1+den2)
            else
              du=dz*(den1-den2)/log(den1/den2)
            endif
            toth2o=toth2o+du
 20       continue
c         convert h2o sum from g-km/m3 to g/cm2 
          toth2o=0.1*toth2o
          fach2o=uw/toth2o
          do 30 i=1,nz
            wh(i)=fach2o*wh(i)
 30       continue
        endif
cdb     write(12,*) 'h2o after'
cdb     write(12,'(1p10e11.3)') wh
      endif
c
c modify ozone
c
      if(uo3.ge.0..or.o3trp.ge.0.) then
            
cdb        write(12,*) 'ozone before'
cdb        write(12,'(1p10e11.3)') (wo(i),i=1,nz)
        tropo3=0.
        strto3=0.
        do 40 i=nz-1,1,-1
          if(z(i).ge.ztrp) then
            strto3=strto3+.5*(z(i+1)-z(i))*(wo(i)+wo(i+1))
          else
            tropo3=tropo3+.5*(z(i+1)-z(i))*(wo(i)+wo(i+1))
          endif
 40     continue
c         convert o3 sum from g-km/m3 to atm-cm ( = loschmidts-cm)
        ofac=30*pmo*alosch
cdb        write(12,*) 'strto3=',strto3/ofac,
cdb     &            '  tropo3=',tropo3/ofac, (tropo3+strto3)/ofac

        factrp=1.
        facstr=1.
        if(o3trp.ge.0.) factrp=ofac*o3trp/tropo3
        if(uo3.ge.0.)   facstr=ofac*uo3/(tropo3+strto3)
        
        strto3=0.
        tropo3=0.
        do 50 i=1,nz
          if(z(i).ge.ztrp) then
            wo(i)=facstr*wo(i)
            strto3=strto3+.5*(z(i+1)-z(i))*(wo(i)+wo(i+1))
          else
            wo(i)=factrp*wo(i)
            tropo3=tropo3+.5*(z(i+1)-z(i))*(wo(i)+wo(i+1))
          endif
 50     continue
cdb        write(12,*) 'ozone after'
cdb        write(12,'(1p10e11.3)') (wo(i),i=1,nz)
cdb        write(12,*) 'strto3=',strto3/ofac,
cdb     &            '  tropo3=',tropo3/ofac, (tropo3+strto3)/ofac
cdb        write(12,*) 'factrp=',factrp,'facstr=',facstr
      endif
c
c modify pressure
c
      if(pbar.gt.0.) then
cdb     write(12,*) 'pressure before'
cdb     write(12,'(1p10e11.3)') p
        facp=pbar/p(1)
        do 70 i=1,nz
          p(i)=facp*p(i)
 70     continue
cdb     write(12,*) 'pressure after'
cdb     write(12,'(1p10e11.3)') p
      endif

      return
      end
C=======================================================================
      subroutine atms(iatm,amix,nz,z,p,t,wh,wo)
c
c     input: 
c       iatm         atmospheric model index, negative to print and quit
c       amix         mixing fraction of user specified atmosphere
c       nz           number of layers
c     output:
c       z            layer altitude
c       p            pressure
c       t            temperature
c       wh           water vapor
c       wo           ozone
c
      parameter (mxly=50)
      dimension zz(mxly),pp(mxly),tt(mxly),hh(mxly),oo(mxly)
      dimension z(*),p(*),t(*),wh(*),wo(*)

      ia=abs(iatm)

      if(ia.eq.0) call useratm(nz,z,p,t,wh,wo)
      if(ia.eq.1) call tropic(nz,z,p,t,wh,wo)
      if(ia.eq.2) call midsum(nz,z,p,t,wh,wo)
      if(ia.eq.3) call midwin(nz,z,p,t,wh,wo)
      if(ia.eq.4) call subsum(nz,z,p,t,wh,wo)
      if(ia.eq.5) call subwin(nz,z,p,t,wh,wo)
      if(ia.eq.6) call us62(nz,z,p,t,wh,wo)

      if(iatm.lt.0) then
        write(*,*) nz
        do i=1,nz
          write(*,'(1p5e14.3)') z(i),p(i),t(i),wh(i),wo(i)
        enddo
 	  pause
        stop
      endif

      if(amix.gt.-1.) then
        call useratm(nz,zz,pp,tt,hh,oo)
        ierr=0
        do 10 i=1,nz
          if(abs(zz(i)-z(i)).gt.0.01) ierr=1
          p(i)=p(i)*(1.-amix)+pp(i)*amix
          t(i)=t(i)*(1.-amix)+tt(i)*amix
          wh(i)=wh(i)*(1.-amix)+hh(i)*amix
          wo(i)=wo(i)*(1.-amix)+oo(i)*amix
 10     continue
        if(ierr.eq.1) then 	  
	  pause
	  stop 'atms -- vertical grids do not match'
	endif
      endif

      return
      end
c=======================================================================
      subroutine useratm(nz,z,p,t,wh,wo)
      dimension z(*),p(*),t(*),wh(*),wo(*)             
      parameter (mxly=50)

      open(unit=13,status='old',form='formatted',file='atms.dat')

      read(13,*) nz

      if(nz.gt.mxly) then
        write(*,'(2a,i3)') 'error in USERATM: ',
     &       'too many levels in ATMS.DAT ---  current limit is ',nz
	pause
        stop
      endif

      do 10 i=nz,1,-1
        read(13,*) z(i),p(i),t(i),wh(i),wo(i)
 10   continue
      close(unit=13)

c     atmosphere should be entered from top to bottom, if not then reverse

      if(z(1).gt.z(nz)) then 
        call reverse(nz,z)
        call reverse(nz,p)
        call reverse(nz,t)
        call reverse(nz,wh)
        call reverse(nz,wo)
      endif

      return
      end
c=========================================================================

      subroutine zgrid(nz,z,p,t,wh,wo,zgrid1,zgrid2,ngrid)

c     module:    zgrid
c
c     purpose:   change vertical resolution of model atmosphere
c
c     input:
c       zgrid1   variable resolution parameter, a floating point number
c                that specifies the grid resolution of the lower part
c                of the grid in kilometers. 
c
c       zgrid2   variable resolution parameter, a floating point number
c                that specifies the maximum allowable grid spacing.
c                For example ZGRID2=40 indicates that the top layer
c                should be 40 km thick and that all other layers should
c                be smaller. 
c
c                A smooth function is used to set the vertical
c                distribution of grid points.  Since this distribution
c                varies smoothly with height, problems associated sharp
c                transitions in step size are avoided (such as
c                spuriously large flux divergence at the jump point).
c
c                if either ZGRID1 or ZGRID2 are specified as a negative
c                numbers REGRID will use the absolute value of the
c                parameters to compute a vertical scale, print the
c                regrided model atmosphere and stop execution.  This
c                option can be used to preview the effect of a given
c                values of ZGRID1 and ZGRID2. 
c
c       ngrid    desired number of vertical grid points (must be less
c                then mxly).  
c
c
c     input/output:
c
c       nz       input as number of vertical grid points in orginal
c                atmosphere, set to NGRID on output 
c
c       z        input:  original vertical position of grid points
c                output: regrided vertical positions
c
c       p        pressure at height z
c       t        temperature at heigth z
c       wh       water vapor density at height z
c       wo       ozone density at height z
c
c       
c
      dimension z(*),p(*),t(*),wh(*),wo(*)             
      parameter (mxly=50)
      dimension zz(mxly),pp(mxly),tt(mxly),whh(mxly),woo(mxly)


      if(ngrid.gt.mxly) then 
        write(*,*) 'Fatal Error in ZGRID: NGRID GT MXLY'
	pause
        stop 'ZGRID'
      endif

      a=abs(zgrid1)*float(ngrid-1)
      ztop=z(nz)
      if( a .ge. ztop) then 
        a=ztop
        beta=0.
      else
        a=min(a,.99*(ztop-abs(zgrid2)))
        toprat=float(ngrid-2)/(ngrid-1)
        beta=log(((ztop-abs(zgrid2))/(toprat*a)-1.)/
     &       (ztop/a-1.))/log(toprat)
      endif

      j=2

      do 30 i=1,ngrid
        x=float(i-1)/float(ngrid-1)
        zz(i)=a*x*(1.+(ztop/a-1.)*x**beta)
        do 10 jj=j,nz
          if(zz(i).le.z(jj)) goto 20
 10     continue
 20     continue
        j=min(jj,nz)
        fz=(zz(i)-z(j-1))/(z(j)-z(j-1))
        fz=min(max(fz,0.),1.)
        
c         write(*,'(2i10,3f12.4)') i,j,zz(i),z(j),fz
        
        pp(i)  =  p(j-1)  * (p(j)/p(j-1))**fz
        tt(i)  =  t(j-1)  * (1.-fz) + t(j)  * fz
        if(min(wh(j),wh(j-1)).gt.0.) then
          whh(i)= wh(j-1) * (wh(j)/wh(j-1))** fz
        else
          whh(i) =  wh(j-1) * (1.-fz) + wh(j) * fz
        endif
        if(min(wo(j),wo(j-1)).gt.0.) then
          woo(i)= wo(j-1) * (wo(j)/wo(j-1))** fz
        else
          woo(i) =  wo(j-1) * (1.-fz) + wo(j) * fz
        endif
 30   continue
      
      do 40 i=1,ngrid
        z(i)=zz(i)
        p(i)=pp(i)
        t(i)=tt(i)
        wh(i)=whh(i)
        wo(i)=woo(i)
 40   continue
      
      nz=ngrid
      
      if(min(zgrid1,zgrid2).lt.0) then
        write(*,'(5x,5a11)') 'z','p','t','wh','wo'
        
        do 50 i=ngrid,1,-1
          write(*,'(i5,f11.3,1p4e11.3)') i,z(i),p(i),t(i),wh(i),wo(i)
 50     continue
        pause
        stop 'zgrid'
      endif
        
      return
      end

c=========================================================================
      subroutine elevate(nz,z,p,t,wh,wo,zsurf)

c     module:    elevate
c
c     purpose:   change surface altitude of model atmosphere if the new
c                altitude of the surface is between the two points
c                original in the original atmospheric grid, values for
c                that altitude are obtained by interpolation.  Thus the
c                grid spacing of of the lowest layer may be made
c                smaller. All points above the surface grid are
c                renumbered.
c                
c
c     input:
c       zsurf    altitude of the surface layer.  
c
c     input/output:
c       nz       input as number of vertical grid points in orginal
c                atmosphere, set to NGRID on output 
c
c       z        input:  original vertical position of grid points
c                output: regrided or renumbered vertical positions
c
c       p        pressure at height z
c       t        temperature at heigth z
c       wh       water vapor density at height z
c       wo       ozone density at height z
c
c       
c
      dimension z(*),p(*),t(*),wh(*),wo(*)             
      parameter (mxly=50)
      parameter (eps=.001)
      dimension zz(mxly),pp(mxly),tt(mxly),whh(mxly),woo(mxly)

     
      call locate(z,nz,zsurf,kz)
      dist1=zsurf-z(kz)
      dist2=z(kz+1)-zsurf
      dist=z(kz+1)-z(kz)
      if(dist1.lt.eps*dist) then
        zz(1)=z(kz)
        fz=0.
        ks=kz+1
      elseif(dist2.lt.eps*dist) then 
        zz(1)=z(kz+1)
        fz=1.
        ks=kz+2
      else
        zz(1)=zsurf
        fz=(zsurf-z(kz))/(z(kz+1)-z(kz))
        ks=kz+1
      endif
      pp(1)  =  p(kz)  * (p(kz+1)/p(kz))**fz
      tt(1)  =  t(kz)  * (1.-fz) + t(kz+1)  * fz

      if(min(wh(kz+1),wh(kz)).gt.0.) then
        whh(1)= wh(kz) * (wh(kz+1)/wh(kz))** fz
      else
        whh(1) =  wh(kz) * (1.-fz) + wh(kz+1) * fz
      endif
      if(min(wo(kz+1),wo(kz)).gt.0.) then
        woo(1)= wo(kz) * (wo(kz+1)/wo(kz))** fz
      else
        woo(1) =  wo(kz) * (1.-fz) + wo(kz+1) * fz
      endif


      i=1
      do 30 j=ks,nz
        i=i+1
        zz(i)=z(j)
        pp(i)=p(j)
        tt(i)=t(j)
        whh(i)=wh(j)
        woo(i)=wo(j)
 30   continue

      nz=i

      do 40 i=1,nz
        z(i)=zz(i)
        p(i)=pp(i)
        t(i)=tt(i)
        wh(i)=whh(i)
        wo(i)=woo(i)
 40   continue


      return
      end
c=========================================================================
      subroutine tropic(nz,z,p,t,wh,wo)
      parameter (mz=33)
      dimension z(*),p(*),t(*),wh(*),wo(*)             
      dimension z1(mz),p1(mz),t1(mz),wh1(mz),wo1(mz)
c                                                                       
c     model: tropical mc'clatchey                                       
c                                                                       
      data z1/
     &    0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   
     &    9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,   
     &   18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   30.,   
     &   35.,   40.,   45.,   50.,   70.,  100./                 
      data p1/
     &  1.013e+03,9.040e+02,8.050e+02,7.150e+02,6.330e+02,5.590e+02,      
     &  4.920e+02,4.320e+02,3.780e+02,3.290e+02,2.860e+02,2.470e+02,      
     &  2.130e+02,1.820e+02,1.560e+02,1.320e+02,1.110e+02,9.370e+01,      
     &  7.890e+01,6.660e+01,5.650e+01,4.800e+01,4.090e+01,3.500e+01,      
     &  3.000e+01,2.570e+01,1.220e+01,6.000e+00,3.050e+00,1.590e+00,      
     &  8.540e-01,5.790e-02,3.000e-04/                          
      data t1/
     &  3.000e+02,2.940e+02,2.880e+02,2.840e+02,2.770e+02,2.700e+02,      
     &  2.640e+02,2.570e+02,2.500e+02,2.440e+02,2.370e+02,2.300e+02,      
     &  2.240e+02,2.170e+02,2.100e+02,2.040e+02,1.970e+02,1.950e+02,      
     &  1.990e+02,2.030e+02,2.070e+02,2.110e+02,2.150e+02,2.170e+02,      
     &  2.190e+02,2.210e+02,2.320e+02,2.430e+02,2.540e+02,2.650e+02,      
     &  2.700e+02,2.190e+02,2.100e+02/                          
      data wh1/
     &  1.900e+01,1.300e+01,9.300e+00,4.700e+00,2.200e+00,1.500e+00,      
     &  8.500e-01,4.700e-01,2.500e-01,1.200e-01,5.000e-02,1.700e-02,      
     &  6.000e-03,1.800e-03,1.000e-03,7.600e-04,6.400e-04,5.600e-04,      
     &  5.000e-04,4.900e-04,4.500e-04,5.100e-04,5.100e-04,5.400e-04,      
     &  6.000e-04,6.700e-04,3.600e-04,1.100e-04,4.300e-05,1.900e-05,      
     &  6.300e-06,1.400e-07,1.000e-09/                          
      data wo1/
     &  5.600e-05,5.600e-05,5.400e-05,5.100e-05,4.700e-05,4.500e-05,      
     &  4.300e-05,4.100e-05,3.900e-05,3.900e-05,3.900e-05,4.100e-05,      
     &  4.300e-05,4.500e-05,4.500e-05,4.700e-05,4.700e-05,6.900e-05,      
     &  9.000e-05,1.400e-04,1.900e-04,2.400e-04,2.800e-04,3.200e-04,      
     &  3.400e-04,3.400e-04,2.400e-04,9.200e-05,4.100e-05,1.300e-05,      
     &  4.300e-06,8.600e-08,4.300e-11/                          
      do 1 i=1,mz                                                       
        z(i)=z1(i)                                                        
        p(i)=p1(i)                                                        
        t(i)=t1(i)                                                        
        wh(i)=wh1(i)                                                      
        wo(i)=wo1(i)                                                      
    1 continue  
      nz=mz                                                        
      return                                                            
      end                                                               
c=======================================================================
      subroutine midsum(nz,z,p,t,wh,wo)
      parameter (mz=33)
      dimension z(*),p(*),t(*),wh(*),wo(*)             
      dimension z2(mz),p2(mz),t2(mz),wh2(mz),wo2(mz)
c                                                                       
c     model: midlatitude summer mc'clatchey                             
c                                                                       
      data z2/
     &    0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   
     &    9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,   
     &   18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   30.,   
     &   35.,   40.,   45.,   50.,   70.,  100./                 
      data p2/
     &  1.013e+03,9.020e+02,8.020e+02,7.100e+02,6.280e+02,5.540e+02,      
     &  4.870e+02,4.260e+02,3.720e+02,3.240e+02,2.810e+02,2.430e+02,      
     &  2.090e+02,1.790e+02,1.530e+02,1.300e+02,1.110e+02,9.500e+01,      
     &  8.120e+01,6.950e+01,5.950e+01,5.100e+01,4.370e+01,3.760e+01,      
     &  3.220e+01,2.770e+01,1.320e+01,6.520e+00,3.330e+00,1.760e+00,      
     &  9.510e-01,6.710e-02,3.000e-04/                          
      data t2/
     &  2.940e+02,2.900e+02,2.850e+02,2.790e+02,2.730e+02,2.670e+02,      
     &  2.610e+02,2.550e+02,2.480e+02,2.420e+02,2.350e+02,2.290e+02,      
     &  2.220e+02,2.160e+02,2.160e+02,2.160e+02,2.160e+02,2.160e+02,      
     &  2.160e+02,2.170e+02,2.180e+02,2.190e+02,2.200e+02,2.220e+02,      
     &  2.230e+02,2.240e+02,2.340e+02,2.450e+02,2.580e+02,2.700e+02,      
     &  2.760e+02,2.180e+02,2.100e+02/                          
      data wh2/
     &  1.400e+01,9.300e+00,5.900e+00,3.300e+00,1.900e+00,1.000e+00,      
     &  6.100e-01,3.700e-01,2.100e-01,1.200e-01,6.400e-02,2.200e-02,      
     &  6.000e-03,1.800e-03,1.000e-03,7.600e-04,6.400e-04,5.600e-04,      
     &  5.000e-04,4.900e-04,4.500e-04,5.100e-04,5.100e-04,5.400e-04,      
     &  6.000e-04,6.700e-04,3.600e-04,1.100e-04,4.300e-05,1.900e-05,      
     &  1.300e-06,1.400e-07,1.000e-09/                          
      data wo2/
     &  6.000e-05,6.000e-05,6.000e-05,6.200e-05,6.400e-05,6.600e-05,      
     &  6.900e-05,7.500e-05,7.900e-05,8.600e-05,9.000e-05,1.100e-04,      
     &  1.200e-04,1.500e-04,1.800e-04,1.900e-04,2.100e-04,2.400e-04,      
     &  2.800e-04,3.200e-04,3.400e-04,3.600e-04,3.600e-04,3.400e-04,      
     &  3.200e-04,3.000e-04,2.000e-04,9.200e-05,4.100e-05,1.300e-05,      
     &  4.300e-06,8.600e-08,4.300e-11/                          

      do 1 i=1,mz                                                       
        z(i)=z2(i)                                                        
        p(i)=p2(i)                                                        
        t(i)=t2(i)                                                        
        wh(i)=wh2(i)                                                      
        wo(i)=wo2(i)                                                      
    1 continue             
      nz=mz                                             
      return                                                            
      end                                                               
c=========================================================================
      subroutine midwin(nz,z,p,t,wh,wo)
      parameter (mz=33)
      dimension z(*),p(*),t(*),wh(*),wo(*)             
      dimension z3(mz),p3(mz),t3(mz),wh3(mz),wo3(mz)
c                                                                       
c     model: midlatitude winter mc'clatchey                             
c                                                                       
      data z3/
     &     0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   
     &     9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,   
     &    18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   30.,   
     &    35.,   40.,   45.,   50.,   70.,  100./                 
      data p3/
     &     1.018e+03,8.973e+02,7.897e+02,6.938e+02,6.081e+02,5.313e+02,      
     &     4.627e+02,4.016e+02,3.473e+02,2.992e+02,2.568e+02,2.199e+02,      
     &     1.882e+02,1.610e+02,1.378e+02,1.178e+02,1.007e+02,8.610e+01,      
     &     7.350e+01,6.280e+01,5.370e+01,4.580e+01,3.910e+01,3.340e+01,      
     &     2.860e+01,2.430e+01,1.110e+01,5.180e+00,2.530e+00,1.290e+00,      
     &  6.820e-01,4.670e-02,3.000e-04/                          
      data t3/
     &  2.722e+02,2.687e+02,2.652e+02,2.617e+02,2.557e+02,2.497e+02,      
     &  2.437e+02,2.377e+02,2.317e+02,2.257e+02,2.197e+02,2.192e+02,      
     &  2.187e+02,2.182e+02,2.177e+02,2.172e+02,2.167e+02,2.162e+02,      
     &  2.157e+02,2.152e+02,2.152e+02,2.152e+02,2.152e+02,2.152e+02,      
     &  2.152e+02,2.152e+02,2.174e+02,2.278e+02,2.432e+02,2.585e+02,      
     &  2.657e+02,2.307e+02,2.102e+02/                          
      data wh3/
     &  3.500e+00,2.500e+00,1.800e+00,1.200e+00,6.600e-01,3.800e-01,      
     &  2.100e-01,8.500e-02,3.500e-02,1.600e-02,7.500e-03,6.900e-03,      
     &  6.000e-03,1.800e-03,1.000e-03,7.600e-04,6.400e-04,5.600e-04,      
     &  5.000e-04,4.900e-04,4.500e-04,5.100e-04,5.100e-04,5.400e-04,      
     &  6.000e-04,6.700e-04,3.600e-04,1.100e-04,4.300e-05,1.900e-05,      
     &  6.300e-06,1.400e-07,1.000e-09/                          
      data wo3/
     &  6.000e-05,5.400e-05,4.900e-05,4.900e-05,4.900e-05,5.800e-05,      
     &  6.400e-05,7.700e-05,9.000e-05,1.200e-04,1.600e-04,2.100e-04,      
     &  2.600e-04,3.000e-04,3.200e-04,3.400e-04,3.600e-04,3.900e-04,      
     &  4.100e-04,4.300e-04,4.500e-04,4.300e-04,4.300e-04,3.900e-04,      
     &  3.600e-04,3.400e-04,1.900e-04,9.200e-05,4.100e-05,1.300e-05,      
     &  4.300e-06,8.600e-08,4.300e-11/                          
      do 1 i=1,mz                                                       
        z(i)=z3(i)                                                        
        p(i)=p3(i)                                                        
        t(i)=t3(i)                                                        
        wh(i)=wh3(i)                                                      
        wo(i)=wo3(i)                                                      
    1 continue             
      nz=mz                                             
      return                                                            
      end                                                               
c=========================================================================
      subroutine subsum(nz,z,p,t,wh,wo)
      parameter (mz=33)
      dimension z(*),p(*),t(*),wh(*),wo(*)             
      dimension z4(mz),p4(mz),t4(mz),wh4(mz),wo4(mz)
c                                                                       
c     model: subarctic summer mc'clatchey                             
c                                                                       
      data z4/
     &    0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   
     &    9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,   
     &   18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   30.,   
     &   35.,   40.,   45.,   50.,   70.,  100./                 
      data p4/
     &  1.010e+03,8.960e+02,7.929e+02,7.000e+02,6.160e+02,5.410e+02,      
     &  4.730e+02,4.130e+02,3.590e+02,3.107e+02,2.677e+02,2.300e+02,      
     &  1.977e+02,1.700e+02,1.460e+02,1.250e+02,1.080e+02,9.280e+01,      
     &  7.980e+01,6.860e+01,5.890e+01,5.070e+01,4.360e+01,3.750e+01,      
     &  3.227e+01,2.780e+01,1.340e+01,6.610e+00,3.400e+00,1.810e+00,      
     &  9.870e-01,7.070e-02,3.000e-04/                          
      data t4/
     &  2.870e+02,2.820e+02,2.760e+02,2.710e+02,2.660e+02,2.600e+02,      
     &  2.530e+02,2.460e+02,2.390e+02,2.320e+02,2.250e+02,2.250e+02,      
     &  2.250e+02,2.250e+02,2.250e+02,2.250e+02,2.250e+02,2.250e+02,      
     &  2.250e+02,2.250e+02,2.250e+02,2.250e+02,2.250e+02,2.250e+02,      
     &  2.260e+02,2.280e+02,2.350e+02,2.470e+02,2.620e+02,2.740e+02,      
     &  2.770e+02,2.160e+02,2.100e+02/                          
      data wh4/
     &  9.100e+00,6.000e+00,4.200e+00,2.700e+00,1.700e+00,1.000e+00,      
     &  5.400e-01,2.900e-01,1.300e-01,4.200e-02,1.500e-02,9.400e-03,      
     &  6.000e-03,1.800e-03,1.000e-03,7.600e-04,6.400e-04,5.600e-04,      
     &  5.000e-04,4.900e-04,4.500e-04,5.100e-04,5.100e-04,5.400e-04,      
     &  6.000e-04,6.700e-04,3.600e-04,1.100e-04,4.300e-05,1.900e-05,      
     &  6.300e-06,1.400e-07,1.000e-09/                          
      data wo4/
     &  4.900e-05,5.400e-05,5.600e-05,5.800e-05,6.000e-05,6.400e-05,      
     &  7.100e-05,7.500e-05,7.900e-05,1.100e-04,1.300e-04,1.800e-04,      
     &  2.100e-04,2.600e-04,2.800e-04,3.200e-04,3.400e-04,3.900e-04,      
     &  4.100e-04,4.100e-04,3.900e-04,3.600e-04,3.200e-04,3.000e-04,      
     &  2.800e-04,2.600e-04,1.400e-04,9.200e-05,4.100e-05,1.300e-05,      
     &  4.300e-06,8.600e-08,4.300e-11/                          
      do 1 i=1,mz                                                       
        z(i)=z4(i)                                                        
        p(i)=p4(i)                                                        
        t(i)=t4(i)                                                        
        wh(i)=wh4(i)                                                      
        wo(i)=wo4(i)                                                      
    1 continue             
      nz=mz                                             
      return                                                            
      end                                                               
c=========================================================================
      subroutine subwin(nz,z,p,t,wh,wo)
      parameter (mz=33)
      dimension z(*),p(*),t(*),wh(*),wo(*)             
      dimension z5(mz),p5(mz),t5(mz),wh5(mz),wo5(mz)
c                                                                       
c     model: subarctique winter mc clatchey                             
c                                                                       
      data z5/
     &    0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   
     &    9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,   
     &   18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   30.,   
     &   35.,   40.,   45.,   50.,   70.,  100./                 
      data p5/
     &  1.013e+03,8.878e+02,7.775e+02,6.798e+02,5.932e+02,5.158e+02,      
     &  4.467e+02,3.853e+02,3.308e+02,2.829e+02,2.418e+02,2.067e+02,      
     &  1.766e+02,1.510e+02,1.291e+02,1.103e+02,9.431e+01,8.058e+01,      
     &  6.882e+01,5.875e+01,5.014e+01,4.277e+01,3.647e+01,3.109e+01,      
     &  2.649e+01,2.256e+01,1.020e+01,4.701e+00,2.243e+00,1.113e+00,      
     &  5.719e-01,4.016e-02,3.000e-04/                          
      data t5/
     &  2.571e+02,2.591e+02,2.559e+02,2.527e+02,2.477e+02,2.409e+02,      
     &  2.341e+02,2.273e+02,2.206e+02,2.172e+02,2.172e+02,2.172e+02,      
     &  2.172e+02,2.172e+02,2.172e+02,2.172e+02,2.166e+02,2.160e+02,      
     &  2.154e+02,2.148e+02,2.141e+02,2.136e+02,2.130e+02,2.124e+02,      
     &  2.118e+02,2.112e+02,2.160e+02,2.222e+02,2.347e+02,2.470e+02,      
     &  2.593e+02,2.457e+02,2.100e+02/                          
      data wh5/
     &  1.200e+00,1.200e+00,9.400e-01,6.800e-01,4.100e-01,2.000e-01,      
     &  9.800e-02,5.400e-02,1.100e-02,8.400e-03,5.500e-03,3.800e-03,      
     &  2.600e-03,1.800e-03,1.000e-03,7.600e-04,6.400e-04,5.600e-04,      
     &  5.000e-04,4.900e-04,4.500e-04,5.100e-04,5.100e-04,5.400e-04,      
     &  6.000e-04,6.700e-04,3.600e-04,1.100e-04,4.300e-05,1.900e-05,      
     &  6.300e-06,1.400e-07,1.000e-09/                          
      data wo5/
     &  4.100e-05,4.100e-05,4.100e-05,4.300e-05,4.500e-05,4.700e-05,      
     &  4.900e-05,7.100e-05,9.000e-05,1.600e-04,2.400e-04,3.200e-04,      
     &  4.300e-04,4.700e-04,4.900e-04,5.600e-04,6.200e-04,6.200e-04,      
     &  6.200e-04,6.000e-04,5.600e-04,5.100e-04,4.700e-04,4.300e-04,      
     &  3.600e-04,3.200e-04,1.500e-04,9.200e-05,4.100e-05,1.300e-05,      
     &  4.300e-06,8.600e-08,4.300e-11/                          
      do 1 i=1,mz                                                       
        z(i)=z5(i)                                                        
        p(i)=p5(i)                                                        
        t(i)=t5(i)                                                        
        wh(i)=wh5(i)                                                      
        wo(i)=wo5(i)                                                      
    1 continue             
      nz=mz                                             
      return                                                            
      end                                                               
c=======================================================================
      subroutine us62(nz,z,p,t,wh,wo)
      parameter (mz=33)
      dimension z(*),p(*),t(*),wh(*),wo(*)             
      dimension z6(mz),p6(mz),t6(mz),wh6(mz),wo6(mz)
c                                                                       
c     model: us standard 62 mc clatchey                                 
c                                                                       
      data z6/
     &    0.,    1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,   
     &    9.,   10.,   11.,   12.,   13.,   14.,   15.,   16.,   17.,   
     &   18.,   19.,   20.,   21.,   22.,   23.,   24.,   25.,   30.,   
     &   35.,   40.,   45.,   50.,   70.,  100./                 
      data p6/
     &  1.013e+03,8.986e+02,7.950e+02,7.012e+02,6.166e+02,5.405e+02,      
     &  4.722e+02,4.111e+02,3.565e+02,3.080e+02,2.650e+02,2.270e+02,      
     &  1.940e+02,1.658e+02,1.417e+02,1.211e+02,1.035e+02,8.850e+01,      
     &  7.565e+01,6.467e+01,5.529e+01,4.729e+01,4.047e+01,3.467e+01,      
     &  2.972e+01,2.549e+01,1.197e+01,5.746e+00,2.871e+00,1.491e+00,      
     &  7.978e-01,5.520e-02,3.008e-04/                          
      data t6/
     &  2.881e+02,2.816e+02,2.751e+02,2.687e+02,2.622e+02,2.557e+02,      
     &  2.492e+02,2.427e+02,2.362e+02,2.297e+02,2.232e+02,2.168e+02,      
     &  2.166e+02,2.166e+02,2.166e+02,2.166e+02,2.166e+02,2.166e+02,      
     &  2.166e+02,2.166e+02,2.166e+02,2.176e+02,2.186e+02,2.196e+02,      
     &  2.206e+02,2.216e+02,2.265e+02,2.365e+02,2.534e+02,2.642e+02,      
     &  2.706e+02,2.197e+02,2.100e+02/                          
      data wh6/
     &  5.900e+00,4.200e+00,2.900e+00,1.800e+00,1.100e+00,6.400e-01,      
     &  3.800e-01,2.100e-01,1.200e-01,4.600e-02,1.800e-02,8.200e-03,      
     &  3.700e-03,1.800e-03,8.400e-04,7.200e-04,6.100e-04,5.200e-04,      
     &  4.400e-04,4.400e-04,4.400e-04,4.800e-04,5.200e-04,5.700e-04,      
     &  6.100e-04,6.600e-04,3.800e-04,1.600e-04,6.700e-05,3.200e-05,      
     &  1.200e-05,1.500e-07,1.000e-09/                          
      data wo6/
     &  5.400e-05,5.400e-05,5.400e-05,5.000e-05,4.600e-05,4.600e-05,      
     &  4.500e-05,4.900e-05,5.200e-05,7.100e-05,9.000e-05,1.300e-04,      
     &  1.600e-04,1.700e-04,1.900e-04,2.100e-04,2.400e-04,2.800e-04,      
     &  3.200e-04,3.500e-04,3.800e-04,3.800e-04,3.900e-04,3.800e-04,      
     &  3.600e-04,3.400e-04,2.000e-04,1.100e-04,4.900e-05,1.700e-05,      
     &  4.000e-06,8.600e-08,4.300e-11/                          
      do 1 i=1,mz                                                       
        z(i)=z6(i)                                                        
        p(i)=p6(i)                                                        
        t(i)=t6(i)                                                        
        wh(i)=wh6(i)                                                      
        wo(i)=wo6(i)                                                      
    1 continue           
      nz=mz                                               
      return                                                            
      end                                                               
c=======================================================================















c file:                  cloudpar.f
c
c external routines:     cloudpar, cloudqwp
c
c internal routines:     clddata (block data)
c
c internal common block: cloudblk
c
c a direct access file "pmom.dat" is required by cloudqwp
C=======================================================================

      SUBROUTINE cloudpar(wl,re,qc,wc,gc)
c
c input:
c   wl      wavelength in microns
c   re      effective cloud drop radius (microns)
c output:
c   qc      mean extinction efficiency (unitless)
c   wc      single scatter albedo      (unitless)
c   gc      asymmetry factor           (unitless)
c     

      parameter (mxwv=400, mre=14)

c the parameters contained in this subroutine were computed using a mie
c scattering code provided by Paul Stackhouse.  The radius integrations
c were performed over a modified gamma distribution
c f(x)=(x/xm)^(p-1)*exp(-x/xm) where p=7.

c NOTE:

c re < 0 selects scattering parameters for cirrus cloud ice particles
c with a effective radius of 106um.  This data is stored in array
c elements (*,14) and is valid in the the wavelength range 0.29-333.33 um. 
c When re<0 the absolute value of re is used as a multiplier of the single
c scattering co-albedo hence re=-2 doubles the amount of absorption per 
c extinction event. 

c

      parameter (wlmin=0.29, wlmax=333.33)
      parameter (eps=.000001)
      common /cloudblk/ qq(mxwv,mre),ww(mxwv,mre),gg(mxwv,mre)
                      
      data icall,wmin,wmax,wstep/0,0.,0.,0./

      if (icall .eq. 0) then
        wmin=log(wlmin)
        wmax=log(wlmax)
        wstep=(wmax-wmin)/(mxwv-1)
        icall=1
      endif

      fw=1+(log(wl)-wmin)/wstep
      fw=min(max(fw,1.),float(mxwv)-eps)
      iw=int(fw)
      fw=fw-iw

      if(re .lt. 0.) then 
        ir=14
        qc=qq(iw  ,ir  )*(1.-fw) + qq(iw+1,ir  )*fw
        wc=ww(iw  ,ir  )*(1.-fw) + ww(iw+1,ir  )*fw
        gc=gg(iw  ,ir  )*(1.-fw) + gg(iw+1,ir  )*fw
        wc=1.-abs(re)*(1.-wc)
        wc=max(wc,eps)
      else
        fr=1.+((log(re))/log(2.)-1.)*2
        fr=min(max(fr,1.),float(mre)-eps)
        ir=int(fr)
        fr=fr-ir
        qc=qq(iw  ,ir  )*(1.-fw)*(1.-fr) + qq(iw+1,ir  )*fw*(1.-fr)+
     &     qq(iw  ,ir+1)*(1.-fw)*fr      + qq(iw+1,ir+1)*fw*fr

        wc=ww(iw  ,ir  )*(1.-fw)*(1.-fr) + ww(iw+1,ir  )*fw*(1.-fr)+
     &     ww(iw  ,ir+1)*(1.-fw)*fr      + ww(iw+1,ir+1)*fw*fr

        gc=gg(iw  ,ir  )*(1.-fw)*(1.-fr) + gg(iw+1,ir  )*fw*(1.-fr)+
     &     gg(iw  ,ir+1)*(1.-fw)*fr      + gg(iw+1,ir+1)*fw*fr

      endif
      return
      end

c=======================================================================

      block data clddata
c
c Loads extinction efficiency, single scattering albedo and asymmetry
c factors into common block cloudblk.  
c
c Wavelength range is  0.29 to  333.33 microns 
c
c Wavelengths steps are in equal increments of log(wavelength)
c Hence, the i'th table entry is at wavelenth
c
c          wl = 0.29 * (333.33/0.29)**((i-1)/(mxwv-1))
c
c Included in the table are entries for effective radii of
c
c          re = 2**((j+1)/2) for j=1,13
c
c This Mie database was created by /home/paul/mie/mieo.f
c Interpolation onto a regular log-wavelength grid and fortran
c data statement reformatting was carried out with
c /home/paul/mie/todata.idl and /home/paul/mie/todata.pro
c 
      parameter (mxwv=400, mre=14)
      common /cloudblk/ qq(mxwv,mre),ww(mxwv,mre),gg(mxwv,mre)

c        ---------------- extinction efficiency ----------------

      data (qq(i,1),i=1,mxwv)/
     &   2.17502666, 2.17705488, 2.17945981, 2.18155527, 2.18386197,
     &   2.18641090, 2.18857670, 2.19129729, 2.19366312, 2.19596457,
     &   2.19853497, 2.20104814, 2.20371795, 2.20627928, 2.20893717,
     &   2.21180654, 2.21439219, 2.21722698, 2.22005177, 2.22292018,
     &   2.22576642, 2.22874284, 2.23176241, 2.23473716, 2.23774362,
     &   2.24082780, 2.24402070, 2.24720716, 2.25038552, 2.25361443,
     &   2.25692534, 2.26020098, 2.26354837, 2.26690340, 2.27032566,
     &   2.27374268, 2.27719760, 2.28062248, 2.28411269, 2.28760719,
     &   2.29113030, 2.29466820, 2.29824281, 2.30179715, 2.30538130,
     &   2.30899572, 2.31262636, 2.31630254, 2.32001519, 2.32378149,
     &   2.32762146, 2.33154297, 2.33557439, 2.33973503, 2.34405398,
     &   2.34856272, 2.35329628, 2.35829353, 2.36359835, 2.36925769,
     &   2.37532187, 2.38184500, 2.38888407, 2.39649868, 2.40475059,
     &   2.41370153, 2.42341542, 2.43395329, 2.44537401, 2.45773554,
     &   2.47109199, 2.48549771, 2.50098848, 2.51760030, 2.53535986,
     &   2.55428433, 2.57437634, 2.59563327, 2.61801910, 2.64149570,
     &   2.66603732, 2.69156599, 2.71801019, 2.74528360, 2.77326369,
     &   2.80183864, 2.83086061, 2.86014557, 2.88957477, 2.91879225,
     &   2.94668722, 2.97444415, 3.00203633, 3.02939057, 3.05576015,
     &   3.08073235, 3.10413814, 3.12579226, 3.14543080, 3.16288662,
     &   3.17790985, 3.19019771, 3.19952631, 3.20562434, 3.20852327,
     &   3.20691943, 3.19620252, 3.18033361, 3.17178464, 3.16243815,
     &   3.14695644, 3.12438679, 3.09612036, 3.06194472, 3.02178931,
     &   2.97530246, 2.92187381, 2.86102247, 2.79152226, 2.71235824,
     &   2.62156391, 2.51724195, 2.39780188, 2.25397897, 2.06965280,
     &   1.81314278, 1.47268379, 1.15169585, 1.28466785, 1.53216481,
     &   1.85487890, 2.12174034, 2.31310582, 2.47859597, 2.64122748,
     &   2.79979491, 2.90341711, 2.95882654, 2.94658995, 2.86584187,
     &   2.77218103, 2.66592813, 2.55328059, 2.43995881, 2.33058119,
     &   2.22600079, 2.12766719, 2.03446722, 1.94598961, 1.86261523,
     &   1.78330398, 1.70802879, 1.63683224, 1.57049978, 1.50879097,
     &   1.45302904, 1.40313184, 1.36117184, 1.31957674, 1.27231741,
     &   1.21919715, 1.16273332, 1.10242403, 1.03997958, 0.97503036,
     &   0.91024303, 0.84782869, 0.78598338, 0.72648561, 0.67700797,
     &   0.68004543, 0.80958587, 1.06148815, 1.21916318, 1.06732845,
     &   0.92990327, 0.84266120, 0.77429891, 0.71917790, 0.67489249,
     &   0.63671166, 0.60254693, 0.57224268, 0.54376388, 0.51730049,
     &   0.49202278, 0.46848267, 0.44672537, 0.42581266, 0.40601236,
     &   0.38732231, 0.36951771, 0.35282731, 0.33719108, 0.32282090,
     &   0.30936635, 0.29687786, 0.28551263, 0.27485919, 0.26570359,
     &   0.25775653, 0.25239041, 0.25175655, 0.25901312, 0.27342898,
     &   0.29718980, 0.32283768, 0.35670570, 0.39677656, 0.44318610,
     &   0.48895615, 0.54749864, 0.60162365, 0.65336853, 0.69634545,
     &   0.73471516, 0.76891905, 0.79815042, 0.81967932, 0.83824831,
     &   0.85156107, 0.85920340, 0.86628318, 0.86854428, 0.86856580,
     &   0.86789280, 0.86537731, 0.86100680, 0.85260862, 0.84360075,
     &   0.83239943, 0.81652278, 0.80135447, 0.78186607, 0.76419902,
     &   0.74566597, 0.72170585, 0.69796336, 0.67450345, 0.64958209,
     &   0.62229031, 0.60202730, 0.58223885, 0.56328470, 0.54505736,
     &   0.52727163, 0.50990611, 0.49297634, 0.47528338, 0.45593211,
     &   0.43725908, 0.42013198, 0.40361109, 0.38725349, 0.37129331,
     &   0.35583365, 0.34084553, 0.32662845, 0.31328207, 0.30051482,
     &   0.28836867, 0.27716801, 0.26738128, 0.25871325, 0.25169498,
     &   0.24573471, 0.24069007, 0.23662263, 0.23302822, 0.22975561,
     &   0.22687808, 0.22466733, 0.22326955, 0.22239502, 0.22159633,
     &   0.22182521, 0.22313239, 0.22480163, 0.22632575, 0.22770067,
     &   0.22977827, 0.23218539, 0.23447281, 0.23606516, 0.23758155,
     &   0.23897120, 0.24005422, 0.24075750, 0.24140766, 0.24041410,
     &   0.23857823, 0.23654707, 0.23449720, 0.23238145, 0.22981887,
     &   0.22545232, 0.22110908, 0.21650995, 0.21198845, 0.20732638,
     &   0.20268758, 0.19721176, 0.19181943, 0.18613218, 0.18070966,
     &   0.17568652, 0.17069620, 0.16572662, 0.16076547, 0.15587592,
     &   0.15096237, 0.14622231, 0.14167967, 0.13731468, 0.13312168,
     &   0.12914601, 0.12484229, 0.12050779, 0.11640624, 0.11245794,
     &   0.10855427, 0.10464919, 0.10097606, 0.09758507, 0.09428326,
     &   0.09104992, 0.08808544, 0.08513276, 0.08217223, 0.07938257,
     &   0.07679242, 0.07432113, 0.07205009, 0.06984399, 0.06770088,
     &   0.06561888, 0.06359617, 0.06214036, 0.06082397, 0.05953438,
     &   0.05827096, 0.05703313, 0.05586062, 0.05471718, 0.05359612,
     &   0.05249694, 0.05142131, 0.05037135, 0.04934165, 0.04833176,
     &   0.04735898, 0.04651768, 0.04569063, 0.04487758, 0.04408547,
     &   0.04333149, 0.04258981, 0.04186019, 0.04115284, 0.04046454,
     &   0.03978714, 0.03913825, 0.03857718, 0.03802390, 0.03747830,
     &   0.03693016, 0.03638894, 0.03585538, 0.03529256, 0.03472875,
     &   0.03417354, 0.03363883, 0.03311307, 0.03259677, 0.03209499,
     &   0.03160060, 0.03111210, 0.03062983, 0.03015471, 0.02970541,
     &   0.02926306, 0.02880034, 0.02832900, 0.02786013, 0.02738631,
     &   0.02692121, 0.02647947, 0.02604464, 0.02561771, 0.02519749,
     &   0.02479647, 0.02440309, 0.02401588, 0.02363460, 0.02327066,
     &   0.02291242, 0.02255957, 0.02221145, 0.02186741, 0.02152859/
      data (qq(i,2),i=1,mxwv)/
     &   2.13798332, 2.13925219, 2.14121342, 2.14302087, 2.14454389,
     &   2.14633369, 2.14811230, 2.15019870, 2.15216684, 2.15378094,
     &   2.15584373, 2.15777731, 2.15973592, 2.16166997, 2.16378689,
     &   2.16593575, 2.16784549, 2.17012668, 2.17208719, 2.17420554,
     &   2.17655826, 2.17878199, 2.18132281, 2.18330407, 2.18574071,
     &   2.18803787, 2.19039845, 2.19302201, 2.19534039, 2.19793582,
     &   2.20031524, 2.20289874, 2.20567107, 2.20836806, 2.21095133,
     &   2.21373105, 2.21643114, 2.21926165, 2.22209811, 2.22489476,
     &   2.22785592, 2.23078966, 2.23379755, 2.23679447, 2.23991466,
     &   2.24296117, 2.24611163, 2.24927950, 2.25246811, 2.25567436,
     &   2.25902772, 2.26228857, 2.26560974, 2.26899385, 2.27235270,
     &   2.27572775, 2.27916002, 2.28259277, 2.28602648, 2.28948903,
     &   2.29299402, 2.29648638, 2.30001974, 2.30355215, 2.30712700,
     &   2.31072402, 2.31436896, 2.31805515, 2.32180691, 2.32563615,
     &   2.32955813, 2.33359814, 2.33777022, 2.34213328, 2.34669137,
     &   2.35149336, 2.35658002, 2.36199999, 2.36780286, 2.37404275,
     &   2.38078094, 2.38808084, 2.39600778, 2.40463352, 2.41402841,
     &   2.42426777, 2.43542647, 2.44758058, 2.46080685, 2.47520447,
     &   2.49055290, 2.50686765, 2.52442575, 2.54340053, 2.56385159,
     &   2.58563137, 2.60874343, 2.63316607, 2.65884924, 2.68580270,
     &   2.71406054, 2.74336243, 2.77359009, 2.80458641, 2.83639789,
     &   2.86914539, 2.89929056, 2.92447400, 2.95171785, 2.98308206,
     &   3.01519752, 3.04522467, 3.07343721, 3.09903026, 3.12162685,
     &   3.14059973, 3.15504026, 3.16401362, 3.16631794, 3.15989852,
     &   3.14246082, 3.11055136, 3.06122589, 2.98802567, 2.86877966,
     &   2.64914417, 2.24823785, 1.68687320, 1.65082586, 1.80276322,
     &   2.05663753, 2.25913787, 2.40496802, 2.52363515, 2.64168501,
     &   2.77308202, 2.89902425, 3.02475595, 3.13580918, 3.19440866,
     &   3.22508168, 3.23115849, 3.21329999, 3.17614865, 3.12688971,
     &   3.06819391, 3.00411606, 2.93599343, 2.86500192, 2.79205775,
     &   2.71830487, 2.64325356, 2.56808257, 2.49391270, 2.42130661,
     &   2.35278726, 2.28868771, 2.23401618, 2.18567824, 2.13337469,
     &   2.07345867, 2.00666738, 1.93272746, 1.85209572, 1.76304054,
     &   1.66803360, 1.56938481, 1.46480370, 1.35238814, 1.23800766,
     &   1.17062557, 1.25814593, 1.53864408, 1.80666018, 1.74136353,
     &   1.60048425, 1.49206913, 1.39938819, 1.31875503, 1.24944663,
     &   1.18757772, 1.13048494, 1.07846689, 1.02890050, 0.98189175,
     &   0.93626744, 0.89275277, 0.85150170, 0.81159115, 0.77302444,
     &   0.73593479, 0.69997483, 0.66549397, 0.63244063, 0.60123473,
     &   0.57131159, 0.54277855, 0.51594448, 0.48996422, 0.46606418,
     &   0.44387582, 0.42454937, 0.41302297, 0.41110086, 0.42056698,
     &   0.44397256, 0.47131950, 0.50981212, 0.55733794, 0.61353487,
     &   0.66908497, 0.74138194, 0.80845982, 0.87330765, 0.92801374,
     &   0.97697091, 1.02180791, 1.06119645, 1.09199321, 1.11951602,
     &   1.14143550, 1.15647972, 1.17098117, 1.18009853, 1.18668222,
     &   1.19206452, 1.19590342, 1.19766498, 1.19458222, 1.19039881,
     &   1.18394518, 1.17135620, 1.15939510, 1.14124632, 1.12467051,
     &   1.10712790, 1.08210421, 1.05639410, 1.02959049, 0.99969471,
     &   0.96512556, 0.93898529, 0.91308397, 0.88795686, 0.86347985,
     &   0.83926386, 0.81547731, 0.79197890, 0.76698780, 0.73913848,
     &   0.71192718, 0.68603122, 0.66079444, 0.63542688, 0.61038649,
     &   0.58576566, 0.56151837, 0.53822154, 0.51596385, 0.49447951,
     &   0.47369748, 0.45428184, 0.43682915, 0.42111406, 0.40789378,
     &   0.39639977, 0.38641477, 0.37806916, 0.37057266, 0.36368626,
     &   0.35748842, 0.35236308, 0.34856409, 0.34564441, 0.34291050,
     &   0.34179229, 0.34235492, 0.34365222, 0.34482867, 0.34586433,
     &   0.34801191, 0.35076204, 0.35344568, 0.35519850, 0.35690305,
     &   0.35849330, 0.35969409, 0.36039451, 0.36111709, 0.35949779,
     &   0.35661972, 0.35342786, 0.35023332, 0.34698740, 0.34307635,
     &   0.33652633, 0.32998708, 0.32302523, 0.31616625, 0.30910769,
     &   0.30207407, 0.29380319, 0.28564483, 0.27701414, 0.26877081,
     &   0.26110730, 0.25349978, 0.24593145, 0.23838133, 0.23094511,
     &   0.22347386, 0.21626568, 0.20935442, 0.20271324, 0.19634008,
     &   0.19030578, 0.18380356, 0.17726648, 0.17107494, 0.16512010,
     &   0.15924217, 0.15337250, 0.14784652, 0.14274411, 0.13778329,
     &   0.13293341, 0.12848461, 0.12406534, 0.11964417, 0.11547906,
     &   0.11161148, 0.10792426, 0.10453162, 0.10124227, 0.09805273,
     &   0.09495969, 0.09195992, 0.08978231, 0.08781121, 0.08588430,
     &   0.08400035, 0.08215816, 0.08041602, 0.07872003, 0.07706007,
     &   0.07543521, 0.07384758, 0.07230001, 0.07078455, 0.06930044,
     &   0.06787216, 0.06663447, 0.06541952, 0.06422679, 0.06306614,
     &   0.06196215, 0.06087751, 0.05981183, 0.05877952, 0.05777590,
     &   0.05678929, 0.05584471, 0.05502670, 0.05422094, 0.05342721,
     &   0.05263123, 0.05184607, 0.05107273, 0.05025868, 0.04944408,
     &   0.04864248, 0.04787079, 0.04711253, 0.04636840, 0.04564557,
     &   0.04493385, 0.04423108, 0.04353771, 0.04285501, 0.04220954,
     &   0.04157440, 0.04091078, 0.04023536, 0.03956383, 0.03888561,
     &   0.03822013, 0.03758813, 0.03696627, 0.03635591, 0.03575535,
     &   0.03518232, 0.03462039, 0.03406746, 0.03352317, 0.03300372,
     &   0.03249256, 0.03198923, 0.03149279, 0.03100232, 0.03051943/
      data (qq(i,3),i=1,mxwv)/
     &   2.10869312, 2.10994959, 2.11140633, 2.11277103, 2.11422896,
     &   2.11536121, 2.11695004, 2.11851144, 2.11983109, 2.12128448,
     &   2.12290406, 2.12427378, 2.12593651, 2.12752199, 2.12906098,
     &   2.13054109, 2.13223219, 2.13380599, 2.13549471, 2.13716388,
     &   2.13883781, 2.14053965, 2.14241076, 2.14389253, 2.14597774,
     &   2.14763069, 2.14959931, 2.15132356, 2.15322566, 2.15502787,
     &   2.15699601, 2.15899014, 2.16102433, 2.16296744, 2.16500926,
     &   2.16714239, 2.16919565, 2.17152119, 2.17347479, 2.17582440,
     &   2.17812586, 2.18023086, 2.18252206, 2.18482947, 2.18741202,
     &   2.18976593, 2.19206786, 2.19451046, 2.19712734, 2.19927979,
     &   2.20195913, 2.20460868, 2.20721841, 2.21003222, 2.21257138,
     &   2.21535015, 2.21808338, 2.22079682, 2.22379136, 2.22658467,
     &   2.22949386, 2.23260593, 2.23552299, 2.23868084, 2.24167609,
     &   2.24473333, 2.24787998, 2.25107288, 2.25427008, 2.25750327,
     &   2.26077747, 2.26406288, 2.26738620, 2.27073312, 2.27406740,
     &   2.27748823, 2.28088045, 2.28429341, 2.28773665, 2.29119539,
     &   2.29467297, 2.29816723, 2.30168939, 2.30523252, 2.30881763,
     &   2.31244469, 2.31613111, 2.31988573, 2.32373452, 2.32769465,
     &   2.33177805, 2.33604360, 2.34052014, 2.34524989, 2.35028577,
     &   2.35567641, 2.36148620, 2.36778593, 2.37465405, 2.38218617,
     &   2.39050651, 2.39969325, 2.40986061, 2.42113304, 2.43366981,
     &   2.44789767, 2.46370196, 2.47966862, 2.49573636, 2.51447392,
     &   2.53611541, 2.56007242, 2.58641195, 2.61510921, 2.64629149,
     &   2.68005490, 2.71643901, 2.75540113, 2.79707813, 2.84088016,
     &   2.88646746, 2.93235302, 2.97695661, 3.02118087, 3.05438161,
     &   3.03401637, 2.82029462, 2.20736504, 1.96685779, 1.99823010,
     &   2.16106415, 2.28940988, 2.37913322, 2.44473457, 2.50376511,
     &   2.56359792, 2.62238908, 2.68873930, 2.76887298, 2.84917426,
     &   2.92530346, 2.99790573, 3.06162143, 3.11368728, 3.15467215,
     &   3.18417263, 3.20343637, 3.21363235, 3.21554637, 3.20906758,
     &   3.19627380, 3.17594481, 3.14931393, 3.11678267, 3.07932758,
     &   3.03928494, 2.99739718, 2.95979095, 2.93239808, 2.90570259,
     &   2.87324166, 2.83226228, 2.78262997, 2.72195435, 2.64654684,
     &   2.55602670, 2.45047402, 2.32708144, 2.17662430, 1.99636972,
     &   1.82395816, 1.79886127, 2.02898788, 2.35301685, 2.44095850,
     &   2.36579680, 2.27746248, 2.18968177, 2.10384727, 2.02282238,
     &   1.94670093, 1.87331951, 1.80390608, 1.73616374, 1.67005050,
     &   1.60433435, 1.53977203, 1.47672570, 1.41483545, 1.35354042,
     &   1.29323709, 1.23349452, 1.17478526, 1.11712825, 1.06127715,
     &   1.00641990, 0.95282000, 0.90102839, 0.84956110, 0.80019069,
     &   0.75258124, 0.70687234, 0.67304814, 0.64910203, 0.64281952,
     &   0.65700501, 0.67927259, 0.71648842, 0.76698202, 0.82928628,
     &   0.89143950, 0.97439528, 1.05156362, 1.12681627, 1.19099045,
     &   1.24820960, 1.30166233, 1.34947407, 1.38847625, 1.42405236,
     &   1.45427072, 1.47696316, 1.49915755, 1.51610875, 1.53059542,
     &   1.54341340, 1.55549169, 1.56569850, 1.57107580, 1.57504904,
     &   1.57740808, 1.57322407, 1.56969309, 1.55904830, 1.54945028,
     &   1.53938389, 1.52113044, 1.50125325, 1.47851932, 1.45108402,
     &   1.41654611, 1.38996530, 1.36316288, 1.33678174, 1.31068814,
     &   1.28441143, 1.25846064, 1.23237038, 1.20382631, 1.17095113,
     &   1.13821161, 1.10528207, 1.07261980, 1.03890014, 1.00488675,
     &   0.97053176, 0.93571740, 0.90145522, 0.86771047, 0.83448863,
     &   0.80137235, 0.76968843, 0.74003637, 0.71266198, 0.68858790,
     &   0.66707826, 0.64786100, 0.63126296, 0.61609554, 0.60200340,
     &   0.58903724, 0.57771480, 0.56852263, 0.56079382, 0.55345875,
     &   0.54865283, 0.54646742, 0.54585260, 0.54528731, 0.54470569,
     &   0.54592073, 0.54831171, 0.55089056, 0.55235320, 0.55390370,
     &   0.55547148, 0.55662739, 0.55720031, 0.55807185, 0.55571741,
     &   0.55144519, 0.54661435, 0.54182684, 0.53707272, 0.53129399,
     &   0.52163976, 0.51189679, 0.50135422, 0.49089104, 0.48011509,
     &   0.46930960, 0.45660460, 0.44399253, 0.43051162, 0.41755992,
     &   0.40541157, 0.39333448, 0.38130838, 0.36929464, 0.35744789,
     &   0.34551895, 0.33398399, 0.32289293, 0.31221557, 0.30197191,
     &   0.29228595, 0.28192002, 0.27151796, 0.26163468, 0.25213447,
     &   0.24277574, 0.23345183, 0.22464956, 0.21651274, 0.20861855,
     &   0.20092036, 0.19384757, 0.18685448, 0.17988528, 0.17331909,
     &   0.16721793, 0.16140804, 0.15604682, 0.15086702, 0.14586158,
     &   0.14102377, 0.13634714, 0.13289264, 0.12975894, 0.12670794,
     &   0.12373675, 0.12084254, 0.11811424, 0.11546731, 0.11288538,
     &   0.11036633, 0.10791252, 0.10552726, 0.10319855, 0.10092463,
     &   0.09874038, 0.09683983, 0.09497969, 0.09315877, 0.09139106,
     &   0.08971205, 0.08806676, 0.08645427, 0.08489495, 0.08338176,
     &   0.08189763, 0.08047837, 0.07924533, 0.07803354, 0.07684249,
     &   0.07565257, 0.07448127, 0.07332975, 0.07212290, 0.07091793,
     &   0.06973404, 0.06859525, 0.06747789, 0.06638284, 0.06532034,
     &   0.06427555, 0.06324537, 0.06223033, 0.06123209, 0.06028872,
     &   0.05936145, 0.05839503, 0.05741312, 0.05643792, 0.05545427,
     &   0.05448988, 0.05357417, 0.05267388, 0.05179091, 0.05092278,
     &   0.05009467, 0.04928317, 0.04848522, 0.04770028, 0.04695141,
     &   0.04621495, 0.04549025, 0.04477591, 0.04407059, 0.04337656/
      data (qq(i,4),i=1,mxwv)/
     &   2.08608413, 2.08718085, 2.08819842, 2.08928776, 2.09026051,
     &   2.09133458, 2.09247351, 2.09354448, 2.09475374, 2.09592819,
     &   2.09698820, 2.09825253, 2.09944415, 2.10058975, 2.10188723,
     &   2.10301042, 2.10440993, 2.10564876, 2.10713172, 2.10819149,
     &   2.10947013, 2.11083865, 2.11228514, 2.11354899, 2.11504149,
     &   2.11647153, 2.11772227, 2.11944032, 2.12073398, 2.12217474,
     &   2.12372160, 2.12518692, 2.12670422, 2.12827706, 2.12999678,
     &   2.13142085, 2.13316607, 2.13475418, 2.13644004, 2.13801360,
     &   2.13973999, 2.14158034, 2.14336085, 2.14500785, 2.14754248,
     &   2.14867210, 2.15053105, 2.15235233, 2.15427756, 2.15617537,
     &   2.15817475, 2.16008782, 2.16209793, 2.16414022, 2.16627002,
     &   2.16842127, 2.17039990, 2.17264581, 2.17476940, 2.17722082,
     &   2.17922306, 2.18139601, 2.18377066, 2.18595934, 2.18852735,
     &   2.19084144, 2.19325399, 2.19597149, 2.19838595, 2.20085573,
     &   2.20338416, 2.20608950, 2.20859051, 2.21130514, 2.21415663,
     &   2.21691465, 2.21960235, 2.22249460, 2.22532177, 2.22823811,
     &   2.23119760, 2.23420048, 2.23719168, 2.24030447, 2.24336004,
     &   2.24646950, 2.24964976, 2.25286150, 2.25608301, 2.25932121,
     &   2.26253939, 2.26582241, 2.26915288, 2.27252769, 2.27591467,
     &   2.27931309, 2.28272390, 2.28614759, 2.28958941, 2.29304862,
     &   2.29653072, 2.30004168, 2.30359244, 2.30719543, 2.31088018,
     &   2.31466842, 2.31852102, 2.32249141, 2.32671952, 2.33127499,
     &   2.33619928, 2.34156895, 2.34752536, 2.35422683, 2.36188507,
     &   2.37076735, 2.38122392, 2.39368606, 2.40880442, 2.42733002,
     &   2.45043492, 2.47953343, 2.51644492, 2.56633377, 2.63695979,
     &   2.73646903, 2.80438280, 2.48966694, 2.15578151, 2.10177422,
     &   2.18972707, 2.26456690, 2.31655908, 2.35262156, 2.38277960,
     &   2.40946722, 2.43095112, 2.45043802, 2.47089243, 2.49408054,
     &   2.52004957, 2.55064130, 2.58556533, 2.62389326, 2.66443777,
     &   2.70609426, 2.74769092, 2.78883410, 2.82893705, 2.86680984,
     &   2.90274501, 2.93540955, 2.96442008, 2.98866057, 3.00792336,
     &   3.02198839, 3.03077078, 3.03648925, 3.04872918, 3.06593990,
     &   3.08406568, 3.09908509, 3.11101890, 3.11588383, 3.10966635,
     &   3.08762121, 3.04506540, 2.97790289, 2.86905861, 2.69852328,
     &   2.45939159, 2.28735828, 2.37881136, 2.63521552, 2.83085465,
     &   2.87047887, 2.85724258, 2.82630253, 2.78239822, 2.73039556,
     &   2.67559981, 2.61768126, 2.55856657, 2.49776578, 2.43501234,
     &   2.36961031, 2.30192137, 2.23245740, 2.16206431, 2.08944917,
     &   2.01527452, 1.93915737, 1.86155772, 1.78262067, 1.70341992,
     &   1.62305439, 1.54199219, 1.46106601, 1.37812603, 1.29532707,
     &   1.21259439, 1.12785673, 1.05840755, 0.99532914, 0.95742053,
     &   0.94795388, 0.95371586, 0.97912616, 1.02392077, 1.08473706,
     &   1.14701998, 1.23365045, 1.31460798, 1.39419651, 1.46257877,
     &   1.52303052, 1.58031464, 1.63210475, 1.67565691, 1.71578753,
     &   1.75132167, 1.77945089, 1.80704463, 1.83019590, 1.85123301,
     &   1.87025559, 1.88947523, 1.90730131, 1.92113745, 1.93348849,
     &   1.94530141, 1.95149374, 1.95836437, 1.95874786, 1.95952487,
     &   1.96076453, 1.95526111, 1.94776297, 1.93628299, 1.91968000,
     &   1.89515257, 1.87585616, 1.85601318, 1.83620429, 1.81630564,
     &   1.79586506, 1.77574813, 1.75512981, 1.73167431, 1.70336866,
     &   1.67456388, 1.64312804, 1.61127734, 1.57719040, 1.54180443,
     &   1.50471973, 1.46561122, 1.42580879, 1.38490987, 1.34344804,
     &   1.30030930, 1.25759029, 1.21547580, 1.17526007, 1.13806653,
     &   1.10376072, 1.07215190, 1.04398108, 1.01774323, 0.99301237,
     &   0.96975309, 0.94857353, 0.93038440, 0.91433358, 0.89892870,
     &   0.88709855, 0.87900382, 0.87400436, 0.86951578, 0.86537468,
     &   0.86397922, 0.86478364, 0.86644882, 0.86713207, 0.86827159,
     &   0.86983430, 0.87118530, 0.87207621, 0.87397659, 0.87195694,
     &   0.86715698, 0.86135793, 0.85571909, 0.85037875, 0.84350461,
     &   0.83126980, 0.81861663, 0.80435240, 0.78994828, 0.77498752,
     &   0.75973231, 0.74151307, 0.72311902, 0.70289445, 0.68316793,
     &   0.66430342, 0.64537662, 0.62637138, 0.60720849, 0.58815211,
     &   0.56875134, 0.54981065, 0.53141022, 0.51354426, 0.49632597,
     &   0.48001266, 0.46263373, 0.44515380, 0.42837855, 0.41219971,
     &   0.39624578, 0.38034523, 0.36520466, 0.35113859, 0.33749765,
     &   0.32421276, 0.31194299, 0.29987898, 0.28790689, 0.27660036,
     &   0.26606229, 0.25602967, 0.24670805, 0.23774523, 0.22912604,
     &   0.22083592, 0.21286091, 0.20678002, 0.20123938, 0.19587976,
     &   0.19069350, 0.18567327, 0.18096623, 0.17642576, 0.17202219,
     &   0.16775009, 0.16361059, 0.15960635, 0.15571795, 0.15194090,
     &   0.14832486, 0.14515376, 0.14206679, 0.13906078, 0.13615564,
     &   0.13340358, 0.13071999, 0.12810239, 0.12557934, 0.12313955,
     &   0.12075731, 0.11848422, 0.11649707, 0.11455292, 0.11265031,
     &   0.11076353, 0.10891392, 0.10710233, 0.10522015, 0.10334931,
     &   0.10151698, 0.09975738, 0.09803587, 0.09635346, 0.09472474,
     &   0.09312759, 0.09155734, 0.09001437, 0.08850069, 0.08707152,
     &   0.08566996, 0.08421671, 0.08274542, 0.08128752, 0.07982088,
     &   0.07838541, 0.07702288, 0.07568563, 0.07437608, 0.07309065,
     &   0.07186520, 0.07066607, 0.06948867, 0.06833217, 0.06722954,
     &   0.06614668, 0.06508251, 0.06403495, 0.06300194, 0.06198668/
      data (qq(i,5),i=1,mxwv)/
     &   2.06820655, 2.06907678, 2.06985450, 2.07070923, 2.07153821,
     &   2.07240009, 2.07327151, 2.07405877, 2.07502890, 2.07594180,
     &   2.07686520, 2.07781076, 2.07874894, 2.07965040, 2.08064580,
     &   2.08158016, 2.08250928, 2.08357215, 2.08455801, 2.08565044,
     &   2.08637929, 2.08769488, 2.08875489, 2.08978438, 2.09119201,
     &   2.09195542, 2.09307051, 2.09417486, 2.09566021, 2.09656596,
     &   2.09772825, 2.09896684, 2.10003686, 2.10122228, 2.10266829,
     &   2.10368466, 2.10505676, 2.10627294, 2.10756540, 2.10885644,
     &   2.10994577, 2.11153722, 2.11289072, 2.11438799, 2.11563444,
     &   2.11702752, 2.11848927, 2.12003207, 2.12152100, 2.12287998,
     &   2.12438536, 2.12596536, 2.12761021, 2.12916422, 2.13065577,
     &   2.13222671, 2.13384008, 2.13563156, 2.13722587, 2.13888812,
     &   2.14061761, 2.14231634, 2.14399195, 2.14580345, 2.14766812,
     &   2.14946795, 2.15147948, 2.15331149, 2.15531325, 2.15730000,
     &   2.15920115, 2.16103840, 2.16323447, 2.16517234, 2.16729069,
     &   2.16925478, 2.17180204, 2.17365289, 2.17592597, 2.17805815,
     &   2.18034935, 2.18262458, 2.18497086, 2.18732190, 2.18993735,
     &   2.19229698, 2.19462013, 2.19715142, 2.19970536, 2.20224977,
     &   2.20480633, 2.20744205, 2.21013236, 2.21287704, 2.21566105,
     &   2.21848178, 2.22133803, 2.22423530, 2.22717381, 2.23014522,
     &   2.23316383, 2.23621774, 2.23930860, 2.24243641, 2.24560738,
     &   2.24880743, 2.25185871, 2.25477719, 2.25798988, 2.26141644,
     &   2.26488400, 2.26830220, 2.27171969, 2.27512717, 2.27853608,
     &   2.28195477, 2.28539276, 2.28887916, 2.29246712, 2.29624224,
     &   2.30038857, 2.30524015, 2.31143141, 2.32040977, 2.33603311,
     &   2.37137532, 2.45426416, 2.44946384, 2.20604682, 2.13419557,
     &   2.18014622, 2.22571373, 2.25818729, 2.28112984, 2.30040073,
     &   2.31750512, 2.33114266, 2.34305668, 2.35338426, 2.36136699,
     &   2.36845207, 2.37524247, 2.38214278, 2.38966513, 2.39820385,
     &   2.40807438, 2.41940808, 2.43239141, 2.44712353, 2.46356678,
     &   2.48175073, 2.50162148, 2.52295828, 2.54527211, 2.56819105,
     &   2.59079742, 2.61251926, 2.63217568, 2.65303588, 2.67775917,
     &   2.70673823, 2.73902822, 2.77534389, 2.81459999, 2.85631204,
     &   2.89715695, 2.93249226, 2.95910835, 2.96320677, 2.91557240,
     &   2.75280142, 2.52676201, 2.48015690, 2.59384298, 2.74544239,
     &   2.83394647, 2.88375354, 2.91826963, 2.93902302, 2.94725871,
     &   2.94816136, 2.94250584, 2.93109941, 2.91520643, 2.89412355,
     &   2.86783385, 2.83567119, 2.79767823, 2.75550127, 2.70736241,
     &   2.65363932, 2.59395409, 2.52823567, 2.45648146, 2.37949419,
     &   2.29647303, 2.20777822, 2.11415458, 2.01308823, 1.90620482,
     &   1.79376423, 1.67024875, 1.55999899, 1.44535625, 1.36056030,
     &   1.31077492, 1.28606808, 1.28603566, 1.31325352, 1.36183822,
     &   1.41526771, 1.49541938, 1.57121015, 1.64651060, 1.71159971,
     &   1.76844800, 1.82287967, 1.87235153, 1.91487622, 1.95417786,
     &   1.98994458, 2.01923084, 2.04786587, 2.07324982, 2.09701180,
     &   2.11866832, 2.14117742, 2.16281676, 2.18176293, 2.19935513,
     &   2.21735668, 2.23155284, 2.24632907, 2.25650620, 2.26651025,
     &   2.27776742, 2.28519630, 2.29097319, 2.29291487, 2.29087257,
     &   2.28247237, 2.27554417, 2.26810193, 2.26050091, 2.25264978,
     &   2.24424005, 2.23628497, 2.22780561, 2.21717906, 2.20294452,
     &   2.18797851, 2.16855264, 2.14828658, 2.12532520, 2.10047889,
     &   2.07296491, 2.04221296, 2.00941515, 1.97365880, 1.93596601,
     &   1.89444149, 1.85140610, 1.80609035, 1.76090717, 1.71656728,
     &   1.67406821, 1.63346839, 1.59599853, 1.56027949, 1.52597260,
     &   1.49290502, 1.46160078, 1.43346810, 1.40771902, 1.38269222,
     &   1.36168027, 1.34498692, 1.33325493, 1.32279706, 1.31332016,
     &   1.30742574, 1.30502141, 1.30461967, 1.30402958, 1.30455196,
     &   1.30626345, 1.30836785, 1.31056821, 1.31500280, 1.31589973,
     &   1.31346834, 1.30959499, 1.30618668, 1.30368543, 1.29933238,
     &   1.28896904, 1.27771175, 1.26376152, 1.24925303, 1.23394084,
     &   1.21783960, 1.19770801, 1.17674363, 1.15228570, 1.12778544,
     &   1.10357714, 1.07878339, 1.05338395, 1.02719164, 1.00060153,
     &   0.97278589, 0.94501305, 0.91738498, 0.88998175, 0.86317515,
     &   0.83752573, 0.80999488, 0.78189069, 0.75425148, 0.72720861,
     &   0.70021945, 0.67300582, 0.64650851, 0.62151313, 0.59706151,
     &   0.57307357, 0.55058616, 0.52846700, 0.50646114, 0.48545322,
     &   0.46565524, 0.44668886, 0.42877817, 0.41157955, 0.39506987,
     &   0.37922588, 0.36402419, 0.35186824, 0.34069008, 0.32993704,
     &   0.31959191, 0.30963805, 0.30035883, 0.29146108, 0.28288439,
     &   0.27461582, 0.26665196, 0.25899169, 0.25160208, 0.24447189,
     &   0.23767234, 0.23163033, 0.22579171, 0.22014777, 0.21472745,
     &   0.20961125, 0.20465828, 0.19986169, 0.19526058, 0.19083521,
     &   0.18654466, 0.18246461, 0.17885970, 0.17535831, 0.17195611,
     &   0.16862442, 0.16538107, 0.16222458, 0.15899503, 0.15581037,
     &   0.15270871, 0.14973888, 0.14684851, 0.14403814, 0.14132886,
     &   0.13868555, 0.13610087, 0.13357413, 0.13110690, 0.12878151,
     &   0.12651105, 0.12418008, 0.12183660, 0.11952472, 0.11721121,
     &   0.11495440, 0.11281383, 0.11072018, 0.10867617, 0.10667633,
     &   0.10477211, 0.10291418, 0.10109536, 0.09931409, 0.09761816,
     &   0.09595724, 0.09432944, 0.09273133, 0.09115964, 0.08961877/
      data (qq(i,6),i=1,mxwv)/
     &   2.05411696, 2.05476093, 2.05542445, 2.05602145, 2.05673957,
     &   2.05736589, 2.05815721, 2.05881834, 2.05952716, 2.06018996,
     &   2.06094384, 2.06168818, 2.06234145, 2.06310344, 2.06386614,
     &   2.06469393, 2.06542754, 2.06618309, 2.06695819, 2.06776166,
     &   2.06858897, 2.06941533, 2.07024527, 2.07111263, 2.07197547,
     &   2.07282686, 2.07369161, 2.07456946, 2.07545376, 2.07639432,
     &   2.07728839, 2.07823086, 2.07916021, 2.08000159, 2.08109283,
     &   2.08203435, 2.08302379, 2.08403444, 2.08505797, 2.08608317,
     &   2.08717680, 2.08816314, 2.08928466, 2.09025407, 2.09145880,
     &   2.09244537, 2.09361911, 2.09477377, 2.09595418, 2.09715438,
     &   2.09819961, 2.09934044, 2.10062861, 2.10186815, 2.10311317,
     &   2.10433388, 2.10559273, 2.10696149, 2.10810876, 2.10942388,
     &   2.11090374, 2.11212969, 2.11371994, 2.11499071, 2.11631060,
     &   2.11772799, 2.11924076, 2.12064791, 2.12207150, 2.12361336,
     &   2.12504840, 2.12671852, 2.12837768, 2.12970209, 2.13151193,
     &   2.13294792, 2.13467789, 2.13643956, 2.13797808, 2.13971138,
     &   2.14145851, 2.14318466, 2.14502048, 2.14688516, 2.14867878,
     &   2.15072083, 2.15239573, 2.15428305, 2.15624714, 2.15819168,
     &   2.16015983, 2.16214848, 2.16418982, 2.16628361, 2.16840315,
     &   2.17051125, 2.17272449, 2.17495179, 2.17723060, 2.17938137,
     &   2.18178248, 2.18411541, 2.18653321, 2.18895006, 2.19142032,
     &   2.19391632, 2.19634652, 2.19869804, 2.20127082, 2.20402932,
     &   2.20685768, 2.20969129, 2.21256971, 2.21548724, 2.21845365,
     &   2.22147202, 2.22454119, 2.22766376, 2.23084426, 2.23406315,
     &   2.23731828, 2.24058032, 2.24386501, 2.24731398, 2.25083137,
     &   2.25469613, 2.26597571, 2.29258537, 2.18143511, 2.13118839,
     &   2.15849757, 2.18855834, 2.21036124, 2.22608805, 2.23931837,
     &   2.25110126, 2.26072168, 2.26951075, 2.27760100, 2.28415132,
     &   2.29011202, 2.29568028, 2.30075884, 2.30541325, 2.30978560,
     &   2.31392241, 2.31792593, 2.32188511, 2.32587838, 2.32995987,
     &   2.33425617, 2.33882332, 2.34377050, 2.34916782, 2.35509562,
     &   2.36152601, 2.36842346, 2.37546253, 2.38278770, 2.39101505,
     &   2.40057182, 2.41173005, 2.42501092, 2.44101119, 2.46091676,
     &   2.48543286, 2.51500559, 2.55087304, 2.59300518, 2.63166356,
     &   2.61139894, 2.48055840, 2.40311646, 2.43157744, 2.48926401,
     &   2.53388190, 2.57037735, 2.60534668, 2.63847399, 2.66853070,
     &   2.69659019, 2.72295141, 2.74690151, 2.76941872, 2.78971767,
     &   2.80791521, 2.82277799, 2.83356071, 2.84106755, 2.84384060,
     &   2.84131551, 2.83282924, 2.81728816, 2.79389930, 2.76205349,
     &   2.72076297, 2.66931129, 2.60717225, 2.53173470, 2.44213629,
     &   2.33791590, 2.20967865, 2.08132863, 1.92886686, 1.79913509,
     &   1.70239902, 1.63908076, 1.60349882, 1.60286760, 1.62921667,
     &   1.66550636, 1.72914433, 1.79113674, 1.85388613, 1.90855753,
     &   1.95569682, 2.00122190, 2.04268622, 2.07890534, 2.11233115,
     &   2.14328790, 2.16921377, 2.19439626, 2.21748805, 2.23942614,
     &   2.25948095, 2.28053308, 2.30108595, 2.32012796, 2.33808374,
     &   2.35684037, 2.37357402, 2.39066625, 2.40525365, 2.41938996,
     &   2.43496060, 2.44939351, 2.46288323, 2.47371864, 2.48249650,
     &   2.48787975, 2.49208951, 2.49613523, 2.50011563, 2.50398088,
     &   2.50761199, 2.51184559, 2.51587033, 2.51912761, 2.52113247,
     &   2.52276111, 2.52008677, 2.51676702, 2.51152277, 2.50480032,
     &   2.49571466, 2.48363519, 2.46916986, 2.45112824, 2.43061233,
     &   2.40546346, 2.37728953, 2.34430909, 2.30919838, 2.27173185,
     &   2.23384666, 2.19584727, 2.15913296, 2.12301302, 2.08740306,
     &   2.05200076, 2.01700735, 1.98404872, 1.95275223, 1.92183030,
     &   1.89396334, 1.86962521, 1.85129035, 1.83491778, 1.82013488,
     &   1.80899131, 1.80216825, 1.79846919, 1.79589880, 1.79511058,
     &   1.79632819, 1.79877126, 1.80216968, 1.80898035, 1.81408882,
     &   1.81623924, 1.81686163, 1.81838071, 1.82157373, 1.82323492,
     &   1.82032061, 1.81634116, 1.80921245, 1.80132675, 1.79284811,
     &   1.78335631, 1.77006781, 1.75547171, 1.73624921, 1.71625805,
     &   1.69552636, 1.67367744, 1.65065360, 1.62609124, 1.60038745,
     &   1.57227528, 1.54323494, 1.51326966, 1.48253644, 1.45175755,
     &   1.42187381, 1.38910294, 1.35464907, 1.31931233, 1.28376579,
     &   1.24732709, 1.20954096, 1.17119706, 1.13393533, 1.09659779,
     &   1.05911875, 1.02291322, 0.98677623, 0.95014876, 0.91422421,
     &   0.87946033, 0.84543943, 0.81223166, 0.77996767, 0.74865896,
     &   0.71831310, 0.68893379, 0.66402185, 0.64068013, 0.61813128,
     &   0.59636211, 0.57535821, 0.55577022, 0.53695840, 0.51880342,
     &   0.50129026, 0.48441535, 0.46817762, 0.45253184, 0.43746081,
     &   0.42307484, 0.41003764, 0.39748421, 0.38539773, 0.37382850,
     &   0.36291718, 0.35240680, 0.34228238, 0.33259776, 0.32331842,
     &   0.31437802, 0.30589294, 0.29827940, 0.29093742, 0.28385562,
     &   0.27702653, 0.27043021, 0.26405671, 0.25766641, 0.25142890,
     &   0.24539651, 0.23963928, 0.23407461, 0.22870089, 0.22354980,
     &   0.21856016, 0.21371973, 0.20902373, 0.20447034, 0.20018937,
     &   0.19603764, 0.19184370, 0.18767549, 0.18359342, 0.17954448,
     &   0.17561692, 0.17189540, 0.16827704, 0.16476318, 0.16134495,
     &   0.15809684, 0.15494408, 0.15187432, 0.14888415, 0.14604434,
     &   0.14327748, 0.14057951, 0.13794412, 0.13536531, 0.13284895/
      data (qq(i,7),i=1,mxwv)/
     &   2.04292679, 2.04345584, 2.04394841, 2.04449677, 2.04498100,
     &   2.04555130, 2.04607344, 2.04664254, 2.04707193, 2.04773879,
     &   2.04831982, 2.04891729, 2.04947448, 2.05006957, 2.05066252,
     &   2.05136728, 2.05188251, 2.05246615, 2.05314517, 2.05378556,
     &   2.05458999, 2.05503869, 2.05568361, 2.05637288, 2.05705523,
     &   2.05771661, 2.05844760, 2.05907869, 2.05981398, 2.06053400,
     &   2.06122065, 2.06193972, 2.06268358, 2.06346512, 2.06412601,
     &   2.06501889, 2.06571960, 2.06660628, 2.06734228, 2.06816840,
     &   2.06910706, 2.06983709, 2.07069325, 2.07150078, 2.07231116,
     &   2.07326126, 2.07406402, 2.07494712, 2.07588601, 2.07678294,
     &   2.07762551, 2.07860970, 2.07953358, 2.08056903, 2.08146000,
     &   2.08259320, 2.08351636, 2.08446288, 2.08550620, 2.08639598,
     &   2.08754086, 2.08863521, 2.08964777, 2.09077358, 2.09197688,
     &   2.09304690, 2.09418678, 2.09521651, 2.09642196, 2.09757328,
     &   2.09883595, 2.09991646, 2.10112095, 2.10241914, 2.10365915,
     &   2.10490036, 2.10601854, 2.10737395, 2.10869360, 2.11008978,
     &   2.11148000, 2.11276555, 2.11419702, 2.11561060, 2.11698246,
     &   2.11843348, 2.11982489, 2.12152028, 2.12280083, 2.12435079,
     &   2.12588573, 2.12740803, 2.12898946, 2.13058972, 2.13220334,
     &   2.13388658, 2.13556790, 2.13719106, 2.13896751, 2.14072323,
     &   2.14240813, 2.14421701, 2.14604497, 2.14788318, 2.14982080,
     &   2.15166569, 2.15351629, 2.15531826, 2.15728188, 2.15936255,
     &   2.16149378, 2.16363215, 2.16580367, 2.16800785, 2.17025161,
     &   2.17254281, 2.17487764, 2.17727113, 2.17972875, 2.18224859,
     &   2.18484569, 2.18752074, 2.19031525, 2.19340110, 2.19677806,
     &   2.20011997, 2.20142627, 2.19591856, 2.14499521, 2.11690831,
     &   2.13536215, 2.15609050, 2.17118526, 2.18218684, 2.19137931,
     &   2.19948387, 2.20612431, 2.21224546, 2.21794057, 2.22267699,
     &   2.22710562, 2.23136377, 2.23539996, 2.23923302, 2.24294806,
     &   2.24654555, 2.25006080, 2.25352168, 2.25693989, 2.26028681,
     &   2.26362133, 2.26688528, 2.27009749, 2.27323484, 2.27631211,
     &   2.27934670, 2.28233504, 2.28537798, 2.28885293, 2.29267859,
     &   2.29670906, 2.30083036, 2.30511904, 2.30955291, 2.31425476,
     &   2.31943583, 2.32553458, 2.33349633, 2.34518576, 2.36308503,
     &   2.37687349, 2.33985448, 2.30043578, 2.31498837, 2.33906937,
     &   2.35306096, 2.36411214, 2.37522674, 2.38690662, 2.39918685,
     &   2.41229367, 2.42645383, 2.44143510, 2.45760489, 2.47487473,
     &   2.49348688, 2.51311493, 2.53345180, 2.55460024, 2.57626629,
     &   2.59797573, 2.61938453, 2.63957763, 2.65768433, 2.67237854,
     &   2.68265247, 2.68690038, 2.68316579, 2.66907382, 2.64075994,
     &   2.59540057, 2.52163148, 2.42910123, 2.29360533, 2.15646219,
     &   2.03412366, 1.94308162, 1.87650323, 1.84765303, 1.84900343,
     &   1.86534834, 1.90745282, 1.95132077, 1.99729753, 2.03795505,
     &   2.07271862, 2.10661554, 2.13756537, 2.16495347, 2.19017744,
     &   2.21379566, 2.23390079, 2.25330520, 2.27145505, 2.28881383,
     &   2.30472827, 2.32141757, 2.33779430, 2.35337687, 2.36817288,
     &   2.38364816, 2.39816523, 2.41281939, 2.42630529, 2.43934369,
     &   2.45345116, 2.46764350, 2.48141193, 2.49375653, 2.50543261,
     &   2.51599813, 2.52488136, 2.53391647, 2.54307127, 2.55232930,
     &   2.56169391, 2.57165980, 2.58175254, 2.59211874, 2.60297918,
     &   2.61400032, 2.62250805, 2.63096619, 2.63888264, 2.64639163,
     &   2.65289927, 2.65800500, 2.66176081, 2.66321921, 2.66313028,
     &   2.65991879, 2.65403247, 2.64343381, 2.62985611, 2.61218119,
     &   2.59224629, 2.57032895, 2.54737806, 2.52352238, 2.49891210,
     &   2.47318935, 2.44611764, 2.41896105, 2.39189434, 2.36444306,
     &   2.33778596, 2.31246471, 2.29227257, 2.27408814, 2.25759649,
     &   2.24368310, 2.23374009, 2.22726917, 2.22305179, 2.22085643,
     &   2.22100616, 2.22294450, 2.22649193, 2.23376918, 2.24171162,
     &   2.24785662, 2.25278163, 2.25879288, 2.26679277, 2.27401400,
     &   2.27952790, 2.28417325, 2.28622842, 2.28766608, 2.28906918,
     &   2.28970218, 2.28828931, 2.28575087, 2.27923036, 2.27171707,
     &   2.26284385, 2.25299072, 2.24209833, 2.22974467, 2.21617842,
     &   2.20008945, 2.18258739, 2.16349220, 2.14295197, 2.12182307,
     &   2.10113215, 2.07785749, 2.05238986, 2.02459455, 1.99560940,
     &   1.96481466, 1.93160546, 1.89582396, 1.85961556, 1.82205987,
     &   1.78305328, 1.74372792, 1.70350206, 1.66140103, 1.61832249,
     &   1.57487011, 1.53076375, 1.48544359, 1.44022238, 1.39517975,
     &   1.35039401, 1.30594182, 1.26559842, 1.22653472, 1.18808663,
     &   1.15026963, 1.11312151, 1.07805526, 1.04384744, 1.01031101,
     &   0.97747111, 0.94536084, 0.91401523, 0.88342518, 0.85360384,
     &   0.82474309, 0.79783303, 0.77168643, 0.74630278, 0.72180635,
     &   0.69849086, 0.67589438, 0.65400976, 0.63292384, 0.61260086,
     &   0.59295690, 0.57419252, 0.55700046, 0.54040283, 0.52438498,
     &   0.50907892, 0.49430847, 0.48004684, 0.46595258, 0.45226145,
     &   0.43904594, 0.42641178, 0.41423175, 0.40250522, 0.39128989,
     &   0.38047075, 0.37003249, 0.35996124, 0.35024542, 0.34111440,
     &   0.33230707, 0.32356760, 0.31498984, 0.30665052, 0.29845878,
     &   0.29055834, 0.28306866, 0.27583531, 0.26885310, 0.26210791,
     &   0.25570986, 0.24954014, 0.24357499, 0.23780654, 0.23234518,
     &   0.22706228, 0.22194828, 0.21698979, 0.21217412, 0.20750852/
      data (qq(i,8),i=1,mxwv)/
     &   2.03409195, 2.03448105, 2.03489804, 2.03530455, 2.03574800,
     &   2.03614974, 2.03657389, 2.03700686, 2.03747296, 2.03791094,
     &   2.03835917, 2.03877401, 2.03929281, 2.03973341, 2.04024744,
     &   2.04067302, 2.04115009, 2.04165006, 2.04214668, 2.04264116,
     &   2.04315805, 2.04366279, 2.04417443, 2.04472423, 2.04525638,
     &   2.04574156, 2.04634523, 2.04685712, 2.04750466, 2.04800057,
     &   2.04852676, 2.04916525, 2.04978752, 2.05033755, 2.05093026,
     &   2.05153990, 2.05212212, 2.05279970, 2.05340719, 2.05407929,
     &   2.05466604, 2.05531549, 2.05597448, 2.05659604, 2.05730271,
     &   2.05805349, 2.05871820, 2.05937719, 2.06012940, 2.06085539,
     &   2.06144619, 2.06232929, 2.06298208, 2.06386471, 2.06454563,
     &   2.06533241, 2.06608367, 2.06694388, 2.06778264, 2.06849313,
     &   2.06926894, 2.07017803, 2.07093024, 2.07186890, 2.07273865,
     &   2.07356000, 2.07443881, 2.07538271, 2.07627702, 2.07712650,
     &   2.07808161, 2.07902193, 2.07999992, 2.08093429, 2.08202982,
     &   2.08285427, 2.08392286, 2.08491611, 2.08603597, 2.08694625,
     &   2.08802629, 2.08906388, 2.09014988, 2.09125614, 2.09235644,
     &   2.09346247, 2.09453702, 2.09575915, 2.09693122, 2.09810066,
     &   2.09927440, 2.10039735, 2.10170078, 2.10293865, 2.10419941,
     &   2.10545444, 2.10681272, 2.10808325, 2.10936117, 2.11069441,
     &   2.11210871, 2.11342502, 2.11493516, 2.11630774, 2.11775494,
     &   2.11921978, 2.12064910, 2.12204456, 2.12355256, 2.12514472,
     &   2.12676716, 2.12839437, 2.13004255, 2.13171005, 2.13341022,
     &   2.13513088, 2.13689613, 2.13868451, 2.14052343, 2.14239740,
     &   2.14431787, 2.14628696, 2.14833307, 2.15057421, 2.15302491,
     &   2.15553546, 2.15670848, 2.14728212, 2.11633348, 2.10072613,
     &   2.11380601, 2.12835598, 2.13896060, 2.14674926, 2.15321541,
     &   2.15885830, 2.16349316, 2.16778779, 2.17179608, 2.17516732,
     &   2.17834997, 2.18142986, 2.18436670, 2.18718195, 2.18993378,
     &   2.19262481, 2.19528127, 2.19792366, 2.20056152, 2.20317674,
     &   2.20581079, 2.20842195, 2.21102190, 2.21358585, 2.21611333,
     &   2.21860814, 2.22104883, 2.22349954, 2.22630215, 2.22941303,
     &   2.23271680, 2.23610020, 2.23961782, 2.24318075, 2.24674726,
     &   2.25020742, 2.25344920, 2.25650620, 2.25912738, 2.26108980,
     &   2.26009393, 2.24443913, 2.23007250, 2.24403191, 2.26100516,
     &   2.26971340, 2.27555680, 2.28067517, 2.28533864, 2.28971052,
     &   2.29410148, 2.29862785, 2.30333567, 2.30838656, 2.31382656,
     &   2.31980586, 2.32638693, 2.33366442, 2.34181142, 2.35098839,
     &   2.36131430, 2.37298870, 2.38607669, 2.40064406, 2.41649032,
     &   2.43361378, 2.45158386, 2.46953058, 2.48674846, 2.50050831,
     &   2.50798917, 2.50147963, 2.47489643, 2.40910244, 2.31824183,
     &   2.21594810, 2.12855935, 2.05404663, 2.01064205, 1.99500227,
     &   1.99631953, 2.01945996, 2.04691410, 2.07735825, 2.10497737,
     &   2.12864375, 2.15200806, 2.17347598, 2.19270921, 2.21045041,
     &   2.22718883, 2.24163556, 2.25555110, 2.26870418, 2.28133035,
     &   2.29297829, 2.30512023, 2.31704760, 2.32850504, 2.33943748,
     &   2.35078597, 2.36159492, 2.37243485, 2.38264132, 2.39253688,
     &   2.40305591, 2.41374850, 2.42421460, 2.43393707, 2.44344401,
     &   2.45263267, 2.46076131, 2.46909285, 2.47758865, 2.48624396,
     &   2.49508691, 2.50435567, 2.51382422, 2.52374125, 2.53442597,
     &   2.54542685, 2.55545688, 2.56575108, 2.57624912, 2.58698964,
     &   2.59774518, 2.60840964, 2.61889648, 2.62877846, 2.63843656,
     &   2.64721990, 2.65498948, 2.66042519, 2.66411018, 2.66484261,
     &   2.66354728, 2.66024709, 2.65514851, 2.64868021, 2.64100027,
     &   2.63177776, 2.62049747, 2.60764456, 2.59362006, 2.57862043,
     &   2.56234121, 2.54514503, 2.53061891, 2.51734805, 2.50519609,
     &   2.49395919, 2.48521304, 2.47918320, 2.47560477, 2.47366953,
     &   2.47370481, 2.47547722, 2.47892213, 2.48535609, 2.49397779,
     &   2.50208426, 2.50949192, 2.51780367, 2.52775455, 2.53762627,
     &   2.54822516, 2.55829859, 2.56688476, 2.57511592, 2.58370566,
     &   2.59191751, 2.59997296, 2.60741901, 2.61268330, 2.61721063,
     &   2.62046194, 2.62328291, 2.62565899, 2.62730145, 2.62828660,
     &   2.62778473, 2.62622952, 2.62337136, 2.61930823, 2.61469460,
     &   2.61022210, 2.60486174, 2.59815574, 2.58913279, 2.57890749,
     &   2.56721759, 2.55360961, 2.53693962, 2.51882911, 2.49904037,
     &   2.47744846, 2.45416451, 2.42966914, 2.40293121, 2.37384462,
     &   2.34273624, 2.30956244, 2.27293658, 2.23511052, 2.19612813,
     &   2.15603805, 2.11489344, 2.07412601, 2.03304458, 1.99144244,
     &   1.94937754, 1.90690947, 1.86604476, 1.82517612, 1.78406262,
     &   1.74275875, 1.70131993, 1.65980470, 1.61827314, 1.57678246,
     &   1.53555870, 1.49562418, 1.45597863, 1.41658139, 1.37776375,
     &   1.34002185, 1.30269921, 1.26583481, 1.22955716, 1.19388533,
     &   1.15878451, 1.12458396, 1.09232998, 1.06071031, 1.02974343,
     &   1.00002718, 0.97098076, 0.94256669, 0.91443670, 0.88685554,
     &   0.85992628, 0.83381891, 0.80839092, 0.78367817, 0.75982207,
     &   0.73662692, 0.71411031, 0.69225967, 0.67105651, 0.65096444,
     &   0.63149410, 0.61231315, 0.59354216, 0.57526028, 0.55731559,
     &   0.53997177, 0.52339602, 0.50738311, 0.49191684, 0.47698897,
     &   0.46277267, 0.44908273, 0.43587732, 0.42314628, 0.41108274,
     &   0.39945793, 0.38825315, 0.37744167, 0.36699799, 0.35693419/
      data (qq(i,9),i=1,mxwv)/
     &   2.02706456, 2.02738762, 2.02769160, 2.02802467, 2.02832866,
     &   2.02870750, 2.02903938, 2.02938008, 2.02970338, 2.03006792,
     &   2.03045630, 2.03080034, 2.03115582, 2.03152800, 2.03191280,
     &   2.03229547, 2.03267145, 2.03305078, 2.03344083, 2.03384042,
     &   2.03423452, 2.03465509, 2.03505230, 2.03550577, 2.03590846,
     &   2.03633690, 2.03676200, 2.03722191, 2.03764534, 2.03809428,
     &   2.03854060, 2.03899193, 2.03942204, 2.03994226, 2.04045773,
     &   2.04086900, 2.04133153, 2.04185772, 2.04237986, 2.04288411,
     &   2.04338384, 2.04391384, 2.04443431, 2.04493284, 2.04544902,
     &   2.04600072, 2.04654241, 2.04708195, 2.04768729, 2.04823685,
     &   2.04877973, 2.04937148, 2.04998255, 2.05057120, 2.05120730,
     &   2.05176497, 2.05239773, 2.05307794, 2.05365062, 2.05433059,
     &   2.05495453, 2.05556202, 2.05627084, 2.05688620, 2.05757189,
     &   2.05828929, 2.05907989, 2.05966377, 2.06039596, 2.06110954,
     &   2.06183386, 2.06257701, 2.06345081, 2.06412053, 2.06484747,
     &   2.06566453, 2.06648183, 2.06724524, 2.06810451, 2.06882524,
     &   2.06966782, 2.07048106, 2.07134295, 2.07217717, 2.07309365,
     &   2.07394576, 2.07484651, 2.07575560, 2.07664967, 2.07758784,
     &   2.07848716, 2.07943296, 2.08039021, 2.08139348, 2.08239269,
     &   2.08334589, 2.08437324, 2.08535028, 2.08639693, 2.08745694,
     &   2.08852720, 2.08957958, 2.09065318, 2.09178782, 2.09291649,
     &   2.09405613, 2.09515667, 2.09624934, 2.09742165, 2.09865117,
     &   2.09990144, 2.10115409, 2.10242605, 2.10370731, 2.10500646,
     &   2.10634518, 2.10767531, 2.10903764, 2.11040854, 2.11184978,
     &   2.11329412, 2.11476588, 2.11627960, 2.11791515, 2.11966133,
     &   2.12150049, 2.12205315, 2.11473298, 2.09441423, 2.08528495,
     &   2.09466076, 2.10497022, 2.11249757, 2.11806941, 2.12267661,
     &   2.12666559, 2.12995481, 2.13301921, 2.13589001, 2.13833547,
     &   2.14066386, 2.14292574, 2.14509630, 2.14718580, 2.14923573,
     &   2.15124726, 2.15323853, 2.15522313, 2.15720749, 2.15918207,
     &   2.16116810, 2.16314435, 2.16511703, 2.16707134, 2.16900754,
     &   2.17092729, 2.17282081, 2.17473054, 2.17688966, 2.17926335,
     &   2.18177390, 2.18434930, 2.18703222, 2.18976951, 2.19254255,
     &   2.19528675, 2.19792080, 2.20045137, 2.20256662, 2.20351243,
     &   2.20016313, 2.18825698, 2.18170929, 2.19289041, 2.20491266,
     &   2.21122646, 2.21558881, 2.21945190, 2.22294664, 2.22613430,
     &   2.22922921, 2.23227262, 2.23527002, 2.23830414, 2.24134707,
     &   2.24443650, 2.24754119, 2.25066876, 2.25391650, 2.25727272,
     &   2.26078510, 2.26452971, 2.26857209, 2.27302933, 2.27800965,
     &   2.28373218, 2.29038572, 2.29813337, 2.30733371, 2.31782746,
     &   2.32934260, 2.34023809, 2.34478474, 2.33277202, 2.29834437,
     &   2.24271178, 2.18508863, 2.12755895, 2.08808708, 2.06858230,
     &   2.06360292, 2.07496762, 2.09127879, 2.11062574, 2.12875581,
     &   2.14450455, 2.16026139, 2.17488813, 2.18815136, 2.20046353,
     &   2.21215296, 2.22237468, 2.23225284, 2.24164319, 2.25069094,
     &   2.25911760, 2.26784921, 2.27643704, 2.28470492, 2.29263973,
     &   2.30081081, 2.30859947, 2.31640410, 2.32376552, 2.33095145,
     &   2.33849239, 2.34604430, 2.35344172, 2.36038613, 2.36716580,
     &   2.37371111, 2.37976909, 2.38596058, 2.39226937, 2.39869213,
     &   2.40524054, 2.41204119, 2.41897011, 2.42614841, 2.43373775,
     &   2.44152617, 2.44890332, 2.45648527, 2.46426678, 2.47228074,
     &   2.48045182, 2.48877716, 2.49723387, 2.50568938, 2.51434588,
     &   2.52303314, 2.53166080, 2.53969908, 2.54731417, 2.55385303,
     &   2.55962181, 2.56454444, 2.56850100, 2.57175994, 2.57437587,
     &   2.57612371, 2.57655454, 2.57562017, 2.57356119, 2.57069206,
     &   2.56618571, 2.56010008, 2.55461764, 2.54953837, 2.54486489,
     &   2.53999114, 2.53607583, 2.53363347, 2.53294373, 2.53321624,
     &   2.53469968, 2.53739071, 2.54130602, 2.54703045, 2.55498147,
     &   2.56313658, 2.57103634, 2.57950401, 2.58897758, 2.59869242,
     &   2.60991764, 2.62091136, 2.63133740, 2.64163065, 2.65232992,
     &   2.66293454, 2.67423081, 2.68534708, 2.69581771, 2.70595789,
     &   2.71534753, 2.72475457, 2.73420143, 2.74357867, 2.75287127,
     &   2.76181054, 2.77036881, 2.77837110, 2.78587103, 2.79317403,
     &   2.80051494, 2.80838895, 2.81610394, 2.82264066, 2.82867074,
     &   2.83428907, 2.83938265, 2.84270954, 2.84484768, 2.84613419,
     &   2.84651518, 2.84530306, 2.84355998, 2.84073520, 2.83598948,
     &   2.82923722, 2.82062960, 2.80869079, 2.79536510, 2.78061485,
     &   2.76440644, 2.74670935, 2.72556996, 2.70271802, 2.67859459,
     &   2.65320754, 2.62656832, 2.60023999, 2.57302022, 2.54469728,
     &   2.51528883, 2.48479724, 2.45322466, 2.42064023, 2.38707280,
     &   2.35259223, 2.31751513, 2.28167486, 2.24510956, 2.20804667,
     &   2.17101455, 2.13340902, 2.09527230, 2.05666113, 2.01763201,
     &   1.97822452, 1.93874037, 1.90014684, 1.86139333, 1.82252336,
     &   1.78476572, 1.74702537, 1.70924222, 1.67133427, 1.63338828,
     &   1.59547508, 1.55777061, 1.52020788, 1.48288810, 1.44607472,
     &   1.40951252, 1.37331140, 1.33748305, 1.30201316, 1.26772225,
     &   1.23385918, 1.20018911, 1.16681325, 1.13374329, 1.10077119,
     &   1.06835234, 1.03668070, 1.00561583, 0.97514355, 0.94532347,
     &   0.91643113, 0.88825256, 0.86075085, 0.83395207, 0.80823338,
     &   0.78322130, 0.75891024, 0.73527455, 0.71228892, 0.69000363/
      data (qq(i,10),i=1,mxwv)/
     &   2.02147675, 2.02172947, 2.02200747, 2.02225709, 2.02272439,
     &   2.02278566, 2.02306294, 2.02334714, 2.02374697, 2.02388453,
     &   2.02417088, 2.02445960, 2.02470636, 2.02502751, 2.02532864,
     &   2.02562976, 2.02592611, 2.02623630, 2.02637529, 2.02685618,
     &   2.02720785, 2.02751517, 2.02783895, 2.02816486, 2.02848506,
     &   2.02883649, 2.02917671, 2.02951646, 2.02990079, 2.03023982,
     &   2.03061032, 2.03095460, 2.03132558, 2.03167629, 2.03206921,
     &   2.03244925, 2.03284502, 2.03321195, 2.03361368, 2.03397870,
     &   2.03441906, 2.03482938, 2.03522515, 2.03564739, 2.03609538,
     &   2.03650141, 2.03692579, 2.03738785, 2.03781891, 2.03828096,
     &   2.03873539, 2.03917623, 2.03963327, 2.04010248, 2.04059672,
     &   2.04103661, 2.04158521, 2.04216194, 2.04254341, 2.04300737,
     &   2.04357433, 2.04411316, 2.04460979, 2.04514980, 2.04569697,
     &   2.04623652, 2.04676580, 2.04735374, 2.04789972, 2.04850340,
     &   2.04903936, 2.04963541, 2.05018258, 2.05078959, 2.05140066,
     &   2.05199862, 2.05261564, 2.05328894, 2.05387568, 2.05455470,
     &   2.05519652, 2.05587029, 2.05656505, 2.05728483, 2.05786777,
     &   2.05857587, 2.05926442, 2.05999112, 2.06070018, 2.06142879,
     &   2.06215525, 2.06289697, 2.06365967, 2.06441450, 2.06519032,
     &   2.06597161, 2.06676960, 2.06757021, 2.06805110, 2.06920528,
     &   2.07003784, 2.07087803, 2.07172990, 2.07255316, 2.07346630,
     &   2.07436180, 2.07523084, 2.07613683, 2.07700896, 2.07796621,
     &   2.07893777, 2.07991219, 2.08089685, 2.08189154, 2.08290386,
     &   2.08392835, 2.08496237, 2.08601975, 2.08709145, 2.08817816,
     &   2.08928275, 2.09040236, 2.09154844, 2.09276652, 2.09404469,
     &   2.09526467, 2.09566092, 2.09030700, 2.07687855, 2.07135296,
     &   2.07810140, 2.08545446, 2.09084129, 2.09486294, 2.09818316,
     &   2.10104322, 2.10341430, 2.10563540, 2.10772562, 2.10953021,
     &   2.11126280, 2.11295271, 2.11458302, 2.11616135, 2.11771369,
     &   2.11924291, 2.12076020, 2.12227511, 2.12375855, 2.12530088,
     &   2.12682295, 2.12833786, 2.12985158, 2.13135386, 2.13284683,
     &   2.13433123, 2.13579583, 2.13728881, 2.13895106, 2.14075899,
     &   2.14265704, 2.14459348, 2.14660358, 2.14864445, 2.15070367,
     &   2.15273690, 2.15469122, 2.15656996, 2.15815496, 2.15891409,
     &   2.15654969, 2.14837670, 2.14497161, 2.15331197, 2.16165018,
     &   2.16607857, 2.16922259, 2.17204762, 2.17463875, 2.17703485,
     &   2.17937994, 2.18169975, 2.18399501, 2.18632078, 2.18865323,
     &   2.19101191, 2.19336748, 2.19570541, 2.19808841, 2.20047307,
     &   2.20286083, 2.20525622, 2.20764041, 2.21001387, 2.21236968,
     &   2.21473122, 2.21712136, 2.21956944, 2.22216797, 2.22494698,
     &   2.22808456, 2.23142910, 2.23398280, 2.23227978, 2.22178268,
     &   2.19836807, 2.16905904, 2.13491702, 2.10834002, 2.09336996,
     &   2.08833480, 2.09429550, 2.10436440, 2.11691260, 2.12900496,
     &   2.13970351, 2.15051818, 2.16066551, 2.16996241, 2.17866540,
     &   2.18697286, 2.19432569, 2.20147085, 2.20828986, 2.21488857,
     &   2.22109628, 2.22750258, 2.23381543, 2.23990011, 2.24577570,
     &   2.25179362, 2.25752401, 2.26327920, 2.26870084, 2.27403426,
     &   2.27958965, 2.28507376, 2.29045272, 2.29553080, 2.30046177,
     &   2.30516911, 2.30967855, 2.31427073, 2.31894326, 2.32369304,
     &   2.32851934, 2.33350444, 2.33857179, 2.34374261, 2.34908938,
     &   2.35454559, 2.35974050, 2.36504745, 2.37043333, 2.37592864,
     &   2.38148284, 2.38708806, 2.39275408, 2.39840865, 2.40417171,
     &   2.40995002, 2.41574812, 2.42133713, 2.42684722, 2.43201113,
     &   2.43699145, 2.44175911, 2.44625258, 2.45058703, 2.45478177,
     &   2.45872808, 2.46219563, 2.46508646, 2.46748281, 2.46954989,
     &   2.47072363, 2.47093153, 2.47116423, 2.47148681, 2.47192168,
     &   2.47201514, 2.47238588, 2.47341490, 2.47540450, 2.47787404,
     &   2.48097515, 2.48476171, 2.48926878, 2.49473619, 2.50166845,
     &   2.50889707, 2.51607442, 2.52357793, 2.53162980, 2.53991556,
     &   2.54929423, 2.55859137, 2.56771016, 2.57680202, 2.58616376,
     &   2.59553075, 2.60547280, 2.61539578, 2.62523365, 2.63498187,
     &   2.64442420, 2.65400290, 2.66373968, 2.67362142, 2.68362069,
     &   2.69372225, 2.70382214, 2.71385217, 2.72384548, 2.73389602,
     &   2.74401331, 2.75489259, 2.76610613, 2.77710152, 2.78814507,
     &   2.79942012, 2.81100869, 2.82224822, 2.83312082, 2.84403372,
     &   2.85501623, 2.86541033, 2.87603235, 2.88683295, 2.89709496,
     &   2.90660906, 2.91556454, 2.92318439, 2.93033242, 2.93695211,
     &   2.94298434, 2.94836855, 2.95001125, 2.95014143, 2.94935536,
     &   2.94760919, 2.94485998, 2.94154096, 2.93731356, 2.93207979,
     &   2.92580795, 2.91844463, 2.90993023, 2.90029001, 2.88949943,
     &   2.87743449, 2.86355138, 2.84852409, 2.83234382, 2.81507993,
     &   2.79694867, 2.77770758, 2.75735736, 2.73581886, 2.71312761,
     &   2.68935728, 2.66456842, 2.63901377, 2.61253667, 2.58515596,
     &   2.55817580, 2.53045917, 2.50191736, 2.47287703, 2.44308758,
     &   2.41248536, 2.38108945, 2.34894276, 2.31613445, 2.28290224,
     &   2.24901462, 2.21461558, 2.17970276, 2.14422512, 2.10903907,
     &   2.07339764, 2.03740549, 2.00100780, 1.96401107, 1.92618895,
     &   1.88799989, 1.84947896, 1.81071222, 1.77165866, 1.73245895,
     &   1.69337583, 1.65428913, 1.61518610, 1.57615292, 1.53774071,
     &   1.49950778, 1.46149075, 1.42369270, 1.38611686, 1.34889627/
      data (qq(i,11),i=1,mxwv)/
     &   2.01705885, 2.01725364, 2.01745462, 2.01768255, 2.01787853,
     &   2.01808667, 2.01830935, 2.01851845, 2.01874614, 2.01896572,
     &   2.01919580, 2.01940870, 2.01964378, 2.01986694, 2.02000594,
     &   2.02033734, 2.02058840, 2.02082372, 2.02108407, 2.02132821,
     &   2.02157927, 2.02183557, 2.02211046, 2.02240729, 2.02262783,
     &   2.02290177, 2.02315354, 2.02345300, 2.02372336, 2.02400041,
     &   2.02428150, 2.02456665, 2.02484894, 2.02514815, 2.02541971,
     &   2.02577281, 2.02604866, 2.02636933, 2.02667022, 2.02699304,
     &   2.02731180, 2.02764153, 2.02795672, 2.02831459, 2.02862978,
     &   2.02898359, 2.02930617, 2.02966785, 2.03001499, 2.03036737,
     &   2.03072119, 2.03110361, 2.03145957, 2.03184032, 2.03218198,
     &   2.03258729, 2.03298640, 2.03337836, 2.03378534, 2.03416300,
     &   2.03457975, 2.03505421, 2.03540301, 2.03583026, 2.03625107,
     &   2.03667498, 2.03708100, 2.03755593, 2.03800225, 2.03844643,
     &   2.03888988, 2.03937101, 2.03984165, 2.04030776, 2.04077005,
     &   2.04127884, 2.04175138, 2.04224873, 2.04326868, 2.04326773,
     &   2.04378319, 2.04430485, 2.04483294, 2.04535961, 2.04589963,
     &   2.04642892, 2.04700041, 2.04755235, 2.04815197, 2.04868436,
     &   2.04926920, 2.04985523, 2.05044985, 2.05104470, 2.05166435,
     &   2.05228090, 2.05290651, 2.05305171, 2.05418038, 2.05482459,
     &   2.05548382, 2.05614471, 2.05681682, 2.05749893, 2.05818629,
     &   2.05889821, 2.05957127, 2.06025076, 2.06097293, 2.06172323,
     &   2.06248307, 2.06325054, 2.06401348, 2.06479549, 2.06558466,
     &   2.06638288, 2.06718707, 2.06800556, 2.06884456, 2.06968784,
     &   2.07054210, 2.07140565, 2.07228446, 2.07321072, 2.07416940,
     &   2.07505846, 2.07533360, 2.07151031, 2.06256914, 2.05916095,
     &   2.06403255, 2.06930351, 2.07318449, 2.07610846, 2.07852530,
     &   2.08060145, 2.08233595, 2.08396721, 2.08551097, 2.08686185,
     &   2.08816886, 2.08944821, 2.09068918, 2.09189606, 2.09308791,
     &   2.09426498, 2.09543610, 2.09660673, 2.09778023, 2.09895015,
     &   2.10013032, 2.10130668, 2.10248327, 2.10365391, 2.10481906,
     &   2.10598135, 2.10713482, 2.10830593, 2.10960007, 2.11099339,
     &   2.11244678, 2.11392617, 2.11545205, 2.11699677, 2.11854935,
     &   2.12008023, 2.12154722, 2.12295270, 2.12413621, 2.12472034,
     &   2.12314391, 2.11776686, 2.11604309, 2.12218595, 2.12801600,
     &   2.13115859, 2.13344598, 2.13552523, 2.13744807, 2.13924336,
     &   2.14100862, 2.14275813, 2.14449525, 2.14625454, 2.14802027,
     &   2.14980531, 2.15158749, 2.15336061, 2.15516567, 2.15697217,
     &   2.15878057, 2.16059065, 2.16238642, 2.16415977, 2.16589522,
     &   2.16758633, 2.16921687, 2.17075753, 2.17218137, 2.17338824,
     &   2.17434716, 2.17466402, 2.17420268, 2.17114353, 2.16479421,
     &   2.15297270, 2.13799548, 2.11934972, 2.10381079, 2.09455538,
     &   2.09134841, 2.09515166, 2.10185766, 2.11036015, 2.11869526,
     &   2.12618995, 2.13381004, 2.14102221, 2.14768505, 2.15397120,
     &   2.15999866, 2.16539121, 2.17065954, 2.17570567, 2.18060827,
     &   2.18526149, 2.19004965, 2.19477868, 2.19934440, 2.20377803,
     &   2.20830345, 2.21261501, 2.21695566, 2.22104788, 2.22509933,
     &   2.22929955, 2.23341012, 2.23745131, 2.24128985, 2.24500942,
     &   2.24854350, 2.25201011, 2.25553417, 2.25911832, 2.26275969,
     &   2.26645422, 2.27025962, 2.27411914, 2.27803493, 2.28202653,
     &   2.28609037, 2.28997755, 2.29393578, 2.29792714, 2.30197620,
     &   2.30604458, 2.31012011, 2.31421614, 2.31827736, 2.32238030,
     &   2.32644296, 2.33075094, 2.33436775, 2.33818626, 2.34180117,
     &   2.34533000, 2.34876776, 2.35211039, 2.35541320, 2.35869050,
     &   2.36188960, 2.36490631, 2.36770964, 2.37034869, 2.37288904,
     &   2.37506819, 2.37684941, 2.37873340, 2.38070869, 2.38277984,
     &   2.38472009, 2.38684535, 2.38934875, 2.39238524, 2.39571071,
     &   2.39941144, 2.40351701, 2.40804791, 2.41315484, 2.41907406,
     &   2.42516589, 2.43125391, 2.43755817, 2.44420242, 2.45115590,
     &   2.45832825, 2.46563673, 2.47284532, 2.48005819, 2.48742580,
     &   2.49481058, 2.50246072, 2.51010942, 2.51769543, 2.52526116,
     &   2.53270960, 2.54024839, 2.54788971, 2.55562377, 2.56344628,
     &   2.57135105, 2.57930446, 2.58728361, 2.59531140, 2.60342836,
     &   2.61162901, 2.62023425, 2.62907195, 2.63793468, 2.64692616,
     &   2.65614700, 2.66566586, 2.67525935, 2.68487096, 2.69471288,
     &   2.70482683, 2.71492600, 2.72536993, 2.73623919, 2.74724770,
     &   2.75830412, 2.76953673, 2.78077245, 2.79221869, 2.80386710,
     &   2.81570601, 2.82772279, 2.83812761, 2.84811020, 2.85800552,
     &   2.86778307, 2.87740993, 2.88667798, 2.89571810, 2.90452456,
     &   2.91306305, 2.92128515, 2.92913294, 2.93659782, 2.94363856,
     &   2.95009565, 2.95525002, 2.95982337, 2.96377683, 2.96704388,
     &   2.96953249, 2.97130919, 2.97233939, 2.97248626, 2.97173834,
     &   2.97013807, 2.96753669, 2.96352601, 2.95861840, 2.95279360,
     &   2.94672322, 2.93982029, 2.93201256, 2.92378259, 2.91474605,
     &   2.90475702, 2.89367962, 2.88161755, 2.86859179, 2.85467625,
     &   2.83977580, 2.82397890, 2.80725908, 2.78954577, 2.77122831,
     &   2.75196815, 2.73217726, 2.71165991, 2.69008732, 2.66732550,
     &   2.64353466, 2.61848617, 2.59245682, 2.56535125, 2.53728437,
     &   2.50827956, 2.47837162, 2.44753695, 2.41583848, 2.38366485,
     &   2.35071254, 2.31700206, 2.28252101, 2.24725580, 2.21132469/
      data (qq(i,12),i=1,mxwv)/
     &   2.01354194, 2.01370192, 2.01387286, 2.01403880, 2.01418281,
     &   2.01436043, 2.01453876, 2.01471233, 2.01484990, 2.01505995,
     &   2.01522923, 2.01541471, 2.01556444, 2.01577878, 2.01596642,
     &   2.01615214, 2.01634836, 2.01653957, 2.01673484, 2.01694298,
     &   2.01714182, 2.01734066, 2.01754427, 2.01774359, 2.01795840,
     &   2.01817441, 2.01839352, 2.01859856, 2.01882958, 2.01904893,
     &   2.01927423, 2.01949430, 2.01974797, 2.01996326, 2.02019763,
     &   2.02045727, 2.02066445, 2.02092195, 2.02117181, 2.02143431,
     &   2.02168846, 2.02193904, 2.02217889, 2.02245903, 2.02273178,
     &   2.02296925, 2.02329850, 2.02360320, 2.02382398, 2.02410507,
     &   2.02439094, 2.02467680, 2.02496719, 2.02526641, 2.02556205,
     &   2.02587008, 2.02618313, 2.02647424, 2.02680731, 2.02711105,
     &   2.02743530, 2.02776122, 2.02809978, 2.02843332, 2.02876091,
     &   2.02911019, 2.02945375, 2.02979088, 2.03015113, 2.03053951,
     &   2.03086782, 2.03122282, 2.03163075, 2.03199458, 2.03236508,
     &   2.03275037, 2.03313732, 2.03351712, 2.03392220, 2.03432822,
     &   2.03473234, 2.03514481, 2.03556418, 2.03601098, 2.03573537,
     &   2.03665733, 2.03727484, 2.03772402, 2.03816867, 2.03862405,
     &   2.03908014, 2.03954363, 2.04001403, 2.04049110, 2.04097748,
     &   2.04146075, 2.04195523, 2.04245496, 2.04293537, 2.04347205,
     &   2.04398918, 2.04451394, 2.04504442, 2.04558969, 2.04612589,
     &   2.04667521, 2.04721856, 2.04775882, 2.04832792, 2.04891753,
     &   2.04930472, 2.05011559, 2.05071902, 2.05133128, 2.05195117,
     &   2.05257821, 2.05322456, 2.05385518, 2.05450654, 2.05516481,
     &   2.05583143, 2.05650377, 2.05718660, 2.05790234, 2.05862808,
     &   2.05930161, 2.05951357, 2.05682778, 2.05083275, 2.04870749,
     &   2.05223417, 2.05602813, 2.05883932, 2.06097865, 2.06275249,
     &   2.06427646, 2.06555915, 2.06677341, 2.06792712, 2.06895065,
     &   2.06994724, 2.07092595, 2.07188034, 2.07281256, 2.07373571,
     &   2.07465053, 2.07556295, 2.07647538, 2.07738900, 2.07830715,
     &   2.07922912, 2.08015084, 2.08107376, 2.08199382, 2.08291149,
     &   2.08382845, 2.08474112, 2.08566976, 2.08668423, 2.08776784,
     &   2.08888865, 2.09002566, 2.09120727, 2.09239244, 2.09358048,
     &   2.09475064, 2.09587455, 2.09694982, 2.09786034, 2.09833956,
     &   2.09732151, 2.09380412, 2.09299684, 2.09751034, 2.10163355,
     &   2.10390115, 2.10559559, 2.10715199, 2.10860491, 2.10996699,
     &   2.11132312, 2.11266422, 2.11399794, 2.11534739, 2.11670160,
     &   2.11806822, 2.11943245, 2.12078977, 2.12216830, 2.12354541,
     &   2.12492156, 2.12629676, 2.12765837, 2.12900043, 2.13031244,
     &   2.13158584, 2.13281083, 2.13396049, 2.13500476, 2.13586116,
     &   2.13647676, 2.13649225, 2.13581681, 2.13306594, 2.12832260,
     &   2.12079525, 2.11196542, 2.10119700, 2.09220481, 2.08685875,
     &   2.08516884, 2.08795071, 2.09267259, 2.09863901, 2.10454035,
     &   2.10991311, 2.11539102, 2.12061048, 2.12546515, 2.13007569,
     &   2.13451409, 2.13852310, 2.14245749, 2.14623904, 2.14992714,
     &   2.15345311, 2.15707421, 2.16065788, 2.16412592, 2.16750979,
     &   2.17095590, 2.17424536, 2.17756319, 2.18069887, 2.18381834,
     &   2.18704057, 2.19017982, 2.19327331, 2.19622922, 2.19909477,
     &   2.20181513, 2.20452785, 2.20728302, 2.21008420, 2.21292877,
     &   2.21581316, 2.21877766, 2.22178245, 2.22481823, 2.22788811,
     &   2.23101044, 2.23401546, 2.23707080, 2.24014401, 2.24325418,
     &   2.24637413, 2.24949312, 2.25262475, 2.25572896, 2.25885701,
     &   2.26194549, 2.26501775, 2.26797199, 2.27088380, 2.27366400,
     &   2.27639127, 2.27906370, 2.28168869, 2.28429365, 2.28688741,
     &   2.28943634, 2.29188061, 2.29422760, 2.29649925, 2.29872537,
     &   2.30079174, 2.30268431, 2.30472851, 2.30687165, 2.30911231,
     &   2.31134677, 2.31376576, 2.31646466, 2.31950784, 2.32276392,
     &   2.32628655, 2.33008361, 2.33416390, 2.33864856, 2.34359741,
     &   2.34862804, 2.35366130, 2.35885739, 2.36429834, 2.36982322,
     &   2.37560272, 2.38137245, 2.38705826, 2.39275789, 2.39855576,
     &   2.40436959, 2.41028070, 2.41619015, 2.42200470, 2.42781734,
     &   2.43357825, 2.43938923, 2.44525504, 2.45116496, 2.45711613,
     &   2.46308756, 2.46908975, 2.47510314, 2.48114920, 2.48725939,
     &   2.49344921, 2.49979877, 2.50624394, 2.51269889, 2.51922631,
     &   2.52585864, 2.53261685, 2.53941369, 2.54625821, 2.55322480,
     &   2.56033158, 2.56748462, 2.57481694, 2.58235693, 2.59001565,
     &   2.59777403, 2.60568953, 2.61373115, 2.62197328, 2.63042545,
     &   2.63909674, 2.64799666, 2.65652609, 2.66509795, 2.67383909,
     &   2.68275094, 2.69183421, 2.70092940, 2.71015334, 2.71952677,
     &   2.72904682, 2.73870564, 2.74849200, 2.75840831, 2.76844668,
     &   2.77854156, 2.78834128, 2.79818606, 2.80806017, 2.81790709,
     &   2.82760501, 2.83726692, 2.84687138, 2.85634303, 2.86566401,
     &   2.87484646, 2.88375044, 2.89194131, 2.89987636, 2.90752697,
     &   2.91495919, 2.92209101, 2.92888808, 2.93564558, 2.94212103,
     &   2.94820404, 2.95375085, 2.95883107, 2.96341419, 2.96744323,
     &   2.97093081, 2.97388268, 2.97626638, 2.97802806, 2.97907424,
     &   2.97946358, 2.97957826, 2.97924423, 2.97822189, 2.97651219,
     &   2.97399735, 2.97038054, 2.96591520, 2.96051526, 2.95421124,
     &   2.94682193, 2.93847179, 2.92913508, 2.91881537, 2.90753913,
     &   2.89527369, 2.88200498, 2.86770368, 2.85233641, 2.83592820/
      data (qq(i,13),i=1,mxwv)/
     &   2.01075816, 2.01087856, 2.01101637, 2.01113558, 2.01126814,
     &   2.01140094, 2.01153755, 2.01167440, 2.01181149, 2.01195431,
     &   2.01210046, 2.01223683, 2.01238489, 2.01252913, 2.01267481,
     &   2.01283646, 2.01297617, 2.01313329, 2.01329041, 2.01343536,
     &   2.01360726, 2.01375556, 2.01392603, 2.01410127, 2.01426005,
     &   2.01442409, 2.01459432, 2.01479340, 2.01494479, 2.01512313,
     &   2.01530075, 2.01548648, 2.01566434, 2.01585054, 2.01605654,
     &   2.01622248, 2.01641464, 2.01661777, 2.01682472, 2.01701951,
     &   2.01725245, 2.01740909, 2.01762247, 2.01782322, 2.01803946,
     &   2.01825190, 2.01847672, 2.01869965, 2.01890802, 2.01913238,
     &   2.01936293, 2.01958942, 2.01982522, 2.02006221, 2.02029228,
     &   2.02053905, 2.02077842, 2.02102613, 2.02127361, 2.02154088,
     &   2.02178240, 2.02203512, 2.02231574, 2.02254009, 2.02283263,
     &   2.02309966, 2.02337050, 2.02365112, 2.02392817, 2.02422071,
     &   2.02450013, 2.02479649, 2.02508092, 2.02537847, 2.02568221,
     &   2.02598739, 2.02629662, 2.02660894, 2.02685738, 2.02724266,
     &   2.02756715, 2.02788925, 2.02822113, 2.02855563, 2.02889562,
     &   2.02923989, 2.02958441, 2.02993560, 2.03008676, 2.03064799,
     &   2.03100967, 2.03140903, 2.03172946, 2.03212833, 2.03251147,
     &   2.03289580, 2.03328657, 2.03368449, 2.03408241, 2.03448749,
     &   2.03489637, 2.03531194, 2.03573155, 2.03615618, 2.03657889,
     &   2.03704977, 2.03745079, 2.03788042, 2.03833055, 2.03879523,
     &   2.03926849, 2.03973937, 2.04021645, 2.04069924, 2.04118729,
     &   2.04168105, 2.04218030, 2.04268622, 2.04319835, 2.04371572,
     &   2.04423857, 2.04476595, 2.04530001, 2.04585171, 2.04641509,
     &   2.04693317, 2.04711390, 2.04524899, 2.04120779, 2.03987670,
     &   2.04243565, 2.04517651, 2.04722238, 2.04879594, 2.05010700,
     &   2.05123615, 2.05219507, 2.05310750, 2.05397844, 2.05476141,
     &   2.05552769, 2.05628252, 2.05702209, 2.05774736, 2.05847025,
     &   2.05917621, 2.05989480, 2.06061459, 2.06133437, 2.06205368,
     &   2.06277990, 2.06350613, 2.06423378, 2.06496143, 2.06568789,
     &   2.06641531, 2.06714153, 2.06787992, 2.06868005, 2.06952834,
     &   2.07040501, 2.07129335, 2.07220292, 2.07312107, 2.07404017,
     &   2.07494545, 2.07581830, 2.07665396, 2.07736993, 2.07777882,
     &   2.07714748, 2.07485414, 2.07453990, 2.07785678, 2.08080339,
     &   2.08246446, 2.08373833, 2.08492041, 2.08603382, 2.08709073,
     &   2.08813787, 2.08917785, 2.09021831, 2.09126806, 2.09231973,
     &   2.09338188, 2.09444237, 2.09549809, 2.09656811, 2.09763646,
     &   2.09870362, 2.09976792, 2.10082102, 2.10185814, 2.10287237,
     &   2.10385561, 2.10479951, 2.10568666, 2.10648942, 2.10715151,
     &   2.10763121, 2.10766459, 2.10720873, 2.10527134, 2.10201001,
     &   2.09705687, 2.09148693, 2.08488345, 2.07950282, 2.07641959,
     &   2.07563186, 2.07776237, 2.08118582, 2.08546495, 2.08971786,
     &   2.09362769, 2.09761906, 2.10144258, 2.10501957, 2.10843611,
     &   2.11173701, 2.11474466, 2.11770749, 2.12056518, 2.12336159,
     &   2.12605214, 2.12881041, 2.13154626, 2.13420081, 2.13680124,
     &   2.13944578, 2.14197707, 2.14453387, 2.14695859, 2.14937949,
     &   2.15187311, 2.15429735, 2.15669227, 2.15899301, 2.16122675,
     &   2.16335034, 2.16549182, 2.16766453, 2.16987348, 2.17211652,
     &   2.17438984, 2.17672133, 2.17908382, 2.18146420, 2.18385887,
     &   2.18629193, 2.18864775, 2.19104075, 2.19344449, 2.19587374,
     &   2.19830990, 2.20074391, 2.20318723, 2.20561171, 2.20805478,
     &   2.21046710, 2.21286941, 2.21519947, 2.21750164, 2.21972036,
     &   2.22191501, 2.22408152, 2.22622609, 2.22836637, 2.23050308,
     &   2.23261380, 2.23466420, 2.23666525, 2.23862982, 2.24056983,
     &   2.24243021, 2.24420714, 2.24612355, 2.24812412, 2.25020623,
     &   2.25232267, 2.25459886, 2.25708771, 2.25981355, 2.26270223,
     &   2.26578879, 2.26907277, 2.27255750, 2.27633905, 2.28040624,
     &   2.28451324, 2.28862596, 2.29286504, 2.29728794, 2.30176497,
     &   2.30636215, 2.31095672, 2.31548572, 2.32003284, 2.32464814,
     &   2.32927990, 2.33393955, 2.33860064, 2.34316754, 2.34774184,
     &   2.35229516, 2.35688114, 2.36150122, 2.36614299, 2.37081361,
     &   2.37547946, 2.38016772, 2.38486385, 2.38958287, 2.39435244,
     &   2.39919376, 2.40409994, 2.40904832, 2.41399813, 2.41899395,
     &   2.42404270, 2.42914653, 2.43426108, 2.43941689, 2.44463658,
     &   2.44992590, 2.45525169, 2.46066976, 2.46618342, 2.47174382,
     &   2.47736454, 2.48304725, 2.48877788, 2.49460673, 2.50053763,
     &   2.50657392, 2.51271939, 2.51875329, 2.52483582, 2.53101707,
     &   2.53730130, 2.54369259, 2.55015254, 2.55671263, 2.56338263,
     &   2.57016659, 2.57706714, 2.58408689, 2.59123278, 2.59850955,
     &   2.60590315, 2.61330748, 2.62084007, 2.62850451, 2.63628745,
     &   2.64414763, 2.65213752, 2.66025829, 2.66849399, 2.67684627,
     &   2.68532658, 2.69388723, 2.70235443, 2.71091461, 2.71956277,
     &   2.72824407, 2.73699689, 2.74581790, 2.75480890, 2.76389456,
     &   2.77304029, 2.78218746, 2.79136539, 2.80055547, 2.80970764,
     &   2.81885386, 2.82798076, 2.83707476, 2.84611869, 2.85493803,
     &   2.86366272, 2.87246227, 2.88126445, 2.88998961, 2.89868832,
     &   2.90722013, 2.91542506, 2.92341113, 2.93114090, 2.93859768,
     &   2.94561195, 2.95227122, 2.95855927, 2.96444917, 2.96978474,
     &   2.97466135, 2.97905111, 2.98292804, 2.98626351, 2.98901725/

c     106um ice
      data (qq(i,14),i=1,mxwv)/
     &   2.01267219, 2.01227498, 2.01257515, 2.01260996, 2.01285481,
     &   2.01295733, 2.01267695, 2.01333427, 2.01351833, 2.01368308,
     &   2.01302147, 2.01393056, 2.01403022, 2.01421905, 2.01433182,
     &   2.01520109, 2.01465964, 2.01493859, 2.01503658, 2.01523805,
     &   2.01526284, 2.01563358, 2.01583672, 2.01596642, 2.01624966,
     &   2.01635218, 2.01652908, 2.01683235, 2.01702642, 2.01716709,
     &   2.01733613, 2.01224089, 2.01775575, 2.01794386, 2.01801205,
     &   2.01851201, 2.01873398, 2.01883268, 2.01915121, 2.01937842,
     &   2.01927376, 2.01959896, 2.02004194, 2.02113485, 2.02047253,
     &   2.02068496, 2.02095985, 2.02121115, 2.02155948, 2.02182174,
     &   2.02199936, 2.02224731, 2.02243757, 2.02210546, 2.02297211,
     &   2.02322960, 2.02364278, 2.02383518, 2.02402806, 2.02442861,
     &   2.02527332, 2.02498746, 2.02534318, 2.02560663, 2.02592397,
     &   2.02608228, 2.02610278, 2.02688861, 2.02713513, 2.02747154,
     &   2.02785468, 2.02822828, 2.02835536, 2.02878237, 2.02913928,
     &   2.02949715, 2.02844858, 2.03004789, 2.03057265, 2.03083944,
     &   2.03167748, 2.03156924, 2.03202081, 2.03240108, 2.03288460,
     &   2.03324151, 2.03351378, 2.03407574, 2.03437042, 2.03473878,
     &   2.03516865, 2.03560877, 2.03592038, 2.03669715, 2.03689408,
     &   2.03728652, 2.03772163, 2.03813386, 2.03868032, 2.03913116,
     &   2.03969455, 2.04007959, 2.04056787, 2.04104257, 2.04153681,
     &   2.04202461, 2.04273057, 2.04295111, 2.04355049, 2.04403782,
     &   2.03547192, 2.04507732, 2.04541063, 2.04660988, 2.04678392,
     &   2.04739881, 2.04790354, 2.04852962, 2.04903698, 2.04966831,
     &   2.05032897, 2.05081058, 2.05158830, 2.05221581, 2.05288744,
     &   2.05356455, 2.05420613, 2.05446219, 2.05290842, 2.03732109,
     &   2.02785707, 2.04066825, 2.04659510, 2.05244446, 2.05720615,
     &   2.05854940, 2.05928898, 2.05998707, 2.06084895, 2.06179452,
     &   2.06272364, 2.06361794, 2.06448126, 2.06532097, 2.06613255,
     &   2.06697750, 2.06777930, 2.06856513, 2.06937671, 2.07033110,
     &   2.07094884, 2.07175779, 2.07257819, 2.07330441, 2.07402849,
     &   2.07498670, 2.07547903, 2.07666612, 2.07782865, 2.07910609,
     &   2.08044410, 2.08112097, 2.08185148, 2.08283091, 2.08377194,
     &   2.08466792, 2.08554006, 2.08631420, 2.08695054, 2.08742261,
     &   2.08750319, 2.08793759, 2.08864713, 2.08979416, 2.09116912,
     &   2.09258962, 2.09397697, 2.09507799, 2.09606957, 2.09723926,
     &   2.09848237, 2.09971237, 2.10094380, 2.10228634, 2.10349989,
     &   2.10473204, 2.10606265, 2.10750222, 2.10908985, 2.11072493,
     &   2.11225867, 2.11341238, 2.11482573, 2.11587787, 2.11705303,
     &   2.11812758, 2.11929107, 2.12047291, 2.12159181, 2.12259126,
     &   2.12290215, 2.12107587, 2.11527753, 2.10186219, 2.08256316,
     &   2.07988667, 2.08820367, 2.09797215, 2.10610151, 2.11286473,
     &   2.11881995, 2.12405562, 2.12875342, 2.13299012, 2.13662720,
     &   2.13997912, 2.14302373, 2.14574552, 2.14830089, 2.15082717,
     &   2.15330410, 2.15570164, 2.15808296, 2.16037893, 2.16266918,
     &   2.16485190, 2.16713285, 2.16931868, 2.17131352, 2.17340207,
     &   2.17570472, 2.17822003, 2.18083692, 2.18349481, 2.18615627,
     &   2.18866754, 2.19112158, 2.19332719, 2.19552875, 2.19814324,
     &   2.20117235, 2.20442510, 2.20769715, 2.21081853, 2.21392727,
     &   2.21713996, 2.22030091, 2.22334933, 2.22639418, 2.22938991,
     &   2.23239017, 2.23536134, 2.23842144, 2.24137449, 2.24436617,
     &   2.24712539, 2.24971962, 2.25237036, 2.25486374, 2.25721025,
     &   2.25941324, 2.26184893, 2.26359224, 2.26550221, 2.26714301,
     &   2.26883578, 2.26955009, 2.27001381, 2.26947689, 2.26652527,
     &   2.25824046, 2.24551201, 2.22977877, 2.21621084, 2.20565867,
     &   2.19814968, 2.19445467, 2.19507146, 2.19839406, 2.20356798,
     &   2.20998001, 2.21749282, 2.22602463, 2.23692870, 2.25268388,
     &   2.26739907, 2.28448868, 2.30438399, 2.32210636, 2.32978868,
     &   2.33265948, 2.33619785, 2.34052229, 2.34567952, 2.35129333,
     &   2.35695839, 2.36301303, 2.36907053, 2.37443280, 2.37994504,
     &   2.38057446, 2.37718797, 2.37485075, 2.37882900, 2.38808942,
     &   2.39581609, 2.40321660, 2.41046524, 2.41753554, 2.42395639,
     &   2.42998338, 2.43590593, 2.44180250, 2.44777822, 2.45379305,
     &   2.45990086, 2.46626234, 2.47293067, 2.47971892, 2.48671937,
     &   2.49370170, 2.50065279, 2.50757575, 2.51502705, 2.52159142,
     &   2.52875876, 2.53602552, 2.54343987, 2.55097628, 2.55874753,
     &   2.56667995, 2.57484984, 2.58290958, 2.59121752, 2.59987926,
     &   2.60879183, 2.61807990, 2.62774611, 2.63782501, 2.64832520,
     &   2.65936708, 2.67089128, 2.68267870, 2.69468546, 2.70734477,
     &   2.72056460, 2.73443151, 2.74882650, 2.76392412, 2.77969480,
     &   2.79615855, 2.81335044, 2.83123899, 2.84982920, 2.86910391,
     &   2.88884640, 2.90930820, 2.93046474, 2.95229316, 2.97477365,
     &   2.99804783, 3.02427173, 3.05108070, 3.07864904, 3.10776949,
     &   3.13817263, 3.16899085, 3.20067763, 3.23383307, 3.26691413,
     &   3.29969120, 3.33110499, 3.36164260, 3.39100027, 3.41883922,
     &   3.44495988, 3.46905231, 3.49081349, 3.51000237, 3.52638078,
     &   3.53980279, 3.55002880, 3.55690956, 3.56024718, 3.55942035,
     &   3.55493164, 3.54665375, 3.53438616, 3.51825285, 3.49833751,
     &   3.47445083, 3.44673681, 3.41554308, 3.38097215, 3.34339237,
     &   3.30269217, 3.25898910, 3.21315742, 3.16466475, 3.11363125/

c        ---------------- single scatter albedo ---------------

      data (ww(i,1),i=1,mxwv)/
     &   0.99999952, 0.99999958, 0.99999964, 0.99999964, 0.99999970,
     &   0.99999970, 0.99999976, 0.99999976, 0.99999976, 0.99999976,
     &   0.99999982, 0.99999982, 0.99999982, 0.99999982, 0.99999982,
     &   0.99999982, 0.99999988, 0.99999988, 0.99999988, 0.99999988,
     &   0.99999988, 0.99999994, 0.99999994, 0.99999994, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999994, 0.99999994, 0.99999994,
     &   0.99999988, 0.99999988, 0.99999988, 0.99999988, 0.99999982,
     &   0.99999976, 0.99999964, 0.99999946, 0.99999940, 0.99999940,
     &   0.99999940, 0.99999934, 0.99999923, 0.99999917, 0.99999905,
     &   0.99999875, 0.99999797, 0.99999660, 0.99999517, 0.99999487,
     &   0.99999499, 0.99999559, 0.99999613, 0.99999607, 0.99999499,
     &   0.99999338, 0.99999148, 0.99999005, 0.99998879, 0.99998742,
     &   0.99998277, 0.99996358, 0.99993312, 0.99991757, 0.99992037,
     &   0.99993020, 0.99994451, 0.99995929, 0.99997067, 0.99997354,
     &   0.99996907, 0.99995905, 0.99992585, 0.99983281, 0.99979675,
     &   0.99979216, 0.99979687, 0.99980885, 0.99982476, 0.99982220,
     &   0.99978274, 0.99970102, 0.99943924, 0.99916118, 0.99816114,
     &   0.99572027, 0.99538642, 0.99598861, 0.99725771, 0.99804133,
     &   0.99851036, 0.99880695, 0.99903840, 0.99916226, 0.99924058,
     &   0.99922901, 0.99915224, 0.99901688, 0.99877852, 0.99873787,
     &   0.99808365, 0.99248528, 0.98448712, 0.98503619, 0.98936582,
     &   0.99313819, 0.99495143, 0.99624306, 0.99692607, 0.99727446,
     &   0.99735862, 0.99709493, 0.99653637, 0.99570632, 0.99422938,
     &   0.99204558, 0.98870075, 0.98481202, 0.98276567, 0.97890717,
     &   0.95922488, 0.87456477, 0.60092169, 0.39636961, 0.35611215,
     &   0.38785917, 0.42182928, 0.45341501, 0.48493326, 0.52896410,
     &   0.59844899, 0.67909014, 0.76488978, 0.84285098, 0.88823092,
     &   0.92191178, 0.94717973, 0.96350604, 0.97250253, 0.97750479,
     &   0.97891426, 0.97817403, 0.97593778, 0.97256535, 0.96757478,
     &   0.96229076, 0.95535046, 0.94727427, 0.93761307, 0.92654824,
     &   0.91459662, 0.90150052, 0.88984787, 0.88724649, 0.89048690,
     &   0.89601666, 0.90116936, 0.90720439, 0.91192007, 0.91372395,
     &   0.91012162, 0.89826524, 0.87755698, 0.83687615, 0.75934839,
     &   0.60984266, 0.44399109, 0.40469515, 0.49654633, 0.62870169,
     &   0.68542868, 0.70718223, 0.71863103, 0.72157675, 0.71745110,
     &   0.71096838, 0.70258021, 0.69270551, 0.68257952, 0.67147034,
     &   0.65969020, 0.64646697, 0.63167769, 0.61690199, 0.60082132,
     &   0.58359200, 0.56517518, 0.54522538, 0.52371144, 0.50063592,
     &   0.47589877, 0.44957092, 0.42163384, 0.39161080, 0.35907152,
     &   0.32457307, 0.28465000, 0.24550866, 0.19957438, 0.16065010,
     &   0.12966332, 0.10869911, 0.09359177, 0.08540367, 0.08223289,
     &   0.08193011, 0.08527038, 0.08943519, 0.09422144, 0.09848119,
     &   0.10209934, 0.10566373, 0.10885277, 0.11145543, 0.11376107,
     &   0.11578444, 0.11712978, 0.11838754, 0.11935266, 0.12015285,
     &   0.12065148, 0.12131826, 0.12191113, 0.12227121, 0.12243631,
     &   0.12274905, 0.12273871, 0.12276960, 0.12238671, 0.12188148,
     &   0.12162974, 0.12124781, 0.12069120, 0.11966123, 0.11832535,
     &   0.11652559, 0.11441365, 0.11232819, 0.11027414, 0.10824618,
     &   0.10623882, 0.10437321, 0.10253117, 0.10071009, 0.09893207,
     &   0.09719741, 0.09498110, 0.09280986, 0.09058782, 0.08836666,
     &   0.08606426, 0.08364838, 0.08116627, 0.07851537, 0.07584449,
     &   0.07299417, 0.07006160, 0.06685416, 0.06360495, 0.06020356,
     &   0.05685322, 0.05357836, 0.05042693, 0.04742674, 0.04458369,
     &   0.04186176, 0.03922241, 0.03670470, 0.03432534, 0.03208752,
     &   0.02995682, 0.02793958, 0.02618165, 0.02459365, 0.02315000,
     &   0.02181572, 0.02063180, 0.01959152, 0.01867770, 0.01784808,
     &   0.01710322, 0.01643152, 0.01582579, 0.01530599, 0.01486420,
     &   0.01443098, 0.01399682, 0.01359221, 0.01322973, 0.01287905,
     &   0.01256918, 0.01225852, 0.01193481, 0.01161513, 0.01131371,
     &   0.01101675, 0.01073934, 0.01046383, 0.01017510, 0.00988740,
     &   0.00959218, 0.00930665, 0.00903108, 0.00876284, 0.00850220,
     &   0.00824333, 0.00798780, 0.00773332, 0.00748180, 0.00723900,
     &   0.00700847, 0.00679591, 0.00659144, 0.00638216, 0.00617820,
     &   0.00598140, 0.00579133, 0.00559511, 0.00539979, 0.00521059,
     &   0.00502781, 0.00484428, 0.00467142, 0.00450606, 0.00434081,
     &   0.00417539, 0.00401277, 0.00384502, 0.00368480, 0.00353176,
     &   0.00338558, 0.00324592, 0.00309221, 0.00294171, 0.00279859,
     &   0.00266246, 0.00253301, 0.00241182, 0.00229673, 0.00218714,
     &   0.00208281, 0.00198339, 0.00188853, 0.00179823, 0.00171227,
     &   0.00162999, 0.00154891, 0.00147186, 0.00139864, 0.00132906,
     &   0.00126291, 0.00120005, 0.00114032, 0.00108331, 0.00102897,
     &   0.00097735, 0.00092809, 0.00088032, 0.00083500, 0.00079201,
     &   0.00075214, 0.00071434, 0.00067843, 0.00064498, 0.00061332,
     &   0.00058321, 0.00055441, 0.00052701, 0.00050096, 0.00047619,
     &   0.00045264, 0.00043030, 0.00040908, 0.00038891, 0.00036973,
     &   0.00035149, 0.00033445, 0.00031841, 0.00030314, 0.00028863,
     &   0.00027480, 0.00026146, 0.00024876, 0.00023665, 0.00022511,
     &   0.00021406, 0.00020353, 0.00019351, 0.00018398, 0.00017489,
     &   0.00016624, 0.00015802, 0.00015020, 0.00014275, 0.00013568/
      data (ww(i,2),i=1,mxwv)/
     &   0.99999940, 0.99999946, 0.99999952, 0.99999952, 0.99999958,
     &   0.99999964, 0.99999964, 0.99999964, 0.99999970, 0.99999970,
     &   0.99999970, 0.99999976, 0.99999970, 0.99999976, 0.99999982,
     &   0.99999976, 0.99999982, 0.99999982, 0.99999982, 0.99999988,
     &   0.99999988, 0.99999988, 0.99999988, 0.99999994, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999988, 0.99999988, 0.99999988,
     &   0.99999988, 0.99999982, 0.99999982, 0.99999976, 0.99999976,
     &   0.99999964, 0.99999946, 0.99999928, 0.99999917, 0.99999911,
     &   0.99999911, 0.99999899, 0.99999887, 0.99999881, 0.99999863,
     &   0.99999815, 0.99999702, 0.99999499, 0.99999291, 0.99999249,
     &   0.99999267, 0.99999350, 0.99999428, 0.99999422, 0.99999255,
     &   0.99999017, 0.99998742, 0.99998528, 0.99998343, 0.99998128,
     &   0.99997431, 0.99994552, 0.99989980, 0.99987602, 0.99987978,
     &   0.99989426, 0.99991554, 0.99993777, 0.99995500, 0.99995917,
     &   0.99995196, 0.99993604, 0.99988347, 0.99973547, 0.99967641,
     &   0.99966687, 0.99967229, 0.99968952, 0.99971348, 0.99970734,
     &   0.99964023, 0.99950194, 0.99906087, 0.99858838, 0.99689466,
     &   0.99276316, 0.99217606, 0.99317580, 0.99532056, 0.99665207,
     &   0.99745274, 0.99796146, 0.99835998, 0.99857551, 0.99871409,
     &   0.99870151, 0.99858171, 0.99836808, 0.99799073, 0.99794477,
     &   0.99691707, 0.98812354, 0.97594953, 0.97705644, 0.98385495,
     &   0.98971093, 0.99254555, 0.99454623, 0.99561977, 0.99619257,
     &   0.99638742, 0.99611533, 0.99547791, 0.99453545, 0.99285358,
     &   0.99043518, 0.98684013, 0.98290801, 0.98133349, 0.97818160,
     &   0.96029204, 0.88629788, 0.65051126, 0.45335221, 0.40789646,
     &   0.42965531, 0.45185778, 0.47039634, 0.48706186, 0.51111752,
     &   0.55724645, 0.62581104, 0.71359581, 0.80470860, 0.86261636,
     &   0.90569735, 0.93765694, 0.95804328, 0.96924108, 0.97549391,
     &   0.97760212, 0.97735327, 0.97557360, 0.97271365, 0.96835762,
     &   0.96384770, 0.95789891, 0.95104575, 0.94289029, 0.93362486,
     &   0.92370141, 0.91287541, 0.90336311, 0.90186918, 0.90555465,
     &   0.91124725, 0.91657686, 0.92260861, 0.92745936, 0.92986423,
     &   0.92785108, 0.91924220, 0.90373415, 0.87244433, 0.81095517,
     &   0.68393046, 0.52605706, 0.47914237, 0.56073743, 0.68641496,
     &   0.74120396, 0.76305342, 0.77524769, 0.77978271, 0.77807325,
     &   0.77423626, 0.76871663, 0.76185495, 0.75474048, 0.74674398,
     &   0.73814428, 0.72825056, 0.71692353, 0.70551914, 0.69287282,
     &   0.67907649, 0.66405845, 0.64744067, 0.62911725, 0.60897517,
     &   0.58685577, 0.56266069, 0.53622192, 0.50689054, 0.47391659,
     &   0.43757614, 0.39347333, 0.34805253, 0.29157364, 0.24104093,
     &   0.19887660, 0.16943091, 0.14767697, 0.13574652, 0.13116366,
     &   0.13088927, 0.13592756, 0.14218697, 0.14930777, 0.15567274,
     &   0.16113099, 0.16650350, 0.17136121, 0.17544205, 0.17913465,
     &   0.18247540, 0.18494239, 0.18730941, 0.18932550, 0.19115071,
     &   0.19258994, 0.19428684, 0.19591540, 0.19727910, 0.19840063,
     &   0.19976383, 0.20075156, 0.20181023, 0.20236614, 0.20274742,
     &   0.20351337, 0.20419501, 0.20465152, 0.20444603, 0.20383513,
     &   0.20259498, 0.20075272, 0.19891614, 0.19708408, 0.19524902,
     &   0.19340676, 0.19174626, 0.19008461, 0.18844388, 0.18688156,
     &   0.18534511, 0.18294172, 0.18054605, 0.17800565, 0.17539743,
     &   0.17257227, 0.16946495, 0.16614150, 0.16240478, 0.15852132,
     &   0.15418683, 0.14956179, 0.14425512, 0.13870710, 0.13268358,
     &   0.12659618, 0.12050370, 0.11451343, 0.10870444, 0.10310488,
     &   0.09764888, 0.09225909, 0.08702935, 0.08201165, 0.07722890,
     &   0.07260516, 0.06816494, 0.06426598, 0.06071645, 0.05746546,
     &   0.05443297, 0.05172713, 0.04934153, 0.04724295, 0.04533013,
     &   0.04360836, 0.04205271, 0.04064818, 0.03944657, 0.03843470,
     &   0.03743645, 0.03642629, 0.03548203, 0.03463707, 0.03381536,
     &   0.03309447, 0.03236434, 0.03159376, 0.03082663, 0.03010079,
     &   0.02938045, 0.02870655, 0.02803204, 0.02731759, 0.02660035,
     &   0.02585787, 0.02513627, 0.02443675, 0.02375264, 0.02308489,
     &   0.02241828, 0.02175712, 0.02109545, 0.02043863, 0.01980242,
     &   0.01919672, 0.01863739, 0.01809792, 0.01754330, 0.01700119,
     &   0.01647685, 0.01596922, 0.01544324, 0.01491820, 0.01440852,
     &   0.01391513, 0.01341846, 0.01295000, 0.01250115, 0.01205164,
     &   0.01160076, 0.01115674, 0.01069771, 0.01025871, 0.00983886,
     &   0.00943731, 0.00905325, 0.00862958, 0.00821424, 0.00781882,
     &   0.00744237, 0.00708401, 0.00674826, 0.00642911, 0.00612499,
     &   0.00583521, 0.00555884, 0.00529499, 0.00504363, 0.00480419,
     &   0.00457485, 0.00434868, 0.00413362, 0.00392915, 0.00373473,
     &   0.00354981, 0.00337400, 0.00320684, 0.00304724, 0.00289504,
     &   0.00275041, 0.00261232, 0.00247835, 0.00235122, 0.00223057,
     &   0.00211866, 0.00201252, 0.00191166, 0.00181767, 0.00172872,
     &   0.00164408, 0.00156309, 0.00148603, 0.00141273, 0.00134305,
     &   0.00127677, 0.00121388, 0.00115416, 0.00109735, 0.00104333,
     &   0.00099195, 0.00094395, 0.00089874, 0.00085571, 0.00081482,
     &   0.00077582, 0.00073821, 0.00070241, 0.00066825, 0.00063573,
     &   0.00060454, 0.00057485, 0.00054658, 0.00051968, 0.00049403,
     &   0.00046963, 0.00044642, 0.00042434, 0.00040333, 0.00038334/
      data (ww(i,3),i=1,mxwv)/
     &   0.99999917, 0.99999928, 0.99999934, 0.99999928, 0.99999940,
     &   0.99999946, 0.99999952, 0.99999952, 0.99999958, 0.99999958,
     &   0.99999964, 0.99999958, 0.99999964, 0.99999964, 0.99999970,
     &   0.99999976, 0.99999976, 0.99999976, 0.99999982, 0.99999982,
     &   0.99999982, 0.99999982, 0.99999988, 0.99999988, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999988, 0.99999982, 0.99999982,
     &   0.99999982, 0.99999976, 0.99999976, 0.99999970, 0.99999958,
     &   0.99999946, 0.99999923, 0.99999899, 0.99999881, 0.99999875,
     &   0.99999827, 0.99999857, 0.99999839, 0.99999827, 0.99999803,
     &   0.99999732, 0.99999565, 0.99999279, 0.99998915, 0.99998927,
     &   0.99998927, 0.99999070, 0.99999183, 0.99999154, 0.99998909,
     &   0.99998540, 0.99998146, 0.99997848, 0.99997544, 0.99997264,
     &   0.99996269, 0.99992073, 0.99985343, 0.99981958, 0.99982470,
     &   0.99984527, 0.99987638, 0.99990886, 0.99993390, 0.99994010,
     &   0.99992919, 0.99990588, 0.99982846, 0.99961066, 0.99952310,
     &   0.99950802, 0.99951512, 0.99953949, 0.99957418, 0.99956387,
     &   0.99946231, 0.99925345, 0.99858880, 0.99787223, 0.99531174,
     &   0.98908353, 0.98814297, 0.98958594, 0.99279594, 0.99480408,
     &   0.99601656, 0.99678808, 0.99739659, 0.99772197, 0.99792838,
     &   0.99789298, 0.99768221, 0.99731505, 0.99667311, 0.99657536,
     &   0.99483740, 0.98018080, 0.96016127, 0.96183759, 0.97290260,
     &   0.98260385, 0.98735601, 0.99074084, 0.99257505, 0.99357086,
     &   0.99393755, 0.99353850, 0.99256557, 0.99114746, 0.98863602,
     &   0.98513579, 0.98011905, 0.97502923, 0.97378892, 0.97095239,
     &   0.95134300, 0.87732273, 0.67051172, 0.49031708, 0.44467977,
     &   0.45737207, 0.47020876, 0.47862408, 0.48441643, 0.49194479,
     &   0.51126546, 0.55337983, 0.62692142, 0.72493762, 0.79927546,
     &   0.85966301, 0.90686882, 0.93791169, 0.95533168, 0.96522480,
     &   0.96902776, 0.96950114, 0.96796286, 0.96513134, 0.96058547,
     &   0.95605785, 0.95004308, 0.94324231, 0.93524051, 0.92630577,
     &   0.91691488, 0.90679765, 0.89813751, 0.89775699, 0.90271699,
     &   0.90972978, 0.91633248, 0.92356056, 0.92953640, 0.93311667,
     &   0.93253571, 0.92599750, 0.91360217, 0.88790166, 0.83683336,
     &   0.72771877, 0.58183151, 0.52751464, 0.59064770, 0.70826775,
     &   0.76383793, 0.78741699, 0.80138403, 0.80796903, 0.80866116,
     &   0.80728340, 0.80433774, 0.80012804, 0.79567492, 0.79043794,
     &   0.78469211, 0.77782631, 0.76971328, 0.76152706, 0.75226837,
     &   0.74199599, 0.73064053, 0.71783692, 0.70345432, 0.68732345,
     &   0.66925496, 0.64906478, 0.62647063, 0.60075158, 0.57091689,
     &   0.53691775, 0.49382934, 0.44729593, 0.38603896, 0.32800245,
     &   0.27696961, 0.23993467, 0.21168204, 0.19576751, 0.18940198,
     &   0.18878667, 0.19497463, 0.20273750, 0.21151233, 0.21931687,
     &   0.22597772, 0.23249297, 0.23837221, 0.24334975, 0.24787061,
     &   0.25200266, 0.25517175, 0.25823256, 0.26093772, 0.26345515,
     &   0.26555657, 0.26797572, 0.27034950, 0.27248591, 0.27437881,
     &   0.27658796, 0.27846465, 0.28044030, 0.28195259, 0.28327638,
     &   0.28507885, 0.28692988, 0.28857699, 0.28952676, 0.29010555,
     &   0.29008725, 0.28924155, 0.28841889, 0.28760645, 0.28679666,
     &   0.28599212, 0.28541559, 0.28485230, 0.28437382, 0.28409219,
     &   0.28385824, 0.28253910, 0.28122342, 0.27973992, 0.27816752,
     &   0.27630550, 0.27405846, 0.27147841, 0.26828146, 0.26481298,
     &   0.26064011, 0.25592932, 0.25007156, 0.24365802, 0.23628671,
     &   0.22856160, 0.22056787, 0.21246286, 0.20440146, 0.19644561,
     &   0.18849455, 0.18041290, 0.17235830, 0.16444524, 0.15674609,
     &   0.14910845, 0.14159213, 0.13490824, 0.12874855, 0.12303955,
     &   0.11762637, 0.11274956, 0.10842826, 0.10462550, 0.10113855,
     &   0.09799003, 0.09514111, 0.09256967, 0.09038886, 0.08860181,
     &   0.08682457, 0.08499306, 0.08327505, 0.08174816, 0.08025210,
     &   0.07897643, 0.07765616, 0.07622296, 0.07477175, 0.07339215,
     &   0.07200155, 0.07070382, 0.06938177, 0.06794605, 0.06647844,
     &   0.06492463, 0.06339803, 0.06190287, 0.06042439, 0.05896550,
     &   0.05749057, 0.05600950, 0.05450822, 0.05300087, 0.05152777,
     &   0.05011496, 0.04880668, 0.04753597, 0.04621365, 0.04491090,
     &   0.04364245, 0.04240669, 0.04111309, 0.03981156, 0.03854068,
     &   0.03730373, 0.03604970, 0.03486226, 0.03371971, 0.03256883,
     &   0.03140800, 0.03025947, 0.02906530, 0.02791914, 0.02681920,
     &   0.02576379, 0.02475123, 0.02362765, 0.02252247, 0.02146737,
     &   0.02046029, 0.01949918, 0.01859670, 0.01773696, 0.01691595,
     &   0.01613203, 0.01538294, 0.01466641, 0.01398261, 0.01333013,
     &   0.01270413, 0.01208560, 0.01149662, 0.01093583, 0.01040188,
     &   0.00989335, 0.00940927, 0.00894850, 0.00850803, 0.00808756,
     &   0.00768757, 0.00730528, 0.00693402, 0.00658139, 0.00624646,
     &   0.00593555, 0.00564046, 0.00535982, 0.00509814, 0.00485033,
     &   0.00461439, 0.00438849, 0.00417339, 0.00396871, 0.00377401,
     &   0.00358872, 0.00341282, 0.00324571, 0.00308667, 0.00293539,
     &   0.00279142, 0.00265689, 0.00253014, 0.00240945, 0.00229471,
     &   0.00218526, 0.00207967, 0.00197912, 0.00188315, 0.00179176,
     &   0.00170412, 0.00162064, 0.00154113, 0.00146547, 0.00139330,
     &   0.00132463, 0.00125930, 0.00119713, 0.00113798, 0.00108170/
      data (ww(i,4),i=1,mxwv)/
     &   0.99999887, 0.99999899, 0.99999905, 0.99999911, 0.99999923,
     &   0.99999911, 0.99999928, 0.99999934, 0.99999940, 0.99999946,
     &   0.99999946, 0.99999952, 0.99999952, 0.99999958, 0.99999958,
     &   0.99999964, 0.99999958, 0.99999970, 0.99999970, 0.99999976,
     &   0.99999976, 0.99999976, 0.99999976, 0.99999982, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999982, 0.99999976, 0.99999976,
     &   0.99999976, 0.99999970, 0.99999964, 0.99999958, 0.99999946,
     &   0.99999928, 0.99999893, 0.99999857, 0.99999833, 0.99999821,
     &   0.99999815, 0.99999803, 0.99999756, 0.99999762, 0.99999678,
     &   0.99999624, 0.99999398, 0.99999011, 0.99998540, 0.99998403,
     &   0.99998415, 0.99998647, 0.99998820, 0.99998796, 0.99998474,
     &   0.99997979, 0.99997467, 0.99996984, 0.99996549, 0.99996096,
     &   0.99994606, 0.99988651, 0.99979222, 0.99973822, 0.99974656,
     &   0.99977833, 0.99982131, 0.99986899, 0.99990559, 0.99991339,
     &   0.99989599, 0.99986440, 0.99975067, 0.99943900, 0.99931085,
     &   0.99929076, 0.99929857, 0.99933290, 0.99938214, 0.99936688,
     &   0.99922097, 0.99891806, 0.99795890, 0.99692863, 0.99327600,
     &   0.98449999, 0.98315758, 0.98514807, 0.98965138, 0.99249220,
     &   0.99421740, 0.99531949, 0.99619287, 0.99665838, 0.99695224,
     &   0.99689221, 0.99657279, 0.99601942, 0.99505502, 0.99488884,
     &   0.99227744, 0.97066647, 0.94169754, 0.94376308, 0.95944023,
     &   0.97354060, 0.98052859, 0.98557317, 0.98830819, 0.98977381,
     &   0.99026293, 0.98952681, 0.98784614, 0.98541331, 0.98115838,
     &   0.97525418, 0.96688467, 0.95853454, 0.95671052, 0.95287877,
     &   0.92544538, 0.83741432, 0.65511763, 0.50525880, 0.46748200,
     &   0.47553518, 0.48387331, 0.48764753, 0.48938096, 0.49024406,
     &   0.49463868, 0.51274043, 0.55958045, 0.64279693, 0.71924150,
     &   0.79127181, 0.85442847, 0.89963853, 0.92649579, 0.94236356,
     &   0.94876999, 0.94995117, 0.94805747, 0.94431269, 0.93817466,
     &   0.93237096, 0.92472178, 0.91635615, 0.90675557, 0.89637601,
     &   0.88583744, 0.87477809, 0.86573219, 0.86687821, 0.87461221,
     &   0.88493383, 0.89477652, 0.90533727, 0.91432559, 0.92047620,
     &   0.92187285, 0.91684639, 0.90615088, 0.88299054, 0.83725315,
     &   0.73965657, 0.60575593, 0.54493225, 0.58336729, 0.69001663,
     &   0.75009263, 0.77825075, 0.79611355, 0.80611801, 0.80990529,
     &   0.81139052, 0.81122148, 0.80970329, 0.80790627, 0.80534387,
     &   0.80232823, 0.79829264, 0.79313236, 0.78792620, 0.78180289,
     &   0.77480936, 0.76690537, 0.75775534, 0.74724162, 0.73517931,
     &   0.72140920, 0.70572525, 0.68780404, 0.66697538, 0.64214760,
     &   0.61307013, 0.57478946, 0.53163868, 0.47177818, 0.41189998,
     &   0.35638931, 0.31445366, 0.28130773, 0.26201409, 0.25386393,
     &   0.25262198, 0.25915343, 0.26748633, 0.27683929, 0.28506193,
     &   0.29198697, 0.29868269, 0.30466282, 0.30970261, 0.31425050,
     &   0.31840214, 0.32161641, 0.32471052, 0.32748109, 0.33008018,
     &   0.33227944, 0.33479723, 0.33728719, 0.33959681, 0.34168798,
     &   0.34411466, 0.34630778, 0.34860191, 0.35055777, 0.35233122,
     &   0.35459948, 0.35707170, 0.35939974, 0.36112005, 0.36259350,
     &   0.36365095, 0.36374980, 0.36389840, 0.36407065, 0.36426190,
     &   0.36448589, 0.36495835, 0.36547357, 0.36616361, 0.36719865,
     &   0.36831990, 0.36836678, 0.36844605, 0.36841890, 0.36834788,
     &   0.36802483, 0.36735117, 0.36634630, 0.36470050, 0.36277446,
     &   0.36010337, 0.35680372, 0.35215285, 0.34676129, 0.34010065,
     &   0.33284795, 0.32508805, 0.31697530, 0.30872646, 0.30042335,
     &   0.29193345, 0.28305614, 0.27396300, 0.26482034, 0.25575772,
     &   0.24650718, 0.23714961, 0.22872876, 0.22088939, 0.21355106,
     &   0.20646422, 0.20002249, 0.19430555, 0.18930928, 0.18471621,
     &   0.18057714, 0.17685220, 0.17352052, 0.17076226, 0.16865648,
     &   0.16655932, 0.16434015, 0.16226850, 0.16048065, 0.15872598,
     &   0.15737888, 0.15592508, 0.15425314, 0.15251103, 0.15086417,
     &   0.14916088, 0.14762111, 0.14599922, 0.14414302, 0.14217509,
     &   0.13998438, 0.13779536, 0.13561723, 0.13342257, 0.13121460,
     &   0.12892659, 0.12656879, 0.12411072, 0.12158048, 0.11906129,
     &   0.11660824, 0.11433789, 0.11210244, 0.10970278, 0.10729378,
     &   0.10491285, 0.10256008, 0.10002839, 0.09742652, 0.09484830,
     &   0.09230429, 0.08967441, 0.08715999, 0.08471477, 0.08221217,
     &   0.07964855, 0.07707956, 0.07436566, 0.07173564, 0.06918841,
     &   0.06672274, 0.06433730, 0.06164570, 0.05897395, 0.05640470,
     &   0.05393530, 0.05156305, 0.04932224, 0.04717493, 0.04511272,
     &   0.04313302, 0.04123148, 0.03940355, 0.03765094, 0.03597111,
     &   0.03435239, 0.03274507, 0.03120859, 0.02974024, 0.02833720,
     &   0.02699645, 0.02571607, 0.02449361, 0.02332157, 0.02219959,
     &   0.02112947, 0.02010402, 0.01910548, 0.01815485, 0.01724998,
     &   0.01640845, 0.01560817, 0.01484566, 0.01413354, 0.01345804,
     &   0.01281384, 0.01219609, 0.01160701, 0.01104566, 0.01051094,
     &   0.01000144, 0.00951716, 0.00905655, 0.00861770, 0.00819981,
     &   0.00780170, 0.00742938, 0.00707828, 0.00674368, 0.00642529,
     &   0.00612135, 0.00582790, 0.00554824, 0.00528112, 0.00502660,
     &   0.00478233, 0.00454951, 0.00432765, 0.00411640, 0.00391478,
     &   0.00372285, 0.00354015, 0.00336623, 0.00320065, 0.00304307/
      data (ww(i,5),i=1,mxwv)/
     &   0.99999827, 0.99999851, 0.99999869, 0.99999881, 0.99999881,
     &   0.99999905, 0.99999899, 0.99999911, 0.99999917, 0.99999923,
     &   0.99999893, 0.99999923, 0.99999934, 0.99999940, 0.99999946,
     &   0.99999952, 0.99999946, 0.99999958, 0.99999958, 0.99999964,
     &   0.99999970, 0.99999970, 0.99999970, 0.99999976, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999976, 0.99999970, 0.99999970,
     &   0.99999964, 0.99999958, 0.99999952, 0.99999940, 0.99999928,
     &   0.99999905, 0.99999845, 0.99999791, 0.99999768, 0.99999768,
     &   0.99999762, 0.99999738, 0.99999690, 0.99999642, 0.99999624,
     &   0.99999493, 0.99999201, 0.99998295, 0.99997985, 0.99997914,
     &   0.99997908, 0.99998230, 0.99998391, 0.99998373, 0.99997807,
     &   0.99997193, 0.99996245, 0.99995834, 0.99995255, 0.99994677,
     &   0.99992687, 0.99984056, 0.99970990, 0.99963808, 0.99965358,
     &   0.99968612, 0.99975443, 0.99981660, 0.99986738, 0.99987733,
     &   0.99985737, 0.99979556, 0.99965656, 0.99920702, 0.99904925,
     &   0.99900645, 0.99902117, 0.99906808, 0.99913728, 0.99910432,
     &   0.99889934, 0.99847943, 0.99714142, 0.99570125, 0.99066454,
     &   0.97868037, 0.97683543, 0.97951096, 0.98563069, 0.98951364,
     &   0.99188161, 0.99339950, 0.99460733, 0.99525052, 0.99565774,
     &   0.99556446, 0.99510586, 0.99431616, 0.99294412, 0.99269658,
     &   0.98900241, 0.95917624, 0.92044318, 0.92303604, 0.94375324,
     &   0.96278375, 0.97235131, 0.97934133, 0.98315072, 0.98518610,
     &   0.98583293, 0.98470944, 0.98219794, 0.97855645, 0.97220153,
     &   0.96333444, 0.95069396, 0.93778253, 0.93398577, 0.92673880,
     &   0.88355070, 0.76343107, 0.60543478, 0.50374311, 0.48122457,
     &   0.48914397, 0.49653402, 0.49924690, 0.50052184, 0.50034410,
     &   0.50020581, 0.50602216, 0.53118163, 0.59188259, 0.65918767,
     &   0.73197234, 0.80295813, 0.85798895, 0.89238095, 0.91332805,
     &   0.92149520, 0.92226446, 0.91853690, 0.91206974, 0.90206772,
     &   0.89267725, 0.88071656, 0.86798245, 0.85384184, 0.83908880,
     &   0.82468057, 0.81015295, 0.79879010, 0.80100536, 0.81207871,
     &   0.82696491, 0.84160978, 0.85761040, 0.87177008, 0.88230020,
     &   0.88655806, 0.88261306, 0.87232518, 0.84883171, 0.80405754,
     &   0.71336055, 0.59438878, 0.53352088, 0.54631108, 0.62969011,
     &   0.69243264, 0.72668505, 0.75047392, 0.76572019, 0.77394283,
     &   0.77938986, 0.78290725, 0.78480917, 0.78634250, 0.78703117,
     &   0.78727025, 0.78648353, 0.78458613, 0.78265750, 0.77990109,
     &   0.77636588, 0.77205396, 0.76665354, 0.76007897, 0.75214350,
     &   0.74276060, 0.73174030, 0.71876371, 0.70330232, 0.68425786,
     &   0.66133195, 0.62993312, 0.59300065, 0.53919178, 0.48265457,
     &   0.42755735, 0.38433865, 0.34895119, 0.32762694, 0.31809533,
     &   0.31612349, 0.32215178, 0.33005863, 0.33886451, 0.34648415,
     &   0.35280025, 0.35880163, 0.36407465, 0.36845443, 0.37235758,
     &   0.37587947, 0.37859002, 0.38117957, 0.38349196, 0.38565677,
     &   0.38748786, 0.38957593, 0.39164153, 0.39358085, 0.39534932,
     &   0.39740473, 0.39932731, 0.40133637, 0.40315419, 0.40482590,
     &   0.40692589, 0.40932977, 0.41167146, 0.41358945, 0.41542530,
     &   0.41710067, 0.41784167, 0.41865551, 0.41950476, 0.42038724,
     &   0.42132595, 0.42249408, 0.42372724, 0.42520896, 0.42715588,
     &   0.42921808, 0.43038887, 0.43161848, 0.43283346, 0.43406591,
     &   0.43513489, 0.43595809, 0.43651140, 0.43651205, 0.43628186,
     &   0.43541083, 0.43393400, 0.43113503, 0.42754358, 0.42258534,
     &   0.41690972, 0.41059387, 0.40375650, 0.39665961, 0.38939673,
     &   0.38182691, 0.37371078, 0.36518854, 0.35645732, 0.34769824,
     &   0.33852866, 0.32902873, 0.32039779, 0.31233096, 0.30475488,
     &   0.29733425, 0.29055685, 0.28456804, 0.27942029, 0.27471524,
     &   0.27052361, 0.26681754, 0.26358268, 0.26102126, 0.25932878,
     &   0.25768870, 0.25590375, 0.25428963, 0.25301823, 0.25180683,
     &   0.25120455, 0.25046924, 0.24947682, 0.24838723, 0.24742316,
     &   0.24638113, 0.24560864, 0.24472474, 0.24355973, 0.24222068,
     &   0.24054006, 0.23884106, 0.23713596, 0.23538755, 0.23359150,
     &   0.23166233, 0.22958685, 0.22731146, 0.22487009, 0.22237784,
     &   0.21990776, 0.21770556, 0.21551722, 0.21299908, 0.21039037,
     &   0.20776133, 0.20511732, 0.20208521, 0.19882190, 0.19550437,
     &   0.19215217, 0.18852834, 0.18501490, 0.18153778, 0.17784585,
     &   0.17392287, 0.16987768, 0.16543354, 0.16103637, 0.15669055,
     &   0.15240027, 0.14816944, 0.14316705, 0.13808939, 0.13312280,
     &   0.12827019, 0.12353409, 0.11899475, 0.11458165, 0.11028384,
     &   0.10610224, 0.10203318, 0.09807210, 0.09422879, 0.09050281,
     &   0.08687121, 0.08321727, 0.07968922, 0.07628519, 0.07300249,
     &   0.06983741, 0.06678957, 0.06385642, 0.06102223, 0.05828896,
     &   0.05566394, 0.05313128, 0.05064725, 0.04826819, 0.04599070,
     &   0.04386223, 0.04182776, 0.03987980, 0.03805298, 0.03631263,
     &   0.03464588, 0.03304086, 0.03150441, 0.03003492, 0.02863020,
     &   0.02728725, 0.02600678, 0.02478521, 0.02361796, 0.02250339,
     &   0.02143877, 0.02044085, 0.01949774, 0.01859690, 0.01773790,
     &   0.01691617, 0.01612116, 0.01536204, 0.01463568, 0.01394237,
     &   0.01327586, 0.01263957, 0.01203232, 0.01145329, 0.01089989,
     &   0.01037237, 0.00986963, 0.00939046, 0.00893374, 0.00849863/
      data (ww(i,6),i=1,mxwv)/
     &   0.99999779, 0.99999803, 0.99999815, 0.99999833, 0.99999851,
     &   0.99999863, 0.99999869, 0.99999881, 0.99999887, 0.99999887,
     &   0.99999899, 0.99999905, 0.99999911, 0.99999917, 0.99999928,
     &   0.99999928, 0.99999934, 0.99999940, 0.99999940, 0.99999952,
     &   0.99999958, 0.99999958, 0.99999964, 0.99999970, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999964, 0.99999958, 0.99999958,
     &   0.99999946, 0.99999940, 0.99999928, 0.99999917, 0.99999899,
     &   0.99999851, 0.99999797, 0.99999714, 0.99999696, 0.99999672,
     &   0.99999666, 0.99999636, 0.99999577, 0.99999517, 0.99999475,
     &   0.99999285, 0.99998879, 0.99998069, 0.99997270, 0.99997175,
     &   0.99997175, 0.99997509, 0.99997723, 0.99997783, 0.99997085,
     &   0.99996144, 0.99995142, 0.99994242, 0.99993420, 0.99992651,
     &   0.99989372, 0.99978262, 0.99960804, 0.99951243, 0.99952787,
     &   0.99957955, 0.99966121, 0.99974710, 0.99981964, 0.99982995,
     &   0.99980646, 0.99973977, 0.99951392, 0.99893206, 0.99868143,
     &   0.99864382, 0.99865776, 0.99871540, 0.99881184, 0.99877453,
     &   0.99848175, 0.99791205, 0.99608070, 0.99410695, 0.98723787,
     &   0.97100145, 0.96852177, 0.97212708, 0.98039186, 0.98565477,
     &   0.98888034, 0.99093372, 0.99257398, 0.99343705, 0.99400586,
     &   0.99386013, 0.99322599, 0.99212170, 0.99023223, 0.98987991,
     &   0.98480844, 0.94469929, 0.89431983, 0.89759159, 0.92429322,
     &   0.94930178, 0.96203774, 0.97142589, 0.97656375, 0.97930455,
     &   0.98014748, 0.97854900, 0.97503030, 0.96994895, 0.96115196,
     &   0.94895494, 0.93172091, 0.91418493, 0.90859026, 0.89802313,
     &   0.83923179, 0.68789148, 0.54769576, 0.49790719, 0.49115402,
     &   0.50062710, 0.50812578, 0.51078123, 0.51220894, 0.51208192,
     &   0.51082146, 0.51121312, 0.52162242, 0.55934936, 0.61264759,
     &   0.68033111, 0.75452387, 0.81690586, 0.85782444, 0.88340223,
     &   0.89320207, 0.89352912, 0.88795704, 0.87872696, 0.86482048,
     &   0.85161948, 0.83504152, 0.81745207, 0.79813778, 0.77819657,
     &   0.75894421, 0.73990202, 0.72509640, 0.72633702, 0.73800731,
     &   0.75453442, 0.77127439, 0.79036361, 0.80777729, 0.82094085,
     &   0.82601845, 0.82028323, 0.80680519, 0.77821529, 0.72972155,
     &   0.64642614, 0.55490118, 0.50947350, 0.50876105, 0.55671793,
     &   0.60750794, 0.64055783, 0.66612941, 0.68434411, 0.69578612,
     &   0.70453066, 0.71143627, 0.71671116, 0.72173482, 0.72598380,
     &   0.72992301, 0.73290980, 0.73484367, 0.73683637, 0.73812288,
     &   0.73873734, 0.73872375, 0.73776776, 0.73581129, 0.73265004,
     &   0.72829282, 0.72257310, 0.71518564, 0.70580566, 0.69335550,
     &   0.67759717, 0.65455604, 0.62577599, 0.58137441, 0.53237879,
     &   0.48222941, 0.44152692, 0.40703008, 0.38548797, 0.37531108,
     &   0.37271580, 0.37758833, 0.38429201, 0.39171141, 0.39801484,
     &   0.40317157, 0.40795425, 0.41206545, 0.41538501, 0.41829151,
     &   0.42083937, 0.42274860, 0.42455667, 0.42612034, 0.42755932,
     &   0.42876539, 0.43012545, 0.43145454, 0.43267551, 0.43378356,
     &   0.43507403, 0.43627325, 0.43754238, 0.43870670, 0.43979588,
     &   0.44118357, 0.44283551, 0.44449821, 0.44594786, 0.44744259,
     &   0.44898903, 0.44985032, 0.45080546, 0.45181695, 0.45288339,
     &   0.45402959, 0.45536569, 0.45678768, 0.45849144, 0.46070597,
     &   0.46306923, 0.46486565, 0.46676037, 0.46875286, 0.47084397,
     &   0.47290668, 0.47488853, 0.47672343, 0.47819361, 0.47953582,
     &   0.48045415, 0.48088700, 0.48021448, 0.47880489, 0.47610408,
     &   0.47264701, 0.46849397, 0.46370420, 0.45856440, 0.45316905,
     &   0.44739127, 0.44098380, 0.43402719, 0.42673072, 0.41931728,
     &   0.41131791, 0.40280104, 0.39493766, 0.38754988, 0.38058457,
     &   0.37365144, 0.36725846, 0.36160558, 0.35680848, 0.35244104,
     &   0.34858087, 0.34522140, 0.34235722, 0.34015980, 0.33893844,
     &   0.33784586, 0.33664334, 0.33562192, 0.33495161, 0.33438855,
     &   0.33457017, 0.33464342, 0.33451194, 0.33430308, 0.33425161,
     &   0.33414680, 0.33441204, 0.33459413, 0.33457085, 0.33438531,
     &   0.33385202, 0.33332759, 0.33282652, 0.33231512, 0.33178043,
     &   0.33115318, 0.33038655, 0.32941738, 0.32827669, 0.32707641,
     &   0.32587686, 0.32505047, 0.32428128, 0.32314694, 0.32190636,
     &   0.32065806, 0.31942075, 0.31771848, 0.31568480, 0.31356093,
     &   0.31136954, 0.30876270, 0.30625364, 0.30376503, 0.30092660,
     &   0.29768655, 0.29418859, 0.29003516, 0.28581765, 0.28153861,
     &   0.27720094, 0.27280796, 0.26699835, 0.26086479, 0.25470918,
     &   0.24853899, 0.24236177, 0.23629387, 0.23024882, 0.22421750,
     &   0.21820731, 0.21221797, 0.20624751, 0.20032099, 0.19444548,
     &   0.18858343, 0.18250582, 0.17651449, 0.17061552, 0.16481219,
     &   0.15910415, 0.15350497, 0.14801894, 0.14262158, 0.13732573,
     &   0.13215627, 0.12708600, 0.12202205, 0.11710132, 0.11232451,
     &   0.10780685, 0.10343372, 0.09919482, 0.09517878, 0.09131093,
     &   0.08756629, 0.08392116, 0.08039680, 0.07699367, 0.07371057,
     &   0.07054438, 0.06750056, 0.06457378, 0.06175584, 0.05904507,
     &   0.05643783, 0.05397955, 0.05164262, 0.04939717, 0.04724408,
     &   0.04517306, 0.04315819, 0.04122469, 0.03936569, 0.03758327,
     &   0.03586195, 0.03421184, 0.03263084, 0.03111764, 0.02966609,
     &   0.02827772, 0.02695023, 0.02568108, 0.02446782, 0.02330868/
      data (ww(i,7),i=1,mxwv)/
     &   0.99999696, 0.99999726, 0.99999750, 0.99999762, 0.99999797,
     &   0.99999809, 0.99999815, 0.99999827, 0.99999839, 0.99999851,
     &   0.99999857, 0.99999869, 0.99999851, 0.99999887, 0.99999893,
     &   0.99999905, 0.99999911, 0.99999917, 0.99999923, 0.99999934,
     &   0.99999940, 0.99999946, 0.99999952, 0.99999958, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999946, 0.99999946, 0.99999940,
     &   0.99999928, 0.99999917, 0.99999905, 0.99999887, 0.99999857,
     &   0.99999809, 0.99999708, 0.99999601, 0.99999577, 0.99999547,
     &   0.99999529, 0.99999505, 0.99999428, 0.99999380, 0.99999285,
     &   0.99999022, 0.99998415, 0.99997383, 0.99996281, 0.99996006,
     &   0.99995869, 0.99996525, 0.99996990, 0.99996901, 0.99996042,
     &   0.99994701, 0.99993157, 0.99992120, 0.99991137, 0.99989760,
     &   0.99985856, 0.99970168, 0.99946046, 0.99932796, 0.99934280,
     &   0.99941963, 0.99953932, 0.99965447, 0.99974871, 0.99977320,
     &   0.99972832, 0.99964190, 0.99935168, 0.99853688, 0.99819899,
     &   0.99813479, 0.99815875, 0.99823213, 0.99836111, 0.99831593,
     &   0.99793899, 0.99714297, 0.99460208, 0.99195045, 0.98254484,
     &   0.96055329, 0.95722944, 0.96207827, 0.97324985, 0.98040140,
     &   0.98476905, 0.98758531, 0.98984998, 0.99102640, 0.99176180,
     &   0.99160558, 0.99072623, 0.98922503, 0.98664337, 0.98614794,
     &   0.97925824, 0.92574805, 0.86137813, 0.86548412, 0.89930022,
     &   0.93179733, 0.94863033, 0.96115303, 0.96803856, 0.97171205,
     &   0.97282249, 0.97062778, 0.96583647, 0.95894688, 0.94711155,
     &   0.93085378, 0.90819287, 0.88545144, 0.87800407, 0.86414713,
     &   0.79163742, 0.62828273, 0.51430357, 0.49666989, 0.49972558,
     &   0.51026201, 0.51780307, 0.52047658, 0.52198386, 0.52193785,
     &   0.52046502, 0.51892745, 0.52125508, 0.53972298, 0.57556754,
     &   0.63175446, 0.70367491, 0.77106827, 0.81826645, 0.84883434,
     &   0.86063880, 0.86081958, 0.85372406, 0.84218729, 0.82511300,
     &   0.80907834, 0.78929752, 0.76866978, 0.74647868, 0.72404939,
     &   0.70285225, 0.68236494, 0.66668802, 0.66723871, 0.67824376,
     &   0.69439167, 0.71106184, 0.73064148, 0.74874330, 0.76213342,
     &   0.76590765, 0.75642806, 0.73726624, 0.70047885, 0.64488518,
     &   0.57066619, 0.51562226, 0.49563545, 0.49591392, 0.51720703,
     &   0.54778099, 0.57052344, 0.58946574, 0.60341918, 0.61214048,
     &   0.61896259, 0.62454045, 0.62902325, 0.63367558, 0.63800019,
     &   0.64245516, 0.64642900, 0.64982152, 0.65369338, 0.65734094,
     &   0.66078472, 0.66408938, 0.66694117, 0.66928709, 0.67088288,
     &   0.67179817, 0.67186391, 0.67076021, 0.66836745, 0.66362113,
     &   0.65635419, 0.64339846, 0.62475526, 0.59286040, 0.55517751,
     &   0.51424795, 0.47986630, 0.44967666, 0.43016621, 0.42056099,
     &   0.41787335, 0.42152852, 0.42683262, 0.43264690, 0.43748897,
     &   0.44144249, 0.44499472, 0.44797298, 0.45026886, 0.45224181,
     &   0.45387471, 0.45502672, 0.45611566, 0.45696723, 0.45771068,
     &   0.45832485, 0.45898971, 0.45960811, 0.46009460, 0.46051937,
     &   0.46100765, 0.46136740, 0.46178961, 0.46209058, 0.46239656,
     &   0.46285695, 0.46339101, 0.46396005, 0.46445397, 0.46500123,
     &   0.46563107, 0.46599215, 0.46644634, 0.46697384, 0.46756977,
     &   0.46825263, 0.46907449, 0.46998698, 0.47113091, 0.47268438,
     &   0.47440302, 0.47591543, 0.47756547, 0.47939780, 0.48140597,
     &   0.48352951, 0.48575589, 0.48800933, 0.49016392, 0.49235114,
     &   0.49442068, 0.49624112, 0.49736533, 0.49795496, 0.49754000,
     &   0.49646416, 0.49475563, 0.49240166, 0.48966914, 0.48664290,
     &   0.48322368, 0.47918665, 0.47453797, 0.46947220, 0.46422803,
     &   0.45830297, 0.45174348, 0.44552276, 0.43962339, 0.43401754,
     &   0.42830691, 0.42294353, 0.41815439, 0.41410413, 0.41039804,
     &   0.40710753, 0.40424913, 0.40182683, 0.39994857, 0.39899695,
     &   0.39822730, 0.39739525, 0.39671689, 0.39633107, 0.39607856,
     &   0.39658380, 0.39701837, 0.39733472, 0.39760372, 0.39803261,
     &   0.39844099, 0.39926174, 0.40004364, 0.40074477, 0.40132892,
     &   0.40162846, 0.40197185, 0.40237418, 0.40281451, 0.40327391,
     &   0.40372035, 0.40407923, 0.40429342, 0.40438780, 0.40444684,
     &   0.40450126, 0.40499541, 0.40561378, 0.40594786, 0.40621892,
     &   0.40654138, 0.40695241, 0.40698671, 0.40671328, 0.40639758,
     &   0.40606648, 0.40533641, 0.40474132, 0.40423581, 0.40341619,
     &   0.40220651, 0.40075895, 0.39867204, 0.39651304, 0.39428037,
     &   0.39197248, 0.38958779, 0.38550645, 0.38096195, 0.37631887,
     &   0.37157178, 0.36672136, 0.36184514, 0.35688305, 0.35182512,
     &   0.34667295, 0.34141862, 0.33605176, 0.33059773, 0.32505965,
     &   0.31937593, 0.31319681, 0.30695316, 0.30065057, 0.29428700,
     &   0.28785008, 0.28137523, 0.27486938, 0.26829374, 0.26166910,
     &   0.25503841, 0.24835582, 0.24145187, 0.23457880, 0.22774509,
     &   0.22115138, 0.21462186, 0.20814767, 0.20190477, 0.19576646,
     &   0.18969476, 0.18365113, 0.17768589, 0.17180875, 0.16602533,
     &   0.16034096, 0.15477599, 0.14932926, 0.14399321, 0.13876948,
     &   0.13366316, 0.12878339, 0.12407988, 0.11949507, 0.11503880,
     &   0.11069335, 0.10640509, 0.10223781, 0.09818173, 0.09424719,
     &   0.09040257, 0.08667712, 0.08307081, 0.07958516, 0.07620896,
     &   0.07295066, 0.06980845, 0.06677964, 0.06386153, 0.06105271/
      data (ww(i,8),i=1,mxwv)/
     &   0.99999571, 0.99999619, 0.99999648, 0.99999678, 0.99999714,
     &   0.99999738, 0.99999750, 0.99999762, 0.99999774, 0.99999791,
     &   0.99999803, 0.99999821, 0.99999833, 0.99999839, 0.99999827,
     &   0.99999863, 0.99999881, 0.99999887, 0.99999899, 0.99999905,
     &   0.99999911, 0.99999923, 0.99999934, 0.99999940, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999928, 0.99999923, 0.99999911,
     &   0.99999899, 0.99999887, 0.99999869, 0.99999845, 0.99999815,
     &   0.99999738, 0.99999613, 0.99999458, 0.99999380, 0.99999374,
     &   0.99999344, 0.99999273, 0.99999201, 0.99999106, 0.99998963,
     &   0.99998653, 0.99997860, 0.99996340, 0.99994862, 0.99994433,
     &   0.99994594, 0.99995279, 0.99995714, 0.99995506, 0.99994540,
     &   0.99992621, 0.99990547, 0.99988961, 0.99987245, 0.99985975,
     &   0.99980903, 0.99959201, 0.99924839, 0.99907559, 0.99910349,
     &   0.99920541, 0.99935955, 0.99952328, 0.99965537, 0.99968237,
     &   0.99963135, 0.99950504, 0.99909872, 0.99796885, 0.99752194,
     &   0.99742806, 0.99746478, 0.99758458, 0.99774879, 0.99769086,
     &   0.99715376, 0.99606317, 0.99260443, 0.98891127, 0.97606587,
     &   0.94637978, 0.94197839, 0.94842881, 0.96346414, 0.97316384,
     &   0.97913885, 0.98297501, 0.98605442, 0.98769617, 0.98873019,
     &   0.98846889, 0.98728544, 0.98521662, 0.98170143, 0.98104608,
     &   0.97165918, 0.90081954, 0.82066298, 0.82560819, 0.86722666,
     &   0.90869105, 0.93071711, 0.94733310, 0.95655078, 0.96148878,
     &   0.96298546, 0.96002597, 0.95359266, 0.94438517, 0.92870623,
     &   0.90745121, 0.87838811, 0.84988409, 0.84060633, 0.82353926,
     &   0.73942572, 0.58155888, 0.50410366, 0.50006592, 0.50712168,
     &   0.51790988, 0.52533835, 0.52800852, 0.52954912, 0.52956444,
     &   0.52812338, 0.52614981, 0.52527016, 0.53153592, 0.55081689,
     &   0.59057903, 0.65284228, 0.72026330, 0.77196527, 0.80724251,
     &   0.82120597, 0.82138956, 0.81291533, 0.79930365, 0.77951872,
     &   0.76131135, 0.73937720, 0.71712875, 0.69393373, 0.67128944,
     &   0.65065366, 0.63144523, 0.61724895, 0.61762714, 0.62734431,
     &   0.64203137, 0.65763968, 0.67656338, 0.69452238, 0.70791548,
     &   0.71118766, 0.70025867, 0.67912430, 0.64063907, 0.58693731,
     &   0.52763253, 0.49975356, 0.49687436, 0.50038028, 0.50803709,
     &   0.52313036, 0.53619015, 0.54788685, 0.55658621, 0.56159216,
     &   0.56522149, 0.56787872, 0.56969255, 0.57163125, 0.57330906,
     &   0.57509106, 0.57652462, 0.57757354, 0.57916224, 0.58074737,
     &   0.58242452, 0.58431560, 0.58625752, 0.58829898, 0.59032673,
     &   0.59249544, 0.59475237, 0.59689248, 0.59898192, 0.60017991,
     &   0.60037875, 0.59744680, 0.58990473, 0.57293612, 0.54981077,
     &   0.52197582, 0.49737710, 0.47477964, 0.45970696, 0.45224896,
     &   0.45038220, 0.45341295, 0.45773000, 0.46232629, 0.46607372,
     &   0.46918657, 0.47188887, 0.47411263, 0.47573653, 0.47712332,
     &   0.47818312, 0.47886923, 0.47953627, 0.47995767, 0.48028380,
     &   0.48055974, 0.48081815, 0.48102009, 0.48105374, 0.48106185,
     &   0.48104978, 0.48084226, 0.48070434, 0.48037475, 0.48011309,
     &   0.47990721, 0.47955656, 0.47922388, 0.47885057, 0.47844091,
     &   0.47797751, 0.47761700, 0.47731656, 0.47707853, 0.47689968,
     &   0.47677901, 0.47674122, 0.47676498, 0.47688511, 0.47717208,
     &   0.47758165, 0.47798744, 0.47851592, 0.47919846, 0.48004359,
     &   0.48104617, 0.48222280, 0.48354158, 0.48496580, 0.48655117,
     &   0.48827028, 0.49001774, 0.49156687, 0.49292228, 0.49377176,
     &   0.49424085, 0.49431369, 0.49391729, 0.49323365, 0.49231362,
     &   0.49109134, 0.48939493, 0.48716658, 0.48454672, 0.48173919,
     &   0.47830203, 0.47425243, 0.47023952, 0.46637306, 0.46264949,
     &   0.45873535, 0.45496231, 0.45153886, 0.44863561, 0.44595274,
     &   0.44354466, 0.44144091, 0.43965071, 0.43822026, 0.43750161,
     &   0.43695912, 0.43639296, 0.43592978, 0.43566197, 0.43551177,
     &   0.43596619, 0.43638298, 0.43675491, 0.43710467, 0.43758050,
     &   0.43805769, 0.43889073, 0.43972120, 0.44057271, 0.44136351,
     &   0.44196999, 0.44263929, 0.44338575, 0.44420338, 0.44507301,
     &   0.44600129, 0.44690421, 0.44774032, 0.44852549, 0.44930539,
     &   0.45007688, 0.45128375, 0.45266217, 0.45388472, 0.45509908,
     &   0.45641956, 0.45789796, 0.45915303, 0.46017474, 0.46121436,
     &   0.46229985, 0.46306923, 0.46399617, 0.46507964, 0.46594489,
     &   0.46650687, 0.46690693, 0.46681890, 0.46668798, 0.46651277,
     &   0.46629190, 0.46602389, 0.46411601, 0.46177402, 0.45933539,
     &   0.45679948, 0.45416573, 0.45144036, 0.44862196, 0.44570914,
     &   0.44270119, 0.43958747, 0.43635434, 0.43302307, 0.42959279,
     &   0.42599064, 0.42181838, 0.41755345, 0.41316116, 0.40866005,
     &   0.40400085, 0.39923838, 0.39437270, 0.38935030, 0.38418511,
     &   0.37891829, 0.37347856, 0.36762190, 0.36167359, 0.35563606,
     &   0.34972176, 0.34374201, 0.33768234, 0.33177167, 0.32584321,
     &   0.31984174, 0.31370595, 0.30750200, 0.30123872, 0.29491660,
     &   0.28854883, 0.28216323, 0.27575970, 0.26932919, 0.26286006,
     &   0.25637922, 0.25007147, 0.24386452, 0.23767109, 0.23151650,
     &   0.22536871, 0.21913663, 0.21293789, 0.20676257, 0.20063575,
     &   0.19450325, 0.18842950, 0.18242370, 0.17649744, 0.17063391,
     &   0.16486311, 0.15919085, 0.15362130, 0.14815830, 0.14280744/
      data (ww(i,9),i=1,mxwv)/
     &   0.99999404, 0.99999464, 0.99999475, 0.99999559, 0.99999607,
     &   0.99999624, 0.99999654, 0.99999666, 0.99999684, 0.99999708,
     &   0.99999726, 0.99999744, 0.99999768, 0.99999785, 0.99999774,
     &   0.99999809, 0.99999827, 0.99999845, 0.99999857, 0.99999869,
     &   0.99999881, 0.99999893, 0.99999905, 0.99999917, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999911, 0.99999887, 0.99999875,
     &   0.99999863, 0.99999845, 0.99999815, 0.99999785, 0.99999744,
     &   0.99999636, 0.99999446, 0.99999261, 0.99999166, 0.99999130,
     &   0.99999106, 0.99999034, 0.99998897, 0.99998784, 0.99998546,
     &   0.99998188, 0.99997008, 0.99994898, 0.99992692, 0.99992388,
     &   0.99992508, 0.99993426, 0.99994141, 0.99993998, 0.99992335,
     &   0.99989915, 0.99987030, 0.99984717, 0.99982709, 0.99980617,
     &   0.99973416, 0.99942654, 0.99896801, 0.99871832, 0.99875355,
     &   0.99889970, 0.99911547, 0.99934524, 0.99951988, 0.99956429,
     &   0.99948490, 0.99931473, 0.99875510, 0.99719375, 0.99656361,
     &   0.99644774, 0.99648577, 0.99665350, 0.99689418, 0.99681121,
     &   0.99606395, 0.99454731, 0.98977774, 0.98470414, 0.96713376,
     &   0.92733806, 0.92149788, 0.93006569, 0.95011801, 0.96320558,
     &   0.97134346, 0.97659338, 0.98080754, 0.98305422, 0.98446804,
     &   0.98412359, 0.98248798, 0.97970134, 0.97487390, 0.97397560,
     &   0.96123880, 0.86875015, 0.77265191, 0.77831656, 0.82735258,
     &   0.87873805, 0.90701669, 0.92878002, 0.94100970, 0.94760847,
     &   0.94960958, 0.94565701, 0.93708622, 0.92492121, 0.90442699,
     &   0.87717646, 0.84091264, 0.80649567, 0.79549813, 0.77560693,
     &   0.68449700, 0.54871678, 0.50434560, 0.50493133, 0.51308179,
     &   0.52368975, 0.53095746, 0.53362697, 0.53519613, 0.53526932,
     &   0.53390634, 0.53193331, 0.53018475, 0.53075910, 0.53834158,
     &   0.56128734, 0.60773057, 0.66828561, 0.72060710, 0.75891036,
     &   0.77460575, 0.77478981, 0.76517802, 0.74997932, 0.72840691,
     &   0.70910048, 0.68656749, 0.66454720, 0.64252847, 0.62200046,
     &   0.60417295, 0.58837819, 0.57722980, 0.57747865, 0.58499628,
     &   0.59679538, 0.60985690, 0.62638408, 0.64270645, 0.65521634,
     &   0.65817130, 0.64749140, 0.62755817, 0.59349418, 0.55094743,
     &   0.51251608, 0.50073999, 0.50425029, 0.50891298, 0.51045990,
     &   0.51587820, 0.52185225, 0.52787751, 0.53257489, 0.53516585,
     &   0.53693587, 0.53807092, 0.53863579, 0.53923851, 0.53960818,
     &   0.53996527, 0.53999466, 0.53966260, 0.53960264, 0.53941596,
     &   0.53917396, 0.53895575, 0.53866750, 0.53837222, 0.53804654,
     &   0.53789169, 0.53794116, 0.53822345, 0.53894281, 0.53982806,
     &   0.54108602, 0.54187447, 0.54088992, 0.53577495, 0.52640712,
     &   0.51261115, 0.49915206, 0.48585257, 0.47674894, 0.47262692,
     &   0.47235355, 0.47552928, 0.47947150, 0.48344275, 0.48661661,
     &   0.48932725, 0.49162400, 0.49350846, 0.49484307, 0.49600008,
     &   0.49684086, 0.49736652, 0.49790561, 0.49819306, 0.49839520,
     &   0.49859226, 0.49874216, 0.49883372, 0.49873531, 0.49863249,
     &   0.49847269, 0.49807492, 0.49775848, 0.49720061, 0.49674633,
     &   0.49630898, 0.49560115, 0.49489620, 0.49414292, 0.49327517,
     &   0.49222109, 0.49145856, 0.49072209, 0.49002972, 0.48937556,
     &   0.48874521, 0.48816031, 0.48760155, 0.48701799, 0.48638541,
     &   0.48580870, 0.48523387, 0.48471850, 0.48424196, 0.48383030,
     &   0.48348591, 0.48322001, 0.48305288, 0.48298237, 0.48303759,
     &   0.48322356, 0.48353454, 0.48391443, 0.48435351, 0.48473415,
     &   0.48506218, 0.48530582, 0.48540068, 0.48540348, 0.48532408,
     &   0.48512626, 0.48471555, 0.48402339, 0.48310295, 0.48206130,
     &   0.48063084, 0.47879905, 0.47686487, 0.47494754, 0.47305602,
     &   0.47099811, 0.46895677, 0.46706593, 0.46544430, 0.46393085,
     &   0.46256009, 0.46135595, 0.46032673, 0.45949793, 0.45906067,
     &   0.45872283, 0.45837650, 0.45809096, 0.45791757, 0.45780969,
     &   0.45801291, 0.45819938, 0.45836237, 0.45851943, 0.45874882,
     &   0.45898536, 0.45941672, 0.45985907, 0.46033314, 0.46079540,
     &   0.46117935, 0.46161947, 0.46212626, 0.46270213, 0.46333757,
     &   0.46405247, 0.46479201, 0.46553540, 0.46629158, 0.46707642,
     &   0.46787009, 0.46899712, 0.47029966, 0.47158030, 0.47291282,
     &   0.47438663, 0.47605723, 0.47768718, 0.47921264, 0.48082471,
     &   0.48254940, 0.48410562, 0.48583555, 0.48777831, 0.48964730,
     &   0.49135771, 0.49301913, 0.49442053, 0.49582791, 0.49723774,
     &   0.49864665, 0.50005138, 0.50007892, 0.49974161, 0.49932608,
     &   0.49883074, 0.49825415, 0.49752435, 0.49670503, 0.49580607,
     &   0.49482647, 0.49375695, 0.49258560, 0.49133003, 0.48998946,
     &   0.48849440, 0.48646173, 0.48433390, 0.48211044, 0.47976923,
     &   0.47725648, 0.47464770, 0.47194314, 0.46909025, 0.46610066,
     &   0.46301225, 0.45974633, 0.45603374, 0.45222092, 0.44830763,
     &   0.44445652, 0.44052249, 0.43649137, 0.43259045, 0.42865169,
     &   0.42461532, 0.42040977, 0.41609955, 0.41168573, 0.40715492,
     &   0.40252465, 0.39781508, 0.39302084, 0.38812730, 0.38308606,
     &   0.37794676, 0.37291804, 0.36791551, 0.36283702, 0.35771403,
     &   0.35248733, 0.34703451, 0.34149152, 0.33584082, 0.33010495,
     &   0.32419968, 0.31820750, 0.31213710, 0.30599910, 0.29975379,
     &   0.29345250, 0.28710207, 0.28070864, 0.27427855, 0.26781899/
      data (ww(i,10),i=1,mxwv)/
     &   0.99999154, 0.99999249, 0.99999315, 0.99999374, 0.99999410,
     &   0.99999481, 0.99999487, 0.99999535, 0.99999547, 0.99999595,
     &   0.99999595, 0.99999642, 0.99999660, 0.99999696, 0.99999720,
     &   0.99999738, 0.99999756, 0.99999774, 0.99999803, 0.99999815,
     &   0.99999833, 0.99999851, 0.99999869, 0.99999887, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999875, 0.99999851, 0.99999833,
     &   0.99999809, 0.99999779, 0.99999714, 0.99999690, 0.99999636,
     &   0.99999493, 0.99999249, 0.99998987, 0.99998844, 0.99998772,
     &   0.99998736, 0.99998623, 0.99998432, 0.99998337, 0.99998015,
     &   0.99997413, 0.99995822, 0.99993020, 0.99989992, 0.99989367,
     &   0.99989611, 0.99990797, 0.99991739, 0.99991751, 0.99989474,
     &   0.99985975, 0.99981785, 0.99978757, 0.99975973, 0.99973071,
     &   0.99962676, 0.99921668, 0.99855906, 0.99821609, 0.99826503,
     &   0.99846816, 0.99876815, 0.99908876, 0.99933749, 0.99939471,
     &   0.99929035, 0.99905360, 0.99827147, 0.99610591, 0.99522638,
     &   0.99506927, 0.99512196, 0.99534708, 0.99567366, 0.99557096,
     &   0.99454027, 0.99244213, 0.98585135, 0.97886097, 0.95490962,
     &   0.90218180, 0.89463973, 0.90574646, 0.93213814, 0.94965965,
     &   0.96064270, 0.96779346, 0.97354442, 0.97671461, 0.97856516,
     &   0.97809803, 0.97585803, 0.97203457, 0.96548039, 0.96426469,
     &   0.94706756, 0.82881528, 0.71952885, 0.72557294, 0.77997142,
     &   0.84104294, 0.87632841, 0.90425920, 0.92024285, 0.92895001,
     &   0.93161029, 0.92637753, 0.91510540, 0.89926368, 0.87306631,
     &   0.83912361, 0.79562330, 0.75616127, 0.74388063, 0.72217172,
     &   0.63179404, 0.52959031, 0.50758821, 0.50938952, 0.51760924,
     &   0.52790254, 0.53501958, 0.53769839, 0.53929943, 0.53942776,
     &   0.53814071, 0.53624463, 0.53438050, 0.53303868, 0.53451931,
     &   0.54466611, 0.57336801, 0.62064832, 0.66825229, 0.70647293,
     &   0.72286558, 0.72301728, 0.71283954, 0.69709510, 0.67542171,
     &   0.65673369, 0.63581055, 0.61632711, 0.59786159, 0.58162230,
     &   0.56834280, 0.55725783, 0.54988527, 0.54997671, 0.55480009,
     &   0.56275725, 0.57203341, 0.58446050, 0.59738922, 0.60768461,
     &   0.61006331, 0.60089445, 0.58450639, 0.55864626, 0.53052944,
     &   0.51033640, 0.50665969, 0.51177692, 0.51659578, 0.51598895,
     &   0.51661372, 0.51827407, 0.52041686, 0.52222663, 0.52314138,
     &   0.52370220, 0.52395427, 0.52392316, 0.52390730, 0.52375799,
     &   0.52357739, 0.52319080, 0.52257162, 0.52206910, 0.52144396,
     &   0.52073109, 0.51995981, 0.51906615, 0.51807833, 0.51698244,
     &   0.51584721, 0.51471019, 0.51359105, 0.51258242, 0.51161897,
     &   0.51092780, 0.51029193, 0.50959748, 0.50818676, 0.50570929,
     &   0.50118840, 0.49608642, 0.49053922, 0.48687029, 0.48602432,
     &   0.48741135, 0.49109644, 0.49503064, 0.49877843, 0.50173390,
     &   0.50431311, 0.50648063, 0.50827461, 0.50955003, 0.51068044,
     &   0.51150548, 0.51204520, 0.51261473, 0.51293415, 0.51317507,
     &   0.51343042, 0.51362926, 0.51377177, 0.51371872, 0.51367104,
     &   0.51355565, 0.51318949, 0.51291168, 0.51237661, 0.51195949,
     &   0.51155007, 0.51083016, 0.51011050, 0.50933880, 0.50842458,
     &   0.50727171, 0.50646877, 0.50567830, 0.50492328, 0.50419760,
     &   0.50348127, 0.50279832, 0.50212294, 0.50138062, 0.50049812,
     &   0.49963945, 0.49874625, 0.49787250, 0.49696398, 0.49605134,
     &   0.49512431, 0.49417606, 0.49324512, 0.49231893, 0.49141866,
     &   0.49051768, 0.48966935, 0.48886353, 0.48813403, 0.48747391,
     &   0.48688352, 0.48634976, 0.48586416, 0.48540962, 0.48497814,
     &   0.48455444, 0.48412001, 0.48365369, 0.48315015, 0.48261616,
     &   0.48199400, 0.48126784, 0.48052007, 0.47976378, 0.47900230,
     &   0.47819948, 0.47742113, 0.47670799, 0.47608343, 0.47551212,
     &   0.47501308, 0.47458851, 0.47424036, 0.47401908, 0.47389984,
     &   0.47377008, 0.47362068, 0.47351608, 0.47348842, 0.47346413,
     &   0.47345230, 0.47342825, 0.47334927, 0.47326836, 0.47321311,
     &   0.47315633, 0.47310504, 0.47305265, 0.47294831, 0.47285077,
     &   0.47273803, 0.47264880, 0.47258931, 0.47255245, 0.47254822,
     &   0.47256935, 0.47261894, 0.47269148, 0.47279370, 0.47293845,
     &   0.47312281, 0.47345018, 0.47387952, 0.47434682, 0.47488499,
     &   0.47553566, 0.47633493, 0.47719988, 0.47809085, 0.47909930,
     &   0.48024616, 0.48139265, 0.48270515, 0.48423266, 0.48583215,
     &   0.48744982, 0.48914790, 0.49084195, 0.49262810, 0.49450317,
     &   0.49646378, 0.49850613, 0.49969435, 0.50067568, 0.50163859,
     &   0.50257909, 0.50349319, 0.50425279, 0.50495934, 0.50562865,
     &   0.50626075, 0.50683790, 0.50735843, 0.50782931, 0.50824797,
     &   0.50855482, 0.50842553, 0.50822258, 0.50794423, 0.50756317,
     &   0.50701421, 0.50638485, 0.50567383, 0.50483686, 0.50388187,
     &   0.50283968, 0.50163400, 0.50000316, 0.49827811, 0.49645847,
     &   0.49463409, 0.49272847, 0.49073365, 0.48884690, 0.48692361,
     &   0.48491400, 0.48275119, 0.48049387, 0.47814044, 0.47567013,
     &   0.47310922, 0.47047171, 0.46775335, 0.46494353, 0.46196574,
     &   0.45889407, 0.45592174, 0.45297226, 0.44995612, 0.44691068,
     &   0.44376299, 0.44039291, 0.43692589, 0.43334460, 0.42966378,
     &   0.42578912, 0.42180189, 0.41770780, 0.41351065, 0.40914690,
     &   0.40467870, 0.40010694, 0.39543277, 0.39065722, 0.38577753/
      data (ww(i,11),i=1,mxwv)/
     &   0.99998826, 0.99998951, 0.99999034, 0.99999130, 0.99999213,
     &   0.99999267, 0.99999315, 0.99999350, 0.99999368, 0.99999428,
     &   0.99999464, 0.99999493, 0.99999541, 0.99999571, 0.99999601,
     &   0.99999630, 0.99999660, 0.99999690, 0.99999714, 0.99999744,
     &   0.99999756, 0.99999791, 0.99999809, 0.99999833, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999827, 0.99999791, 0.99999768,
     &   0.99999726, 0.99999696, 0.99999648, 0.99999589, 0.99999493,
     &   0.99999285, 0.99998951, 0.99998581, 0.99998379, 0.99998283,
     &   0.99998248, 0.99998111, 0.99997783, 0.99997628, 0.99997324,
     &   0.99996394, 0.99994171, 0.99990135, 0.99986047, 0.99985313,
     &   0.99985576, 0.99987149, 0.99988687, 0.99988478, 0.99985260,
     &   0.99980354, 0.99974012, 0.99970430, 0.99966669, 0.99962330,
     &   0.99948180, 0.99891329, 0.99799120, 0.99751437, 0.99758202,
     &   0.99786550, 0.99828392, 0.99872899, 0.99907577, 0.99915826,
     &   0.99900669, 0.99867791, 0.99759334, 0.99457920, 0.99335223,
     &   0.99313205, 0.99321020, 0.99353194, 0.99399441, 0.99383706,
     &   0.99240619, 0.98948658, 0.98038191, 0.97075796, 0.93834168,
     &   0.86975056, 0.86027735, 0.87428302, 0.90826225, 0.93136489,
     &   0.94606501, 0.95572597, 0.96363080, 0.96774822, 0.97040725,
     &   0.96976870, 0.96671301, 0.96150815, 0.95262158, 0.95098943,
     &   0.92799157, 0.78130013, 0.66559464, 0.67143440, 0.72704762,
     &   0.79553103, 0.83779490, 0.87257665, 0.89298767, 0.90426397,
     &   0.90773314, 0.90092915, 0.88640666, 0.86628938, 0.83381474,
     &   0.79324943, 0.74386543, 0.70172065, 0.68907005, 0.66737163,
     &   0.58727348, 0.52125454, 0.51085520, 0.51290441, 0.52090764,
     &   0.53088248, 0.53787529, 0.54057050, 0.54220438, 0.54238307,
     &   0.54116094, 0.53933865, 0.53751868, 0.53574479, 0.53491622,
     &   0.53783709, 0.55182058, 0.58272618, 0.62041819, 0.65449154,
     &   0.66999578, 0.67007560, 0.66025966, 0.64548475, 0.62599725,
     &   0.60996044, 0.59293437, 0.57801348, 0.56478149, 0.55394202,
     &   0.54569107, 0.53928715, 0.53527886, 0.53524321, 0.53767914,
     &   0.54197127, 0.54731357, 0.55499411, 0.56352991, 0.57063991,
     &   0.57217115, 0.56534159, 0.55380243, 0.53726029, 0.52184290,
     &   0.51299405, 0.51249599, 0.51784253, 0.52258897, 0.52146447,
     &   0.52037179, 0.52008021, 0.52019638, 0.52035844, 0.52028197,
     &   0.52012175, 0.51986271, 0.51951057, 0.51917118, 0.51877660,
     &   0.51836056, 0.51784754, 0.51722413, 0.51664025, 0.51598096,
     &   0.51526064, 0.51448327, 0.51361877, 0.51266956, 0.51163274,
     &   0.51051986, 0.50934023, 0.50809717, 0.50679797, 0.50541514,
     &   0.50404149, 0.50255233, 0.50123072, 0.49987581, 0.49881411,
     &   0.49759549, 0.49626884, 0.49493143, 0.49461335, 0.49593323,
     &   0.49843776, 0.50252366, 0.50650394, 0.51016790, 0.51304650,
     &   0.51559108, 0.51773584, 0.51953286, 0.52083665, 0.52201247,
     &   0.52289498, 0.52350938, 0.52415973, 0.52456617, 0.52489865,
     &   0.52525240, 0.52554828, 0.52578992, 0.52583832, 0.52589554,
     &   0.52588326, 0.52562135, 0.52544898, 0.52502024, 0.52471268,
     &   0.52441055, 0.52379322, 0.52317727, 0.52251107, 0.52169913,
     &   0.52064121, 0.51994342, 0.51925528, 0.51860154, 0.51797473,
     &   0.51735491, 0.51676661, 0.51618659, 0.51552397, 0.51470715,
     &   0.51390791, 0.51306248, 0.51222670, 0.51133692, 0.51042408,
     &   0.50947207, 0.50846666, 0.50744760, 0.50639313, 0.50532103,
     &   0.50418299, 0.50301391, 0.50188947, 0.50076807, 0.49969733,
     &   0.49868780, 0.49773532, 0.49686292, 0.49603325, 0.49523497,
     &   0.49446154, 0.49372375, 0.49304709, 0.49241284, 0.49177986,
     &   0.49121657, 0.49072316, 0.49033463, 0.48996609, 0.48961225,
     &   0.48933128, 0.48914230, 0.48902327, 0.48892611, 0.48887861,
     &   0.48889205, 0.48894811, 0.48904189, 0.48925638, 0.48941678,
     &   0.48948872, 0.48952365, 0.48960450, 0.48976126, 0.48986524,
     &   0.48984149, 0.48978671, 0.48963889, 0.48948768, 0.48933986,
     &   0.48918116, 0.48891234, 0.48862675, 0.48820338, 0.48778403,
     &   0.48736411, 0.48693687, 0.48650199, 0.48604777, 0.48558843,
     &   0.48508239, 0.48457673, 0.48406851, 0.48356435, 0.48308903,
     &   0.48267010, 0.48222694, 0.48178303, 0.48133978, 0.48092932,
     &   0.48054633, 0.48019201, 0.47986147, 0.47958946, 0.47937834,
     &   0.47923756, 0.47915673, 0.47916785, 0.47928381, 0.47948849,
     &   0.47977671, 0.48016873, 0.48065081, 0.48125663, 0.48199022,
     &   0.48285523, 0.48385507, 0.48462045, 0.48537570, 0.48619249,
     &   0.48706883, 0.48800245, 0.48889479, 0.48981449, 0.49077284,
     &   0.49176708, 0.49279159, 0.49383947, 0.49491304, 0.49600902,
     &   0.49708924, 0.49794662, 0.49879551, 0.49963215, 0.50043100,
     &   0.50113046, 0.50180322, 0.50244606, 0.50302738, 0.50354880,
     &   0.50402778, 0.50440162, 0.50445557, 0.50444722, 0.50437433,
     &   0.50424838, 0.50406104, 0.50380951, 0.50363374, 0.50343323,
     &   0.50317001, 0.50279057, 0.50233907, 0.50181055, 0.50117886,
     &   0.50047457, 0.49970368, 0.49886355, 0.49794662, 0.49686217,
     &   0.49569660, 0.49460500, 0.49352908, 0.49240464, 0.49127194,
     &   0.49005523, 0.48865545, 0.48717344, 0.48559779, 0.48393694,
     &   0.48210391, 0.48017195, 0.47814772, 0.47603261, 0.47375360,
     &   0.47138065, 0.46891433, 0.46635649, 0.46370876, 0.46096510/
      data (ww(i,12),i=1,mxwv)/
     &   0.99998367, 0.99998516, 0.99998641, 0.99998671, 0.99998891,
     &   0.99998975, 0.99999005, 0.99999088, 0.99999136, 0.99999195,
     &   0.99999237, 0.99999303, 0.99999356, 0.99999398, 0.99999440,
     &   0.99999475, 0.99999523, 0.99999565, 0.99999595, 0.99999642,
     &   0.99999654, 0.99999708, 0.99999738, 0.99999774, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999750, 0.99999702, 0.99999672,
     &   0.99999613, 0.99999571, 0.99999505, 0.99999434, 0.99999261,
     &   0.99999011, 0.99998516, 0.99998015, 0.99997747, 0.99997598,
     &   0.99997556, 0.99997342, 0.99996805, 0.99996746, 0.99996263,
     &   0.99994940, 0.99991870, 0.99986297, 0.99980479, 0.99979115,
     &   0.99979824, 0.99982071, 0.99984294, 0.99983919, 0.99979413,
     &   0.99972707, 0.99964803, 0.99958742, 0.99953276, 0.99947369,
     &   0.99927741, 0.99847138, 0.99719435, 0.99652433, 0.99661607,
     &   0.99701500, 0.99760425, 0.99822330, 0.99870783, 0.99882370,
     &   0.99861240, 0.99815071, 0.99664146, 0.99242145, 0.99072492,
     &   0.99041867, 0.99053085, 0.99097902, 0.99161476, 0.99137789,
     &   0.98942226, 0.98537213, 0.97278976, 0.95964092, 0.91620308,
     &   0.82934898, 0.81791693, 0.83488947, 0.87728554, 0.90709072,
     &   0.92645705, 0.93934751, 0.94987309, 0.95558423, 0.95918828,
     &   0.95832604, 0.95418096, 0.94714957, 0.93522829, 0.93305647,
     &   0.90277272, 0.72818893, 0.61663979, 0.62161571, 0.67265534,
     &   0.74365085, 0.79146600, 0.83295405, 0.85816348, 0.87235892,
     &   0.87676525, 0.86814731, 0.84997398, 0.82531673, 0.78680372,
     &   0.74102783, 0.68900931, 0.64806253, 0.63633054, 0.61697817,
     &   0.55529356, 0.51913083, 0.51342607, 0.51549911, 0.52323282,
     &   0.53292847, 0.53982377, 0.54253823, 0.54420334, 0.54442590,
     &   0.54325706, 0.54149371, 0.53973138, 0.53792590, 0.53648901,
     &   0.53642637, 0.54132771, 0.55749613, 0.58249271, 0.60871667,
     &   0.62156630, 0.62153476, 0.61314666, 0.60097593, 0.58575076,
     &   0.57393336, 0.56218159, 0.55260664, 0.54475439, 0.53882056,
     &   0.53464520, 0.53164095, 0.52988291, 0.52978468, 0.53067207,
     &   0.53239948, 0.53473121, 0.53842795, 0.54288268, 0.54677999,
     &   0.54744238, 0.54310179, 0.53626949, 0.52745527, 0.52028865,
     &   0.51664722, 0.51711321, 0.52239591, 0.52704054, 0.52587491,
     &   0.52438992, 0.52349859, 0.52287918, 0.52237952, 0.52189505,
     &   0.52143091, 0.52096063, 0.52048671, 0.52002162, 0.51954073,
     &   0.51904315, 0.51850718, 0.51792824, 0.51735377, 0.51673776,
     &   0.51608467, 0.51538956, 0.51464206, 0.51383883, 0.51298213,
     &   0.51206148, 0.51107579, 0.51002443, 0.50887591, 0.50762594,
     &   0.50628752, 0.50476021, 0.50336117, 0.50190330, 0.50089693,
     &   0.50034648, 0.50011188, 0.50035065, 0.50150532, 0.50384003,
     &   0.50685602, 0.51108670, 0.51504248, 0.51863509, 0.52146900,
     &   0.52399635, 0.52614397, 0.52796543, 0.52931750, 0.53055203,
     &   0.53150576, 0.53220356, 0.53293908, 0.53343862, 0.53386754,
     &   0.53431964, 0.53471518, 0.53505844, 0.53521305, 0.53537756,
     &   0.53547335, 0.53532451, 0.53526402, 0.53495216, 0.53476071,
     &   0.53457385, 0.53407598, 0.53358060, 0.53303754, 0.53235155,
     &   0.53142375, 0.53085399, 0.53029364, 0.52976733, 0.52926815,
     &   0.52877611, 0.52831501, 0.52786243, 0.52732784, 0.52663970,
     &   0.52596855, 0.52525204, 0.52454430, 0.52378142, 0.52299386,
     &   0.52216494, 0.52127844, 0.52037382, 0.51942778, 0.51845640,
     &   0.51740730, 0.51634568, 0.51525152, 0.51417619, 0.51313752,
     &   0.51214772, 0.51120228, 0.51033401, 0.50949842, 0.50868434,
     &   0.50788593, 0.50711751, 0.50642282, 0.50577909, 0.50513494,
     &   0.50459474, 0.50417155, 0.50390625, 0.50367826, 0.50347930,
     &   0.50340003, 0.50345218, 0.50359178, 0.50374365, 0.50395268,
     &   0.50422800, 0.50454181, 0.50488526, 0.50535673, 0.50572324,
     &   0.50597090, 0.50617272, 0.50642306, 0.50675279, 0.50703073,
     &   0.50709087, 0.50713426, 0.50706822, 0.50699782, 0.50692517,
     &   0.50683814, 0.50660378, 0.50634700, 0.50591826, 0.50549072,
     &   0.50506252, 0.50461549, 0.50414753, 0.50364155, 0.50311673,
     &   0.50251251, 0.50188839, 0.50125057, 0.50059307, 0.49995330,
     &   0.49937397, 0.49870476, 0.49798447, 0.49722430, 0.49646413,
     &   0.49567708, 0.49484241, 0.49396318, 0.49311718, 0.49226695,
     &   0.49141058, 0.49058509, 0.48977375, 0.48894894, 0.48813671,
     &   0.48735335, 0.48659441, 0.48583680, 0.48513409, 0.48449144,
     &   0.48391429, 0.48340845, 0.48296252, 0.48256728, 0.48222676,
     &   0.48194385, 0.48172176, 0.48156258, 0.48145896, 0.48141161,
     &   0.48142233, 0.48149225, 0.48162180, 0.48181364, 0.48206899,
     &   0.48237854, 0.48267868, 0.48302883, 0.48342839, 0.48386738,
     &   0.48431823, 0.48480886, 0.48533773, 0.48589200, 0.48647061,
     &   0.48707908, 0.48768571, 0.48817801, 0.48867664, 0.48917863,
     &   0.48965901, 0.49013594, 0.49060857, 0.49114311, 0.49169242,
     &   0.49223676, 0.49274421, 0.49323672, 0.49370763, 0.49413335,
     &   0.49453697, 0.49491659, 0.49526981, 0.49559346, 0.49580130,
     &   0.49597004, 0.49619228, 0.49643481, 0.49666432, 0.49691519,
     &   0.49712375, 0.49722409, 0.49727795, 0.49727952, 0.49722940,
     &   0.49705952, 0.49682295, 0.49652508, 0.49616399, 0.49566761,
     &   0.49510157, 0.49446541, 0.49376118, 0.49299094, 0.49214512/
      data (ww(i,13),i=1,mxwv)/
     &   0.99997699, 0.99997914, 0.99998087, 0.99998271, 0.99998432,
     &   0.99998552, 0.99998641, 0.99998713, 0.99998784, 0.99998844,
     &   0.99998939, 0.99999022, 0.99999082, 0.99999154, 0.99999213,
     &   0.99999267, 0.99999332, 0.99999380, 0.99999422, 0.99999493,
     &   0.99999529, 0.99999589, 0.99999619, 0.99999678, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 0.99999654, 0.99999577, 0.99999541,
     &   0.99999475, 0.99999398, 0.99999309, 0.99999183, 0.99998987,
     &   0.99998599, 0.99997926, 0.99997205, 0.99996847, 0.99996632,
     &   0.99996573, 0.99996263, 0.99995756, 0.99995434, 0.99994737,
     &   0.99992925, 0.99988627, 0.99980742, 0.99972659, 0.99971008,
     &   0.99971664, 0.99974847, 0.99977845, 0.99977440, 0.99971014,
     &   0.99961638, 0.99950755, 0.99942231, 0.99934632, 0.99926257,
     &   0.99898750, 0.99785775, 0.99606615, 0.99513042, 0.99526417,
     &   0.99581885, 0.99664354, 0.99751544, 0.99819231, 0.99835342,
     &   0.99805808, 0.99741244, 0.99529612, 0.98941237, 0.98704678,
     &   0.98662060, 0.98677868, 0.98740399, 0.98830020, 0.98799449,
     &   0.98522592, 0.97961640, 0.96232492, 0.94450611, 0.88726640,
     &   0.78134179, 0.76828617, 0.78776211, 0.83839124, 0.87564391,
     &   0.90055680, 0.91744858, 0.93141639, 0.93904877, 0.94391155,
     &   0.94275421, 0.93719256, 0.92781103, 0.91206563, 0.90922564,
     &   0.87025243, 0.67358041, 0.57815468, 0.58176100, 0.62253773,
     &   0.68885893, 0.73896134, 0.78560424, 0.81530929, 0.83247226,
     &   0.83786315, 0.82734984, 0.80553913, 0.77677506, 0.73380107,
     &   0.68600887, 0.63639218, 0.60120153, 0.59166449, 0.57667440,
     &   0.53647351, 0.51946235, 0.51529539, 0.51734155, 0.52482080,
     &   0.53428578, 0.54110628, 0.54383987, 0.54553270, 0.54579216,
     &   0.54466587, 0.54294807, 0.54123217, 0.53946346, 0.53793836,
     &   0.53699470, 0.53776848, 0.54409206, 0.55735433, 0.57408190,
     &   0.58304834, 0.58288193, 0.57670957, 0.56817120, 0.55816764,
     &   0.55091363, 0.54423040, 0.53920668, 0.53541619, 0.53276902,
     &   0.53103119, 0.52985555, 0.52920467, 0.52909732, 0.52926201,
     &   0.52968055, 0.53033358, 0.53156704, 0.53323275, 0.53474528,
     &   0.53474915, 0.53235066, 0.52888763, 0.52482665, 0.52165365,
     &   0.51982540, 0.52052975, 0.52569902, 0.53024846, 0.52913237,
     &   0.52763742, 0.52665609, 0.52588081, 0.52522361, 0.52464688,
     &   0.52412492, 0.52362269, 0.52314711, 0.52267784, 0.52220684,
     &   0.52172065, 0.52121770, 0.52069759, 0.52016979, 0.51961285,
     &   0.51902980, 0.51841223, 0.51775807, 0.51706308, 0.51633191,
     &   0.51554906, 0.51471114, 0.51381814, 0.51283193, 0.51175648,
     &   0.51057911, 0.50920898, 0.50793040, 0.50652736, 0.50550497,
     &   0.50504297, 0.50505602, 0.50576413, 0.50742036, 0.51009744,
     &   0.51325291, 0.51745033, 0.52132201, 0.52483356, 0.52762604,
     &   0.53013498, 0.53228742, 0.53413320, 0.53553152, 0.53681993,
     &   0.53783953, 0.53861254, 0.53942364, 0.54000670, 0.54052180,
     &   0.54106021, 0.54154438, 0.54197824, 0.54222816, 0.54248822,
     &   0.54268128, 0.54263502, 0.54267538, 0.54246980, 0.54238254,
     &   0.54229957, 0.54191178, 0.54152656, 0.54109567, 0.54052532,
     &   0.53971875, 0.53926480, 0.53882104, 0.53841120, 0.53802848,
     &   0.53765333, 0.53730905, 0.53697371, 0.53655839, 0.53599262,
     &   0.53544432, 0.53485334, 0.53427172, 0.53363669, 0.53297794,
     &   0.53227925, 0.53152478, 0.53075349, 0.52994215, 0.52910578,
     &   0.52819300, 0.52726769, 0.52630955, 0.52536845, 0.52446365,
     &   0.52360415, 0.52278620, 0.52204347, 0.52132982, 0.52063495,
     &   0.51995260, 0.51929742, 0.51871455, 0.51818156, 0.51764596,
     &   0.51721650, 0.51690984, 0.51677066, 0.51667279, 0.51660782,
     &   0.51667255, 0.51687872, 0.51717865, 0.51749021, 0.51786232,
     &   0.51830304, 0.51878226, 0.51928973, 0.51992661, 0.52044719,
     &   0.52084255, 0.52119052, 0.52158695, 0.52206236, 0.52248263,
     &   0.52267432, 0.52284706, 0.52290916, 0.52296698, 0.52302158,
     &   0.52306092, 0.52294701, 0.52281052, 0.52249783, 0.52218646,
     &   0.52187479, 0.52154326, 0.52118880, 0.52079451, 0.52037787,
     &   0.51987779, 0.51935685, 0.51881534, 0.51825202, 0.51770395,
     &   0.51721668, 0.51662940, 0.51598221, 0.51528519, 0.51458043,
     &   0.51383698, 0.51302892, 0.51215541, 0.51130283, 0.51042604,
     &   0.50951910, 0.50862426, 0.50771803, 0.50675750, 0.50577450,
     &   0.50477928, 0.50377035, 0.50269592, 0.50162750, 0.50056690,
     &   0.49951559, 0.49847540, 0.49752092, 0.49658957, 0.49566665,
     &   0.49475387, 0.49385306, 0.49302822, 0.49222529, 0.49143639,
     &   0.49066344, 0.48990822, 0.48917246, 0.48845887, 0.48776966,
     &   0.48710936, 0.48648968, 0.48589623, 0.48533344, 0.48480418,
     &   0.48431745, 0.48386234, 0.48344052, 0.48305261, 0.48269993,
     &   0.48238465, 0.48210701, 0.48185655, 0.48163879, 0.48145369,
     &   0.48130804, 0.48119280, 0.48110735, 0.48106733, 0.48106393,
     &   0.48109344, 0.48114845, 0.48123422, 0.48134902, 0.48148555,
     &   0.48164955, 0.48183998, 0.48205581, 0.48229593, 0.48252445,
     &   0.48276937, 0.48306236, 0.48339355, 0.48375392, 0.48416081,
     &   0.48458549, 0.48500076, 0.48542881, 0.48586783, 0.48631513,
     &   0.48673546, 0.48715225, 0.48756766, 0.48797828, 0.48833558,
     &   0.48867881, 0.48900640, 0.48931867, 0.48961639, 0.48989040/

c     106um ice
      data (ww(i,14),i=1,mxwv)/
     &   0.99995375, 0.99995619, 0.99995840, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 1.00000000,
     &   1.00000000, 1.00000000, 1.00000000, 1.00000000, 0.99998093,
     &   0.99997693, 0.99997324, 0.99996811, 0.99996430, 0.99995846,
     &   0.99995226, 0.99994081, 0.99993336, 0.99992615, 0.99990588,
     &   0.99987984, 0.99985451, 0.99982178, 0.99980539, 0.99979585,
     &   0.99978131, 0.99974817, 0.99966884, 0.99954885, 0.99947596,
     &   0.99943370, 0.99936271, 0.99928898, 0.99903244, 0.99867535,
     &   0.99821573, 0.99758953, 0.99743819, 0.99772251, 0.99808425,
     &   0.99819082, 0.99820966, 0.99796700, 0.99773860, 0.99625421,
     &   0.99436134, 0.99165350, 0.98942792, 0.98837286, 0.98834938,
     &   0.98867631, 0.98887527, 0.98853451, 0.98779434, 0.98494935,
     &   0.95658475, 0.88739920, 0.78295362, 0.74311334, 0.76182091,
     &   0.79017419, 0.82816648, 0.85526282, 0.86677748, 0.88353074,
     &   0.89886016, 0.91204774, 0.91950983, 0.92427462, 0.92972249,
     &   0.93034500, 0.88682127, 0.76149219, 0.64363408, 0.61555505,
     &   0.62291121, 0.65350705, 0.71907991, 0.80562496, 0.86409605,
     &   0.89538419, 0.90845978, 0.89095026, 0.84854215, 0.81385285,
     &   0.79537296, 0.77874064, 0.76166523, 0.75583458, 0.74385613,
     &   0.64140511, 0.55074155, 0.51706356, 0.50852233, 0.50407821,
     &   0.52299869, 0.54689616, 0.55727786, 0.57195216, 0.57458502,
     &   0.56780213, 0.56091380, 0.55429077, 0.54935253, 0.54579824,
     &   0.54286432, 0.54089403, 0.54153591, 0.54517341, 0.54753506,
     &   0.55046207, 0.54977655, 0.54532593, 0.54059279, 0.53796738,
     &   0.53582913, 0.53372228, 0.53206450, 0.53063548, 0.52993882,
     &   0.52990693, 0.53009117, 0.53031784, 0.53115284, 0.53195614,
     &   0.53361225, 0.53477925, 0.53427792, 0.53299123, 0.53155869,
     &   0.52906960, 0.52692252, 0.52528226, 0.52411431, 0.52333045,
     &   0.52308434, 0.52384698, 0.52458918, 0.52533698, 0.52573097,
     &   0.52581197, 0.52537936, 0.52495968, 0.52481270, 0.52473944,
     &   0.52456844, 0.52433789, 0.52412838, 0.52381444, 0.52345556,
     &   0.52319109, 0.52298939, 0.52272063, 0.52234137, 0.52181900,
     &   0.52109593, 0.52014583, 0.51938927, 0.51851815, 0.51762253,
     &   0.51668823, 0.51574552, 0.51460743, 0.51329237, 0.51162219,
     &   0.50936294, 0.50662851, 0.50431049, 0.50312942, 0.50570911,
     &   0.51424402, 0.52387524, 0.53043973, 0.53553951, 0.53871465,
     &   0.54132777, 0.54311830, 0.54445368, 0.54541838, 0.54547435,
     &   0.54545921, 0.54523742, 0.54444039, 0.54372221, 0.54299164,
     &   0.54195929, 0.54061812, 0.53906834, 0.53752834, 0.53601676,
     &   0.53458577, 0.53335816, 0.53226238, 0.53124672, 0.53059965,
     &   0.53014755, 0.52961051, 0.52878541, 0.52792287, 0.52717811,
     &   0.52636403, 0.52552664, 0.52472144, 0.52426076, 0.52428031,
     &   0.52479744, 0.52635294, 0.52946192, 0.53292066, 0.53807122,
     &   0.54517061, 0.55268085, 0.55667877, 0.55830365, 0.55839467,
     &   0.55714709, 0.55576217, 0.55354023, 0.54977053, 0.54562211,
     &   0.54070395, 0.53491503, 0.52952528, 0.52453732, 0.51995301,
     &   0.51579112, 0.51229107, 0.50901371, 0.50614280, 0.50364113,
     &   0.50136739, 0.49948385, 0.49803531, 0.49690136, 0.49585658,
     &   0.49461216, 0.49321014, 0.49184027, 0.49100196, 0.49079216,
     &   0.49141032, 0.49299628, 0.49515891, 0.49767601, 0.50046510,
     &   0.50349259, 0.50682491, 0.51043004, 0.51492518, 0.52081913,
     &   0.52449578, 0.52979946, 0.53554130, 0.53743494, 0.53355855,
     &   0.52822757, 0.52591270, 0.52464312, 0.52400088, 0.52343065,
     &   0.52278614, 0.52226663, 0.51974070, 0.51550245, 0.50996864,
     &   0.50417274, 0.50259620, 0.50401998, 0.50872016, 0.51118523,
     &   0.51287019, 0.51422793, 0.51528323, 0.51565528, 0.51492935,
     &   0.51389253, 0.51272053, 0.51140839, 0.51022887, 0.50897366,
     &   0.50785887, 0.50665098, 0.50543302, 0.50453252, 0.50360584,
     &   0.50299287, 0.50242245, 0.50200361, 0.50195813, 0.50200218,
     &   0.50231099, 0.50283909, 0.50359297, 0.50465977, 0.50560415,
     &   0.50682545, 0.50821143, 0.50934619, 0.51065189, 0.51212513,
     &   0.51377332, 0.51562035, 0.51766843, 0.51992637, 0.52239990,
     &   0.52510536, 0.52804327, 0.53143191, 0.53514779, 0.53909039,
     &   0.54328352, 0.54773313, 0.55242240, 0.55736649, 0.56255710,
     &   0.56798971, 0.57365763, 0.57951790, 0.58567488, 0.59218311,
     &   0.59959143, 0.60720849, 0.61501640, 0.62299520, 0.63112438,
     &   0.64000720, 0.65298039, 0.66613710, 0.67935973, 0.69334853,
     &   0.70780766, 0.72213447, 0.73686051, 0.75263649, 0.76797360,
     &   0.78271222, 0.79542202, 0.80764979, 0.81937474, 0.83054650,
     &   0.84117913, 0.85127288, 0.86072445, 0.86956114, 0.87790334,
     &   0.88575071, 0.89311910, 0.90003163, 0.90649605, 0.91189229,
     &   0.91695917, 0.92171639, 0.92580092, 0.92952532, 0.93303037,
     &   0.93587011, 0.93812239, 0.94025552, 0.94217181, 0.94367111,
     &   0.94509381, 0.94644010, 0.94761717, 0.94872892, 0.94977987/



c         ---------------- asymmetry factor ---------------

      data (gg(i,1),i=1,mxwv)/
     &   0.82582545, 0.82592523, 0.82585710, 0.82588977, 0.82582527,
     &   0.82564992, 0.82560641, 0.82534742, 0.82520568, 0.82506657,
     &   0.82481307, 0.82456845, 0.82425445, 0.82396966, 0.82363415,
     &   0.82320780, 0.82287830, 0.82244104, 0.82199508, 0.82151937,
     &   0.82103729, 0.82049131, 0.81991357, 0.81933504, 0.81872535,
     &   0.81806701, 0.81734812, 0.81660944, 0.81584901, 0.81504452,
     &   0.81418365, 0.81330740, 0.81237507, 0.81141019, 0.81038910,
     &   0.80933768, 0.80824000, 0.80711931, 0.80594260, 0.80473220,
     &   0.80347955, 0.80219209, 0.80086428, 0.79951847, 0.79814166,
     &   0.79673654, 0.79531223, 0.79386520, 0.79240590, 0.79093921,
     &   0.78946817, 0.78800279, 0.78654683, 0.78510952, 0.78369778,
     &   0.78231937, 0.78098428, 0.77969915, 0.77847517, 0.77732205,
     &   0.77624935, 0.77526689, 0.77438474, 0.77361232, 0.77296138,
     &   0.77244097, 0.77206379, 0.77183712, 0.77176172, 0.77184343,
     &   0.77209342, 0.77251720, 0.77311635, 0.77389461, 0.77485329,
     &   0.77599204, 0.77730536, 0.77879637, 0.78048605, 0.78226358,
     &   0.78420770, 0.78628397, 0.78848392, 0.79079866, 0.79321790,
     &   0.79573429, 0.79833770, 0.80104482, 0.80381238, 0.80679411,
     &   0.80994910, 0.81254768, 0.81496698, 0.81730813, 0.81980264,
     &   0.82232887, 0.82485163, 0.82733917, 0.82979083, 0.83220702,
     &   0.83462101, 0.83697563, 0.83926922, 0.84150988, 0.84367168,
     &   0.84602505, 0.84901446, 0.85165107, 0.85245973, 0.85309666,
     &   0.85411465, 0.85543901, 0.85682338, 0.85824859, 0.85968673,
     &   0.86113864, 0.86262619, 0.86414945, 0.86575198, 0.86746395,
     &   0.86934125, 0.87142861, 0.87368357, 0.87624252, 0.87963700,
     &   0.88497370, 0.89308161, 0.90238464, 0.90146482, 0.89375055,
     &   0.88199556, 0.87077630, 0.86228466, 0.85282397, 0.84088981,
     &   0.82518446, 0.81116998, 0.79965270, 0.79298598, 0.79247075,
     &   0.79226148, 0.79255801, 0.79326576, 0.79408979, 0.79461628,
     &   0.79487628, 0.79475111, 0.79429221, 0.79352623, 0.79250586,
     &   0.79118663, 0.78969026, 0.78798294, 0.78607655, 0.78397077,
     &   0.78159428, 0.77897614, 0.77590501, 0.77216172, 0.76814109,
     &   0.76407272, 0.76004201, 0.75599086, 0.75198478, 0.74809271,
     &   0.74431711, 0.74065375, 0.73707110, 0.73376703, 0.73080313,
     &   0.72807783, 0.72367293, 0.71595693, 0.70734733, 0.69888288,
     &   0.69204396, 0.68571329, 0.67933685, 0.67286748, 0.66625392,
     &   0.65941244, 0.65234286, 0.64503986, 0.63748878, 0.62969744,
     &   0.62165493, 0.61336565, 0.60482770, 0.59603113, 0.58697444,
     &   0.57765901, 0.56807870, 0.55823809, 0.54813796, 0.53778493,
     &   0.52719527, 0.51635122, 0.50527877, 0.49393955, 0.48236141,
     &   0.47054112, 0.45834744, 0.44618133, 0.43352759, 0.42102569,
     &   0.40871832, 0.39671010, 0.38475269, 0.37320104, 0.36203402,
     &   0.35123599, 0.34106970, 0.33149248, 0.32256624, 0.31413832,
     &   0.30581799, 0.29793465, 0.29031041, 0.28297898, 0.27577883,
     &   0.26885036, 0.26200894, 0.25526813, 0.24875644, 0.24239631,
     &   0.23606311, 0.23000668, 0.22412345, 0.21843770, 0.21282479,
     &   0.20746984, 0.20228088, 0.19719486, 0.19221528, 0.18725319,
     &   0.18251030, 0.17796002, 0.17343809, 0.16885823, 0.16430296,
     &   0.15972769, 0.15507665, 0.15053827, 0.14611103, 0.14179477,
     &   0.13758878, 0.13352397, 0.12956649, 0.12571009, 0.12194680,
     &   0.11827938, 0.11458509, 0.11099261, 0.10747156, 0.10403536,
     &   0.10066457, 0.09735073, 0.09411050, 0.09092317, 0.08781720,
     &   0.08475711, 0.08177216, 0.07883084, 0.07597638, 0.07319383,
     &   0.07050925, 0.06791995, 0.06543289, 0.06303990, 0.06073668,
     &   0.05851362, 0.05636254, 0.05429049, 0.05229382, 0.05036614,
     &   0.04850581, 0.04670938, 0.04500944, 0.04338047, 0.04181745,
     &   0.04031225, 0.03887641, 0.03750962, 0.03621034, 0.03496517,
     &   0.03377532, 0.03263836, 0.03155303, 0.03052563, 0.02956484,
     &   0.02863942, 0.02774037, 0.02687770, 0.02605632, 0.02526627,
     &   0.02452936, 0.02381342, 0.02311428, 0.02243586, 0.02178509,
     &   0.02115416, 0.02055400, 0.01997020, 0.01939676, 0.01883660,
     &   0.01828493, 0.01775069, 0.01723347, 0.01673143, 0.01624404,
     &   0.01576786, 0.01530308, 0.01484825, 0.01440405, 0.01397328,
     &   0.01355793, 0.01315873, 0.01277072, 0.01238773, 0.01201483,
     &   0.01165209, 0.01129850, 0.01094837, 0.01060642, 0.01027373,
     &   0.00995009, 0.00963359, 0.00932789, 0.00903054, 0.00873936,
     &   0.00845465, 0.00817702, 0.00790264, 0.00763738, 0.00738094,
     &   0.00713302, 0.00689335, 0.00665735, 0.00642852, 0.00620756,
     &   0.00599419, 0.00578815, 0.00559134, 0.00540154, 0.00521817,
     &   0.00504102, 0.00486984, 0.00470440, 0.00454457, 0.00439016,
     &   0.00424092, 0.00409623, 0.00395646, 0.00382146, 0.00369117,
     &   0.00356567, 0.00344443, 0.00332730, 0.00321406, 0.00310461,
     &   0.00299887, 0.00289673, 0.00279810, 0.00270280, 0.00261074,
     &   0.00252270, 0.00243769, 0.00235553, 0.00227646, 0.00220013,
     &   0.00212634, 0.00205495, 0.00198594, 0.00191926, 0.00185490,
     &   0.00179268, 0.00173259, 0.00167456, 0.00161845, 0.00156442,
     &   0.00151218, 0.00146191, 0.00141343, 0.00136652, 0.00132110,
     &   0.00127717, 0.00123457, 0.00119338, 0.00115352, 0.00111497,
     &   0.00107767, 0.00104160, 0.00100672, 0.00097300, 0.00094044,
     &   0.00090897, 0.00087854, 0.00084912, 0.00082066, 0.00079314/
      data (gg(i,2),i=1,mxwv)/
     &   0.83627009, 0.83659846, 0.83663005, 0.83670270, 0.83686882,
     &   0.83690906, 0.83694035, 0.83684474, 0.83677542, 0.83682454,
     &   0.83668655, 0.83658659, 0.83646691, 0.83634633, 0.83614570,
     &   0.83592373, 0.83578694, 0.83549982, 0.83532858, 0.83509028,
     &   0.83475798, 0.83446884, 0.83405447, 0.83384895, 0.83346409,
     &   0.83313030, 0.83276808, 0.83230066, 0.83194649, 0.83148319,
     &   0.83109748, 0.83063084, 0.83008826, 0.82956862, 0.82908487,
     &   0.82852161, 0.82798141, 0.82738441, 0.82677656, 0.82617378,
     &   0.82549828, 0.82482111, 0.82410330, 0.82337433, 0.82258445,
     &   0.82180250, 0.82095975, 0.82008660, 0.81918013, 0.81824225,
     &   0.81722403, 0.81621188, 0.81514990, 0.81403714, 0.81290424,
     &   0.81173629, 0.81051993, 0.80927426, 0.80800170, 0.80669385,
     &   0.80534750, 0.80398440, 0.80258876, 0.80117899, 0.79974592,
     &   0.79830289, 0.79685289, 0.79540467, 0.79394943, 0.79249275,
     &   0.79104722, 0.78961992, 0.78822207, 0.78685427, 0.78553617,
     &   0.78427351, 0.78307498, 0.78195798, 0.78094471, 0.78000134,
     &   0.77915174, 0.77841294, 0.77779859, 0.77732247, 0.77700287,
     &   0.77685970, 0.77690613, 0.77720606, 0.77771062, 0.77871221,
     &   0.78036481, 0.78132290, 0.78213137, 0.78293908, 0.78420019,
     &   0.78578764, 0.78764629, 0.78972620, 0.79203528, 0.79455960,
     &   0.79734278, 0.80031121, 0.80345273, 0.80677307, 0.81018698,
     &   0.81414741, 0.81973636, 0.82522154, 0.82739776, 0.82911015,
     &   0.83158195, 0.83482122, 0.83832872, 0.84206462, 0.84595090,
     &   0.84996974, 0.85414451, 0.85845757, 0.86296248, 0.86770225,
     &   0.87274581, 0.87814724, 0.88379961, 0.88986969, 0.89718425,
     &   0.90732378, 0.92101502, 0.93518555, 0.93590158, 0.92911202,
     &   0.91754192, 0.90637332, 0.89815760, 0.88919264, 0.87704295,
     &   0.85732710, 0.83534956, 0.81497556, 0.80224621, 0.80126292,
     &   0.80209434, 0.80450195, 0.80812585, 0.81229156, 0.81617731,
     &   0.81976593, 0.82282186, 0.82540864, 0.82756245, 0.82936561,
     &   0.83074903, 0.83190638, 0.83278763, 0.83341277, 0.83378547,
     &   0.83379912, 0.83350146, 0.83257240, 0.83071029, 0.82852954,
     &   0.82638258, 0.82439715, 0.82249790, 0.82078964, 0.81939876,
     &   0.81833935, 0.81762302, 0.81725740, 0.81763804, 0.81899768,
     &   0.82127768, 0.82124031, 0.81415951, 0.80162561, 0.79155678,
     &   0.78684068, 0.78330159, 0.77986991, 0.77648473, 0.77305311,
     &   0.76942849, 0.76564348, 0.76167184, 0.75751472, 0.75319499,
     &   0.74871570, 0.74408275, 0.73928791, 0.73429054, 0.72911859,
     &   0.72375411, 0.71818864, 0.71241111, 0.70640588, 0.70015448,
     &   0.69364077, 0.68684214, 0.67973685, 0.67229271, 0.66447908,
     &   0.65624845, 0.64749771, 0.63831258, 0.62834412, 0.61784518,
     &   0.60682100, 0.59547061, 0.58352464, 0.57138306, 0.55910558,
     &   0.54688400, 0.53486782, 0.52341312, 0.51261789, 0.50243384,
     &   0.49230000, 0.48262390, 0.47319272, 0.46409330, 0.45504105,
     &   0.44625315, 0.43751350, 0.42875323, 0.42021552, 0.41176525,
     &   0.40322748, 0.39493841, 0.38678047, 0.37883997, 0.37090263,
     &   0.36324027, 0.35580987, 0.34842101, 0.34120595, 0.33391252,
     &   0.32686862, 0.32016787, 0.31346345, 0.30663735, 0.29984090,
     &   0.29303080, 0.28588077, 0.27882427, 0.27185482, 0.26497954,
     &   0.25820878, 0.25159669, 0.24509515, 0.23872399, 0.23249003,
     &   0.22634941, 0.22007392, 0.21390516, 0.20780051, 0.20178203,
     &   0.19581491, 0.18988562, 0.18402441, 0.17819431, 0.17245887,
     &   0.16675198, 0.16113392, 0.15554406, 0.15007971, 0.14471497,
     &   0.13951389, 0.13447754, 0.12962505, 0.12494500, 0.12043165,
     &   0.11606720, 0.11183643, 0.10775577, 0.10381959, 0.10001610,
     &   0.09634242, 0.09279249, 0.08943407, 0.08621509, 0.08312551,
     &   0.08014889, 0.07730906, 0.07460557, 0.07203546, 0.06957155,
     &   0.06721646, 0.06496548, 0.06281620, 0.06078145, 0.05887942,
     &   0.05704686, 0.05526551, 0.05355568, 0.05192748, 0.05036100,
     &   0.04890113, 0.04748214, 0.04609576, 0.04474987, 0.04345868,
     &   0.04220640, 0.04101567, 0.03985688, 0.03871810, 0.03760508,
     &   0.03650808, 0.03544545, 0.03441646, 0.03341743, 0.03244727,
     &   0.03149910, 0.03057328, 0.02966688, 0.02878136, 0.02792246,
     &   0.02709422, 0.02629833, 0.02552464, 0.02476056, 0.02401645,
     &   0.02329252, 0.02258671, 0.02188747, 0.02120440, 0.02053976,
     &   0.01989313, 0.01926063, 0.01864974, 0.01805548, 0.01747345,
     &   0.01690425, 0.01634916, 0.01580043, 0.01526996, 0.01475714,
     &   0.01426139, 0.01378215, 0.01331013, 0.01285247, 0.01241057,
     &   0.01198387, 0.01157186, 0.01117836, 0.01079888, 0.01043228,
     &   0.01007812, 0.00973592, 0.00940517, 0.00908566, 0.00877699,
     &   0.00847863, 0.00818938, 0.00790999, 0.00764011, 0.00737965,
     &   0.00712877, 0.00688641, 0.00665228, 0.00642591, 0.00620711,
     &   0.00599573, 0.00579156, 0.00559438, 0.00540389, 0.00521985,
     &   0.00504386, 0.00487392, 0.00470968, 0.00455163, 0.00439903,
     &   0.00425152, 0.00410881, 0.00397086, 0.00383756, 0.00370889,
     &   0.00358451, 0.00346439, 0.00334836, 0.00323620, 0.00312818,
     &   0.00302375, 0.00292324, 0.00282631, 0.00273253, 0.00264173,
     &   0.00255391, 0.00246873, 0.00238637, 0.00230667, 0.00222961,
     &   0.00215503, 0.00208291, 0.00201317, 0.00194574, 0.00188065,
     &   0.00181772, 0.00175687, 0.00169804, 0.00164112, 0.00158610/
      data (gg(i,3),i=1,mxwv)/
     &   0.84455985, 0.84485096, 0.84503460, 0.84523511, 0.84538072,
     &   0.84563208, 0.84568828, 0.84574807, 0.84588081, 0.84594083,
     &   0.84592026, 0.84598678, 0.84592396, 0.84588182, 0.84584671,
     &   0.84582376, 0.84571087, 0.84563249, 0.84550291, 0.84537148,
     &   0.84523302, 0.84507620, 0.84484732, 0.84476697, 0.84444332,
     &   0.84428525, 0.84400076, 0.84380674, 0.84354097, 0.84331173,
     &   0.84301376, 0.84270489, 0.84237897, 0.84208763, 0.84175521,
     &   0.84138793, 0.84104955, 0.84060657, 0.84030765, 0.83985507,
     &   0.83942181, 0.83906525, 0.83863693, 0.83820271, 0.83766359,
     &   0.83721220, 0.83677375, 0.83627933, 0.83571291, 0.83531868,
     &   0.83471936, 0.83412755, 0.83354622, 0.83288312, 0.83231533,
     &   0.83165139, 0.83099717, 0.83034146, 0.82957327, 0.82887071,
     &   0.82811481, 0.82727188, 0.82648861, 0.82560199, 0.82476044,
     &   0.82388192, 0.82296246, 0.82201469, 0.82103533, 0.82001179,
     &   0.81894821, 0.81785631, 0.81672752, 0.81556922, 0.81439739,
     &   0.81317675, 0.81194711, 0.81070381, 0.80946487, 0.80816841,
     &   0.80683345, 0.80547619, 0.80409986, 0.80271494, 0.80133480,
     &   0.79997998, 0.79865843, 0.79746318, 0.79630262, 0.79561704,
     &   0.79577571, 0.79469544, 0.79312056, 0.79122537, 0.78971910,
     &   0.78849256, 0.78747916, 0.78662771, 0.78598046, 0.78552574,
     &   0.78532881, 0.78536803, 0.78565985, 0.78625280, 0.78700769,
     &   0.78856128, 0.79322964, 0.79878032, 0.79930472, 0.79850447,
     &   0.79875422, 0.80056041, 0.80311215, 0.80641943, 0.81035179,
     &   0.81488729, 0.82007921, 0.82590097, 0.83241725, 0.83973670,
     &   0.84794080, 0.85712224, 0.86701638, 0.87769902, 0.89064717,
     &   0.90846258, 0.93150747, 0.95311749, 0.95590609, 0.94998789,
     &   0.93872488, 0.92796981, 0.92080271, 0.91387290, 0.90524715,
     &   0.88846231, 0.86165524, 0.82762671, 0.79805332, 0.78733510,
     &   0.78259206, 0.78254759, 0.78648686, 0.79288423, 0.79984164,
     &   0.80701917, 0.81376028, 0.82000190, 0.82570952, 0.83098125,
     &   0.83563316, 0.83999014, 0.84394395, 0.84752542, 0.85073042,
     &   0.85338926, 0.85558379, 0.85681653, 0.85660261, 0.85592538,
     &   0.85535437, 0.85510170, 0.85505164, 0.85536933, 0.85624504,
     &   0.85768920, 0.85970110, 0.86227852, 0.86597824, 0.87107486,
     &   0.87732667, 0.88030589, 0.87369573, 0.85839933, 0.84612209,
     &   0.84258795, 0.84101349, 0.83970332, 0.83854777, 0.83739966,
     &   0.83604926, 0.83455569, 0.83287942, 0.83103675, 0.82906634,
     &   0.82698691, 0.82481235, 0.82253838, 0.82011151, 0.81759226,
     &   0.81496322, 0.81222945, 0.80938870, 0.80643511, 0.80335027,
     &   0.80014056, 0.79679084, 0.79328346, 0.78963310, 0.78581131,
     &   0.78178263, 0.77758008, 0.77298433, 0.76805568, 0.76247734,
     &   0.75616741, 0.74919164, 0.74137366, 0.73283529, 0.72361571,
     &   0.71401465, 0.70386934, 0.69391835, 0.68428326, 0.67516202,
     &   0.66605043, 0.65725845, 0.64864951, 0.64036721, 0.63205945,
     &   0.62395519, 0.61590636, 0.60770988, 0.59967655, 0.59162897,
     &   0.58339453, 0.57524943, 0.56711388, 0.55913305, 0.55104345,
     &   0.54309249, 0.53536582, 0.52752781, 0.51989329, 0.51204062,
     &   0.50430495, 0.49698111, 0.48959526, 0.48207411, 0.47460863,
     &   0.46722409, 0.45919818, 0.45116219, 0.44309568, 0.43501252,
     &   0.42693928, 0.41892570, 0.41093770, 0.40306294, 0.39536369,
     &   0.38767549, 0.37972692, 0.37179247, 0.36385259, 0.35591438,
     &   0.34793031, 0.33987877, 0.33177257, 0.32355452, 0.31531486,
     &   0.30695871, 0.29854858, 0.28997570, 0.28140029, 0.27277303,
     &   0.26423383, 0.25580850, 0.24754657, 0.23946342, 0.23156868,
     &   0.22384234, 0.21626292, 0.20887040, 0.20167324, 0.19466785,
     &   0.18784128, 0.18119201, 0.17486876, 0.16878493, 0.16292517,
     &   0.15725191, 0.15181945, 0.14663446, 0.14169870, 0.13695525,
     &   0.13241124, 0.12806056, 0.12390025, 0.11995343, 0.11626942,
     &   0.11272001, 0.10926517, 0.10594362, 0.10277622, 0.09972786,
     &   0.09689724, 0.09414237, 0.09144932, 0.08883125, 0.08631821,
     &   0.08387809, 0.08156190, 0.07930480, 0.07708517, 0.07491116,
     &   0.07276264, 0.07067894, 0.06865892, 0.06669539, 0.06478614,
     &   0.06291765, 0.06109011, 0.05929774, 0.05754391, 0.05584076,
     &   0.05419688, 0.05261735, 0.05108058, 0.04956020, 0.04807804,
     &   0.04663493, 0.04522685, 0.04382974, 0.04246368, 0.04113378,
     &   0.03983932, 0.03857229, 0.03734849, 0.03615772, 0.03499085,
     &   0.03384928, 0.03273576, 0.03163438, 0.03056980, 0.02954081,
     &   0.02854623, 0.02758493, 0.02663783, 0.02571967, 0.02483334,
     &   0.02397770, 0.02315169, 0.02236311, 0.02160278, 0.02086838,
     &   0.02015901, 0.01947367, 0.01881138, 0.01817165, 0.01755372,
     &   0.01695649, 0.01637751, 0.01581832, 0.01527823, 0.01475703,
     &   0.01425508, 0.01377020, 0.01330180, 0.01284898, 0.01241130,
     &   0.01198851, 0.01158013, 0.01118577, 0.01080479, 0.01043675,
     &   0.01008483, 0.00974502, 0.00941661, 0.00910059, 0.00879549,
     &   0.00850058, 0.00821526, 0.00793944, 0.00767294, 0.00741568,
     &   0.00716701, 0.00692687, 0.00669490, 0.00647065, 0.00625469,
     &   0.00604592, 0.00584498, 0.00565121, 0.00546373, 0.00528220,
     &   0.00510663, 0.00493634, 0.00477169, 0.00461234, 0.00445828,
     &   0.00430916, 0.00416498, 0.00402554, 0.00389072, 0.00376058,
     &   0.00363476, 0.00351311, 0.00339547, 0.00328168, 0.00317167/
      data (gg(i,4),i=1,mxwv)/
     &   0.85081232, 0.85113579, 0.85146528, 0.85174489, 0.85205144,
     &   0.85229868, 0.85249537, 0.85271430, 0.85285896, 0.85299277,
     &   0.85316002, 0.85322952, 0.85331571, 0.85341138, 0.85343051,
     &   0.85350990, 0.85346949, 0.85348326, 0.85338873, 0.85345846,
     &   0.85343117, 0.85336089, 0.85325092, 0.85320866, 0.85306942,
     &   0.85294843, 0.85289627, 0.85264999, 0.85257018, 0.85242772,
     &   0.85223860, 0.85207891, 0.85189581, 0.85168809, 0.85141820,
     &   0.85126549, 0.85098267, 0.85076016, 0.85049802, 0.85028118,
     &   0.85000056, 0.84967661, 0.84937501, 0.84912705, 0.84937263,
     &   0.84848493, 0.84814936, 0.84782654, 0.84745914, 0.84710097,
     &   0.84670240, 0.84633636, 0.84593064, 0.84551305, 0.84506303,
     &   0.84460324, 0.84421033, 0.84371644, 0.84327072, 0.84270066,
     &   0.84230822, 0.84185076, 0.84131831, 0.84085870, 0.84025544,
     &   0.83975512, 0.83923119, 0.83860266, 0.83808148, 0.83751965,
     &   0.83692896, 0.83627075, 0.83568621, 0.83502293, 0.83431572,
     &   0.83365059, 0.83300757, 0.83231050, 0.83168280, 0.83096534,
     &   0.83019263, 0.82938969, 0.82857323, 0.82769787, 0.82684958,
     &   0.82600260, 0.82515913, 0.82445931, 0.82375586, 0.82368267,
     &   0.82475203, 0.82395566, 0.82234728, 0.82012844, 0.81829959,
     &   0.81671995, 0.81527698, 0.81387836, 0.81257057, 0.81130725,
     &   0.81014717, 0.80905986, 0.80804741, 0.80716157, 0.80614150,
     &   0.80580586, 0.80975509, 0.81504214, 0.81339782, 0.80906433,
     &   0.80539101, 0.80350810, 0.80230856, 0.80189788, 0.80210501,
     &   0.80293375, 0.80451918, 0.80689418, 0.81018490, 0.81473875,
     &   0.82077187, 0.82867533, 0.83823228, 0.84930396, 0.86486763,
     &   0.89046401, 0.92773694, 0.96182382, 0.96755475, 0.96242714,
     &   0.95152372, 0.94128400, 0.93526137, 0.93043298, 0.92634338,
     &   0.91900939, 0.90185332, 0.86948657, 0.82818484, 0.80124068,
     &   0.78145677, 0.76838702, 0.76273990, 0.76313430, 0.76671398,
     &   0.77272439, 0.77976054, 0.78729051, 0.79496920, 0.80280739,
     &   0.81020558, 0.81765705, 0.82484084, 0.83175385, 0.83829325,
     &   0.84412849, 0.84935659, 0.85311532, 0.85436392, 0.85473776,
     &   0.85526478, 0.85638726, 0.85790098, 0.86012465, 0.86336493,
     &   0.86764228, 0.87291807, 0.87909293, 0.88695550, 0.89673805,
     &   0.90785444, 0.91431409, 0.90862209, 0.89094377, 0.87365401,
     &   0.86945015, 0.86895913, 0.86916959, 0.86979979, 0.87056822,
     &   0.87112111, 0.87152964, 0.87174284, 0.87177110, 0.87167621,
     &   0.87148762, 0.87122667, 0.87088853, 0.87040097, 0.86985612,
     &   0.86922836, 0.86853516, 0.86777627, 0.86695004, 0.86603528,
     &   0.86505330, 0.86399275, 0.86283880, 0.86163843, 0.86036617,
     &   0.85900027, 0.85766286, 0.85596895, 0.85424614, 0.85188890,
     &   0.84881270, 0.84503669, 0.84049070, 0.83512670, 0.82896310,
     &   0.82231402, 0.81478590, 0.80723333, 0.79974216, 0.79265410,
     &   0.78559810, 0.77874410, 0.77204543, 0.76567292, 0.75928175,
     &   0.75306910, 0.74698240, 0.74073350, 0.73463285, 0.72849774,
     &   0.72219795, 0.71588129, 0.70952016, 0.70327723, 0.69690311,
     &   0.69054306, 0.68438345, 0.67802691, 0.67187929, 0.66547132,
     &   0.65901881, 0.65291739, 0.64672405, 0.64045709, 0.63427418,
     &   0.62827706, 0.62162584, 0.61488318, 0.60801888, 0.60104525,
     &   0.59399271, 0.58686709, 0.57967335, 0.57254034, 0.56557262,
     &   0.55853474, 0.55130911, 0.54400909, 0.53667504, 0.52928299,
     &   0.52180803, 0.51423794, 0.50653684, 0.49866205, 0.49065956,
     &   0.48246896, 0.47406906, 0.46533754, 0.45636645, 0.44706321,
     &   0.43756029, 0.42788863, 0.41808772, 0.40822211, 0.39832425,
     &   0.38838124, 0.37836081, 0.36830625, 0.35826531, 0.34828216,
     &   0.33829290, 0.32831287, 0.31860197, 0.30910546, 0.29982051,
     &   0.29066294, 0.28174645, 0.27312136, 0.26483384, 0.25677997,
     &   0.24898212, 0.24144872, 0.23418625, 0.22721982, 0.22070839,
     &   0.21442641, 0.20828547, 0.20233916, 0.19662584, 0.19111435,
     &   0.18602991, 0.18106507, 0.17621298, 0.17147864, 0.16692272,
     &   0.16248700, 0.15829873, 0.15420739, 0.15019397, 0.14624439,
     &   0.14231730, 0.13849746, 0.13478395, 0.13116483, 0.12763371,
     &   0.12416931, 0.12076423, 0.11740698, 0.11410501, 0.11088280,
     &   0.10775743, 0.10475539, 0.10182589, 0.09890985, 0.09605380,
     &   0.09326269, 0.09052978, 0.08780178, 0.08512080, 0.08250186,
     &   0.07994477, 0.07743157, 0.07499962, 0.07262825, 0.07029751,
     &   0.06801128, 0.06577688, 0.06356100, 0.06141751, 0.05934443,
     &   0.05733975, 0.05540150, 0.05348876, 0.05163427, 0.04984452,
     &   0.04811725, 0.04645030, 0.04486012, 0.04332745, 0.04184749,
     &   0.04041842, 0.03903818, 0.03770475, 0.03641716, 0.03517382,
     &   0.03397249, 0.03280810, 0.03168384, 0.03059833, 0.02955112,
     &   0.02854295, 0.02756932, 0.02662903, 0.02572020, 0.02484196,
     &   0.02399380, 0.02317473, 0.02238391, 0.02162009, 0.02088232,
     &   0.02017713, 0.01949631, 0.01883842, 0.01820550, 0.01759452,
     &   0.01700399, 0.01643272, 0.01588055, 0.01534705, 0.01483212,
     &   0.01433441, 0.01385382, 0.01338962, 0.01294090, 0.01250880,
     &   0.01209109, 0.01168911, 0.01130149, 0.01092647, 0.01056337,
     &   0.01021221, 0.00987158, 0.00954226, 0.00922354, 0.00891541,
     &   0.00861717, 0.00832881, 0.00804993, 0.00778031, 0.00752004,
     &   0.00726841, 0.00702514, 0.00678989, 0.00656233, 0.00634234/
      data (gg(i,5),i=1,mxwv)/
     &   0.85563320, 0.85602611, 0.85642934, 0.85678023, 0.85712159,
     &   0.85742575, 0.85771060, 0.85802025, 0.85823357, 0.85844839,
     &   0.85864413, 0.85881537, 0.85897744, 0.85914212, 0.85925424,
     &   0.85938138, 0.85950154, 0.85955465, 0.85963023, 0.85965389,
     &   0.85981476, 0.85973406, 0.85974711, 0.85976636, 0.85962546,
     &   0.85973829, 0.85970360, 0.85966837, 0.85947204, 0.85950708,
     &   0.85943341, 0.85932559, 0.85928148, 0.85918808, 0.85898405,
     &   0.85895330, 0.85877466, 0.85865641, 0.85850585, 0.85835487,
     &   0.85828495, 0.85800630, 0.85782504, 0.85758477, 0.85744548,
     &   0.85724580, 0.85701180, 0.85674244, 0.85649019, 0.85628843,
     &   0.85602474, 0.85572892, 0.85540909, 0.85511899, 0.85485429,
     &   0.85455692, 0.85424262, 0.85385680, 0.85355061, 0.85322076,
     &   0.85286623, 0.85252750, 0.85219628, 0.85181367, 0.85141426,
     &   0.85104787, 0.85062158, 0.85028034, 0.84986031, 0.84942102,
     &   0.84902501, 0.84864128, 0.84812886, 0.84772360, 0.84726638,
     &   0.84688348, 0.84629887, 0.84599727, 0.84563702, 0.84523875,
     &   0.84477299, 0.84429729, 0.84379554, 0.84329247, 0.84273010,
     &   0.84231198, 0.84197360, 0.84180075, 0.84165174, 0.84237945,
     &   0.84462035, 0.84444076, 0.84322512, 0.84121060, 0.83970523,
     &   0.83853668, 0.83755708, 0.83663619, 0.83583832, 0.83509105,
     &   0.83446813, 0.83392000, 0.83343679, 0.83307809, 0.83244199,
     &   0.83266592, 0.83866966, 0.84606677, 0.84443051, 0.83904845,
     &   0.83410203, 0.83122104, 0.82893401, 0.82738811, 0.82629806,
     &   0.82560354, 0.82541573, 0.82568347, 0.82642299, 0.82802439,
     &   0.83057570, 0.83449143, 0.83935499, 0.84425050, 0.85305637,
     &   0.87465060, 0.91838354, 0.96582550, 0.97472960, 0.97002351,
     &   0.95938611, 0.94948053, 0.94408786, 0.94023293, 0.93829083,
     &   0.93697971, 0.93150645, 0.91420490, 0.88200998, 0.85356599,
     &   0.82767940, 0.80577749, 0.79053813, 0.78191030, 0.77732217,
     &   0.77637595, 0.77755451, 0.78014785, 0.78372443, 0.78844458,
     &   0.79331106, 0.79912007, 0.80537939, 0.81213993, 0.81915784,
     &   0.82593966, 0.83253032, 0.83757389, 0.83869624, 0.83809745,
     &   0.83748662, 0.83783835, 0.83885479, 0.84125024, 0.84561515,
     &   0.85218364, 0.86096013, 0.87158108, 0.88527256, 0.90213203,
     &   0.92095721, 0.93291497, 0.92945647, 0.91155660, 0.88634503,
     &   0.87739742, 0.87581998, 0.87618655, 0.87779272, 0.88003355,
     &   0.88217384, 0.88424939, 0.88613790, 0.88782692, 0.88940191,
     &   0.89089185, 0.89233148, 0.89370960, 0.89490968, 0.89606810,
     &   0.89715308, 0.89818305, 0.89916134, 0.90008616, 0.90092939,
     &   0.90172273, 0.90245342, 0.90310466, 0.90374744, 0.90435123,
     &   0.90489548, 0.90556073, 0.90581805, 0.90616655, 0.90579468,
     &   0.90462792, 0.90270078, 0.90000910, 0.89644581, 0.89204508,
     &   0.88715261, 0.88126206, 0.87529397, 0.86930245, 0.86368835,
     &   0.85814977, 0.85277587, 0.84756732, 0.84270507, 0.83785760,
     &   0.83319962, 0.82873565, 0.82413954, 0.81971198, 0.81527448,
     &   0.81073093, 0.80614471, 0.80152237, 0.79702759, 0.79243410,
     &   0.78781486, 0.78340095, 0.77878529, 0.77439260, 0.76977295,
     &   0.76503599, 0.76058877, 0.75605810, 0.75152385, 0.74709457,
     &   0.74290597, 0.73820293, 0.73339558, 0.72845364, 0.72338611,
     &   0.71821892, 0.71291840, 0.70751894, 0.70213932, 0.69687551,
     &   0.69150925, 0.68611801, 0.68062937, 0.67512399, 0.66956145,
     &   0.66395724, 0.65832376, 0.65260470, 0.64681178, 0.64092660,
     &   0.63498062, 0.62888819, 0.62261558, 0.61611891, 0.60932821,
     &   0.60226041, 0.59491754, 0.58727568, 0.57939565, 0.57129735,
     &   0.56296992, 0.55436850, 0.54547197, 0.53632367, 0.52699274,
     &   0.51733893, 0.50735623, 0.49724823, 0.48707953, 0.47686851,
     &   0.46647856, 0.45603278, 0.44563818, 0.43541983, 0.42525369,
     &   0.41517654, 0.40523326, 0.39545381, 0.38582683, 0.37670127,
     &   0.36782694, 0.35906076, 0.35042527, 0.34196472, 0.33372378,
     &   0.32610542, 0.31860468, 0.31126782, 0.30404913, 0.29704034,
     &   0.29017192, 0.28371057, 0.27737492, 0.27121717, 0.26512331,
     &   0.25902608, 0.25307116, 0.24726143, 0.24158759, 0.23603161,
     &   0.23058526, 0.22520241, 0.21986203, 0.21457312, 0.20936629,
     &   0.20425813, 0.19937396, 0.19459642, 0.18979658, 0.18505114,
     &   0.18038221, 0.17578372, 0.17113484, 0.16649671, 0.16191971,
     &   0.15740684, 0.15290625, 0.14851534, 0.14419943, 0.13990602,
     &   0.13564324, 0.13143528, 0.12721278, 0.12309697, 0.11908830,
     &   0.11518696, 0.11139281, 0.10760438, 0.10391353, 0.10034099,
     &   0.09688427, 0.09354073, 0.09034693, 0.08726393, 0.08428287,
     &   0.08140097, 0.07861479, 0.07592086, 0.07331795, 0.07080332,
     &   0.06837264, 0.06601496, 0.06373856, 0.06154075, 0.05942081,
     &   0.05738054, 0.05541059, 0.05350857, 0.05167064, 0.04989509,
     &   0.04818093, 0.04652613, 0.04492895, 0.04338687, 0.04189798,
     &   0.04047595, 0.03910358, 0.03777786, 0.03650309, 0.03527293,
     &   0.03408432, 0.03293475, 0.03182394, 0.03075101, 0.02971576,
     &   0.02871538, 0.02774968, 0.02681715, 0.02591596, 0.02504839,
     &   0.02420989, 0.02340322, 0.02262557, 0.02187332, 0.02114508,
     &   0.02044090, 0.01975791, 0.01909768, 0.01845881, 0.01784124,
     &   0.01724357, 0.01666576, 0.01610701, 0.01556690, 0.01504556,
     &   0.01454159, 0.01405440, 0.01358331, 0.01312769, 0.01268724/
      data (gg(i,6),i=1,mxwv)/
     &   0.85929167, 0.85976028, 0.86019212, 0.86063051, 0.86099911,
     &   0.86138177, 0.86167926, 0.86202049, 0.86232346, 0.86261982,
     &   0.86286354, 0.86309612, 0.86335456, 0.86355489, 0.86373919,
     &   0.86388850, 0.86406577, 0.86422247, 0.86436141, 0.86447895,
     &   0.86457914, 0.86467016, 0.86475188, 0.86481208, 0.86486536,
     &   0.86491764, 0.86495835, 0.86498827, 0.86501014, 0.86500251,
     &   0.86500931, 0.86499393, 0.86497670, 0.86499381, 0.86490285,
     &   0.86487079, 0.86481661, 0.86474985, 0.86467570, 0.86459881,
     &   0.86449087, 0.86442584, 0.86430335, 0.86424226, 0.86408174,
     &   0.86400896, 0.86385453, 0.86370313, 0.86353713, 0.86335838,
     &   0.86324632, 0.86308134, 0.86286002, 0.86265850, 0.86244744,
     &   0.86224681, 0.86202961, 0.86176515, 0.86159194, 0.86135387,
     &   0.86104822, 0.86084682, 0.86049867, 0.86028200, 0.86004639,
     &   0.85978341, 0.85949945, 0.85927629, 0.85903096, 0.85871029,
     &   0.85843241, 0.85805285, 0.85768116, 0.85744888, 0.85704774,
     &   0.85680598, 0.85646445, 0.85616624, 0.85603315, 0.85575974,
     &   0.85542423, 0.85509664, 0.85472423, 0.85433608, 0.85402268,
     &   0.85368657, 0.85356581, 0.85368198, 0.85381329, 0.85506266,
     &   0.85823816, 0.85838354, 0.85723448, 0.85508394, 0.85358322,
     &   0.85253185, 0.85172462, 0.85101396, 0.85048389, 0.85007709,
     &   0.84980023, 0.84967667, 0.84966195, 0.84984535, 0.84969229,
     &   0.85069638, 0.85910267, 0.86902767, 0.86779785, 0.86194444,
     &   0.85653585, 0.85367090, 0.85151732, 0.85028118, 0.84958971,
     &   0.84934813, 0.84967870, 0.85046208, 0.85163581, 0.85362011,
     &   0.85635072, 0.86013454, 0.86411071, 0.86640042, 0.87073863,
     &   0.88604736, 0.92385626, 0.97045618, 0.97967595, 0.97477221,
     &   0.96424443, 0.95446974, 0.94927704, 0.94566309, 0.94422799,
     &   0.94475108, 0.94465792, 0.93854845, 0.91979569, 0.89799803,
     &   0.87444109, 0.85206801, 0.83507347, 0.82450604, 0.81793797,
     &   0.81521076, 0.81464916, 0.81540346, 0.81696570, 0.81961769,
     &   0.82212168, 0.82553607, 0.82933891, 0.83374876, 0.83854997,
     &   0.84336340, 0.84831989, 0.85206133, 0.85110927, 0.84744126,
     &   0.84298253, 0.83916247, 0.83556783, 0.83341736, 0.83366227,
     &   0.83725107, 0.84480339, 0.85592026, 0.87289488, 0.89640242,
     &   0.92505765, 0.94439995, 0.94432628, 0.93090129, 0.90374762,
     &   0.88687646, 0.88011390, 0.87701094, 0.87668604, 0.87825525,
     &   0.88032520, 0.88276213, 0.88532305, 0.88783354, 0.89040345,
     &   0.89301199, 0.89571756, 0.89848292, 0.90108061, 0.90371174,
     &   0.90631616, 0.90890384, 0.91147548, 0.91401726, 0.91648364,
     &   0.91890728, 0.92126507, 0.92353141, 0.92579752, 0.92802411,
     &   0.93017966, 0.93250895, 0.93431711, 0.93627900, 0.93735570,
     &   0.93750960, 0.93679178, 0.93526882, 0.93280530, 0.92945629,
     &   0.92559671, 0.92066520, 0.91563153, 0.91053802, 0.90582031,
     &   0.90120852, 0.89675355, 0.89248037, 0.88857770, 0.88471848,
     &   0.88106930, 0.87766242, 0.87415129, 0.87083548, 0.86753780,
     &   0.86417490, 0.86077863, 0.85736954, 0.85411203, 0.85078931,
     &   0.84744477, 0.84432554, 0.84102315, 0.83796579, 0.83470976,
     &   0.83132714, 0.82821244, 0.82502866, 0.82187921, 0.81884527,
     &   0.81606352, 0.81287253, 0.80958760, 0.80618149, 0.80266201,
     &   0.79905111, 0.79529691, 0.79144692, 0.78759903, 0.78382635,
     &   0.77994519, 0.77615237, 0.77226698, 0.76838386, 0.76445860,
     &   0.76053238, 0.75663388, 0.75270784, 0.74880815, 0.74487662,
     &   0.74101228, 0.73711175, 0.73323888, 0.72926736, 0.72519070,
     &   0.72093689, 0.71649629, 0.71181434, 0.70692742, 0.70184612,
     &   0.69657362, 0.69108450, 0.68531299, 0.67927724, 0.67303401,
     &   0.66643900, 0.65945828, 0.65209872, 0.64450473, 0.63669407,
     &   0.62852752, 0.62004244, 0.61133218, 0.60253489, 0.59355718,
     &   0.58441556, 0.57516497, 0.56583744, 0.55635160, 0.54712659,
     &   0.53803444, 0.52893031, 0.51975524, 0.51051927, 0.50136918,
     &   0.49274170, 0.48412910, 0.47564912, 0.46718740, 0.45882064,
     &   0.45051351, 0.44260776, 0.43478283, 0.42721927, 0.41967836,
     &   0.41210115, 0.40463924, 0.39730519, 0.39011225, 0.38303441,
     &   0.37612051, 0.36927024, 0.36246416, 0.35570660, 0.34900266,
     &   0.34233505, 0.33600390, 0.32983753, 0.32365528, 0.31751642,
     &   0.31147602, 0.30554634, 0.29953808, 0.29345411, 0.28740442,
     &   0.28139395, 0.27529019, 0.26927748, 0.26332793, 0.25731283,
     &   0.25122163, 0.24510422, 0.23884074, 0.23262228, 0.22645408,
     &   0.22034155, 0.21429011, 0.20801441, 0.20177998, 0.19565679,
     &   0.18964890, 0.18375994, 0.17805597, 0.17248595, 0.16704223,
     &   0.16172631, 0.15653774, 0.15147556, 0.14654395, 0.14174297,
     &   0.13706727, 0.13249052, 0.12804706, 0.12373540, 0.11955727,
     &   0.11551898, 0.11160593, 0.10781575, 0.10414216, 0.10058396,
     &   0.09714140, 0.09381126, 0.09058962, 0.08747548, 0.08446581,
     &   0.08159129, 0.07881538, 0.07613228, 0.07355253, 0.07106236,
     &   0.06865555, 0.06632702, 0.06407673, 0.06190313, 0.05980603,
     &   0.05777977, 0.05582414, 0.05393611, 0.05211189, 0.05035639,
     &   0.04866016, 0.04702923, 0.04545765, 0.04393779, 0.04246686,
     &   0.04104489, 0.03966596, 0.03833342, 0.03704438, 0.03579873,
     &   0.03459356, 0.03342883, 0.03230290, 0.03121489, 0.03016505,
     &   0.02915052, 0.02817006, 0.02722230, 0.02630590, 0.02542028/
      data (gg(i,7),i=1,mxwv)/
     &   0.86207455, 0.86257666, 0.86306560, 0.86350971, 0.86396039,
     &   0.86435080, 0.86474526, 0.86510903, 0.86551118, 0.86579049,
     &   0.86608958, 0.86636627, 0.86664778, 0.86689991, 0.86713850,
     &   0.86731941, 0.86756980, 0.86777949, 0.86793941, 0.86810613,
     &   0.86819422, 0.86842436, 0.86856353, 0.86867672, 0.86878502,
     &   0.86889547, 0.86897022, 0.86908108, 0.86914277, 0.86920488,
     &   0.86927605, 0.86932909, 0.86936700, 0.86938471, 0.86944938,
     &   0.86941278, 0.86945337, 0.86941302, 0.86943287, 0.86941338,
     &   0.86933976, 0.86935657, 0.86931652, 0.86929446, 0.86927021,
     &   0.86918890, 0.86915433, 0.86908621, 0.86898899, 0.86890602,
     &   0.86884302, 0.86871678, 0.86861378, 0.86846226, 0.86836773,
     &   0.86817008, 0.86805546, 0.86793029, 0.86776626, 0.86766773,
     &   0.86746418, 0.86728209, 0.86713338, 0.86693603, 0.86671311,
     &   0.86655134, 0.86638767, 0.86629379, 0.86610472, 0.86590576,
     &   0.86564541, 0.86545140, 0.86521626, 0.86494672, 0.86472255,
     &   0.86452222, 0.86438060, 0.86420000, 0.86415708, 0.86398172,
     &   0.86374831, 0.86354035, 0.86327761, 0.86300689, 0.86280411,
     &   0.86264759, 0.86262721, 0.86290652, 0.86333585, 0.86512309,
     &   0.86935747, 0.86975902, 0.86852658, 0.86602479, 0.86433774,
     &   0.86320662, 0.86239874, 0.86172986, 0.86127347, 0.86094379,
     &   0.86084938, 0.86091030, 0.86112398, 0.86158848, 0.86161458,
     &   0.86311716, 0.87385577, 0.88621402, 0.88506049, 0.87830758,
     &   0.87197226, 0.86874187, 0.86639869, 0.86522096, 0.86475271,
     &   0.86488169, 0.86577117, 0.86727154, 0.86930096, 0.87238264,
     &   0.87640309, 0.88168210, 0.88704604, 0.89003420, 0.89466888,
     &   0.90973759, 0.94324309, 0.97778761, 0.98319238, 0.97774953,
     &   0.96725190, 0.95752180, 0.95237738, 0.94881213, 0.94746643,
     &   0.94839060, 0.95002520, 0.94938946, 0.94093490, 0.92652410,
     &   0.90686762, 0.88531911, 0.86768013, 0.85658240, 0.84993112,
     &   0.84778047, 0.84818071, 0.85008180, 0.85282248, 0.85667843,
     &   0.86014611, 0.86441463, 0.86884248, 0.87365776, 0.87860757,
     &   0.88333714, 0.88802540, 0.89144772, 0.89013404, 0.88581043,
     &   0.88018429, 0.87464923, 0.86862922, 0.86337954, 0.85981280,
     &   0.85916781, 0.86242914, 0.86913294, 0.88225913, 0.90376258,
     &   0.93442363, 0.95580459, 0.95670068, 0.94861346, 0.93219966,
     &   0.91596824, 0.90607238, 0.89903319, 0.89481127, 0.89303768,
     &   0.89222622, 0.89216334, 0.89266610, 0.89337748, 0.89446342,
     &   0.89584047, 0.89765006, 0.89986634, 0.90212381, 0.90468973,
     &   0.90748316, 0.91048831, 0.91370845, 0.91710025, 0.92058939,
     &   0.92417336, 0.92779744, 0.93140864, 0.93508708, 0.93878102,
     &   0.94240910, 0.94629371, 0.94951808, 0.95296246, 0.95527506,
     &   0.95647794, 0.95663744, 0.95592147, 0.95418257, 0.95150518,
     &   0.94828665, 0.94394696, 0.93948275, 0.93493557, 0.93076235,
     &   0.92671180, 0.92281651, 0.91911542, 0.91580313, 0.91255444,
     &   0.90953428, 0.90678710, 0.90395832, 0.90134603, 0.89877629,
     &   0.89616847, 0.89354527, 0.89093292, 0.88849837, 0.88602483,
     &   0.88355142, 0.88133001, 0.87894893, 0.87683713, 0.87454921,
     &   0.87215495, 0.87004328, 0.86787903, 0.86576110, 0.86376363,
     &   0.86201274, 0.85988253, 0.85766900, 0.85534459, 0.85292184,
     &   0.85041523, 0.84777260, 0.84504122, 0.84230274, 0.83961022,
     &   0.83680511, 0.83411443, 0.83133417, 0.82855523, 0.82573348,
     &   0.82292247, 0.82015675, 0.81739283, 0.81470668, 0.81202734,
     &   0.80948502, 0.80698735, 0.80465901, 0.80234158, 0.80007792,
     &   0.79774535, 0.79532844, 0.79276079, 0.79006183, 0.78723145,
     &   0.78428817, 0.78123093, 0.77798194, 0.77454501, 0.77096391,
     &   0.76713169, 0.76301253, 0.75847739, 0.75370234, 0.74870586,
     &   0.74338508, 0.73770672, 0.73172987, 0.72556484, 0.71916372,
     &   0.71251845, 0.70567226, 0.69864374, 0.69130498, 0.68400335,
     &   0.67674839, 0.66943181, 0.66193014, 0.65420926, 0.64645523,
     &   0.63897115, 0.63141298, 0.62392348, 0.61635256, 0.60872155,
     &   0.60103858, 0.59356993, 0.58608156, 0.57881510, 0.57149494,
     &   0.56410319, 0.55671930, 0.54935801, 0.54205120, 0.53477561,
     &   0.52762944, 0.52050149, 0.51339209, 0.50630122, 0.49919593,
     &   0.49201944, 0.48512930, 0.47839844, 0.47171226, 0.46506217,
     &   0.45852342, 0.45214090, 0.44578296, 0.43934736, 0.43296462,
     &   0.42664650, 0.42022955, 0.41389546, 0.40767094, 0.40139902,
     &   0.39503446, 0.38862991, 0.38208720, 0.37552065, 0.36892974,
     &   0.36231411, 0.35567373, 0.34850025, 0.34121543, 0.33392268,
     &   0.32663003, 0.31934234, 0.31208676, 0.30485946, 0.29766282,
     &   0.29050201, 0.28337955, 0.27629736, 0.26926753, 0.26229560,
     &   0.25537178, 0.24842130, 0.24155413, 0.23477581, 0.22809340,
     &   0.22151759, 0.21504791, 0.20868857, 0.20243350, 0.19628976,
     &   0.19026835, 0.18436581, 0.17856580, 0.17290026, 0.16737048,
     &   0.16204309, 0.15685491, 0.15180029, 0.14691252, 0.14216325,
     &   0.13754274, 0.13304298, 0.12866995, 0.12442411, 0.12030791,
     &   0.11631385, 0.11244454, 0.10869617, 0.10506305, 0.10155616,
     &   0.09815933, 0.09488908, 0.09173303, 0.08867542, 0.08571182,
     &   0.08284263, 0.08005548, 0.07735942, 0.07474899, 0.07222472,
     &   0.06978065, 0.06741765, 0.06513274, 0.06292444, 0.06079339,
     &   0.05873407, 0.05674412, 0.05482080, 0.05296148, 0.05116508/
      data (gg(i,8),i=1,mxwv)/
     &   0.86415082, 0.86470020, 0.86520845, 0.86570001, 0.86615551,
     &   0.86660403, 0.86702698, 0.86743528, 0.86780620, 0.86817056,
     &   0.86851180, 0.86885196, 0.86913478, 0.86943799, 0.86969519,
     &   0.86997896, 0.87023062, 0.87046015, 0.87068135, 0.87089401,
     &   0.87108797, 0.87127811, 0.87145698, 0.87161267, 0.87176722,
     &   0.87193519, 0.87204623, 0.87219024, 0.87225848, 0.87240922,
     &   0.87252927, 0.87259823, 0.87266862, 0.87276524, 0.87283915,
     &   0.87290239, 0.87297350, 0.87300140, 0.87305409, 0.87307775,
     &   0.87313449, 0.87316227, 0.87318403, 0.87321877, 0.87321573,
     &   0.87319076, 0.87319630, 0.87319952, 0.87315768, 0.87312305,
     &   0.87314165, 0.87303305, 0.87302113, 0.87290806, 0.87287748,
     &   0.87279671, 0.87272930, 0.87261528, 0.87251043, 0.87245822,
     &   0.87238336, 0.87225145, 0.87218541, 0.87204075, 0.87192309,
     &   0.87183547, 0.87176627, 0.87169826, 0.87160873, 0.87149715,
     &   0.87133116, 0.87116259, 0.87097770, 0.87081748, 0.87061965,
     &   0.87055415, 0.87041134, 0.87036735, 0.87042910, 0.87042522,
     &   0.87029284, 0.87014300, 0.86996472, 0.86978400, 0.86965275,
     &   0.86963290, 0.86974692, 0.87031490, 0.87094545, 0.87338996,
     &   0.87894279, 0.87968528, 0.87821656, 0.87520415, 0.87320584,
     &   0.87192732, 0.87104112, 0.87033731, 0.86993456, 0.86965406,
     &   0.86965293, 0.86988896, 0.87027019, 0.87099916, 0.87116754,
     &   0.87315321, 0.88664716, 0.90159076, 0.90042353, 0.89252526,
     &   0.88491464, 0.88100398, 0.87815440, 0.87674141, 0.87620276,
     &   0.87640339, 0.87753987, 0.87942922, 0.88195461, 0.88576460,
     &   0.89069593, 0.89711684, 0.90359700, 0.90726560, 0.91293132,
     &   0.93018579, 0.96187919, 0.98405242, 0.98544466, 0.97960538,
     &   0.96913284, 0.95942426, 0.95429432, 0.95074743, 0.94943005,
     &   0.95044482, 0.95253944, 0.95404065, 0.95199859, 0.94462174,
     &   0.93044513, 0.91118264, 0.89316422, 0.88099957, 0.87352097,
     &   0.87124997, 0.87206668, 0.87473559, 0.87844884, 0.88347143,
     &   0.88804162, 0.89346004, 0.89895397, 0.90471143, 0.91041011,
     &   0.91565698, 0.92062378, 0.92419791, 0.92344326, 0.91996497,
     &   0.91519511, 0.91035396, 0.90483624, 0.89981353, 0.89617991,
     &   0.89517766, 0.89772904, 0.90304500, 0.91356725, 0.93036991,
     &   0.95338988, 0.96704364, 0.96518725, 0.95902288, 0.95322114,
     &   0.94489378, 0.93828285, 0.93264616, 0.92850924, 0.92599154,
     &   0.92407984, 0.92263377, 0.92159110, 0.92061025, 0.91986811,
     &   0.91927475, 0.91902769, 0.91916168, 0.91933924, 0.91984361,
     &   0.92065424, 0.92178738, 0.92331278, 0.92523396, 0.92754012,
     &   0.93022317, 0.93325114, 0.93658423, 0.94027334, 0.94429559,
     &   0.94850278, 0.95326775, 0.95749336, 0.96211427, 0.96542346,
     &   0.96744597, 0.96822953, 0.96805865, 0.96679002, 0.96453911,
     &   0.96171957, 0.95775354, 0.95364600, 0.94944060, 0.94560605,
     &   0.94190180, 0.93835312, 0.93500626, 0.93205947, 0.92918909,
     &   0.92656058, 0.92422372, 0.92181820, 0.91964871, 0.91753769,
     &   0.91540474, 0.91327417, 0.91117370, 0.90927404, 0.90735394,
     &   0.90545923, 0.90384471, 0.90209353, 0.90064007, 0.89902645,
     &   0.89733958, 0.89598036, 0.89459163, 0.89326131, 0.89207298,
     &   0.89114714, 0.88981378, 0.88841277, 0.88691640, 0.88533175,
     &   0.88367867, 0.88191020, 0.88006604, 0.87822866, 0.87644827,
     &   0.87455797, 0.87274027, 0.87083000, 0.86890316, 0.86692011,
     &   0.86492109, 0.86293536, 0.86092854, 0.85897261, 0.85700941,
     &   0.85516244, 0.85336882, 0.85177433, 0.85024595, 0.84885985,
     &   0.84749174, 0.84612721, 0.84470499, 0.84322476, 0.84167957,
     &   0.84009296, 0.83847815, 0.83675838, 0.83492464, 0.83300519,
     &   0.83092761, 0.82865560, 0.82599431, 0.82312179, 0.82005829,
     &   0.81673300, 0.81307983, 0.80913806, 0.80499786, 0.80064309,
     &   0.79605663, 0.79127485, 0.78631002, 0.78102297, 0.77569026,
     &   0.77039492, 0.76506007, 0.75953996, 0.75377899, 0.74796700,
     &   0.74228400, 0.73652250, 0.73081684, 0.72501558, 0.71909958,
     &   0.71310055, 0.70718139, 0.70119941, 0.69538325, 0.68948323,
     &   0.68351406, 0.67748243, 0.67139417, 0.66528070, 0.65912098,
     &   0.65301645, 0.64687574, 0.64071226, 0.63452029, 0.62824333,
     &   0.62180895, 0.61547744, 0.60920388, 0.60297668, 0.59673238,
     &   0.59052736, 0.58441383, 0.57838833, 0.57230306, 0.56624472,
     &   0.56022912, 0.55416441, 0.54812407, 0.54218316, 0.53626698,
     &   0.53033215, 0.52441192, 0.51852584, 0.51261747, 0.50668722,
     &   0.50073504, 0.49476111, 0.48838347, 0.48187745, 0.47532281,
     &   0.46872017, 0.46207014, 0.45529485, 0.44847125, 0.44161275,
     &   0.43472052, 0.42779359, 0.42083013, 0.41383624, 0.40681353,
     &   0.39974120, 0.39249662, 0.38520989, 0.37793794, 0.37062272,
     &   0.36326882, 0.35590875, 0.34854671, 0.34117097, 0.33379012,
     &   0.32642135, 0.31904757, 0.31160146, 0.30418992, 0.29681903,
     &   0.28956163, 0.28236568, 0.27523109, 0.26822975, 0.26131544,
     &   0.25447536, 0.24769610, 0.24099973, 0.23439258, 0.22788079,
     &   0.22146688, 0.21516205, 0.20896754, 0.20288108, 0.19691488,
     &   0.19106369, 0.18537574, 0.17983045, 0.17440125, 0.16908896,
     &   0.16389233, 0.15878820, 0.15380514, 0.14893770, 0.14419208,
     &   0.13955739, 0.13504395, 0.13065058, 0.12637830, 0.12222937,
     &   0.11819944, 0.11428691, 0.11048917, 0.10680356, 0.10322997/
      data (gg(i,9),i=1,mxwv)/
     &   0.86570579, 0.86627316, 0.86681956, 0.86733145, 0.86779755,
     &   0.86828339, 0.86873442, 0.86917073, 0.86959422, 0.86997551,
     &   0.87033057, 0.87068945, 0.87102950, 0.87134981, 0.87164986,
     &   0.87193936, 0.87222141, 0.87248987, 0.87274337, 0.87298322,
     &   0.87321627, 0.87342876, 0.87364298, 0.87382525, 0.87402141,
     &   0.87419945, 0.87437236, 0.87452382, 0.87468487, 0.87482899,
     &   0.87496865, 0.87510151, 0.87523818, 0.87533218, 0.87542295,
     &   0.87555480, 0.87566102, 0.87573594, 0.87580919, 0.87588662,
     &   0.87596458, 0.87602592, 0.87608939, 0.87615889, 0.87621909,
     &   0.87626052, 0.87630016, 0.87633586, 0.87633747, 0.87636369,
     &   0.87635893, 0.87637556, 0.87636262, 0.87635684, 0.87632316,
     &   0.87631983, 0.87628138, 0.87622112, 0.87620938, 0.87614995,
     &   0.87611711, 0.87609148, 0.87602305, 0.87599266, 0.87593222,
     &   0.87587076, 0.87583029, 0.87590492, 0.87587899, 0.87580025,
     &   0.87569672, 0.87557459, 0.87539381, 0.87531763, 0.87524295,
     &   0.87516278, 0.87510377, 0.87515438, 0.87537348, 0.87545365,
     &   0.87538868, 0.87531090, 0.87518978, 0.87507123, 0.87499201,
     &   0.87508547, 0.87531817, 0.87619644, 0.87712485, 0.88037568,
     &   0.88756454, 0.88851970, 0.88688254, 0.88316619, 0.88072366,
     &   0.87918729, 0.87817532, 0.87737513, 0.87693816, 0.87667322,
     &   0.87677860, 0.87715858, 0.87776077, 0.87876087, 0.87905347,
     &   0.88162667, 0.89844346, 0.91603237, 0.91482747, 0.90577930,
     &   0.89671189, 0.89194459, 0.88841474, 0.88663977, 0.88593906,
     &   0.88613766, 0.88749206, 0.88974845, 0.89274335, 0.89725423,
     &   0.90302020, 0.91041005, 0.91766083, 0.92147869, 0.92741328,
     &   0.94565761, 0.97404289, 0.98733282, 0.98675025, 0.98076940,
     &   0.97032666, 0.96062624, 0.95549929, 0.95196092, 0.95065993,
     &   0.95170647, 0.95391148, 0.95605910, 0.95706600, 0.95487237,
     &   0.94684064, 0.93207133, 0.91532111, 0.90266180, 0.89436305,
     &   0.89169329, 0.89253563, 0.89550281, 0.89964533, 0.90519583,
     &   0.91019273, 0.91599697, 0.92174923, 0.92760092, 0.93319523,
     &   0.93815994, 0.94265550, 0.94579136, 0.94539768, 0.94282341,
     &   0.93912029, 0.93525386, 0.93067020, 0.92643458, 0.92348337,
     &   0.92311096, 0.92619044, 0.93172222, 0.94134641, 0.95450735,
     &   0.96872693, 0.97408485, 0.96965992, 0.96367317, 0.96263880,
     &   0.96023405, 0.95755613, 0.95488662, 0.95277768, 0.95147562,
     &   0.95044219, 0.94961959, 0.94897753, 0.94829738, 0.94769430,
     &   0.94709843, 0.94664198, 0.94635075, 0.94598436, 0.94573158,
     &   0.94558370, 0.94554502, 0.94568688, 0.94602907, 0.94659823,
     &   0.94744015, 0.94854909, 0.94997758, 0.95179760, 0.95411015,
     &   0.95686358, 0.96048772, 0.96415257, 0.96859968, 0.97204489,
     &   0.97432017, 0.97534108, 0.97540921, 0.97437757, 0.97236228,
     &   0.96977526, 0.96604151, 0.96215922, 0.95817345, 0.95455498,
     &   0.95106894, 0.94773823, 0.94461238, 0.94189209, 0.93925470,
     &   0.93686682, 0.93478042, 0.93263322, 0.93073279, 0.92890084,
     &   0.92705578, 0.92522466, 0.92343563, 0.92186278, 0.92028093,
     &   0.91874194, 0.91750497, 0.91614407, 0.91510576, 0.91391778,
     &   0.91268128, 0.91181505, 0.91094255, 0.91014570, 0.90952241,
     &   0.90920025, 0.90843731, 0.90762824, 0.90674227, 0.90578622,
     &   0.90478575, 0.90369719, 0.90255398, 0.90146142, 0.90048724,
     &   0.89943242, 0.89842397, 0.89734226, 0.89626122, 0.89513749,
     &   0.89399552, 0.89285290, 0.89166564, 0.89048034, 0.88925511,
     &   0.88807750, 0.88688982, 0.88579792, 0.88471991, 0.88372427,
     &   0.88274103, 0.88177294, 0.88078195, 0.87977344, 0.87874413,
     &   0.87771624, 0.87670648, 0.87565374, 0.87454766, 0.87340820,
     &   0.87218004, 0.87082809, 0.86915582, 0.86731839, 0.86533248,
     &   0.86313832, 0.86066127, 0.85793573, 0.85503560, 0.85195470,
     &   0.84867424, 0.84522712, 0.84162420, 0.83772933, 0.83379042,
     &   0.82990581, 0.82601041, 0.82195979, 0.81769669, 0.81340295,
     &   0.80921412, 0.80497015, 0.80079460, 0.79654425, 0.79218918,
     &   0.78776568, 0.78338808, 0.77895194, 0.77465773, 0.77028584,
     &   0.76586223, 0.76136482, 0.75679362, 0.75217336, 0.74748415,
     &   0.74281126, 0.73808306, 0.73331618, 0.72850215, 0.72358161,
     &   0.71848762, 0.71337032, 0.70822829, 0.70311564, 0.69794226,
     &   0.69273740, 0.68753779, 0.68242276, 0.67725766, 0.67207170,
     &   0.66687483, 0.66165996, 0.65639079, 0.65114713, 0.64594370,
     &   0.64076197, 0.63560587, 0.63059086, 0.62553954, 0.62045336,
     &   0.61533380, 0.61018234, 0.60496104, 0.59967589, 0.59433323,
     &   0.58893341, 0.58347678, 0.57783246, 0.57211447, 0.56634384,
     &   0.56052184, 0.55464941, 0.54872745, 0.54275668, 0.53673822,
     &   0.53065979, 0.52444249, 0.51817000, 0.51184350, 0.50545025,
     &   0.49895629, 0.49241287, 0.48582074, 0.47917122, 0.47246668,
     &   0.46571642, 0.45889390, 0.45190099, 0.44486344, 0.43778354,
     &   0.43065661, 0.42350060, 0.41631943, 0.40917939, 0.40204087,
     &   0.39489061, 0.38770762, 0.38051581, 0.37331700, 0.36610496,
     &   0.35889679, 0.35170040, 0.34451881, 0.33735266, 0.33017612,
     &   0.32302499, 0.31597349, 0.30899784, 0.30206871, 0.29520088,
     &   0.28837287, 0.28154647, 0.27477068, 0.26804280, 0.26137316,
     &   0.25473723, 0.24816571, 0.24166402, 0.23523824, 0.22888158,
     &   0.22261043, 0.21642868, 0.21033935, 0.20434508, 0.19845000/
      data (gg(i,10),i=1,mxwv)/
     &   0.86686021, 0.86744881, 0.86799252, 0.86853611, 0.86895543,
     &   0.86953557, 0.87000090, 0.87045169, 0.87083346, 0.87130159,
     &   0.87169057, 0.87206268, 0.87244010, 0.87277144, 0.87309670,
     &   0.87341088, 0.87371850, 0.87400341, 0.87433618, 0.87454772,
     &   0.87478763, 0.87503749, 0.87527174, 0.87549752, 0.87571692,
     &   0.87591606, 0.87611336, 0.87630445, 0.87646973, 0.87664890,
     &   0.87680864, 0.87697446, 0.87712395, 0.87727755, 0.87740767,
     &   0.87753981, 0.87766117, 0.87779158, 0.87790227, 0.87802625,
     &   0.87811464, 0.87821335, 0.87831587, 0.87840378, 0.87847877,
     &   0.87856746, 0.87864316, 0.87869686, 0.87875730, 0.87880206,
     &   0.87884343, 0.87888986, 0.87892693, 0.87895787, 0.87896967,
     &   0.87899965, 0.87898052, 0.87894756, 0.87899673, 0.87901521,
     &   0.87899166, 0.87898177, 0.87898558, 0.87897056, 0.87895143,
     &   0.87895536, 0.87902099, 0.87911314, 0.87916017, 0.87910670,
     &   0.87905478, 0.87896180, 0.87888515, 0.87879819, 0.87875277,
     &   0.87874502, 0.87876129, 0.87886900, 0.87927407, 0.87939793,
     &   0.87940049, 0.87935853, 0.87928092, 0.87917894, 0.87921232,
     &   0.87938583, 0.87977445, 0.88099146, 0.88227248, 0.88656443,
     &   0.89577186, 0.89704549, 0.89507163, 0.89045733, 0.88740164,
     &   0.88548803, 0.88425052, 0.88326609, 0.88282037, 0.88249201,
     &   0.88268197, 0.88320935, 0.88403571, 0.88537598, 0.88576812,
     &   0.88906181, 0.90978378, 0.92973238, 0.92852092, 0.91851294,
     &   0.90793192, 0.90216047, 0.89778507, 0.89552546, 0.89457971,
     &   0.89474243, 0.89632291, 0.89899188, 0.90251720, 0.90781522,
     &   0.91447639, 0.92282015, 0.93070608, 0.93453318, 0.94044930,
     &   0.95837849, 0.98088449, 0.98866546, 0.98750383, 0.98151189,
     &   0.97109073, 0.96138501, 0.95625317, 0.95271593, 0.95142490,
     &   0.95249093, 0.95473087, 0.95703691, 0.95912594, 0.95972371,
     &   0.95663917, 0.94748896, 0.93396294, 0.92200840, 0.91344202,
     &   0.91050118, 0.91131347, 0.91441357, 0.91874492, 0.92439854,
     &   0.92937386, 0.93496805, 0.94029838, 0.94547522, 0.95017070,
     &   0.95411140, 0.95747131, 0.95968848, 0.95947570, 0.95779967,
     &   0.95526469, 0.95248771, 0.94899625, 0.94561923, 0.94323462,
     &   0.94311613, 0.94609022, 0.95112145, 0.95909560, 0.96844149,
     &   0.97612560, 0.97728866, 0.97189605, 0.96588910, 0.96636462,
     &   0.96668011, 0.96625668, 0.96554589, 0.96492714, 0.96460730,
     &   0.96437061, 0.96422642, 0.96413827, 0.96402669, 0.96393830,
     &   0.96385384, 0.96383405, 0.96388811, 0.96388161, 0.96391714,
     &   0.96398133, 0.96407139, 0.96422249, 0.96442050, 0.96470135,
     &   0.96505171, 0.96548605, 0.96602982, 0.96672130, 0.96765304,
     &   0.96882635, 0.97057033, 0.97255701, 0.97531992, 0.97769487,
     &   0.97937530, 0.98013508, 0.98010373, 0.97909510, 0.97716653,
     &   0.97469872, 0.97110492, 0.96736628, 0.96352291, 0.96004313,
     &   0.95669538, 0.95350122, 0.95051217, 0.94792974, 0.94543296,
     &   0.94318873, 0.94125086, 0.93925613, 0.93751335, 0.93584430,
     &   0.93416697, 0.93250906, 0.93089908, 0.92951322, 0.92812437,
     &   0.92678648, 0.92576188, 0.92462009, 0.92381424, 0.92286450,
     &   0.92187721, 0.92128247, 0.92069417, 0.92019409, 0.91988826,
     &   0.91991156, 0.91948193, 0.91902107, 0.91849655, 0.91791737,
     &   0.91730845, 0.91663092, 0.91592097, 0.91529202, 0.91483450,
     &   0.91432649, 0.91387600, 0.91338164, 0.91292650, 0.91246617,
     &   0.91202241, 0.91161251, 0.91118222, 0.91076481, 0.91032660,
     &   0.90993643, 0.90951794, 0.90912014, 0.90867430, 0.90820146,
     &   0.90767443, 0.90709656, 0.90644801, 0.90576094, 0.90504396,
     &   0.90431547, 0.90357941, 0.90278995, 0.90195560, 0.90111178,
     &   0.90018398, 0.89914638, 0.89785725, 0.89645648, 0.89495516,
     &   0.89327663, 0.89136374, 0.88924867, 0.88701135, 0.88462818,
     &   0.88208151, 0.87940365, 0.87660491, 0.87355155, 0.87050384,
     &   0.86753935, 0.86458558, 0.86150503, 0.85824525, 0.85498452,
     &   0.85187787, 0.84874016, 0.84569210, 0.84259349, 0.83942139,
     &   0.83620602, 0.83307183, 0.82990098, 0.82688332, 0.82380325,
     &   0.82068020, 0.81750131, 0.81426382, 0.81099129, 0.80765885,
     &   0.80434060, 0.80096751, 0.79755175, 0.79408419, 0.79051226,
     &   0.78677911, 0.78299886, 0.77916563, 0.77532864, 0.77140749,
     &   0.76741654, 0.76337540, 0.75936723, 0.75529140, 0.75115168,
     &   0.74695116, 0.74272257, 0.73838937, 0.73400855, 0.72963804,
     &   0.72528166, 0.72092873, 0.71672416, 0.71247023, 0.70816988,
     &   0.70382553, 0.69943988, 0.69525683, 0.69108391, 0.68686813,
     &   0.68260872, 0.67830497, 0.67383534, 0.66929805, 0.66471082,
     &   0.66006964, 0.65538663, 0.65065324, 0.64586812, 0.64103103,
     &   0.63614351, 0.63120854, 0.62621135, 0.62115180, 0.61601764,
     &   0.61077696, 0.60547191, 0.60010302, 0.59467161, 0.58917648,
     &   0.58361703, 0.57797801, 0.57219887, 0.56634778, 0.56042576,
     &   0.55435091, 0.54820609, 0.54200029, 0.53574818, 0.52945143,
     &   0.52310598, 0.51670229, 0.51025212, 0.50375324, 0.49719042,
     &   0.49058831, 0.48394558, 0.47726658, 0.47055566, 0.46375072,
     &   0.45691743, 0.45010355, 0.44330046, 0.43650109, 0.42973113,
     &   0.42295146, 0.41613054, 0.40930209, 0.40246725, 0.39562780,
     &   0.38874793, 0.38186124, 0.37497419, 0.36808857, 0.36116758,
     &   0.35425279, 0.34734738, 0.34045577, 0.33358216, 0.32672521/
      data (gg(i,11),i=1,mxwv)/
     &   0.86769879, 0.86830479, 0.86887866, 0.86941910, 0.86995268,
     &   0.87045628, 0.87093663, 0.87141192, 0.87185776, 0.87228376,
     &   0.87268829, 0.87308472, 0.87345773, 0.87382299, 0.87425536,
     &   0.87450135, 0.87481707, 0.87512726, 0.87541640, 0.87570256,
     &   0.87597644, 0.87623835, 0.87648392, 0.87671274, 0.87696451,
     &   0.87718719, 0.87741238, 0.87760931, 0.87781465, 0.87800986,
     &   0.87819755, 0.87837833, 0.87855524, 0.87872010, 0.87889177,
     &   0.87902391, 0.87918544, 0.87932426, 0.87946743, 0.87959832,
     &   0.87972724, 0.87984902, 0.87997448, 0.88007826, 0.88019824,
     &   0.88029712, 0.88040406, 0.88048887, 0.88057297, 0.88065052,
     &   0.88072395, 0.88078338, 0.88085365, 0.88091004, 0.88097358,
     &   0.88100523, 0.88103610, 0.88106620, 0.88109136, 0.88113493,
     &   0.88116443, 0.88117802, 0.88122392, 0.88124335, 0.88126785,
     &   0.88131064, 0.88143629, 0.88160843, 0.88170332, 0.88170034,
     &   0.88165879, 0.88158000, 0.88150090, 0.88144118, 0.88143736,
     &   0.88146198, 0.88153738, 0.88174969, 0.88216257, 0.88254052,
     &   0.88259017, 0.88258922, 0.88254511, 0.88248152, 0.88253087,
     &   0.88282365, 0.88337606, 0.88502938, 0.88673556, 0.89237070,
     &   0.90404981, 0.90566897, 0.90328348, 0.89754307, 0.89368612,
     &   0.89125937, 0.88969344, 0.88857144, 0.88782907, 0.88749391,
     &   0.88775873, 0.88845557, 0.88953441, 0.89125228, 0.89176673,
     &   0.89594769, 0.92105860, 0.94258136, 0.94139826, 0.93092847,
     &   0.91901135, 0.91216093, 0.90679568, 0.90392965, 0.90265220,
     &   0.90273219, 0.90455574, 0.90768677, 0.91179812, 0.91794336,
     &   0.92549652, 0.93465507, 0.94290626, 0.94661087, 0.95227814,
     &   0.96858722, 0.98432010, 0.98923337, 0.98796481, 0.98199207,
     &   0.97157800, 0.96185619, 0.95671403, 0.95317286, 0.95188731,
     &   0.95296842, 0.95522892, 0.95757639, 0.95996046, 0.96166778,
     &   0.96148670, 0.95733601, 0.94833308, 0.93849123, 0.93051738,
     &   0.92757487, 0.92833453, 0.93136650, 0.93552524, 0.94083095,
     &   0.94531018, 0.95011455, 0.95444673, 0.95839572, 0.96173847,
     &   0.96434933, 0.96641308, 0.96766859, 0.96757686, 0.96670902,
     &   0.96532935, 0.96372485, 0.96155018, 0.95930046, 0.95767146,
     &   0.95772099, 0.96012956, 0.96397567, 0.96953607, 0.97522020,
     &   0.97902775, 0.97873878, 0.97315747, 0.96715951, 0.96802419,
     &   0.96931630, 0.96988648, 0.97014832, 0.97031194, 0.97050172,
     &   0.97067177, 0.97085249, 0.97103441, 0.97119737, 0.97136986,
     &   0.97155011, 0.97176301, 0.97201234, 0.97224039, 0.97249955,
     &   0.97278112, 0.97308803, 0.97342920, 0.97380525, 0.97421300,
     &   0.97465765, 0.97513765, 0.97565758, 0.97623014, 0.97689450,
     &   0.97763813, 0.97862279, 0.97965258, 0.98107171, 0.98230588,
     &   0.98315412, 0.98346281, 0.98317885, 0.98208773, 0.98016989,
     &   0.97776127, 0.97425348, 0.97060800, 0.96685737, 0.96346617,
     &   0.96020532, 0.95709550, 0.95418948, 0.95168948, 0.94927609,
     &   0.94711614, 0.94526505, 0.94335914, 0.94170755, 0.94013232,
     &   0.93855172, 0.93699270, 0.93548453, 0.93420422, 0.93292421,
     &   0.93169850, 0.93079114, 0.92976981, 0.92909050, 0.92827064,
     &   0.92741728, 0.92696416, 0.92652309, 0.92617661, 0.92603266,
     &   0.92622972, 0.92597336, 0.92569226, 0.92535400, 0.92496747,
     &   0.92455876, 0.92408890, 0.92359430, 0.92319554, 0.92298812,
     &   0.92274362, 0.92256969, 0.92236710, 0.92222512, 0.92209977,
     &   0.92201525, 0.92199337, 0.92197663, 0.92199928, 0.92203152,
     &   0.92214644, 0.92228144, 0.92238599, 0.92247021, 0.92249405,
     &   0.92243588, 0.92230439, 0.92206103, 0.92175967, 0.92141414,
     &   0.92103702, 0.92061985, 0.92010897, 0.91953057, 0.91894144,
     &   0.91822892, 0.91737491, 0.91628599, 0.91511405, 0.91386843,
     &   0.91244704, 0.91081208, 0.90900815, 0.90712595, 0.90512133,
     &   0.90297800, 0.90073067, 0.89838773, 0.89581561, 0.89330280,
     &   0.89090312, 0.88853091, 0.88604951, 0.88340968, 0.88084328,
     &   0.87839675, 0.87598664, 0.87369108, 0.87136465, 0.86899370,
     &   0.86660266, 0.86434829, 0.86208344, 0.86000967, 0.85789454,
     &   0.85574782, 0.85357600, 0.85137928, 0.84917855, 0.84695011,
     &   0.84477043, 0.84255904, 0.84032351, 0.83805454, 0.83570200,
     &   0.83320785, 0.83073115, 0.82823753, 0.82573926, 0.82316840,
     &   0.82054639, 0.81789088, 0.81523770, 0.81248903, 0.80966538,
     &   0.80676520, 0.80378997, 0.80069959, 0.79753119, 0.79430979,
     &   0.79103601, 0.78770423, 0.78441918, 0.78103977, 0.77756798,
     &   0.77400637, 0.77035755, 0.76690704, 0.76346880, 0.75998688,
     &   0.75646311, 0.75289893, 0.74922132, 0.74549109, 0.74172008,
     &   0.73790908, 0.73406154, 0.73018110, 0.72626269, 0.72230655,
     &   0.71832496, 0.71438324, 0.71040094, 0.70637739, 0.70230538,
     &   0.69816750, 0.69398296, 0.68975061, 0.68547952, 0.68116546,
     &   0.67679948, 0.67238116, 0.66790652, 0.66336769, 0.65876353,
     &   0.65398246, 0.64912528, 0.64420074, 0.63917285, 0.63407224,
     &   0.62890851, 0.62368530, 0.61839801, 0.61304212, 0.60760248,
     &   0.60209876, 0.59652245, 0.59087747, 0.58517408, 0.57934386,
     &   0.57345390, 0.56749666, 0.56148392, 0.55543697, 0.54937977,
     &   0.54328197, 0.53714406, 0.53096622, 0.52475727, 0.51851255,
     &   0.51221269, 0.50587606, 0.49950999, 0.49311405, 0.48664403,
     &   0.48014596, 0.47362301, 0.46708125, 0.46052697, 0.45395344/
      data (gg(i,12),i=1,mxwv)/
     &   0.86831170, 0.86892611, 0.86950588, 0.87006736, 0.87061650,
     &   0.87112576, 0.87161839, 0.87210166, 0.87257916, 0.87300217,
     &   0.87342572, 0.87382627, 0.87422889, 0.87459022, 0.87494785,
     &   0.87529498, 0.87562650, 0.87594783, 0.87625712, 0.87655067,
     &   0.87683904, 0.87711751, 0.87738538, 0.87764758, 0.87789375,
     &   0.87813270, 0.87836349, 0.87859350, 0.87880582, 0.87901694,
     &   0.87921977, 0.87941945, 0.87959969, 0.87979174, 0.87996984,
     &   0.88013351, 0.88031197, 0.88047129, 0.88062680, 0.88077426,
     &   0.88092113, 0.88106740, 0.88121545, 0.88134259, 0.88147074,
     &   0.88160163, 0.88170147, 0.88179803, 0.88192976, 0.88202780,
     &   0.88212055, 0.88221151, 0.88230157, 0.88238519, 0.88245958,
     &   0.88251948, 0.88257474, 0.88263494, 0.88268197, 0.88274676,
     &   0.88280630, 0.88286680, 0.88291723, 0.88296872, 0.88302237,
     &   0.88309300, 0.88327658, 0.88354516, 0.88369679, 0.88370341,
     &   0.88367778, 0.88361090, 0.88352108, 0.88346839, 0.88348472,
     &   0.88355798, 0.88367873, 0.88399142, 0.88477212, 0.88510680,
     &   0.88520294, 0.88522756, 0.88519591, 0.88513058, 0.88582873,
     &   0.88569438, 0.88639212, 0.88861156, 0.89090234, 0.89821237,
     &   0.91279000, 0.91476500, 0.91191447, 0.90486270, 0.90000987,
     &   0.89689684, 0.89489949, 0.89328557, 0.89248276, 0.89204133,
     &   0.89237589, 0.89326817, 0.89465004, 0.89682239, 0.89747024,
     &   0.90274251, 0.93240190, 0.95398837, 0.95294517, 0.94287133,
     &   0.93035108, 0.92231518, 0.91589338, 0.91232193, 0.91063148,
     &   0.91058540, 0.91265982, 0.91629642, 0.92102641, 0.92801011,
     &   0.93632239, 0.94594473, 0.95408165, 0.95748490, 0.96259135,
     &   0.97595477, 0.98579675, 0.98953760, 0.98826092, 0.98230350,
     &   0.97188365, 0.96213871, 0.95698321, 0.95343494, 0.95215195,
     &   0.95324516, 0.95552206, 0.95788860, 0.96034259, 0.96238190,
     &   0.96345633, 0.96254766, 0.95800221, 0.95132494, 0.94493496,
     &   0.94237447, 0.94307411, 0.94578785, 0.94940567, 0.95381033,
     &   0.95734525, 0.96090704, 0.96390760, 0.96644437, 0.96843421,
     &   0.96987444, 0.97092569, 0.97149986, 0.97147447, 0.97115546,
     &   0.97062767, 0.96997440, 0.96898466, 0.96787870, 0.96708417,
     &   0.96733034, 0.96907258, 0.97164625, 0.97502488, 0.97819084,
     &   0.98021048, 0.97953385, 0.97394341, 0.96795470, 0.96890521,
     &   0.97047478, 0.97139144, 0.97203684, 0.97253901, 0.97295654,
     &   0.97330928, 0.97363591, 0.97393155, 0.97421092, 0.97448736,
     &   0.97477245, 0.97507119, 0.97538418, 0.97569376, 0.97602737,
     &   0.97637981, 0.97675818, 0.97716480, 0.97760242, 0.97806376,
     &   0.97856259, 0.97909743, 0.97966540, 0.98029608, 0.98098314,
     &   0.98172832, 0.98261595, 0.98342681, 0.98439896, 0.98514861,
     &   0.98555487, 0.98559064, 0.98513323, 0.98397642, 0.98206002,
     &   0.97968984, 0.97624022, 0.97265702, 0.96896666, 0.96563119,
     &   0.96242404, 0.95936501, 0.95650822, 0.95405662, 0.95169181,
     &   0.94958073, 0.94778019, 0.94592583, 0.94432724, 0.94280648,
     &   0.94128221, 0.93978047, 0.93833113, 0.93711191, 0.93589497,
     &   0.93473387, 0.93389410, 0.93294197, 0.93233526, 0.93158978,
     &   0.93081254, 0.93043905, 0.93008006, 0.92981893, 0.92976379,
     &   0.93005407, 0.92989242, 0.92970878, 0.92947048, 0.92918658,
     &   0.92888361, 0.92852235, 0.92813957, 0.92785692, 0.92777091,
     &   0.92765224, 0.92760998, 0.92754418, 0.92754591, 0.92757118,
     &   0.92764586, 0.92779255, 0.92795444, 0.92816734, 0.92840248,
     &   0.92873639, 0.92907625, 0.92945611, 0.92979825, 0.93008447,
     &   0.93029219, 0.93042833, 0.93044806, 0.93041074, 0.93033087,
     &   0.93021911, 0.93006051, 0.92979568, 0.92945373, 0.92910099,
     &   0.92860514, 0.92794603, 0.92704523, 0.92606854, 0.92502654,
     &   0.92380172, 0.92236531, 0.92077053, 0.91911727, 0.91735113,
     &   0.91545671, 0.91347104, 0.91140532, 0.90911734, 0.90691692,
     &   0.90484828, 0.90281838, 0.90068787, 0.89840829, 0.89616877,
     &   0.89418095, 0.89219296, 0.89033717, 0.88846296, 0.88656044,
     &   0.88465244, 0.88291430, 0.88118339, 0.87967390, 0.87813967,
     &   0.87658715, 0.87503219, 0.87347674, 0.87194699, 0.87041092,
     &   0.86896044, 0.86750668, 0.86605018, 0.86458904, 0.86306953,
     &   0.86142761, 0.85986912, 0.85834521, 0.85684979, 0.85531831,
     &   0.85378611, 0.85228217, 0.85081601, 0.84927106, 0.84769505,
     &   0.84609044, 0.84441513, 0.84267652, 0.84092027, 0.83912432,
     &   0.83726996, 0.83536339, 0.83346951, 0.83148152, 0.82939583,
     &   0.82720900, 0.82491755, 0.82259738, 0.82022142, 0.81777608,
     &   0.81526119, 0.81267691, 0.80996311, 0.80717444, 0.80432075,
     &   0.80140257, 0.79842228, 0.79538316, 0.79228258, 0.78912175,
     &   0.78591174, 0.78271145, 0.77946240, 0.77616566, 0.77282053,
     &   0.76942307, 0.76598138, 0.76249629, 0.75897950, 0.75542951,
     &   0.75183886, 0.74821746, 0.74459738, 0.74093604, 0.73723286,
     &   0.73339868, 0.72951096, 0.72557640, 0.72153991, 0.71744168,
     &   0.71329522, 0.70911330, 0.70488280, 0.70059961, 0.69625455,
     &   0.69185656, 0.68739510, 0.68287206, 0.67829376, 0.67362326,
     &   0.66889244, 0.66405725, 0.65913820, 0.65416813, 0.64915788,
     &   0.64409477, 0.63900304, 0.63385499, 0.62866044, 0.62341017,
     &   0.61810613, 0.61274499, 0.60733068, 0.60186023, 0.59630424,
     &   0.59069055, 0.58502078, 0.57929963, 0.57353246, 0.56771332/
      data (gg(i,13),i=1,mxwv)/
     &   0.86874950, 0.86937523, 0.86996394, 0.87053841, 0.87108672,
     &   0.87160975, 0.87211424, 0.87260741, 0.87307900, 0.87352484,
     &   0.87395179, 0.87436712, 0.87476403, 0.87514901, 0.87551814,
     &   0.87583959, 0.87621832, 0.87654752, 0.87686646, 0.87718022,
     &   0.87747312, 0.87776649, 0.87804168, 0.87830687, 0.87856972,
     &   0.87882382, 0.87906879, 0.87929326, 0.87953258, 0.87975377,
     &   0.87996948, 0.88017637, 0.88038152, 0.88057828, 0.88076061,
     &   0.88095659, 0.88113701, 0.88130826, 0.88147444, 0.88164258,
     &   0.88178986, 0.88196921, 0.88212043, 0.88227338, 0.88241756,
     &   0.88255817, 0.88268816, 0.88281339, 0.88293791, 0.88305181,
     &   0.88315976, 0.88326931, 0.88337559, 0.88348174, 0.88357466,
     &   0.88365263, 0.88372821, 0.88379669, 0.88387007, 0.88394415,
     &   0.88403374, 0.88411933, 0.88418859, 0.88428080, 0.88434279,
     &   0.88445109, 0.88470691, 0.88507169, 0.88528919, 0.88531703,
     &   0.88527870, 0.88518900, 0.88509685, 0.88503420, 0.88506156,
     &   0.88517106, 0.88534236, 0.88576943, 0.88687420, 0.88729548,
     &   0.88743240, 0.88747567, 0.88744146, 0.88736647, 0.88749766,
     &   0.88804781, 0.88907462, 0.89202386, 0.89513886, 0.90447342,
     &   0.92223132, 0.92451614, 0.92123073, 0.91278315, 0.90676606,
     &   0.90284044, 0.90024561, 0.89813787, 0.89707673, 0.89647794,
     &   0.89688146, 0.89800590, 0.89975536, 0.90253252, 0.90327531,
     &   0.90980607, 0.94359696, 0.96316302, 0.96236646, 0.95378017,
     &   0.94128442, 0.93276876, 0.92537850, 0.92106515, 0.91890836,
     &   0.91870040, 0.92103314, 0.92517585, 0.93048990, 0.93817258,
     &   0.94690663, 0.95637083, 0.96372402, 0.96663129, 0.97086459,
     &   0.98050284, 0.98635459, 0.98972684, 0.98845464, 0.98250371,
     &   0.97206926, 0.96229768, 0.95712745, 0.95357060, 0.95228815,
     &   0.95339119, 0.95568192, 0.95806253, 0.96053821, 0.96265823,
     &   0.96413678, 0.96477824, 0.96341497, 0.96000099, 0.95585865,
     &   0.95408416, 0.95473015, 0.95690602, 0.95966935, 0.96282035,
     &   0.96521020, 0.96744937, 0.96921140, 0.97059846, 0.97162348,
     &   0.97232646, 0.97280991, 0.97304076, 0.97304714, 0.97300011,
     &   0.97293079, 0.97284108, 0.97263026, 0.97235894, 0.97224039,
     &   0.97266018, 0.97385889, 0.97547901, 0.97746164, 0.97937697,
     &   0.98078090, 0.98002952, 0.97444737, 0.96845937, 0.96943128,
     &   0.97106755, 0.97208017, 0.97284484, 0.97346163, 0.97396207,
     &   0.97438413, 0.97476941, 0.97511011, 0.97543699, 0.97575569,
     &   0.97608328, 0.97641665, 0.97675514, 0.97709650, 0.97745770,
     &   0.97783530, 0.97823769, 0.97866422, 0.97911817, 0.97959244,
     &   0.98010278, 0.98064935, 0.98122925, 0.98187536, 0.98257619,
     &   0.98334038, 0.98423564, 0.98503250, 0.98593891, 0.98659509,
     &   0.98688847, 0.98684496, 0.98633164, 0.98515832, 0.98325598,
     &   0.98091769, 0.97750992, 0.97396809, 0.97031564, 0.96701366,
     &   0.96383786, 0.96080774, 0.95797849, 0.95555395, 0.95321625,
     &   0.95113254, 0.94936079, 0.94753569, 0.94596756, 0.94447821,
     &   0.94298655, 0.94151789, 0.94010264, 0.93891925, 0.93773943,
     &   0.93661636, 0.93581706, 0.93490613, 0.93434328, 0.93364257,
     &   0.93291098, 0.93258572, 0.93227649, 0.93206710, 0.93206584,
     &   0.93241268, 0.93230790, 0.93218237, 0.93200350, 0.93178052,
     &   0.93153977, 0.93124205, 0.93092436, 0.93070871, 0.93069190,
     &   0.93064398, 0.93067515, 0.93068463, 0.93076396, 0.93086922,
     &   0.93102646, 0.93125862, 0.93150884, 0.93181348, 0.93214464,
     &   0.93257880, 0.93302339, 0.93351418, 0.93397123, 0.93437696,
     &   0.93470854, 0.93497258, 0.93512315, 0.93522054, 0.93527919,
     &   0.93530971, 0.93529636, 0.93517762, 0.93498313, 0.93478125,
     &   0.93443388, 0.93392032, 0.93316239, 0.93233097, 0.93143696,
     &   0.93035889, 0.92906940, 0.92762434, 0.92612636, 0.92451924,
     &   0.92278761, 0.92096949, 0.91907638, 0.91696388, 0.91494834,
     &   0.91307294, 0.91124249, 0.90931600, 0.90724456, 0.90522027,
     &   0.90346152, 0.90170640, 0.90009391, 0.89846987, 0.89682484,
     &   0.89518207, 0.89372188, 0.89227760, 0.89106870, 0.88984412,
     &   0.88861006, 0.88738424, 0.88616949, 0.88499063, 0.88382292,
     &   0.88275450, 0.88169515, 0.88065046, 0.87961489, 0.87853497,
     &   0.87734401, 0.87626350, 0.87524211, 0.87427205, 0.87328798,
     &   0.87233150, 0.87143826, 0.87061542, 0.86973715, 0.86886311,
     &   0.86800015, 0.86709261, 0.86616564, 0.86528027, 0.86439383,
     &   0.86349124, 0.86257839, 0.86172563, 0.86082596, 0.85987681,
     &   0.85887539, 0.85781848, 0.85663241, 0.85538512, 0.85409141,
     &   0.85274929, 0.85135686, 0.84982216, 0.84822315, 0.84657174,
     &   0.84486634, 0.84310573, 0.84128928, 0.83941376, 0.83747768,
     &   0.83547878, 0.83341616, 0.83129555, 0.82911557, 0.82687014,
     &   0.82454526, 0.82216167, 0.81971902, 0.81722116, 0.81466764,
     &   0.81205553, 0.80938566, 0.80666482, 0.80389136, 0.80106574,
     &   0.79812801, 0.79513252, 0.79208440, 0.78894991, 0.78575200,
     &   0.78249961, 0.77920234, 0.77585262, 0.77244878, 0.76898670,
     &   0.76547277, 0.76190025, 0.75827098, 0.75459015, 0.75084156,
     &   0.74704069, 0.74314433, 0.73916888, 0.73514116, 0.73106354,
     &   0.72693551, 0.72278655, 0.71858615, 0.71434247, 0.71004838,
     &   0.70571768, 0.70133740, 0.69690901, 0.69242942, 0.68788868,
     &   0.68329453, 0.67864645, 0.67394644, 0.66919690, 0.66439301/

c     106um ice
      data (gg(i,14),i=1,mxwv)/
     &   0.88151944, 0.88211322, 0.88281554, 0.88296854, 0.88325644,
     &   0.88353211, 0.88399720, 0.88424736, 0.88430274, 0.88493127,
     &   0.88535219, 0.88557827, 0.88601434, 0.88600039, 0.88631201,
     &   0.88662720, 0.88676959, 0.88696909, 0.88727963, 0.88740814,
     &   0.88743752, 0.88774115, 0.88788700, 0.88805914, 0.88812941,
     &   0.88835877, 0.88850909, 0.88858843, 0.88869792, 0.88875097,
     &   0.88899046, 0.88865894, 0.88914657, 0.88929021, 0.88953066,
     &   0.88940525, 0.88944829, 0.88962328, 0.88964301, 0.88972282,
     &   0.88994640, 0.88998580, 0.89000505, 0.88970691, 0.89007592,
     &   0.89015788, 0.89018166, 0.89023119, 0.89023405, 0.89028168,
     &   0.89034998, 0.89040083, 0.89053255, 0.89048934, 0.89055878,
     &   0.89059401, 0.89059722, 0.89065498, 0.89072543, 0.89070958,
     &   0.89053386, 0.89079404, 0.89080793, 0.89087123, 0.89090687,
     &   0.89099151, 0.89087242, 0.89101392, 0.89111739, 0.89120382,
     &   0.89131409, 0.89139819, 0.89166838, 0.89150196, 0.89147568,
     &   0.89149225, 0.89226025, 0.89169449, 0.89169353, 0.89200920,
     &   0.89222997, 0.89289087, 0.89328706, 0.89351839, 0.89356768,
     &   0.89359188, 0.89368796, 0.89391983, 0.89403516, 0.89459932,
     &   0.89918512, 0.90994984, 0.92653823, 0.93297589, 0.92998797,
     &   0.92547959, 0.91954702, 0.91550273, 0.91385335, 0.91148823,
     &   0.90926450, 0.90755624, 0.90667927, 0.90625334, 0.90572476,
     &   0.90599900, 0.91298300, 0.93242729, 0.95265400, 0.95809197,
     &   0.95618248, 0.95139027, 0.94065982, 0.92755926, 0.91975224,
     &   0.91611660, 0.91527355, 0.91878963, 0.92577028, 0.93174142,
     &   0.93561488, 0.93958330, 0.94340330, 0.94631505, 0.95048779,
     &   0.96650350, 0.98194391, 0.98980612, 0.99359185, 0.99607092,
     &   0.98809892, 0.96526647, 0.94908696, 0.92411816, 0.91170073,
     &   0.91776705, 0.92656046, 0.93662459, 0.94425672, 0.94965953,
     &   0.95403737, 0.95720327, 0.95873231, 0.95881325, 0.95906401,
     &   0.95910764, 0.96018171, 0.96236038, 0.96456403, 0.96593684,
     &   0.96708959, 0.96819478, 0.96913713, 0.96991903, 0.97025502,
     &   0.97009170, 0.96956134, 0.96935344, 0.96909118, 0.96909934,
     &   0.96883416, 0.96873832, 0.96922904, 0.96999419, 0.97081715,
     &   0.97203296, 0.97313249, 0.97404909, 0.97475225, 0.97526544,
     &   0.97528726, 0.97422081, 0.97316003, 0.97205365, 0.97134012,
     &   0.97099590, 0.97127181, 0.97153240, 0.97146404, 0.97130233,
     &   0.97125310, 0.97127181, 0.97126228, 0.97137755, 0.97153884,
     &   0.97158444, 0.97155565, 0.97160560, 0.97182941, 0.97228527,
     &   0.97298187, 0.97370768, 0.97429603, 0.97488785, 0.97552258,
     &   0.97615808, 0.97681737, 0.97766870, 0.97866529, 0.97995448,
     &   0.98164594, 0.98358494, 0.98528105, 0.98635948, 0.98473656,
     &   0.97863835, 0.97001821, 0.96226043, 0.95520490, 0.94984931,
     &   0.94499719, 0.94107330, 0.93772393, 0.93489492, 0.93338662,
     &   0.93208903, 0.93120766, 0.93127388, 0.93136203, 0.93152976,
     &   0.93220341, 0.93341601, 0.93499672, 0.93661726, 0.93821025,
     &   0.93969578, 0.94091243, 0.94190001, 0.94270974, 0.94302523,
     &   0.94304681, 0.94318926, 0.94376129, 0.94441247, 0.94495553,
     &   0.94558704, 0.94624299, 0.94668770, 0.94664049, 0.94614685,
     &   0.94544089, 0.94436544, 0.94270372, 0.94097888, 0.93847191,
     &   0.93513125, 0.93181187, 0.93031389, 0.92983961, 0.93005025,
     &   0.93076968, 0.93150270, 0.93263572, 0.93439186, 0.93625593,
     &   0.93846697, 0.94102323, 0.94341034, 0.94560623, 0.94762635,
     &   0.94946808, 0.95106882, 0.95256758, 0.95393986, 0.95521194,
     &   0.95654297, 0.95800996, 0.95935917, 0.96060920, 0.96199268,
     &   0.96335781, 0.96402133, 0.96371806, 0.96262592, 0.96094173,
     &   0.95850968, 0.95528227, 0.95167512, 0.94777226, 0.94356364,
     &   0.93902922, 0.93405360, 0.92863256, 0.92195302, 0.91307229,
     &   0.90636230, 0.89726859, 0.88678926, 0.88029933, 0.88227904,
     &   0.88745320, 0.88895446, 0.88900369, 0.88809484, 0.88700294,
     &   0.88599509, 0.88474554, 0.88630062, 0.89051020, 0.89668471,
     &   0.90346563, 0.90455496, 0.90130168, 0.89303499, 0.88739294,
     &   0.88290977, 0.87885737, 0.87518108, 0.87241656, 0.87123513,
     &   0.87054670, 0.87006539, 0.86978525, 0.86929911, 0.86890429,
     &   0.86828303, 0.86776412, 0.86723983, 0.86627394, 0.86535460,
     &   0.86392874, 0.86240679, 0.86061615, 0.85877591, 0.85587865,
     &   0.85301411, 0.84982890, 0.84632432, 0.84259480, 0.83858699,
     &   0.83441532, 0.83003652, 0.82589149, 0.82155037, 0.81701922,
     &   0.81228739, 0.80738032, 0.80230063, 0.79705966, 0.79165977,
     &   0.78614885, 0.78051293, 0.77441329, 0.76814055, 0.76177853,
     &   0.75534934, 0.74888706, 0.74238324, 0.73589325, 0.72943068,
     &   0.72301966, 0.71668208, 0.71052688, 0.70432568, 0.69813961,
     &   0.69131881, 0.68465543, 0.67816818, 0.67187440, 0.66578752,
     &   0.65953583, 0.65086955, 0.64264399, 0.63482374, 0.62733161,
     &   0.62027973, 0.61376357, 0.60760272, 0.60164058, 0.59633464,
     &   0.59168202, 0.58850747, 0.58577526, 0.58344984, 0.58147627,
     &   0.57982957, 0.57846022, 0.57741785, 0.57664090, 0.57605106,
     &   0.57560247, 0.57525808, 0.57501280, 0.57484412, 0.57487833,
     &   0.57492197, 0.57494736, 0.57502353, 0.57506663, 0.57504016,
     &   0.57502794, 0.57499343, 0.57484818, 0.57460684, 0.57418841,
     &   0.57366765, 0.57302010, 0.57216740, 0.57118720, 0.57008123/

      end

c-----------------------------------------------------------------------

      subroutine cloudqwp(wl,re,q,w,pmom)
c
c input:
c
c   wl      wavelength in microns
c
c   re      effective cloud drop radius (microns)
c
c output:
c
c   q       mean extinction efficiency (unitless)
c
c   w       single scatter albedo      (unitless)
c
c   pmom    Legendre expansion coeficients to the scattering phase 
c           phase function             (unitless)
c     
c
c   This routine reads a direct access file in the current working
c   directory.  Each data record in this file consists of
c   qbar,omega,pmom(1:nmom).  where qbar is the extinction efficiency,
c   omega is the single scattering albedo and pmom are the legendre
c   coefficients.  To maintain portability and reduce size of the file
c   each quantity is scaled to integer values. The physical variable
c   is recovered by inverting the scaling process using the realizable
c   range of each quantity.  Hence,
c
c        physical_value = pmin+(pmax-pmin)*float(i-imin)/(imax-imin), 
c
c    where, (pmin,pmax)=(0,5) for qbar, (0,1) for omega and (-1,1)
c    for pmom, and imin,imax is given in the first record.
c
c    The first record of the file contains an ascii string containing
c    the values: irec1, num_wl, num_re, imin, imax, written with format
c    '(3i10,2i15)', where irec1 is the locatation of the first data
c    record num_wl is the total number of wavelength points, num_re is
c    the number of effective radii, imin/imax is the minimum/maximum
c    integer values used in the scaling.  The second record contains the
c    values, wl_min,wl_max,re_min,re_max written with format '(4f15.4),
c    which provide the min and max physical values of wavelength and
c    effective radius.  The next several records contain ascii header
c    info describing the contents of the file. This routine ignors
c    all the ASCII data after the first two records.
c
c

cccc
c 
c the record length written by wri_pmom is currently help at 2+20=22
c  
cccc

      

      parameter (lunda=12)
      parameter (nstrms=40)
      parameter (nstrpm=20)
      parameter (lenrec=nstrpm+2)
      parameter (mone=-1.)
      dimension pm(lenrec)
      dimension pmom(*)

      integer m(lenrec)

      character*(lenrec*4) string

      real vmin(lenrec),vmax(lenrec)
      logical first
      
      data vmin/0.,0.,nstrpm*mone/
      data vmax/5.,1.,nstrpm*1./

      data first/.true./

      data istart,num_wl,num_re/0, 0, 0/

      data mmin,mmax /0,0/

      data wl_min, wl_max, re_min, re_max, wfac, rfac/
     &       0.,     0.,     0.,     0.,    0.,   0. /

      if(first) then 
        open(lunda,status='old', form='unformatted',
     &     access='direct',file='pmom.dat',recl=nstrpm+2)
        read(lunda,rec=1) string

        read(string,'(3i10,2i15)') istart,num_wl,num_re,mmin,mmax

        read(lunda,rec=2) string
        read(string,'(4f15.4)') wl_min,wl_max,re_min,re_max
        if(num_re.ne.1) rfac=(num_re-1)/log(re_max/re_min)
        if(num_wl.ne.1) wfac=(num_wl-1)/log(wl_max/wl_min)
c        write(*,*) 'mmin, mmax',mmin,mmax
        first=.false.
      endif

      fre=rfac*log(re/re_min)
      fwl=wfac*log(wl/wl_min)

      ire=int(fre)
      iwl=int(fwl)

      if(ire.lt.0.or.ire.gt.num_re-1) then
        write(*,*) 'error in cloudqwp --- re value out of bounds'
        write(*,*) 're,re_min,re_max: ',re,re_min,re_max
	pause
        stop
      endif

      if(iwl.lt.0.or.iwl.gt.num_wl-1) then
        write(*,*) 'error in cloudqwp --- wl value out of bounds'
        write(*,*) 'wl,wl_min,wl_max: ',wl,wl_min,wl_max
	pause
        stop
      endif

      wre=fre-ire
      wwl=fwl-iwl

      irec=istart+ire*num_wl+iwl

c      write(*,*) 'iwl,wwl = ',iwl,wwl
c      write(*,*) 'ire,wre = ',ire,wre

      f=(1.-wre)*(1.-wwl)
      if(f.ne.0.) then 
        read(lunda,rec=irec) (m(i),i=1,lenrec)
        do i=1,lenrec
          p=vmin(i)+(vmax(i)-vmin(i))*float(m(i)-mmin)/(mmax-mmin)
          pm(i)=f*p
c          if(i.eq.1) write(*,*) '1%', f,vmin(1),vmax(1),m(1),mmin,mmax,p
        enddo
      endif

      f=(1.-wre)*wwl
      if(f.ne.0.) then 
        read(lunda,rec=irec+1) (m(i),i=1,lenrec)
        do i=1,lenrec
          p=vmin(i)+(vmax(i)-vmin(i))*float(m(i)-mmin)/(mmax-mmin)
          pm(i)=f*p+pm(i)
c          if(i.eq.1) write(*,*) '2%', f,vmin(1),vmax(1),m(1),mmin,mmax,p
        enddo
      endif

      f=wre*(1.-wwl)
      if(f.ne.0.) then 
        read(lunda,rec=irec+num_wl) (m(i),i=1,lenrec)
        do i=1,lenrec
          p=vmin(i)+(vmax(i)-vmin(i))*float(m(i)-mmin)/(mmax-mmin)
          pm(i)=f*p+pm(i)
c          if(i.eq.1) write(*,*) '3%', f,vmin(1),vmax(1),m(1),mmin,mmax,p
        enddo
      endif

      f=wre*wwl
      if(f.ne.0.) then 
        read(lunda,rec=irec+num_wl+1) (m(i),i=1,lenrec)
        do i=1,lenrec
          p=vmin(i)+(vmax(i)-vmin(i))*float(m(i)-mmin)/(mmax-mmin)
          pm(i)=f*p+pm(i)
c          if(i.eq.1) write(*,*) '4%', f,vmin(1),vmax(1),m(1),mmin,mmax,p
        enddo
      endif

c NOTE: the zeroeth legendre moment (which is always equal to one)
c       is not returned.  The first legendre moment, pmom(1), is
c       equal to the asymmetry factor, g.

      q=pm(1)
      w=pm(2)

      do i=1,nstrpm
        pmom(i)=pm(2+i)
      enddo
c
c assume Henyey-Greenstein extrapolation for higher moments
c
      do i=nstrpm+1,nstrms
        pmom(i)=pmom(nstrpm)*(float(nstrpm)/float(i))**i
      enddo

      return
      end
c=======================================================================






c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c RCS version control information:
c $Header: /home/paul/rt/sbdart/RCS/sbdart.f,v 1.5 2001/02/27 00:28:49 paul Exp $
c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

c  Note: CDIR$ IVDEP comment lines are specific to Cray computers.  
c        They cause better optimization of loops immediately 
c        following, by ignoring potential dependencies.


      SUBROUTINE DISORT( NLYR, DTAUC, SSALB, PMOM, TEMPER, WVNMLO,
     &                   WVNMHI, USRTAU, NTAU, UTAU, NSTR, USRANG, NUMU,
     &                   UMU, NPHI, PHI, IBCND, FBEAM, UMU0, PHI0,
     &                   FISOT, LAMBER, ALBEDO, HL, BTEMP, TTEMP, TEMIS,
     &                   DELTAM, PLANK, ONLYFL, ACCUR, PRNT, HEADER,
     &                   MAXCLY, MAXULV, MAXUMU, MAXCMU, MAXPHI, RFLDIR,
     &                   RFLDN, FLUP, DFDT, UAVG, UU, U0U, ALBMED,
     &                   TRNMED)

c *******************************************************************
c       Plane-parallel discrete ordinates radiative transfer program
c             ( see DISORT.doc for complete documentation )
c *******************************************************************
c
c +------------------------------------------------------------------+
c  Calling Tree (omitting calls to ERRMSG):
c  (routines in parentheses are not in this file)
c
c  DISORT-+-(R1MACH)
c         +-SLFTST-+-(TSTBAD)
c         +-ZEROIT
c         +-CHEKIN-+-(WRTBAD)
c         |        +-(WRTDIM)
c         |        +-DREF
c         +-ZEROAL
c         +-SETDIS-+-QGAUSN (1)-+-(D1MACH)
c         +-PRTINP
c         +-ALBTRN-+-LEPOLY (2)
c         |        +-ZEROIT
c         |        +-SOLEIG (3)-+-ASYMTX-+-(D1MACH)
c         |        +-TERPEV
c         |        +-SETMTX (4)--ZEROIT
c         |        +-(SGBCO)
c         |        +-SOLVE1-+-ZEROIT
c         |        |        +-(SGBSL)
c         |        +-ALTRIN
c         |        +-SPALTR
c         |        +-PRALTR
c         +-PLKAVG-+-(R1MACH)
c         +-LEPOLY see 2
c         +-SURFAC-+-QGAUSN see 1
c         |        +-LEPOLY see 2
c         |        +-ZEROIT
c         +-SOLEIG see 3
c         +-UPBEAM-+-(SGECO)
c         |        +-(SGESL)
c         +-UPISOT-+-(SGECO)
c         |        +-(SGESL)
c         +-TERPEV
c         +-TERPSO
c         +-SETMTX see 4
c         +-SOLVE0-+-ZEROIT
c         |        +-(SGBCO)
c         |        +-(SGBSL)
c         +-FLUXES--ZEROIT
c         +-USRINT
c         +-CMPINT
c         +-PRAVIN
c         +-RATIO--(R1MACH)
c         +-PRTINT
c
c *** Intrinsic Functions used in DISORT package which take
c     non-negligible amount of time:
c
c    EXP :  Called by- ALBTRN, ALTRIN, CMPINT, FLUXES, SETDIS,
c                      SETMTX, SPALTR, USRINT, PLKAVG
c
c    SQRT : Called by- ASYMTX, SOLEIG
c
c +-------------------------------------------------------------------+
c
c  Index conventions (for all DO-loops and all variable descriptions):
c
c     IU     :  for user polar angles
c
c  IQ,JQ,KQ  :  for computational polar angles ('quadrature angles')
c
c   IQ/2     :  for half the computational polar angles (just the ones
c               in either 0-90 degrees, or 90-180 degrees)
c
c     J      :  for user azimuthal angles
c
c     K,L    :  for Legendre expansion coefficients or, alternatively,
c               subscripts of associated Legendre polynomials
c
c     LU     :  for user levels
c
c     LC     :  for computational layers (each having a different
c               single-scatter albedo and/or phase function)
c
c    LEV     :  for computational levels
c
c    MAZIM   :  for azimuthal components in Fourier cosine expansion
c               of intensity and phase function
c
c +------------------------------------------------------------------+
c
c               I N T E R N A L    V A R I A B L E S
c
c   AMB(IQ/2,IQ/2)    First matrix factor in reduced eigenvalue problem
c                     of Eqs. SS(12), STWJ(8E)  (used only in SOLEIG)
c
c   APB(IQ/2,IQ/2)    Second matrix factor in reduced eigenvalue problem
c                     of Eqs. SS(12), STWJ(8E)  (used only in SOLEIG)
c
c   ARRAY(IQ,IQ)      Scratch matrix for SOLEIG, UPBEAM and UPISOT
c                     (see each subroutine for definition)
c
c   B()               Right-hand side vector of Eq. SC(5) going into
c                     SOLVE0,1;  returns as solution vector
c                     vector  L, the constants of integration
c
c   BDR(IQ/2,0:IQ/2)  Bottom-boundary bidirectional reflectivity for a
c                     given azimuthal component.  First index always
c                     refers to a computational angle.  Second index:
c                     if zero, refers to incident beam angle UMU0;
c                     if non-zero, refers to a computational angle.
c
c   BEM(IQ/2)         Bottom-boundary directional emissivity at compu-
c                     tational angles.
c
c   BPLANK            Intensity emitted from bottom boundary
c
c   CBAND()           Matrix of left-hand side of the linear system
c                     Eq. SC(5), scaled by Eq. SC(12);  in banded
c                     form required by LINPACK solution routines
c
c   CC(IQ,IQ)         C-sub-IJ in Eq. SS(5)
c
c   CMU(IQ)           Computational polar angles (Gaussian)
c
c   CWT(IQ)           Quadrature weights corresponding to CMU
c
c   DELM0             Kronecker delta, delta-sub-M0, where M = MAZIM
c                     is the number of the Fourier component in the
c                     azimuth cosine expansion
c
c   DITHER            Small quantity subtracted from single-scattering
c                     albedos of unity, in order to avoid using special
c                     case formulas;  prevents an eigenvalue of exactly
c                     zero from occurring, which would cause an
c                     immediate overflow
c
c   DTAUCP(LC)        Computational-layer optical depths (delta-M-scaled
c                     if DELTAM = TRUE, otherwise equal to DTAUC)
c
c   EMU(IU)           Bottom-boundary directional emissivity at user
c                     angles.
c
c   EVAL(IQ)          Temporary storage for eigenvalues of Eq. SS(12)
c
c   EVECC(IQ,IQ)      Complete eigenvectors of SS(7) on return from
c                     SOLEIG; stored permanently in  GC
c
c   EXPBEA(LC)        Transmission of direct beam in delta-M optical
c                     depth coordinates
c
c   FLYR(LC)          Truncated fraction in delta-M method
c
c   GL(K,LC)          Phase function Legendre polynomial expansion
c                     coefficients, calculated from PMOM by
c                     including single-scattering albedo, factor
c                     2K+1, and (if DELTAM=TRUE) the delta-M
c                     scaling
c
c   GC(IQ,IQ,LC)      Eigenvectors at polar quadrature angles,
c                     g  in Eq. SC(1)
c
c   GU(IU,IQ,LC)      Eigenvectors interpolated to user polar angles
c                     ( g  in Eqs. SC(3) and S1(8-9), i.e.
c                       G without the L factor )
c
c   HLPR()            Legendre coefficients of bottom bidirectional
c                     reflectivity (after inclusion of 2K+1 factor)
c
c   IPVT(LC*IQ)       Integer vector of pivot indices for LINPACK
c                     routines
c
c   KK(IQ,LC)         Eigenvalues of coeff. matrix in Eq. SS(7)
c
c   KCONV             Counter in azimuth convergence test
c
c   LAYRU(LU)         Computational layer in which user output level
c                     UTAU(LU) is located
c
c   LL(IQ,LC)         Constants of integration L in Eq. SC(1),
c                     obtained by solving scaled version of Eq. SC(5)
c
c   LYRCUT            TRUE, radiation is assumed zero below layer
c                     NCUT because of almost complete absorption
c
c   NAZ               Number of azimuthal components considered
c
c   NCUT              Computational layer number in which absorption
c                     optical depth first exceeds ABSCUT
c
c   OPRIM(LC)         Single scattering albedo after delta-M scaling
c
c   PASS1             TRUE on first entry, FALSE thereafter
c
c   PKAG(0:LC)        Integrated Planck function for internal emission
c
c   PSI(IQ)           Sum just after square bracket in  Eq. SD(9)
c
c   RMU(IU,0:IQ)      Bottom-boundary bidirectional reflectivity for a
c                     given azimuthal component.  First index always
c                     refers to a user angle.  Second index:
c                     if zero, refers to incident beam angle UMU0;
c                     if non-zero, refers to a computational angle.
c
c   SQT(k)            Square root of k (used only in LEPOLY for
c                     computing associated Legendre polynomials)
c
c   TAUC(0:LC)        Cumulative optical depth (un-delta-M-scaled)
c
c   TAUCPR(0:LC)      Cumulative optical depth (delta-M-scaled if
c                     DELTAM = TRUE, otherwise equal to TAUC)
c
c   TPLANK            Intensity emitted from top boundary
c
c   UUM(IU,LU)        Expansion coefficients when the intensity
c                     (u-super-M) is expanded in Fourier cosine series
c                     in azimuth angle
c
c   U0C(IQ,LU)        Azimuthally-averaged intensity
c
c   UTAUPR(LU)        Optical depths of user output levels in delta-M
c                     coordinates;  equal to  UTAU(LU) if no delta-M
c
c   WK()              scratch array
c
c   XR0(LC)           X-sub-zero in expansion of thermal source func-
c                     tion preceding Eq. SS(14) (has no mu-dependence)
c
c   XR1(LC)           X-sub-one in expansion of thermal source func-
c                     tion;  see  Eqs. SS(14-16)
c
c   YLM0(L)           Normalized associated Legendre polynomial
c                     of subscript L at the beam angle (not saved
c                     as function of superscipt M)
c
c   YLMC(L,IQ)        Normalized associated Legendre polynomial
c                     of subscript L at the computational angles
c                     (not saved as function of superscipt M)
c
c   YLMU(L,IU)        Normalized associated Legendre polynomial
c                     of subscript L at the user angles
c                     (not saved as function of superscipt M)
c
c   Z()               scratch array used in SOLVE0, ALBTRN to solve
c                     a linear system for the constants of integration
c
c   Z0(IQ)            Solution vectors Z-sub-zero of Eq. SS(16)
c
c   Z0U(IU,LC)        Z-sub-zero in Eq. SS(16) interpolated to user
c                     angles from an equation derived from SS(16)
c
c   Z1(IQ)            Solution vectors Z-sub-one  of Eq. SS(16)
c
c   Z1U(IU,LC)        Z-sub-one in Eq. SS(16) interpolated to user
c                     angles from an equation derived from SS(16)
c
c   ZBEAM(IU,LC)      Particular solution for beam source
c
c   ZJ(IQ)            Right-hand side vector  X-sub-zero in
c                     Eq. SS(19), also the solution vector
c                     Z-sub-zero after solving that system
c
c   ZZ(IQ,LC)         Permanent storage for the beam source vectors ZJ
c
c   ZPLK0(IQ,LC)      Permanent storage for the thermal source
c                     vectors  Z0  obtained by solving  Eq. SS(16)
c
c   ZPLK1(IQ,LC)      Permanent storage for the thermal source
c                     vectors  Z1  obtained by solving  Eq. SS(16)
c
c +-------------------------------------------------------------------+
c
c  LOCAL SYMBOLIC DIMENSIONS (have big effect on storage requirements):
c
c       MXCLY  = Max no. of computational layers
c       MXULV  = Max no. of output levels
c       MXCMU  = Max no. of computation polar angles
c       MXUMU  = Max no. of output polar angles
c       MXPHI  = Max no. of output azimuthal angles
c       MXSQT  = Max no. of square roots of integers (for LEPOLY)
c +-------------------------------------------------------------------+

c     .. Parameters ..


      INTEGER   MXCLY, MXULV, MXCMU, MXUMU, MXPHI, MI, MI9M2, NNLYRI,
     &          MXSQT
      parameter (nstrms=40) ! pjr
      parameter (mxly=50)   ! pjr
      PARAMETER ( MXCLY=mxly, MXULV = mxly+1,
     &            MXCMU = nstrms, MXUMU = nstrms, MXPHI = nstrms,
     &            MI = MXCMU / 2, MI9M2 = 9*MI - 2,
     &            NNLYRI = MXCMU*MXCLY, MXSQT = 1000 )
c     ..
c     .. Scalar Arguments ..

      CHARACTER HEADER*127
      LOGICAL   DELTAM, LAMBER, ONLYFL, PLANK, USRANG, USRTAU
      INTEGER   IBCND, MAXCLY, MAXCMU, MAXPHI, MAXULV, MAXUMU, NLYR,
     &          NPHI, NSTR, NTAU, NUMU
      REAL      ACCUR, ALBEDO, BTEMP, FBEAM, FISOT, PHI0, TEMIS, TTEMP,
     &          UMU0, WVNMHI, WVNMLO
c     ..
c     .. Array Arguments ..

      LOGICAL   PRNT( 7 )
      REAL      ALBMED( MAXUMU ), DFDT( MAXULV ), DTAUC( MAXCLY ),
     &          FLUP( MAXULV ), HL( 0:MAXCMU ), PHI( MAXPHI ),
     &          PMOM( 0:MAXCMU, MAXCLY ), RFLDIR( MAXULV ),
     &          RFLDN( MAXULV ), SSALB( MAXCLY ), TEMPER( 0:MAXCLY ),
     &          TRNMED( MAXUMU ), U0U( MAXUMU, MAXULV ), UAVG( MAXULV ),
     &          UMU( MAXUMU ), UTAU( MAXULV ),
     &          UU( MAXUMU, MAXULV, MAXPHI )
c     ..
c     .. Local Scalars ..

      LOGICAL   COMPAR, LYRCUT, PASS1
      INTEGER   IQ, IU, J, KCONV, L, LC, LEV, LU, MAZIM, NAZ, NCOL,
     &          NCOS, NCUT, NN, NS
      REAL      ANGCOS, AZERR, AZTERM, BPLANK, COSPHI, DELM0, DITHER,
     &          DUM, PI, RPD, SGN, TPLANK
c     ..
c     .. Local Arrays ..

      INTEGER   IPVT( NNLYRI ), LAYRU( MXULV )

      REAL      AMB( MI, MI ), APB( MI, MI ), ARRAY( MXCMU, MXCMU ),
     &          B( NNLYRI ), BDR( MI, 0:MI ), BEM( MI ),
     &          CBAND( MI9M2, NNLYRI ), CC( MXCMU, MXCMU ),
     &          CMU( MXCMU ), CWT( MXCMU ), DTAUCP( MXCLY ),
     &          EMU( MXUMU ), EVAL( MI ), EVECC( MXCMU, MXCMU ),
     &          EXPBEA( 0:MXCLY ), FLDIR( MXULV ), FLDN( MXULV ),
     &          FLYR( MXCLY ), GC( MXCMU, MXCMU, MXCLY ),
     &          GL( 0:MXCMU, MXCLY ), GU( MXUMU, MXCMU, MXCLY ),
     &          HLPR( 0:MXCMU ), KK( MXCMU, MXCLY ), LL( MXCMU, MXCLY ),
     &          OPRIM( MXCLY ), PHIRAD( MXPHI ), PKAG( 0:MXCLY ),
     &          PSI( MXCMU ), RMU( MXUMU, 0:MI ), TAUC( 0:MXCLY ),
     &          TAUCPR( 0:MXCLY ), U0C( MXCMU, MXULV ), UTAUPR( MXULV ),
     &          UUM( MXUMU, MXULV ), WK( MXCMU ), XR0( MXCLY ),
     &          XR1( MXCLY ), YLM0( 0:MXCMU ), YLMC( 0:MXCMU, MXCMU ),
     &          YLMU( 0:MXCMU, MXUMU ), Z( NNLYRI ), Z0( MXCMU ),
     &          Z0U( MXUMU, MXCLY ), Z1( MXCMU ), Z1U( MXUMU, MXCLY ),
     &          ZBEAM( MXUMU, MXCLY ), ZJ( MXCMU ),
     &          ZPLK0( MXCMU, MXCLY ), ZPLK1( MXCMU, MXCLY ),
     &          ZZ( MXCMU, MXCLY ), SQT( MXSQT )

      DOUBLE PRECISION AAD( MI, MI ), EVALD( MI ), EVECCD( MI, MI ),
     &                 WKD( MXCMU )
c     ..
c     .. External Functions ..

      REAL      PLKAVG, R1MACH, RATIO
      EXTERNAL  PLKAVG, R1MACH, RATIO
c     ..
c     .. External Subroutines ..

      EXTERNAL  ALBTRN, CHEKIN, CMPINT, FLUXES, LEPOLY, PRAVIN, PRTINP,
     &          PRTINT, SETDIS, SETMTX, SLFTST, SOLEIG, SOLVE0, SURFAC,
     &          TERPEV, TERPSO, UPBEAM, UPISOT, USRINT, ZEROAL, ZEROIT
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS, ASIN, COS, LEN, MAX
c     ..
      SAVE      PASS1, PI, DITHER, RPD, SQT
      DATA      PASS1 / .TRUE. /


      IF( PASS1 ) THEN

         PI     = 2.*ASIN( 1.0 )
         DITHER = 10.*R1MACH( 4 )

c                            ** Must dither more on Cray (14-digit prec)

         IF( DITHER.LT.1.E-10 ) DITHER = 10.*DITHER

         RPD  = PI / 180.0

         DO 5 NS = 1, MXSQT
            SQT( NS ) = SQRT( FLOAT( NS ) )
    5    CONTINUE
c                            ** Set input values for self-test.
c                            ** Be sure SLFTST sets all print flags off.
         COMPAR = .FALSE.

c         CALL SLFTST( ACCUR, ALBEDO, BTEMP, DELTAM, DTAUC( 1 ), FBEAM,
c     &                FISOT, IBCND, LAMBER, NLYR, PLANK, NPHI, NUMU,
c     &                NSTR, NTAU, ONLYFL, PHI( 1 ), PHI0, PMOM( 0,1 ),
c     &                PRNT, SSALB( 1 ), TEMIS, TEMPER( 0 ), TTEMP,
c     &                UMU( 1 ), USRANG, USRTAU, UTAU( 1 ), UMU0, WVNMHI,
c     &                WVNMLO, COMPAR, DUM, DUM, DUM, DUM )
      END IF


   10 CONTINUE

c      IF( .NOT.PASS1 .AND. LEN(HEADER).NE.0 ) 
c     &    WRITE( *,'(//,1X,100(''*''),/,A,/,1X,100(''*''))' )
c     &    ' DISORT: '//HEADER

c                                  ** Calculate cumulative optical depth
c                                  ** and dither single-scatter albedo
c                                  ** to improve numerical behavior of
c                                  ** eigenvalue/vector computation
      CALL ZEROIT( TAUC, MXCLY + 1 )

      DO 20 LC = 1, NLYR

         IF( SSALB( LC ).EQ.1.0 ) SSALB( LC ) = 1.0 - DITHER
         TAUC( LC ) = TAUC( LC - 1 ) + DTAUC( LC )

   20 CONTINUE
c                                ** Check input dimensions and variables

      CALL CHEKIN( NLYR, DTAUC, SSALB, PMOM, TEMPER, WVNMLO, WVNMHI,
     &             USRTAU, NTAU, UTAU, NSTR, USRANG, NUMU, UMU, NPHI,
     &             PHI, IBCND, FBEAM, UMU0, PHI0, FISOT, LAMBER, ALBEDO,
     &             HL, BTEMP, TTEMP, TEMIS, PLANK, ONLYFL, ACCUR, TAUC,
     &             MAXCLY, MAXULV, MAXUMU, MAXCMU, MAXPHI, MXCLY, MXULV,
     &             MXUMU, MXCMU, MXPHI, MXSQT )

c                                 ** Zero internal and output arrays

      CALL  ZEROAL( MXCLY, EXPBEA(1), FLYR, OPRIM, TAUCPR(1), XR0, XR1,
     &              MXCMU, CMU, CWT, PSI, WK, Z0, Z1, ZJ,
     &              MXCMU+1, HLPR, YLM0,
     &              MXCMU**2, ARRAY, CC, EVECC,
     &              (MXCMU+1)*MXCLY, GL,
     &              (MXCMU+1)*MXCMU, YLMC,
     &              (MXCMU+1)*MXUMU, YLMU,
     &              MXCMU*MXCLY, KK, LL, ZZ, ZPLK0, ZPLK1,
     &              MXCMU**2*MXCLY, GC,
     &              MXULV, LAYRU, UTAUPR,
     &              MXUMU*MXCMU*MXCLY, GU,
     &              MXUMU*MXCLY, Z0U, Z1U, ZBEAM,
     &              MI, EVAL,
     &              MI**2, AMB, APB,
     &              NNLYRI, IPVT, Z,
     &              MAXULV, RFLDIR, RFLDN, FLUP, UAVG, DFDT,
     &              MAXUMU, ALBMED, TRNMED,
     &              MAXUMU*MAXULV, U0U,
     &              MAXUMU*MAXULV*MAXPHI, UU )

c                                 ** Perform various setup operations

      CALL SETDIS( CMU, CWT, DELTAM, DTAUC, DTAUCP, EXPBEA, FBEAM, FLYR,
     &             GL, HL, HLPR, IBCND, LAMBER, LAYRU, LYRCUT, MAXUMU,
     &             MAXCMU, MXCMU, NCUT, NLYR, NTAU, NN, NSTR, PLANK,
     &             NUMU, ONLYFL, OPRIM, PMOM, SSALB, TAUC, TAUCPR, UTAU,
     &             UTAUPR, UMU, UMU0, USRTAU, USRANG )

c                                 ** Print input information
      IF ( PRNT(1) )
     &     CALL PRTINP( NLYR, DTAUC, DTAUCP, SSALB, PMOM, TEMPER,
     &                  WVNMLO, WVNMHI, NTAU, UTAU, NSTR, NUMU, UMU,
     &                  NPHI, PHI, IBCND, FBEAM, UMU0, PHI0, FISOT,
     &                  LAMBER, ALBEDO, HL, BTEMP, TTEMP, TEMIS,
     &                  DELTAM, PLANK, ONLYFL, ACCUR, FLYR, LYRCUT,
     &                  OPRIM, TAUC, TAUCPR, MAXCMU, PRNT(7) )

c                              ** Handle special case for getting albedo
c                              ** and transmissivity of medium for many
c                              ** beam angles at once
      IF( IBCND.EQ.1 ) THEN

         CALL ALBTRN( ALBEDO, AMB, APB, ARRAY, B, BDR, CBAND, CC, CMU,
     &                CWT, DTAUCP, EVAL, EVECC, GL, GC, GU, IPVT, KK,
     &                LL, NLYR, NN, NSTR, NUMU, PRNT, TAUCPR, UMU, U0U,
     &                WK, YLMC, YLMU, Z, AAD, EVALD, EVECCD, WKD, MI,
     &                MI9M2, MAXULV, MAXUMU, MXCMU, MXUMU, NNLYRI,
     &                SQT, ALBMED, TRNMED )
         RETURN

      END IF
c                                   ** Calculate Planck functions
      IF( .NOT.PLANK ) THEN

         BPLANK = 0.0
         TPLANK = 0.0
         CALL ZEROIT( PKAG, MXCLY + 1 )

      ELSE

         TPLANK = TEMIS*PLKAVG( WVNMLO, WVNMHI, TTEMP )
         BPLANK =       PLKAVG( WVNMLO, WVNMHI, BTEMP )

         DO 30 LEV = 0, NLYR
            PKAG( LEV ) = PLKAVG( WVNMLO, WVNMHI, TEMPER( LEV ) )
   30    CONTINUE

      END IF


c ========  BEGIN LOOP TO SUM AZIMUTHAL COMPONENTS OF INTENSITY  =======
c           (EQ STWJ 5)

      KCONV  = 0
      NAZ  = NSTR - 1
c                                    ** Azimuth-independent case

      IF( FBEAM.EQ.0.0 .OR. ( 1.- UMU0 ).LT.1.E-5 .OR. ONLYFL .OR.
     &      ( NUMU.EQ.1 .AND. ( 1.- UMU(1) ).LT.1.E-5 ) )
     &   NAZ = 0


      DO 160 MAZIM = 0, NAZ

         IF( MAZIM.EQ.0 ) DELM0  = 1.0
         IF( MAZIM.GT.0 ) DELM0  = 0.0

c                             ** Get normalized associated Legendre
c                             ** polynomials for
c                             ** (a) incident beam angle cosine
c                             ** (b) computational and user polar angle
c                             **     cosines
         IF( FBEAM.GT.0.0 ) THEN

            NCOS   = 1
            ANGCOS = -UMU0

            CALL LEPOLY( NCOS, MAZIM, MXCMU, NSTR-1, ANGCOS, SQT, YLM0 )

         END IF


         IF( .NOT.ONLYFL .AND. USRANG )
     &       CALL LEPOLY( NUMU, MAZIM, MXCMU, NSTR-1, UMU, SQT, YLMU )

         CALL LEPOLY( NN, MAZIM, MXCMU, NSTR-1, CMU, SQT, YLMC )

c                       ** Get normalized associated Legendre polys.
c                       ** with negative arguments from those with
c                       ** positive arguments; Dave/Armstrong Eq. (15)
         SGN  = - 1.0

         DO 50 L = MAZIM, NSTR - 1

            SGN  = - SGN

            DO 40 IQ = NN + 1, NSTR
               YLMC( L, IQ ) = SGN*YLMC( L, IQ - NN )
   40       CONTINUE

   50    CONTINUE
c                                 ** Specify users bottom reflectivity
c                                 ** and emissivity properties
      IF ( .NOT.LYRCUT )
     &   CALL  SURFAC( ALBEDO, DELM0, FBEAM, HLPR, LAMBER,
     &                 MI, MAZIM, MXCMU, MXUMU, NN, NUMU, NSTR, ONLYFL,
     &                 UMU, USRANG, YLM0, YLMC, YLMU, BDR, EMU, BEM,
     &                 RMU, SQT )


c ===================  BEGIN LOOP ON COMPUTATIONAL LAYERS  =============

         DO 60 LC = 1, NCUT

c                        ** Solve eigenfunction problem in Eq. STWJ(8B);
c                        ** return eigenvalues and eigenvectors

            CALL SOLEIG( AMB, APB, ARRAY, CMU, CWT, GL( 0,LC ), MI,
     &                   MAZIM, MXCMU, NN, NSTR, YLMC, CC, EVECC, EVAL,
     &                   KK( 1,LC ), GC( 1,1,LC ), AAD, EVECCD, EVALD,
     &                   WKD )

c                                  ** Calculate particular solutions of
c                                  ** Eq.SS(18) for incident beam source
         IF ( FBEAM.GT.0.0 )
     &        CALL  UPBEAM( ARRAY, CC, CMU, DELM0, FBEAM, GL(0,LC),
     &                      IPVT, MAZIM, MXCMU, NN, NSTR, PI, UMU0, WK,
     &                      YLM0, YLMC, ZJ, ZZ(1,LC) )

c                              ** Calculate particular solutions of
c                              ** Eq. SS(15) for thermal emission source

            IF( PLANK .AND. MAZIM.EQ.0 ) THEN

               XR1( LC ) = 0.0

               IF( DTAUCP( LC ).GT.0.0 ) XR1( LC ) =
     &             ( PKAG( LC ) - PKAG( LC-1 ) ) / DTAUCP( LC )

               XR0( LC ) = PKAG( LC-1 ) - XR1( LC )*TAUCPR( LC-1 )

               CALL UPISOT( ARRAY, CC, CMU, IPVT, MXCMU, NN, NSTR,
     &                      OPRIM( LC ), WK, XR0( LC ), XR1( LC ), Z0,
     &                      Z1, ZPLK0( 1,LC ), ZPLK1( 1,LC ) )
            END IF


            IF( .NOT.ONLYFL .AND. USRANG ) THEN

c                                            ** Interpolate eigenvectors
c                                            ** to user angles

               CALL TERPEV( CWT, EVECC, GL( 0,LC ), GU( 1,1,LC ), MAZIM,
     &                      MXCMU, MXUMU, NN, NSTR, NUMU, WK, YLMC,
     &                      YLMU )
c                                            ** Interpolate source terms
c                                            ** to user angles

               CALL TERPSO( CWT, DELM0, FBEAM, GL( 0,LC ), MAZIM, MXCMU,
     &                      PLANK, NUMU, NSTR, OPRIM( LC ), PI, YLM0,
     &                      YLMC, YLMU, PSI, XR0( LC ), XR1( LC ), Z0,
     &                      ZJ, ZBEAM( 1,LC ), Z0U( 1,LC ),
     &                      Z1U( 1,LC ) )
            END IF

   60    CONTINUE

c ===================  END LOOP ON COMPUTATIONAL LAYERS  ===============


c                      ** Set coefficient matrix of equations combining
c                      ** boundary and layer interface conditions

         CALL SETMTX( BDR, CBAND, CMU, CWT, DELM0, DTAUCP, GC, KK,
     &                LAMBER, LYRCUT, MI, MI9M2, MXCMU, NCOL, NCUT,
     &                NNLYRI, NN, NSTR, TAUCPR, WK )

c                      ** Solve for constants of integration in homo-
c                      ** geneous solution (general boundary conditions)

         CALL SOLVE0( B, BDR, BEM, BPLANK, CBAND, CMU, CWT, EXPBEA,
     &                FBEAM, FISOT, IPVT, LAMBER, LL, LYRCUT, MAZIM, MI,
     &                MI9M2, MXCMU, NCOL, NCUT, NN, NSTR, NNLYRI, PI,
     &                TPLANK, TAUCPR, UMU0, Z, ZZ, ZPLK0, ZPLK1 )

c                                  ** Compute upward and downward fluxes

      IF ( MAZIM.EQ.0 )
     &     CALL FLUXES( CMU, CWT, FBEAM, GC, KK, LAYRU, LL, LYRCUT,
     &                  MAXULV, MXCMU, MXULV, NCUT, NN, NSTR, NTAU,
     &                  PI, PRNT, SSALB, TAUCPR, UMU0, UTAU, UTAUPR,
     &                  XR0, XR1, ZZ, ZPLK0, ZPLK1, DFDT, FLUP,
     &                  FLDN, FLDIR, RFLDIR, RFLDN, UAVG, U0C )

         IF( ONLYFL ) THEN

            IF( MAXUMU.GE.NSTR ) THEN
c                                     ** Save azimuthal-avg intensities
c                                     ** at quadrature angles
               DO 80 LU = 1, NTAU

                  DO 70 IQ = 1, NSTR
                     U0U( IQ, LU ) = U0C( IQ, LU )
   70             CONTINUE

   80          CONTINUE

            END IF

            GO TO  170

         END IF


         CALL ZEROIT( UUM, MXUMU*MXULV )

         IF( USRANG ) THEN
c                                     ** Compute azimuthal intensity
c                                     ** components at user angles

            CALL USRINT( BPLANK, CMU, CWT, DELM0, DTAUCP, EMU, EXPBEA,
     &                   FBEAM, FISOT, GC, GU, KK, LAMBER, LAYRU, LL,
     &                   LYRCUT, MAZIM, MXCMU, MXULV, MXUMU, NCUT, NLYR,
     &                   NN, NSTR, PLANK, NUMU, NTAU, PI, RMU, TAUCPR,
     &                   TPLANK, UMU, UMU0, UTAUPR, WK, ZBEAM, Z0U, Z1U,
     &                   ZZ, ZPLK0, ZPLK1, UUM )

         ELSE
c                                     ** Compute azimuthal intensity
c                                     ** components at quadrature angles

            CALL CMPINT( FBEAM, GC, KK, LAYRU, LL, LYRCUT, MAZIM, MXCMU,
     &                   MXULV, MXUMU, NCUT, NN, NSTR, PLANK, NTAU,
     &                   TAUCPR, UMU0, UTAUPR, ZZ, ZPLK0, ZPLK1, UUM )
         END IF


         IF( MAZIM.EQ.0 ) THEN
c                               ** Save azimuthally averaged intensities

            DO 110 LU = 1, NTAU

               DO 100 IU = 1, NUMU
                  U0U( IU, LU ) = UUM( IU, LU )

                  DO 90 J = 1, NPHI
                     UU( IU, LU, J ) = UUM( IU, LU )
   90             CONTINUE

  100          CONTINUE

  110       CONTINUE
c                              ** Print azimuthally averaged intensities
c                              ** at user angles

            IF( PRNT( 4 ) ) CALL PRAVIN( UMU, NUMU, MAXUMU, UTAU, NTAU,
     &                                   U0U )
            IF( NAZ.GT.0 ) THEN

               CALL ZEROIT( PHIRAD, MXPHI )
               DO 120 J = 1, NPHI
                  PHIRAD( J ) = RPD*( PHI( J ) - PHI0 )
  120          CONTINUE

            END IF


         ELSE
c                                ** Increment intensity by current
c                                ** azimuthal component (Fourier
c                                ** cosine series);  Eq SD(2)
            AZERR  = 0.0

            DO 150 J = 1, NPHI

               COSPHI = COS( MAZIM*PHIRAD( J ) )

               DO 140 LU = 1, NTAU

                  DO 130 IU = 1, NUMU
                     AZTERM = UUM( IU, LU )*COSPHI
                     UU( IU, LU, J ) = UU( IU, LU, J ) + AZTERM
                     AZERR = MAX( AZERR,
     &                       RATIO( ABS(AZTERM), ABS(UU(IU,LU,J)) ) )
  130             CONTINUE

  140          CONTINUE

  150       CONTINUE

            IF( AZERR.LE.ACCUR ) KCONV  = KCONV + 1

            IF( KCONV.GE.2 ) GO TO  170

         END IF

  160 CONTINUE

c ===================  END LOOP ON AZIMUTHAL COMPONENTS  ===============


c                                          ** Print intensities
  170 CONTINUE
      IF( PRNT( 5 ) .AND. .NOT.ONLYFL ) CALL PRTINT( UU, UTAU, NTAU,
     &    UMU, NUMU, PHI, NPHI, MAXULV, MAXUMU )


      IF( PASS1 ) THEN
c                                    ** Compare test case results with
c                                    ** correct answers and abort if bad
         COMPAR = .TRUE.

c         CALL SLFTST( ACCUR, ALBEDO, BTEMP, DELTAM, DTAUC( 1 ), FBEAM,
c     &                FISOT, IBCND, LAMBER, NLYR, PLANK, NPHI, NUMU,
c     &                NSTR, NTAU, ONLYFL, PHI( 1 ), PHI0, PMOM( 0,1 ),
c     &                PRNT, SSALB( 1 ), TEMIS, TEMPER( 0 ), TTEMP,
c     &                UMU( 1 ), USRANG, USRTAU, UTAU( 1 ), UMU0, WVNMHI,
c     &                WVNMLO, COMPAR, FLUP( 1 ), RFLDIR( 1 ),
c     &                RFLDN( 1 ), UU( 1,1,1 ) )

         PASS1  = .FALSE.
         GO TO  10

      END IF

      RETURN
      END

      SUBROUTINE ALBTRN( ALBEDO, AMB, APB, ARRAY, B, BDR, CBAND, CC,
     &                   CMU, CWT, DTAUCP, EVAL, EVECC, GL, GC, GU,
     &                   IPVT, KK, LL, NLYR, NN, NSTR, NUMU, PRNT,
     &                   TAUCPR, UMU, U0U, WK, YLMC, YLMU, Z, AAD,
     &                   EVALD, EVECCD, WKD, MI, MI9M2, MAXULV, MAXUMU,
     &                   MXCMU, MXUMU, NNLYRI, SQT, ALBMED, TRNMED )

c    DISORT special case to get only albedo and transmissivity
c    of entire medium as a function of incident beam angle
c    (many simplifications because boundary condition is just
c    isotropic illumination, there are no thermal sources, and
c    particular solutions do not need to be computed).  See
c    Ref. S2 and references therein for details.

c    The basic idea is as follows.  The reciprocity principle leads to
c    the following relationships for a plane-parallel, vertically
c    inhomogeneous medium lacking thermal (or other internal) sources:
c
c       albedo(theta) = u_0(theta) for unit-intensity isotropic
c                       illumination at *top* boundary
c
c       trans(theta) =  u_0(theta) for unit-intensity isotropic
c                       illumination at *bottom* boundary
c
c    where 
c
c       albedo(theta) = albedo for beam incidence at angle theta
c       trans(theta) = transmissivity for beam incidence at angle theta
c       u_0(theta) = upward azim-avg intensity at top boundary
c                    at angle theta


c   O U T P U T    V A R I A B L E S:
c
c       ALBMED(IU)   Albedo of the medium as a function of incident
c                    beam angle cosine UMU(IU)
c     
c       TRNMED(IU)   Transmissivity of the medium as a function of
c                    incident beam angle cosine UMU(IU)


c    I N T E R N A L   V A R I A B L E S:

c       NCD         number of diagonals below/above main diagonal

c       RCOND       estimate of the reciprocal condition of matrix
c                   CBAND; for system  CBAND*X = B, relative 
c                   perturbations in CBAND and B of size epsilon may
c                   cause relative perturbations in X of size 
c                   epsilon/RCOND.  If RCOND is so small that 
c                          1.0 + RCOND .EQ. 1.0
c                   is true, then CBAND may be singular to working
c                   precision.

c       CBAND       Left-hand side matrix of linear system Eq. SC(5),
c                   scaled by Eq. SC(12); in banded form required
c                   by LINPACK solution routines

c       NCOL        number of columns in CBAND matrix

c       IPVT        INTEGER vector of pivot indices

c       (most others documented in DISORT)

c   Called by- DISORT
c   Calls- LEPOLY, ZEROIT, SGBCO, SOLEIG, TERPEV, SETMTX, SOLVE1,
c          ALTRIN, SPALTR, PRALTR
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      INTEGER   MAXULV, MAXUMU, MI, MI9M2, MXCMU, MXUMU, NLYR, NN,
     &          NNLYRI, NSTR, NUMU
      REAL      ALBEDO
c     ..
c     .. Array Arguments ..

      LOGICAL   PRNT( * )
      INTEGER   IPVT( * )
      REAL      ALBMED( MAXUMU ), AMB( MI, MI ), APB( MI, MI ),
     &          ARRAY( MXCMU, MXCMU ), B( NNLYRI ), BDR( MI, 0:MI ),
     &          CBAND( MI9M2, NNLYRI ), CC( MXCMU, MXCMU ),
     &          CMU( MXCMU ), CWT( MXCMU ), DTAUCP( * ), EVAL( MI ),
     &          EVECC( MXCMU, MXCMU ), GC( MXCMU, MXCMU, * ),
     &          GL( 0:MXCMU, * ), GU( MXUMU, MXCMU, * ), KK( MXCMU, * ),
     &          LL( MXCMU, * ), TAUCPR( 0:* ), TRNMED( MAXUMU ),
     &          U0U( MAXUMU, MAXULV ), UMU( MAXUMU ), WK( MXCMU ),
     &          YLMC( 0:MXCMU, MXCMU ), YLMU( 0:MXCMU, * ), Z( NNLYRI ),
     &          SQT( * )

      DOUBLE PRECISION AAD( MI, MI ), EVALD( MI ), EVECCD( MI, MI ),
     &                 WKD( MXCMU )
c     ..
c     .. Local Scalars ..

      LOGICAL   LAMBER, LYRCUT
      INTEGER   IQ, IU, L, LC, MAZIM, NCD, NCOL, NCUT
      REAL      DELM0, FISOT, RCOND, SGN, SPHALB, SPHTRN
c     ..
c     .. External Subroutines ..

      EXTERNAL  ALTRIN, LEPOLY, PRALTR, SETMTX, SGBCO, SOLEIG, SOLVE1,
     &          SPALTR, TERPEV, ZEROIT
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC EXP
c     ..

      MAZIM  = 0
      DELM0  = 1.0
c                    ** Set DISORT variables that are ignored in this
c                    ** special case but are needed below in argument
c                    ** lists of subroutines shared with general case
      NCUT   = NLYR
      LYRCUT = .FALSE.
      FISOT  = 1.0
      LAMBER = .TRUE.
c                          ** Get Legendre polynomials for computational
c                          ** and user polar angle cosines

      CALL LEPOLY( NUMU, MAZIM, MXCMU, NSTR-1, UMU, SQT, YLMU )

      CALL LEPOLY( NN, MAZIM, MXCMU, NSTR-1, CMU, SQT, YLMC )

c                       ** Evaluate Legendre polynomials with negative
c                       ** arguments from those with positive arguments;
c                       ** Dave/Armstrong Eq. (15)
      SGN  = - 1.0

      DO 20 L = MAZIM, NSTR - 1

         SGN  = - SGN

         DO 10 IQ = NN + 1, NSTR
            YLMC( L, IQ ) = SGN*YLMC( L, IQ - NN )
   10    CONTINUE

   20 CONTINUE
c                                  ** Zero out bottom reflectivity
c                                  ** (ALBEDO is used only in analytic
c                                  ** formulae involving ALBEDO = 0
c                                  ** solutions; Eqs 16-17 of Ref S2)

      CALL ZEROIT( BDR, MI*( MI + 1 ) )


c ===================  BEGIN LOOP ON COMPUTATIONAL LAYERS  =============

      DO 30 LC = 1, NLYR

c                        ** Solve eigenfunction problem in Eq. STWJ(8b)

         CALL SOLEIG( AMB, APB, ARRAY, CMU, CWT, GL( 0,LC ), MI, MAZIM,
     &                MXCMU, NN, NSTR, YLMC, CC, EVECC, EVAL,
     &                KK( 1,LC ), GC( 1,1,LC ), AAD, EVECCD, EVALD,
     &                WKD )

c                          ** Interpolate eigenvectors to user angles

         CALL TERPEV( CWT, EVECC, GL( 0,LC ), GU( 1,1,LC ), MAZIM,
     &                MXCMU, MXUMU, NN, NSTR, NUMU, WK, YLMC, YLMU )

   30 CONTINUE

c ===================  END LOOP ON COMPUTATIONAL LAYERS  ===============


c                      ** Set coefficient matrix (CBAND) of equations
c                      ** combining boundary and layer interface 
c                      ** conditions (in band-storage mode required by
c                      ** LINPACK routines)

      CALL SETMTX( BDR, CBAND, CMU, CWT, DELM0, DTAUCP, GC, KK,
     &             LAMBER, LYRCUT, MI, MI9M2, MXCMU, NCOL, NCUT,
     &             NNLYRI, NN, NSTR, TAUCPR, WK )

c                      ** LU-decompose the coeff. matrix (LINPACK)

      NCD  = 3*NN - 1
      CALL SGBCO( CBAND, MI9M2, NCOL, NCD, NCD, IPVT, RCOND, Z )
      IF( 1.0+RCOND .EQ. 1.0 )
     &    CALL ERRMSG('ALBTRN--SGBCO says matrix near singular',.FALSE.)

c                             ** First, illuminate from top; if only
c                             ** one layer, this will give us everything

c                             ** Solve for constants of integration in
c                             ** homogeneous solution

      CALL SOLVE1( B, CBAND, FISOT, 1, IPVT, LL, MI9M2, MXCMU,
     &             NCOL, NLYR, NN, NNLYRI, NSTR )

c                             ** Compute azimuthally-averaged intensity
c                             ** at user angles; gives albedo if multi-
c                             ** layer (Eq. 9 of Ref S2); gives both
c                             ** albedo and transmissivity if single
c                             ** layer (Eqs. 3-4 of Ref S2)

      CALL ALTRIN( GU, KK, LL, MXCMU, MXUMU, MAXUMU, NLYR, NN, NSTR,
     &             NUMU, TAUCPR, UMU, U0U, WK )

c                               ** Get beam-incidence albedos from
c                               ** reciprocity principle
      DO 40 IU = 1, NUMU / 2
         ALBMED( IU ) = U0U( IU + NUMU/2, 1 )
   40 CONTINUE


      IF( NLYR.EQ.1 ) THEN

         DO 50 IU = 1, NUMU / 2
c                               ** Get beam-incidence transmissivities
c                               ** from reciprocity principle (1 layer);
c                               ** flip them end over end to correspond
c                               ** to positive UMU instead of negative

            TRNMED( IU ) = U0U( NUMU/2 + 1 - IU, 2 )
     &                    + EXP( -TAUCPR( NLYR ) / UMU( IU + NUMU/2 ) )

   50    CONTINUE

      ELSE
c                             ** Second, illuminate from bottom
c                             ** (if multiple layers)

         CALL SOLVE1( B, CBAND, FISOT, 2, IPVT, LL, MI9M2, MXCMU,
     &                NCOL, NLYR, NN, NNLYRI, NSTR )

         CALL ALTRIN( GU, KK, LL, MXCMU, MXUMU, MAXUMU, NLYR, NN, NSTR,
     &                NUMU, TAUCPR, UMU, U0U, WK )

c                               ** Get beam-incidence transmissivities
c                               ** from reciprocity principle
         DO 60 IU = 1, NUMU / 2
            TRNMED(IU) = U0U( IU + NUMU/2, 1 )
     &                   + EXP( - TAUCPR(NLYR) / UMU(IU+NUMU/2) )
   60    CONTINUE

      END IF


      IF( ALBEDO.GT.0.0 ) THEN

c                             ** Get spherical albedo and transmissivity
         IF( NLYR.EQ.1 ) THEN

            CALL SPALTR( CMU, CWT, GC, KK, LL, MXCMU, NLYR,
     &                    NN, NSTR, TAUCPR, SPHALB, SPHTRN )
         ELSE

            CALL SPALTR( CMU, CWT, GC, KK, LL, MXCMU, NLYR,
     &                    NN, NSTR, TAUCPR, SPHTRN, SPHALB )
         END IF

c                                ** Ref. S2, Eqs. 16-17 (these eqs. have
c                                ** a simple physical interpretation
c                                ** like that of adding-doubling eqs.)
         DO 70 IU = 1, NUMU

            ALBMED(IU) = ALBMED(IU) + ( ALBEDO / (1.-ALBEDO*SPHALB) )
     &                                * SPHTRN * TRNMED(IU)

            TRNMED(IU) = TRNMED(IU) + ( ALBEDO / (1.-ALBEDO*SPHALB) )
     &                                * SPHALB * TRNMED(IU)
   70    CONTINUE

      END IF
c                          ** Return UMU to all positive values, to
c                          ** agree with ordering in ALBMED, TRNMED
      NUMU  = NUMU / 2
      DO 80 IU = 1, NUMU
         UMU( IU ) = UMU( IU + NUMU )
   80 CONTINUE

      IF( PRNT(6) ) CALL PRALTR( UMU, NUMU, ALBMED, TRNMED )

      RETURN
      END

      SUBROUTINE ALTRIN( GU, KK, LL, MXCMU, MXUMU, MAXUMU, NLYR, NN,
     &                   NSTR, NUMU, TAUCPR, UMU, U0U, WK )

c       Computes azimuthally-averaged intensity at top and bottom
c       of medium (related to albedo and transmission of medium by
c       reciprocity principles; see Ref S2).  User polar angles are
c       used as incident beam angles. (This is a very specialized
c       version of USRINT)
c
c       ** NOTE **  User input values of UMU (assumed positive) are
c                   temporarily in upper locations of  UMU  and
c                   corresponding negatives are in lower locations
c                   (this makes GU come out right).  I.e. the contents
c                   of the temporary UMU array are:
c
c                     -UMU(NUMU),..., -UMU(1), UMU(1),..., UMU(NUMU)
c
c
c   I N P U T    V A R I A B L E S:
c
c       GU     :  Eigenvectors interpolated to user polar angles
c                   (i.e., g in Eq. SC(1) )
c
c       KK     :  Eigenvalues of coeff. matrix in Eq. SS(7)
c
c       LL     :  Constants of integration in Eq. SC(1), obtained
c                   by solving scaled version of Eq. SC(5);
c                   exponential term of Eq. SC(12) not included
c
c       NN     :  Order of double-Gauss quadrature (NSTR/2)
c
c       TAUCPR :  Cumulative optical depth (delta-M-scaled)
c
c       (remainder are DISORT input variables)
c
c
c   O U T P U T    V A R I A B L E:
c
c       U0U  :    Diffuse azimuthally-averaged intensity at top and
c                 bottom of medium (directly transmitted component,
c                 corresponding to BNDINT in USRINT, is omitted).
c
c
c   I N T E R N A L    V A R I A B L E S:
c
c       DTAU   :  Optical depth of a computational layer
c       PALINT :  Non-boundary-forced intensity component
c       UTAUPR :  Optical depths of user output levels (delta-M scaled)
c       WK     :  Scratch vector for saving 'EXP' evaluations
c       All the exponential factors (i.e., EXP1, EXPN,... etc.)
c       come from the substitution of constants of integration in
c       Eq. SC(12) into Eqs. S1(8-9).  All have negative arguments.
c
c   Called by- ALBTRN
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      INTEGER   MAXUMU, MXCMU, MXUMU, NLYR, NN, NSTR, NUMU
c     ..
c     .. Array Arguments ..

      REAL      GU( MXUMU, MXCMU, * ), KK( MXCMU, * ), LL( MXCMU, * ),
     &          TAUCPR( 0:* ), U0U( MAXUMU, * ), UMU( MAXUMU ),
     &          WK( MXCMU )
c     ..
c     .. Local Scalars ..

      INTEGER   IQ, IU, IUMAX, IUMIN, LC, LU
      REAL      DENOM, DTAU, EXP1, EXP2, EXPN, MU, PALINT, SGN
c     ..
c     .. Local Arrays ..

      REAL      UTAUPR( 2 )
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS, EXP
c     ..


      UTAUPR( 1 ) = 0.0
      UTAUPR( 2 ) = TAUCPR( NLYR )

      DO 50 LU = 1, 2

         IF( LU.EQ.1 ) THEN

            IUMIN  = NUMU / 2 + 1
            IUMAX  = NUMU
            SGN    = 1.0

         ELSE

            IUMIN  = 1
            IUMAX  = NUMU / 2
            SGN    = - 1.0

         END IF
c                                   ** Loop over polar angles at which
c                                   ** albedos/transmissivities desired
c                                   ** ( upward angles at top boundary,
c                                   ** downward angles at bottom )
         DO 40 IU = IUMIN, IUMAX

            MU   = UMU( IU )
c                                     ** Integrate from top to bottom
c                                     ** computational layer
            PALINT = 0.0

            DO 30 LC = 1, NLYR

               DTAU   = TAUCPR( LC ) - TAUCPR( LC - 1 )
               EXP1   = EXP( ( UTAUPR( LU ) - TAUCPR( LC - 1 ) ) / MU )
               EXP2   = EXP( ( UTAUPR( LU ) - TAUCPR( LC ) ) / MU )

c                                      ** KK is negative
               DO 10 IQ = 1, NN

                  WK( IQ ) = EXP( KK( IQ,LC )*DTAU )
                  DENOM  = 1.0 + MU*KK( IQ, LC )

                  IF( ABS( DENOM ).LT.0.0001 ) THEN
c                                                   ** L'Hospital limit
                     EXPN   = DTAU / MU*EXP2

                  ELSE

                     EXPN   = ( EXP1*WK( IQ ) - EXP2 )*SGN / DENOM

                  END IF

                  PALINT = PALINT + GU( IU, IQ, LC )*LL( IQ, LC )*EXPN

   10          CONTINUE

c                                        ** KK is positive
               DO 20 IQ = NN + 1, NSTR

                  DENOM  = 1.0 + MU*KK( IQ, LC )

                  IF( ABS( DENOM ).LT.0.0001 ) THEN

                     EXPN   = - DTAU / MU * EXP1

                  ELSE

                     EXPN = ( EXP1 - EXP2 * WK(NSTR+1-IQ) ) *SGN / DENOM

                  END IF

                  PALINT = PALINT + GU( IU, IQ, LC )*LL( IQ, LC )*EXPN

   20          CONTINUE

   30       CONTINUE

            U0U( IU, LU ) = PALINT

   40    CONTINUE

   50 CONTINUE

      RETURN
      END

      SUBROUTINE ASYMTX( AA, EVEC, EVAL, M, IA, IEVEC, IER, WKD, AAD,
     &                   EVECD, EVALD )

c    =======  D O U B L E    P R E C I S I O N    V E R S I O N  ======

c       Solves eigenfunction problem for real asymmetric matrix
c       for which it is known a priori that the eigenvalues are real.

c       This is an adaptation of a subroutine EIGRF in the IMSL
c       library to use real instead of complex arithmetic, accounting
c       for the known fact that the eigenvalues and eigenvectors in
c       the discrete ordinate solution are real.  Other changes include
c       putting all the called subroutines in-line, deleting the
c       performance index calculation, updating many DO-loops
c       to Fortran77, and in calculating the machine precision
c       TOL instead of specifying it in a data statement.

c       EIGRF is based primarily on EISPACK routines.  The matrix is
c       first balanced using the Parlett-Reinsch algorithm.  Then
c       the Martin-Wilkinson algorithm is applied.

c       There is a statement 'J  = WKD( I )' that converts a double
c       precision variable to an integer variable, that seems dangerous
c       to us in principle, but seems to work fine in practice.

c       References:
c          Dongarra, J. and C. Moler, EISPACK -- A Package for Solving
c             Matrix Eigenvalue Problems, in Cowell, ed., 1984:
c             Sources and Development of Mathematical Software,
c             Prentice-Hall, Englewood Cliffs, NJ
c         Parlett and Reinsch, 1969: Balancing a Matrix for Calculation
c             of Eigenvalues and Eigenvectors, Num. Math. 13, 293-304
c         Wilkinson, J., 1965: The Algebraic Eigenvalue Problem,
c             Clarendon Press, Oxford
c
c
c   I N P U T    V A R I A B L E S:
c
c       AA    :  input asymmetric matrix, destroyed after solved
c
c        M    :  order of  AA
c
c       IA    :  first dimension of  AA
c
c    IEVEC    :  first dimension of  EVEC
c
c
c   O U T P U T    V A R I A B L E S:
c
c       EVEC  :  (unnormalized) eigenvectors of  AA
c                ( column J corresponds to EVAL(J) )
c
c       EVAL  :  (unordered) eigenvalues of AA ( dimension at least M )
c
c       IER   :  if .NE. 0, signals that EVAL(IER) failed to converge;
c                in that case eigenvalues IER+1,IER+2,...,M  are
c                correct but eigenvalues 1,...,IER are set to zero.
c
c
c   S C R A T C H   V A R I A B L E S:
c
c       WKD   :  work area ( dimension at least 2*M )
c       AAD   :  double precision stand-in for AA
c       EVECD :  double precision stand-in for EVEC
c       EVALD :  double precision stand-in for EVAL
c
c   Called by- SOLEIG
c   Calls- D1MACH, ERRMSG
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      INTEGER   IA, IER, IEVEC, M
c     ..
c     .. Array Arguments ..

      REAL      AA( IA, M ), EVAL( M ), EVEC( IEVEC, M )
      DOUBLE PRECISION AAD( IA, M ), EVALD( M ), EVECD( IA, M ),
     &                 WKD( * )
c     ..
c     .. Local Scalars ..

      LOGICAL   NOCONV, NOTLAS
      INTEGER   I, II, IN, J, K, KA, KKK, L, LB, LLL, N, N1, N2
      DOUBLE PRECISION C1, C2, C3, C4, C5, C6, COL, DISCRI, F, G, H,
     &                 ONE, P, Q, R, REPL, RNORM, ROW, S, SCALE, SGN, T,
     &                 TOL, UU, VV, W, X, Y, Z, ZERO
c     ..
c     .. External Functions ..

      DOUBLE PRECISION D1MACH
      EXTERNAL  D1MACH
c     ..
c     .. External Subroutines ..

      EXTERNAL  ERRMSG
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS, MIN, SIGN, SQRT
c     ..
      DATA      C1 / 0.4375D0 / , C2 / 0.5D0 / , C3 / 0.75D0 / ,
     &          C4 / 0.95D0 / , C5 / 16.D0 / , C6 / 256.D0 / ,
     &          ZERO / 0.D0 / , ONE / 1.D0 /


      IER  = 0
      TOL  = D1MACH( 4 )

      IF( M.LT.1 .OR. IA.LT.M .OR. IEVEC.LT.M )
     &    CALL ERRMSG( 'ASYMTX--bad input variable(s)', .TRUE. )


c                           ** Handle 1x1 and 2x2 special cases
      IF( M.EQ.1 ) THEN

         EVAL( 1 )   = AA( 1,1 )
         EVEC( 1,1 ) = 1.0
         RETURN

      ELSE IF( M.EQ.2 ) THEN

         DISCRI = ( AA( 1,1 ) - AA( 2,2 ) )**2 + 4.*AA( 1,2 )*AA( 2,1 )

         IF( DISCRI .LT. 0.0 )
     &       CALL ERRMSG( 'ASYMTX--complex evals in 2x2 case',.TRUE. )

         SGN  = ONE

         IF( AA( 1,1 ) .LT. AA( 2,2 ) ) SGN  = - ONE

         EVAL( 1 ) = 0.5*( AA( 1,1 ) + AA( 2,2 ) + SGN*SQRT( DISCRI ) )
         EVAL( 2 ) = 0.5*( AA( 1,1 ) + AA( 2,2 ) - SGN*SQRT( DISCRI ) )
         EVEC( 1,1 ) = 1.0
         EVEC( 2,2 ) = 1.0

         IF( AA( 1,1 ) .EQ. AA( 2,2 ) .AND.
     &       ( AA( 2,1 ).EQ.0.0 .OR. AA( 1,2 ).EQ.0.0 ) ) THEN

            RNORM = ABS( AA( 1,1 ) ) + ABS( AA( 1,2 ) ) +
     &              ABS( AA( 2,1 ) ) + ABS( AA( 2,2 ) )
            W     = TOL * RNORM
            EVEC( 2,1 ) =   AA( 2,1 ) / W
            EVEC( 1,2 ) = - AA( 1,2 ) / W

         ELSE

            EVEC( 2,1 ) = AA( 2,1 ) / ( EVAL( 1 ) - AA( 2,2 ) )
            EVEC( 1,2 ) = AA( 1,2 ) / ( EVAL( 2 ) - AA( 1,1 ) )

         END IF

         RETURN

      END IF

c                               ** Convert single-prec. matrix to double
      DO 20 J = 1, M

         DO 10 K = 1, M
            AAD( J,K ) = AA( J,K )
   10    CONTINUE

   20 CONTINUE

c                                ** Initialize output variables
      IER  = 0

      DO 40 I = 1, M
         EVALD( I ) = ZERO

         DO 30 J = 1, M
            EVECD( I, J ) = ZERO
   30    CONTINUE

         EVECD( I, I ) = ONE
   40 CONTINUE

c                  ** Balance the input matrix and reduce its norm by
c                  ** diagonal similarity transformation stored in WK;
c                  ** then search for rows isolating an eigenvalue
c                  ** and push them down
      RNORM  = ZERO
      L  = 1
      K  = M

   50 CONTINUE
      KKK  = K

      DO 90 J = KKK, 1, -1

         ROW  = ZERO

         DO 60 I = 1, K

            IF( I.NE.J ) ROW  = ROW + ABS( AAD( J,I ) )

   60    CONTINUE

         IF( ROW.EQ.ZERO ) THEN

            WKD( K ) = J

            IF( J.NE.K ) THEN

               DO 70 I = 1, K
                  REPL        = AAD( I, J )
                  AAD( I, J ) = AAD( I, K )
                  AAD( I, K ) = REPL
   70          CONTINUE

               DO 80 I = L, M
                  REPL        = AAD( J, I )
                  AAD( J, I ) = AAD( K, I )
                  AAD( K, I ) = REPL
   80          CONTINUE

            END IF

            K  = K - 1
            GO TO  50

         END IF

   90 CONTINUE
c                                ** Search for columns isolating an
c                                ** eigenvalue and push them left
  100 CONTINUE
      LLL  = L

      DO 140 J = LLL, K

         COL  = ZERO

         DO 110 I = L, K

            IF( I.NE.J ) COL  = COL + ABS( AAD( I,J ) )

  110    CONTINUE

         IF( COL.EQ.ZERO ) THEN

            WKD( L ) = J

            IF( J.NE.L ) THEN

               DO 120 I = 1, K
                  REPL        = AAD( I, J )
                  AAD( I, J ) = AAD( I, L )
                  AAD( I, L ) = REPL
  120          CONTINUE

               DO 130 I = L, M
                  REPL        = AAD( J, I )
                  AAD( J, I ) = AAD( L, I )
                  AAD( L, I ) = REPL
  130          CONTINUE

            END IF

            L  = L + 1
            GO TO  100

         END IF

  140 CONTINUE

c                           ** Balance the submatrix in rows L through K
      DO 150 I = L, K
         WKD( I ) = ONE
  150 CONTINUE

  160 CONTINUE
      NOCONV = .FALSE.

      DO 220 I = L, K

         COL  = ZERO
         ROW  = ZERO

         DO 170 J = L, K

            IF( J.NE.I ) THEN

               COL  = COL + ABS( AAD( J,I ) )
               ROW  = ROW + ABS( AAD( I,J ) )

            END IF

  170    CONTINUE

         F  = ONE
         G  = ROW / C5
         H  = COL + ROW

  180    CONTINUE
         IF( COL.LT.G ) THEN

            F    = F*C5
            COL  = COL*C6
            GO TO  180

         END IF

         G  = ROW*C5

  190    CONTINUE
         IF( COL.GE.G ) THEN

            F    = F / C5
            COL  = COL / C6
            GO TO  190

         END IF
c                                                ** Now balance
         IF( ( COL + ROW ) / F.LT.C4*H ) THEN

            WKD( I ) = WKD( I )*F
            NOCONV = .TRUE.

            DO 200 J = L, M
               AAD( I, J ) = AAD( I, J ) / F
  200       CONTINUE

            DO 210 J = 1, K
               AAD( J, I ) = AAD( J, I )*F
  210       CONTINUE

         END IF

  220 CONTINUE


      IF( NOCONV ) GO TO  160
c                                   ** Is A already in Hessenberg form?
      IF( K-1 .LT. L+1 ) GO TO  370

c                                   ** Transfer A to a Hessenberg form
      DO 310 N = L + 1, K - 1

         H  = ZERO
         WKD( N + M ) = ZERO
         SCALE  = ZERO
c                                                 ** Scale column
         DO 230 I = N, K
            SCALE  = SCALE + ABS( AAD( I,N - 1 ) )
  230    CONTINUE

         IF( SCALE.NE.ZERO ) THEN

            DO 240 I = K, N, -1
               WKD( I + M ) = AAD( I, N - 1 ) / SCALE
               H  = H + WKD( I + M )**2
  240       CONTINUE

            G    = - SIGN( SQRT( H ), WKD( N + M ) )
            H    = H - WKD( N + M )*G
            WKD( N + M ) = WKD( N + M ) - G
c                                            ** Form (I-(U*UT)/H)*A
            DO 270 J = N, M

               F  = ZERO

               DO 250 I = K, N, -1
                  F  = F + WKD( I + M )*AAD( I, J )
  250          CONTINUE

               DO 260 I = N, K
                  AAD( I, J ) = AAD( I, J ) - WKD( I + M )*F / H
  260          CONTINUE

  270       CONTINUE
c                                    ** Form (I-(U*UT)/H)*A*(I-(U*UT)/H)
            DO 300 I = 1, K

               F  = ZERO

               DO 280 J = K, N, -1
                  F  = F + WKD( J + M )*AAD( I, J )
  280          CONTINUE

               DO 290 J = N, K
                  AAD( I, J ) = AAD( I, J ) - WKD( J + M )*F / H
  290          CONTINUE

  300       CONTINUE

            WKD( N + M ) = SCALE*WKD( N + M )
            AAD( N, N - 1 ) = SCALE*G

         END IF

  310 CONTINUE


      DO 360 N = K - 2, L, -1

         N1   = N + 1
         N2   = N + 2
         F  = AAD( N + 1, N )

         IF( F.NE.ZERO ) THEN

            F  = F*WKD( N + 1 + M )

            DO 320 I = N + 2, K
               WKD( I + M ) = AAD( I, N )
  320       CONTINUE

            IF( N + 1.LE.K ) THEN

               DO 350 J = 1, M

                  G  = ZERO

                  DO 330 I = N + 1, K
                     G  = G + WKD( I + M )*EVECD( I, J )
  330             CONTINUE

                  G  = G / F

                  DO 340 I = N + 1, K
                     EVECD( I, J ) = EVECD( I, J ) + G*WKD( I + M )
  340             CONTINUE

  350          CONTINUE

            END IF

         END IF

  360 CONTINUE


  370 CONTINUE

      N  = 1

      DO 390 I = 1, M

         DO 380 J = N, M
            RNORM  = RNORM + ABS( AAD( I,J ) )
  380    CONTINUE

         N  = I

         IF( I.LT.L .OR. I.GT.K ) EVALD( I ) = AAD( I, I )

  390 CONTINUE

      N  = K
      T  = ZERO

c                                      ** Search for next eigenvalues
  400 CONTINUE
      IF( N.LT.L ) GO TO  550

      IN  = 0
      N1  = N - 1
      N2  = N - 2
c                          ** Look for single small sub-diagonal element
  410 CONTINUE

      DO 420 I = L, N
         LB  = N + L - I

         IF( LB.EQ.L ) GO TO  430

         S  = ABS( AAD( LB - 1,LB - 1 ) ) + ABS( AAD( LB,LB ) )

         IF( S.EQ.ZERO ) S  = RNORM

         IF( ABS( AAD( LB, LB-1 ) ).LE. TOL*S ) GO TO  430

  420 CONTINUE


  430 CONTINUE
      X  = AAD( N, N )

      IF( LB.EQ.N ) THEN
c                                        ** One eigenvalue found
         AAD( N, N ) = X + T
         EVALD( N ) = AAD( N, N )
         N  = N1
         GO TO  400

      END IF

      Y  = AAD( N1, N1 )
      W  = AAD( N, N1 )*AAD( N1, N )

      IF( LB.EQ.N1 ) THEN
c                                        ** Two eigenvalues found
         P  = ( Y - X )*C2
         Q  = P**2 + W
         Z  = SQRT( ABS( Q ) )
         AAD( N, N ) = X + T
         X  = AAD( N, N )
         AAD( N1, N1 ) = Y + T
c                                        ** Real pair
         Z  = P + SIGN( Z, P )
         EVALD( N1 ) = X + Z
         EVALD( N ) = EVALD( N1 )

         IF( Z.NE.ZERO ) EVALD( N ) = X - W / Z

         X  = AAD( N, N1 )
c                                  ** Employ scale factor in case
c                                  ** X and Z are very small
         R  = SQRT( X*X + Z*Z )
         P  = X / R
         Q  = Z / R
c                                             ** Row modification
         DO 440 J = N1, M
            Z  = AAD( N1, J )
            AAD( N1, J ) = Q*Z + P*AAD( N, J )
            AAD( N, J ) = Q*AAD( N, J ) - P*Z
  440    CONTINUE
c                                             ** Column modification
         DO 450 I = 1, N
            Z  = AAD( I, N1 )
            AAD( I, N1 ) = Q*Z + P*AAD( I, N )
            AAD( I, N ) = Q*AAD( I, N ) - P*Z
  450    CONTINUE
c                                          ** Accumulate transformations
         DO 460 I = L, K
            Z  = EVECD( I, N1 )
            EVECD( I, N1 ) = Q*Z + P*EVECD( I, N )
            EVECD( I, N ) = Q*EVECD( I, N ) - P*Z
  460    CONTINUE

         N  = N2
         GO TO  400

      END IF


      IF( IN.EQ.30 ) THEN

c                    ** No convergence after 30 iterations; set error
c                    ** indicator to the index of the current eigenvalue
         IER  = N
         GO TO  700

      END IF
c                                                  ** Form shift
      IF( IN.EQ.10 .OR. IN.EQ.20 ) THEN

         T  = T + X

         DO 470 I = L, N
            AAD( I, I ) = AAD( I, I ) - X
  470    CONTINUE

         S  = ABS( AAD( N,N1 ) ) + ABS( AAD( N1,N2 ) )
         X  = C3*S
         Y  = X
         W  = -C1*S**2

      END IF


      IN  = IN + 1

c                ** Look for two consecutive small sub-diagonal elements

      DO 480 J = LB, N2
         I  = N2 + LB - J
         Z  = AAD( I, I )
         R  = X - Z
         S  = Y - Z
         P  = ( R*S - W ) / AAD( I + 1, I ) + AAD( I, I + 1 )
         Q  = AAD( I + 1, I + 1 ) - Z - R - S
         R  = AAD( I + 2, I + 1 )
         S  = ABS( P ) + ABS( Q ) + ABS( R )
         P  = P / S
         Q  = Q / S
         R  = R / S

         IF( I.EQ.LB ) GO TO  490

         UU   = ABS( AAD( I, I-1 ) )*( ABS( Q ) + ABS( R ) )
         VV   = ABS( P ) * ( ABS( AAD( I-1, I-1 ) ) + ABS( Z ) +
     &                       ABS( AAD( I+1, I+1 ) ) )

         IF( UU .LE. TOL*VV ) GO TO  490

  480 CONTINUE

  490 CONTINUE
      AAD( I+2, I ) = ZERO

      DO 500 J = I + 3, N
         AAD( J, J - 2 ) = ZERO
         AAD( J, J - 3 ) = ZERO
  500 CONTINUE

c             ** Double QR step involving rows K to N and columns M to N

      DO 540 KA = I, N1

         NOTLAS = KA.NE.N1

         IF( KA.EQ.I ) THEN

            S  = SIGN( SQRT( P*P + Q*Q + R*R ), P )

            IF( LB.NE.I ) AAD( KA, KA - 1 ) = -AAD( KA, KA - 1 )

         ELSE

            P  = AAD( KA, KA - 1 )
            Q  = AAD( KA + 1, KA - 1 )
            R  = ZERO

            IF( NOTLAS ) R  = AAD( KA + 2, KA - 1 )

            X  = ABS( P ) + ABS( Q ) + ABS( R )

            IF( X.EQ.ZERO ) GO TO  540

            P  = P / X
            Q  = Q / X
            R  = R / X
            S  = SIGN( SQRT( P*P + Q*Q + R*R ), P )
            AAD( KA, KA - 1 ) = -S*X

         END IF

         P  = P + S
         X  = P / S
         Y  = Q / S
         Z  = R / S
         Q  = Q / P
         R  = R / P
c                                              ** Row modification
         DO 510 J = KA, M

            P  = AAD( KA, J ) + Q*AAD( KA + 1, J )

            IF( NOTLAS ) THEN

               P  = P + R*AAD( KA + 2, J )
               AAD( KA + 2, J ) = AAD( KA + 2, J ) - P*Z

            END IF

            AAD( KA + 1, J ) = AAD( KA + 1, J ) - P*Y
            AAD( KA, J ) = AAD( KA, J ) - P*X
  510    CONTINUE
c                                                 ** Column modification
         DO 520 II = 1, MIN( N, KA + 3 )

            P  = X*AAD( II, KA ) + Y*AAD( II, KA + 1 )

            IF( NOTLAS ) THEN

               P  = P + Z*AAD( II, KA + 2 )
               AAD( II, KA + 2 ) = AAD( II, KA + 2 ) - P*R

            END IF

            AAD( II, KA + 1 ) = AAD( II, KA + 1 ) - P*Q
            AAD( II, KA ) = AAD( II, KA ) - P
  520    CONTINUE
c                                          ** Accumulate transformations
         DO 530 II = L, K

            P  = X*EVECD( II, KA ) + Y*EVECD( II, KA + 1 )

            IF( NOTLAS ) THEN

               P  = P + Z*EVECD( II, KA + 2 )
               EVECD( II, KA + 2 ) = EVECD( II, KA + 2 ) - P*R

            END IF

            EVECD( II, KA + 1 ) = EVECD( II, KA + 1 ) - P*Q
            EVECD( II, KA ) = EVECD( II, KA ) - P
  530    CONTINUE

  540 CONTINUE

      GO TO  410
c                     ** All evals found, now backsubstitute real vector
  550 CONTINUE

      IF( RNORM.NE.ZERO ) THEN

         DO 580 N = M, 1, -1
            N2   = N
            AAD( N, N ) = ONE

            DO 570 I = N - 1, 1, -1
               W  = AAD( I, I ) - EVALD( N )

               IF( W.EQ.ZERO ) W  = TOL*RNORM

               R  = AAD( I, N )

               DO 560 J = N2, N - 1
                  R  = R + AAD( I, J )*AAD( J, N )
  560          CONTINUE

               AAD( I, N ) = -R / W
               N2   = I
  570       CONTINUE

  580    CONTINUE
c                      ** End backsubstitution vectors of isolated evals
         DO 600 I = 1, M

            IF( I.LT.L .OR. I.GT.K ) THEN

               DO 590 J = I, M
                  EVECD( I, J ) = AAD( I, J )
  590          CONTINUE

            END IF

  600    CONTINUE
c                                   ** Multiply by transformation matrix
         IF( K.NE.0 ) THEN

            DO 630 J = M, L, -1

               DO 620 I = L, K
                  Z  = ZERO

                  DO 610 N = L, MIN( J, K )
                     Z  = Z + EVECD( I, N )*AAD( N, J )
  610             CONTINUE

                  EVECD( I, J ) = Z
  620          CONTINUE

  630       CONTINUE

         END IF

      END IF


      DO 650 I = L, K

         DO 640 J = 1, M
            EVECD( I, J ) = EVECD( I, J ) * WKD( I )
  640    CONTINUE
  650 CONTINUE

c                           ** Interchange rows if permutations occurred
      DO 670 I = L-1, 1, -1

         J  = WKD( I )

         IF( I.NE.J ) THEN

            DO 660 N = 1, M
               REPL   = EVECD( I, N )
               EVECD( I, N ) = EVECD( J, N )
               EVECD( J, N ) = REPL
  660       CONTINUE

         END IF

  670 CONTINUE


      DO 690 I = K + 1, M

         J  = WKD( I )

         IF( I.NE.J ) THEN

            DO 680 N = 1, M
               REPL   = EVECD( I, N )
               EVECD( I, N ) = EVECD( J, N )
               EVECD( J, N ) = REPL
  680       CONTINUE

         END IF

  690 CONTINUE

c                         ** Put results into output arrays
  700 CONTINUE

      DO 720 J = 1, M

         EVAL( J ) = EVALD( J )

         DO 710 K = 1, M
            EVEC( J, K ) = EVECD( J, K )
  710    CONTINUE

  720 CONTINUE

      RETURN
      END

      SUBROUTINE CHEKIN( NLYR, DTAUC, SSALB, PMOM, TEMPER, WVNMLO,
     &                   WVNMHI, USRTAU, NTAU, UTAU, NSTR, USRANG, NUMU,
     &                   UMU, NPHI, PHI, IBCND, FBEAM, UMU0, PHI0,
     &                   FISOT, LAMBER, ALBEDO, HL, BTEMP, TTEMP, TEMIS,
     &                   PLANK, ONLYFL, ACCUR, TAUC, MAXCLY, MAXULV,
     &                   MAXUMU, MAXCMU, MAXPHI, MXCLY, MXULV, MXUMU,
     &                   MXCMU, MXPHI, MXSQT )

c           Checks the input dimensions and variables

c   Calls- WRTBAD, WRTDIM, DREF, ERRMSG
c   Called by- DISORT
c --------------------------------------------------------------------

c     .. Scalar Arguments ..

      LOGICAL   LAMBER, ONLYFL, PLANK, USRANG, USRTAU
      INTEGER   IBCND, MAXCLY, MAXCMU, MAXPHI, MAXULV, MAXUMU, MXCLY,
     &          MXCMU, MXPHI, MXULV, MXUMU, MXSQT, NLYR, NPHI, NSTR, 
     &          NTAU, NUMU
      REAL      ACCUR, ALBEDO, BTEMP, FBEAM, FISOT, PHI0, TEMIS, TTEMP,
     &          UMU0, WVNMHI, WVNMLO
c     ..
c     .. Array Arguments ..

      REAL      DTAUC( MAXCLY ), HL( 0:MAXCMU ), PHI( MAXPHI ),
     &          PMOM( 0:MAXCMU, MAXCLY ), SSALB( MAXCLY ),
     &          TAUC( 0:MXCLY ), TEMPER( 0:MAXCLY ), UMU( MAXUMU ),
     &          UTAU( MAXULV )
c     ..
c     .. Local Scalars ..

      LOGICAL   INPERR
      INTEGER   IRMU, IU, J, K, LC, LU, NUMSQT
      REAL      FLXALB, RMU
c     ..
c     .. External Functions ..

      LOGICAL   WRTBAD, WRTDIM
      REAL      DREF
      EXTERNAL  WRTBAD, WRTDIM, DREF
c     ..
c     .. External Subroutines ..

      EXTERNAL  ERRMSG
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS, MOD
c     ..


      INPERR = .FALSE.

      IF( NLYR.LT.1 ) INPERR = WRTBAD( 'NLYR' )

      IF( NLYR.GT.MAXCLY ) INPERR = WRTBAD( 'MAXCLY' )

      DO 20 LC = 1, NLYR

         IF( DTAUC( LC ).LT.0.0 ) INPERR = WRTBAD( 'DTAUC' )

         IF( SSALB( LC ).LT.0.0 .OR. SSALB( LC ).GT.1.0 )
     &       INPERR = WRTBAD( 'SSALB' )

         IF( PLANK .AND. IBCND.NE.1 ) THEN

            IF( LC.EQ.1 .AND. TEMPER( 0 ).LT.0.0 )
     &          INPERR = WRTBAD( 'TEMPER' )

            IF( TEMPER( LC ).LT.0.0 ) INPERR = WRTBAD( 'TEMPER' )

         END IF

         DO 10 K = 0, NSTR

            IF( PMOM( K,LC ).LT.-1.0 .OR. PMOM( K,LC ).GT.1.0 )
     &          INPERR = WRTBAD( 'PMOM' )

   10    CONTINUE

   20 CONTINUE


      IF( IBCND.EQ.1 ) THEN

         IF( MAXULV.LT.2 ) INPERR = WRTBAD( 'MAXULV' )

      ELSE IF( USRTAU ) THEN

         IF( NTAU.LT.1 ) INPERR = WRTBAD( 'NTAU' )

         IF( MAXULV.LT.NTAU ) INPERR = WRTBAD( 'MAXULV' )

         DO 30 LU = 1, NTAU

            IF( ABS( UTAU( LU ) - TAUC( NLYR ) ).LE. 1.E-4 )
     &          UTAU( LU ) = TAUC( NLYR )

            IF( UTAU( LU ).LT.0.0 .OR. UTAU( LU ).GT. TAUC( NLYR ) )
     &          INPERR = WRTBAD( 'UTAU' )

   30    CONTINUE

      ELSE

         IF( MAXULV.LT.NLYR + 1 ) INPERR = WRTBAD( 'MAXULV' )

      END IF


      IF( NSTR.LT.2 .OR. MOD( NSTR,2 ).NE.0 ) INPERR = WRTBAD( 'NSTR' )

      IF( NSTR.EQ.2 )
     &    CALL ERRMSG( 'CHEKIN--2 streams not recommended;'//
     &                 ' use specialized 2-stream code instead',.False.)

      IF( NSTR.GT.MAXCMU ) INPERR = WRTBAD( 'MAXCMU' )

      IF( USRANG ) THEN

         IF( NUMU.LT.0 ) INPERR = WRTBAD( 'NUMU' )

         IF( .NOT.ONLYFL .AND. NUMU.EQ.0 ) INPERR = WRTBAD( 'NUMU' )

         IF( NUMU.GT.MAXUMU ) INPERR = WRTBAD( 'MAXUMU' )

         IF( IBCND.EQ.1 .AND. 2*NUMU.GT.MAXUMU )
     &       INPERR = WRTBAD( 'MAXUMU' )

         DO 40 IU = 1, NUMU

            IF( UMU( IU ).LT.-1.0 .OR. UMU( IU ).GT.1.0 .OR.
     &          UMU( IU ).EQ.0.0 ) INPERR = WRTBAD( 'UMU' )

            IF( IBCND.EQ.1 .AND. UMU( IU ).LT.0.0 )
     &          INPERR = WRTBAD( 'UMU' )

            IF( IU.GT.1 ) THEN

               IF( UMU( IU ).LT.UMU( IU-1 ) ) INPERR = WRTBAD( 'UMU' )

            END IF

   40    CONTINUE

      ELSE

         IF( MAXUMU.LT.NSTR ) INPERR = WRTBAD( 'MAXUMU' )

      END IF


      IF( .NOT.ONLYFL .AND. IBCND.NE.1 ) THEN

         IF( NPHI.LE.0 ) INPERR = WRTBAD( 'NPHI' )

         IF( NPHI.GT.MAXPHI ) INPERR = WRTBAD( 'MAXPHI' )

         DO 50 J = 1, NPHI

            IF( PHI( J ).LT.0.0 .OR. PHI( J ).GT.360.0 )
     &          INPERR = WRTBAD( 'PHI' )

   50    CONTINUE

      END IF


      IF( IBCND.LT.0 .OR. IBCND.GT.1 ) INPERR = WRTBAD( 'IBCND' )

      IF( IBCND.EQ.0 ) THEN

         IF( FBEAM.LT.0.0 ) INPERR = WRTBAD( 'FBEAM' )

         IF( FBEAM.GT.0.0 .AND. ( UMU0.LE.0.0 .OR.UMU0.GT.1.0 ) )
     &       INPERR = WRTBAD( 'UMU0' )

         IF( FBEAM.GT.0.0 .AND. ( PHI0.LT.0.0 .OR.PHI0.GT.360.0 ) )
     &       INPERR = WRTBAD( 'PHI0' )

         IF( FISOT.LT.0.0 ) INPERR = WRTBAD( 'FISOT' )

         IF( LAMBER ) THEN

            IF( ALBEDO.LT.0.0 .OR. ALBEDO.GT.1.0 )
     &          INPERR = WRTBAD( 'ALBEDO' )

         ELSE
c                    ** Make sure flux albedo at dense mesh of incident
c                    ** angles does not assume unphysical values

            DO 60 IRMU = 0, 100
               RMU  = IRMU*0.01
               FLXALB = DREF( RMU, HL, NSTR )

               IF( FLXALB.LT.0.0 .OR. FLXALB.GT.1.0 )
     &             INPERR = WRTBAD( 'HL' )

   60       CONTINUE

         END IF


      ELSE IF( IBCND.EQ.1 ) THEN

         IF( ALBEDO.LT.0.0 .OR. ALBEDO.GT.1.0 )
     &       INPERR = WRTBAD( 'ALBEDO' )

      END IF


      IF( PLANK .AND. IBCND.NE.1 ) THEN

         IF( WVNMLO.LT.0.0 .OR. WVNMHI.LE.WVNMLO )
     &       INPERR = WRTBAD( 'WVNMLO,HI' )

         IF( TEMIS.LT.0.0 .OR. TEMIS.GT.1.0 ) INPERR = WRTBAD( 'TEMIS' )

         IF( BTEMP.LT.0.0 ) INPERR = WRTBAD( 'BTEMP' )

         IF( TTEMP.LT.0.0 ) INPERR = WRTBAD( 'TTEMP' )

      END IF


      IF( ACCUR.LT.0.0 .OR. ACCUR.GT.1.E-2 ) INPERR = WRTBAD( 'ACCUR' )

      IF( MXCLY.LT.NLYR ) INPERR = WRTDIM( 'MXCLY', NLYR )

      IF( IBCND.NE.1 ) THEN

         IF( USRTAU .AND. MXULV.LT.NTAU )
     &       INPERR = WRTDIM( 'MXULV',NTAU )

         IF( .NOT.USRTAU .AND. MXULV .LT. NLYR + 1 )
     &       INPERR = WRTDIM( 'MXULV', NLYR + 1 )

      ELSE

         IF( MXULV.LT.2 ) INPERR = WRTDIM( 'MXULV', 2 )

      END IF

      IF( MXCMU.LT.NSTR ) INPERR = WRTDIM( 'MXCMU', NSTR )

      IF( USRANG .AND. MXUMU.LT.NUMU ) INPERR = WRTDIM( 'MXUMU', NUMU )

      IF( USRANG .AND. IBCND.EQ.1 .AND. MXUMU.LT.2*NUMU )
     &    INPERR = WRTDIM( 'MXUMU', 2*NUMU )

      IF( .NOT.USRANG .AND. MXUMU.LT.NSTR )
     &    INPERR = WRTDIM( 'MXUMU', NSTR )

      IF( .NOT.ONLYFL .AND. IBCND.NE.1 .AND. MXPHI.LT.NPHI )
     &    INPERR = WRTDIM( 'MXPHI', NPHI )

      NUMSQT = 2*MAX(100,NSTR)
      IF( MXSQT .LT. NUMSQT )  INPERR = WRTDIM( 'MXSQT', NUMSQT )

      IF( INPERR )
     &    CALL ERRMSG( 'DISORT--input and/or dimension errors',.True.)

c      IF( PLANK ) THEN
c
c         DO 70 LC = 1, NLYR
c
c            IF( ABS( TEMPER( LC ) - TEMPER( LC-1 ) ).GT. 20.0 )
c     &          CALL ERRMSG('CHEKIN--vertical temperature step may'
c     &                      // ' be too large for good accuracy',
c     &                      .False.)
c   70    CONTINUE
c
c      END IF


      RETURN
      END

      SUBROUTINE CMPINT( FBEAM, GC, KK, LAYRU, LL, LYRCUT, MAZIM, MXCMU,
     &                   MXULV, MXUMU, NCUT, NN, NSTR, PLANK, NTAU,
     &                   TAUCPR, UMU0, UTAUPR, ZZ, ZPLK0, ZPLK1, UUM )

c          Calculates the Fourier intensity components at the quadrature
c          angles for azimuthal expansion terms (MAZIM) in Eq. SD(2)
c
c
c    I N P U T    V A R I A B L E S:
c
c       KK      :  Eigenvalues of coeff. matrix in Eq. SS(7)
c
c       GC      :  Eigenvectors at polar quadrature angles in Eq. SC(1)
c
c       LL      :  Constants of integration in Eq. SC(1), obtained
c                  by solving scaled version of Eq. SC(5);
c                  exponential term of Eq. SC(12) not included
c
c       LYRCUT  :  Logical flag for truncation of computational layer
c
c       MAZIM   :  Order of azimuthal component
c
c       NCUT    :  Number of computational layer where absorption
c                  optical depth exceeds ABSCUT
c
c       NN      :  Order of double-Gauss quadrature (NSTR/2)
c
c       TAUCPR  :  Cumulative optical depth (delta-M-scaled)
c
c       UTAUPR  :  Optical depths of user output levels in delta-M
c                  coordinates;  equal to UTAU if no delta-M
c
c       ZZ      :  Beam source vectors in Eq. SS(19)
c
c       ZPLK0   :  Thermal source vectors Z0, by solving Eq. SS(16)
c
c       ZPLK1   :  Thermal source vectors Z1, by solving Eq. SS(16)
c
c       (Remainder are 'DISORT' input variables)
c
c
c    O U T P U T   V A R I A B L E S:
c
c       UUM     :  Fourier components of the intensity in Eq. SD(12)
c                    (at polar quadrature angles)
c
c
c    I N T E R N A L   V A R I A B L E S:
c
c       FACT    :  EXP( - UTAUPR / UMU0 )
c       ZINT    :  intensity of M=0 case, in Eq. SC(1)
c
c   Called by- DISORT
c +--------------------------------------------------------------------

c     .. Scalar Arguments ..

      LOGICAL   LYRCUT, PLANK
      INTEGER   MAZIM, MXCMU, MXULV, MXUMU, NCUT, NN, NSTR, NTAU
      REAL      FBEAM, UMU0
c     ..
c     .. Array Arguments ..

      INTEGER   LAYRU( * )
      REAL      GC( MXCMU, MXCMU, * ), KK( MXCMU, * ), LL( MXCMU, * ),
     &          TAUCPR( 0:* ), UTAUPR( MXULV ), UUM( MXUMU, MXULV ),
     &          ZPLK0( MXCMU, * ), ZPLK1( MXCMU, * ), ZZ( MXCMU, * )
c     ..
c     .. Local Scalars ..

      INTEGER   IQ, JQ, LU, LYU
      REAL      ZINT
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC EXP
c     ..

c                                       ** Loop over user levels
      DO 40 LU = 1, NTAU

         LYU  = LAYRU( LU )

         IF( LYRCUT .AND. LYU.GT.NCUT ) GO TO  40

         DO 30 IQ = 1, NSTR

            ZINT  = 0.0

            DO 10 JQ = 1, NN
               ZINT   = ZINT + GC( IQ, JQ, LYU )*LL( JQ, LYU )*
     &                  EXP( -KK( JQ, LYU )*( UTAUPR( LU ) -
     &                                        TAUCPR( LYU ) ) )
   10       CONTINUE

            DO 20 JQ = NN + 1, NSTR
               ZINT   = ZINT + GC( IQ, JQ, LYU )*LL( JQ, LYU )*
     &                  EXP( -KK( JQ, LYU )*( UTAUPR( LU ) -
     &                                        TAUCPR( LYU-1 ) ) )
   20       CONTINUE

            UUM( IQ, LU ) = ZINT

            IF( FBEAM.GT.0.0 ) UUM( IQ, LU ) = ZINT +
     &                        ZZ( IQ, LYU )*EXP( -UTAUPR( LU ) / UMU0 )

            IF ( PLANK .AND. MAZIM.EQ.0 )
     &            UUM(IQ,LU) = UUM(IQ,LU) + ZPLK0(IQ,LYU) +
     &                         ZPLK1(IQ,LYU) * UTAUPR(LU)
   30    CONTINUE

   40 CONTINUE


      RETURN
      END

      SUBROUTINE FLUXES( CMU, CWT, FBEAM, GC, KK, LAYRU, LL, LYRCUT,
     &                   MAXULV, MXCMU, MXULV, NCUT, NN, NSTR, NTAU, PI,
     &                   PRNT, SSALB, TAUCPR, UMU0, UTAU, UTAUPR, XR0,
     &                   XR1, ZZ, ZPLK0, ZPLK1, DFDT, FLUP, FLDN, FLDIR,
     &                   RFLDIR, RFLDN, UAVG, U0C )

c       Calculates the radiative fluxes, mean intensity, and flux
c       derivative with respect to optical depth from the m=0 intensity
c       components (the azimuthally-averaged intensity)
c
c
c    I N P U T     V A R I A B L E S:
c
c       CMU      :  Abscissae for Gauss quadrature over angle cosine
c
c       CWT      :  Weights for Gauss quadrature over angle cosine
c
c       GC       :  Eigenvectors at polar quadrature angles, SC(1)
c
c       KK       :  Eigenvalues of coeff. matrix in Eq. SS(7)
c
c       LAYRU    :  Layer number of user level UTAU
c
c       LL       :  Constants of integration in Eq. SC(1), obtained
c                   by solving scaled version of Eq. SC(5);
c                   exponential term of Eq. SC(12) not included
c
c       LYRCUT   :  Logical flag for truncation of comput. layer
c
c       NN       :  Order of double-Gauss quadrature (NSTR/2)
c
c       NCUT     :  Number of computational layer where absorption
c                   optical depth exceeds ABSCUT
c
c       TAUCPR   :  Cumulative optical depth (delta-M-scaled)
c
c       UTAUPR   :  Optical depths of user output levels in delta-M
c                   coordinates;  equal to UTAU if no delta-M
c
c       XR0      :  Expansion of thermal source function in Eq. SS(14)
c
c       XR1      :  Expansion of thermal source function Eqs. SS(16)
c
c       ZZ       :  Beam source vectors in Eq. SS(19)
c
c       ZPLK0    :  Thermal source vectors Z0, by solving Eq. SS(16)
c
c       ZPLK1    :  Thermal source vectors Z1, by solving Eq. SS(16)
c
c       (remainder are DISORT input variables)
c
c
c    O U T P U T     V A R I A B L E S:
c
c       U0C      :  Azimuthally averaged intensities
c                   ( at polar quadrature angles )
c
c       (RFLDIR, RFLDN, FLUP, DFDT, UAVG are DISORT output variables)
c
c
c    I N T E R N A L       V A R I A B L E S:
c
c       DIRINT   :  Direct intensity attenuated
c       FDNTOT   :  Total downward flux (direct + diffuse)
c       FLDIR    :  Direct-beam flux (delta-M scaled)
c       FLDN     :  Diffuse down-flux (delta-M scaled)
c       FNET     :  Net flux (total-down - diffuse-up)
c       FACT     :  EXP( - UTAUPR / UMU0 )
c       PLSORC   :  Planck source function (thermal)
c       ZINT     :  Intensity of m = 0 case, in Eq. SC(1)
c
c   Called by- DISORT
c   Calls- ZEROIT
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      LOGICAL   LYRCUT
      INTEGER   MAXULV, MXCMU, MXULV, NCUT, NN, NSTR, NTAU
      REAL      FBEAM, PI, UMU0
c     ..
c     .. Array Arguments ..

      LOGICAL   PRNT( * )
      INTEGER   LAYRU( MXULV )
      REAL      CMU( MXCMU ), CWT( MXCMU ), DFDT( MAXULV ),
     &          FLDIR( MXULV ), FLDN( MXULV ), FLUP( MAXULV ),
     &          GC( MXCMU, MXCMU, * ), KK( MXCMU, * ), LL( MXCMU, * ),
     &          RFLDIR( MAXULV ), RFLDN( MAXULV ), SSALB( * ),
     &          TAUCPR( 0:* ), U0C( MXCMU, MXULV ), UAVG( MAXULV ),
     &          UTAU( MAXULV ), UTAUPR( MXULV ), XR0( * ), XR1( * ),
     &          ZPLK0( MXCMU, * ), ZPLK1( MXCMU, * ), ZZ( MXCMU, * )
c     ..
c     .. Local Scalars ..

      INTEGER   IQ, JQ, LU, LYU
      REAL      ANG1, ANG2, DIRINT, FACT, FDNTOT, FNET, PLSORC, ZINT
c     ..
c     .. External Subroutines ..

      EXTERNAL  ZEROIT
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ACOS, EXP
c     ..


      IF( PRNT(2) )  WRITE(*,'(//,21X,A,/,2A,/,2A,/)')
     & '<----------------------- FLUXES ----------------------->',
     & '   Optical  Compu    Downward    Downward    Downward     ',
     & ' Upward                    Mean      Planck   d(Net Flux)',
     & '     Depth  Layer      Direct     Diffuse       Total     ',
     & 'Diffuse         Net   Intensity      Source   / d(Op Dep)'

c                                        ** Zero DISORT output arrays
      CALL ZEROIT( U0C, MXULV*MXCMU )
      CALL ZEROIT( FLDIR, MXULV )
      CALL ZEROIT( FLDN, MXULV )

c                                        ** Loop over user levels
      DO 80 LU = 1, NTAU

         LYU  = LAYRU( LU )

         IF( LYRCUT .AND. LYU.GT.NCUT ) THEN
c                                                ** No radiation reaches
c                                                ** this level
            FDNTOT = 0.0
            FNET   = 0.0
            PLSORC = 0.0
            GO TO  70

         END IF


         IF( FBEAM.GT.0.0 ) THEN

            FACT         = EXP( -UTAUPR( LU ) / UMU0 )
            DIRINT       = FBEAM*FACT
            FLDIR( LU )  = UMU0*( FBEAM*FACT )
            RFLDIR( LU ) = UMU0*FBEAM * EXP( -UTAU( LU ) / UMU0 )

         ELSE

            DIRINT       = 0.0
            FLDIR( LU )  = 0.0
            RFLDIR( LU ) = 0.0

         END IF


         DO 30 IQ = 1, NN

            ZINT   = 0.0

            DO 10 JQ = 1, NN
               ZINT   = ZINT + GC( IQ, JQ, LYU )*LL( JQ, LYU )*
     &                  EXP( -KK( JQ,LYU )*( UTAUPR( LU ) -
     &                  TAUCPR( LYU ) ) )
   10       CONTINUE

            DO 20 JQ = NN + 1, NSTR
               ZINT   = ZINT + GC( IQ, JQ, LYU )*LL( JQ, LYU )*
     &                  EXP( -KK( JQ,LYU )*( UTAUPR( LU ) -
     &                  TAUCPR( LYU - 1 ) ) )
   20       CONTINUE

            U0C( IQ, LU ) = ZINT

            IF( FBEAM.GT.0.0 ) U0C( IQ, LU ) = ZINT + ZZ( IQ, LYU )*FACT

            U0C( IQ, LU ) = U0C( IQ, LU ) + ZPLK0( IQ, LYU ) +
     &                      ZPLK1( IQ, LYU )*UTAUPR( LU )
            UAVG( LU ) = UAVG( LU ) + CWT( NN + 1 - IQ )*U0C( IQ, LU )
            FLDN( LU ) = FLDN( LU ) + CWT( NN + 1 - IQ )*
     &                   CMU( NN + 1 - IQ )*U0C( IQ, LU )
   30    CONTINUE


         DO 60 IQ = NN + 1, NSTR

            ZINT   = 0.0

            DO 40 JQ = 1, NN
               ZINT   = ZINT + GC( IQ, JQ, LYU )*LL( JQ, LYU )*
     &                  EXP( -KK( JQ,LYU )*( UTAUPR( LU ) -
     &                  TAUCPR( LYU ) ) )
   40       CONTINUE

            DO 50 JQ = NN + 1, NSTR
               ZINT   = ZINT + GC( IQ, JQ, LYU )*LL( JQ, LYU )*
     &                  EXP( -KK( JQ,LYU )*( UTAUPR( LU ) -
     &                  TAUCPR( LYU - 1 ) ) )
   50       CONTINUE

            U0C( IQ, LU ) = ZINT

            IF( FBEAM.GT.0.0 ) U0C( IQ, LU ) = ZINT + ZZ( IQ, LYU )*FACT

            U0C( IQ, LU ) = U0C( IQ, LU ) + ZPLK0( IQ, LYU ) +
     &                      ZPLK1( IQ, LYU )*UTAUPR( LU )
            UAVG( LU ) = UAVG( LU ) + CWT( IQ - NN )*U0C( IQ, LU )
            FLUP( LU ) = FLUP( LU ) + CWT( IQ - NN )*CMU( IQ - NN )*
     &                   U0C( IQ, LU )
   60    CONTINUE


         FLUP( LU )  = 2.*PI*FLUP( LU )
         FLDN( LU )  = 2.*PI*FLDN( LU )
         FDNTOT      = FLDN( LU ) + FLDIR( LU )
         FNET        = FDNTOT - FLUP( LU )
         RFLDN( LU ) = FDNTOT - RFLDIR( LU )
         UAVG( LU )  = ( 2.*PI*UAVG( LU ) + DIRINT ) / ( 4.*PI )
         PLSORC      = XR0( LYU ) + XR1( LYU )*UTAUPR( LU )
         DFDT( LU )  = ( 1.- SSALB( LYU ) ) * 4.*PI *
     &                 ( UAVG( LU ) - PLSORC )

   70    CONTINUE
         IF( PRNT(2) ) WRITE(*,'(F10.4,I7,1P,7E12.3,E14.3)') UTAU( LU ),
     &       LYU, RFLDIR( LU ), RFLDN( LU ), FDNTOT, FLUP( LU ), FNET,
     &       UAVG( LU ), PLSORC, DFDT( LU )

   80 CONTINUE


      IF( PRNT(3) ) THEN

         WRITE(*,'(//,2A)') ' ******** AZIMUTHALLY AVERAGED ',
     &      'INTENSITIES ( at polar quadrature angles ) *******'

         DO 100 LU = 1, NTAU

            WRITE( *, '(/,A,F10.4,//,2A)' ) 
     &         ' Optical depth =', UTAU( LU ),
     &         '     Angle (deg)   cos(Angle)     Intensity',
     &         '     Angle (deg)   cos(Angle)     Intensity'

            DO 90 IQ = 1, NN
               ANG1 = (180./ PI) * ACOS( CMU( 2*NN - IQ + 1 ) )
               ANG2 = (180./ PI) * ACOS( CMU( IQ ) )
               WRITE(*,'(2(0P,F16.4,F13.5,1P,E14.3))') 
     &             ANG1, CMU(2*NN-IQ+1), U0C(IQ,LU),
     &             ANG2, CMU(IQ),        U0C(IQ+NN,LU)
   90       CONTINUE

  100    CONTINUE

      END IF

      RETURN
      END

      SUBROUTINE LEPOLY( NMU, M, MAXMU, TWONM1, MU, SQT, YLM )

c       Computes the normalized associated Legendre polynomial,
c       defined in terms of the associated Legendre polynomial
c       Plm = P-sub-l-super-m as
c
c             Ylm(MU) = sqrt( (l-m)!/(l+m)! ) * Plm(MU)
c
c       for fixed order m and all degrees from l = m to TWONM1.
c       When m.GT.0, assumes that Y-sub(m-1)-super(m-1) is available
c       from a prior call to the routine.
c
c       REFERENCE: Dave, J.V. and B.H. Armstrong, Computations of
c                  High-Order Associated Legendre Polynomials,
c                  J. Quant. Spectrosc. Radiat. Transfer 10,
c                  557-562, 1970.  (hereafter D/A)
c
c       METHOD: Varying degree recurrence relationship.
c
c       NOTES: 
c       (1) The D/A formulas are transformed by setting M=n-1; L=k-1.
c       (2) Assumes that routine is called first with  M = 0, then with
c           M = 1, etc. up to  M = TWONM1.
c       (3) Loops are written in such a way as to vectorize.
c
c
c  I N P U T     V A R I A B L E S:
c
c       NMU    :  Number of arguments of YLM
c
c       M      :  Order of YLM
c
c       MAXMU  :  First dimension of YLM
c
c       TWONM1 :  Max degree of YLM
c
c       MU(i)  :  Arguments of YLM (i = 1 to NMU)
c
c       SQT(k) :  Square root of k
c
c       If M.GT.0, YLM(M-1,i) for i = 1 to NMU is assumed to exist
c       from a prior call.
c
c
c  O U T P U T     V A R I A B L E:
c
c       YLM(l,i) :  l = M to TWONM1, normalized associated Legendre
c                   polynomials evaluated at argument MU(i)
c
c   Called by- DISORT, ALBTRN, SURFAC
c   Calls- ERRMSG
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      INTEGER   M, MAXMU, NMU, TWONM1
c     ..
c     .. Array Arguments ..

      REAL      MU( * ), YLM( 0:MAXMU, * ), SQT( * )
c     ..
c     .. Local Scalars ..

      INTEGER   I, L
      REAL      TMP1, TMP2
c     ..
c     .. External Subroutines ..

      EXTERNAL  ERRMSG
c     ..


      IF( M.EQ.0 ) THEN
c                             ** Upward recurrence for ordinary
c                             ** Legendre polynomials
         DO 20 I = 1, NMU
            YLM( 0, I ) = 1.0
            YLM( 1, I ) = MU( I )
   20    CONTINUE


         DO 40 L = 2, TWONM1

            DO 30 I = 1, NMU
               YLM( L, I ) = ( ( 2*L - 1 )*MU( I )*YLM( L-1, I ) -
     &                         ( L - 1 )*YLM( L-2, I ) ) / L
   30       CONTINUE

   40    CONTINUE


      ELSE

         DO 50 I = 1, NMU
c                               ** Y-sub-m-super-m; derived from
c                               ** D/A Eqs. (11,12)

            YLM( M, I ) = - SQT( 2*M - 1 ) / SQT( 2*M )*
     &                      SQRT( 1.- MU(I)**2 )*YLM( M-1, I )

c                              ** Y-sub-(m+1)-super-m; derived from
c                              ** D/A Eqs.(13,14) using Eqs.(11,12)

            YLM( M+1, I ) = SQT( 2*M + 1 )*MU( I )*YLM( M, I )

   50    CONTINUE

c                                   ** Upward recurrence; D/A EQ.(10)
         DO 70 L = M + 2, TWONM1

            TMP1  = SQT( L - M )*SQT( L + M )
            TMP2  = SQT( L - M - 1 )*SQT( L + M - 1 )

            DO 60 I = 1, NMU
               YLM( L, I ) = ( ( 2*L - 1 )*MU( I )*YLM( L-1, I ) -
     &                         TMP2*YLM( L-2, I ) ) / TMP1
   60       CONTINUE

   70    CONTINUE

      END IF


      RETURN
      END

      SUBROUTINE PRALTR( UMU, NUMU, ALBMED, TRNMED )

c        Print planar albedo and transmissivity of medium
c        as a function of incident beam angle

c   Called by- ALBTRN
c --------------------------------------------------------------------

c     .. Parameters ..

      REAL      DPR
      PARAMETER ( DPR = 180.0 / 3.14159265 )
c     ..
c     .. Scalar Arguments ..

      INTEGER   NUMU
c     ..
c     .. Array Arguments ..

      REAL      ALBMED( NUMU ), TRNMED( NUMU ), UMU( NUMU )
c     ..
c     .. Local Scalars ..

      INTEGER   IU
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ACOS
c     ..


      WRITE( *, '(///,A,//,A)' )
     &   ' *******  Flux Albedo and/or Transmissivity of ' //
     &   'entire medium  ********',
     &  ' Beam Zen Ang   cos(Beam Zen Ang)      Albedo   Transmissivity'

      DO 10 IU = 1, NUMU
         WRITE( *, '(0P,F13.4,F20.6,F12.5,1P,E17.4)' )
     &      DPR*ACOS( UMU( IU ) ), UMU( IU ), ALBMED( IU ), TRNMED( IU )
   10 CONTINUE


      RETURN
      END

      SUBROUTINE PRAVIN( UMU, NUMU, MAXUMU, UTAU, NTAU, U0U )

c        Print azimuthally averaged intensities at user angles

c   Called by- DISORT

c     LENFMT   Max number of polar angle cosines UMU that can be
c              printed on one line, as set in FORMAT statement
c --------------------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   MAXUMU, NTAU, NUMU
c     ..
c     .. Array Arguments ..

      REAL      U0U( MAXUMU, NTAU ), UMU( NUMU ), UTAU( NTAU )
c     ..
c     .. Local Scalars ..

      INTEGER   IU, IUMAX, IUMIN, LENFMT, LU, NP, NPASS
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC MIN
c     ..


      IF( NUMU.LT.1 )  RETURN

      WRITE( *, '(//,A)' )
     &   ' *******  AZIMUTHALLY AVERAGED INTENSITIES ' //
     &   '(at user polar angles)  ********'

      LENFMT = 8
      NPASS  = 1 + (NUMU-1) / LENFMT

      WRITE( *,'(/,A,/,A)') '   Optical   Polar Angle Cosines',
     &                      '     Depth'

      DO 20 NP = 1, NPASS

         IUMIN  = 1 + LENFMT * ( NP - 1 )
         IUMAX  = MIN( LENFMT*NP, NUMU )
         WRITE( *,'(/,10X,8F14.5)') ( UMU(IU), IU = IUMIN, IUMAX )

         DO 10 LU = 1, NTAU
            WRITE( *, '(0P,F10.4,1P,8E14.4)' ) UTAU( LU ),
     &           ( U0U( IU,LU ), IU = IUMIN, IUMAX )
   10    CONTINUE

   20 CONTINUE


      RETURN
      END

      SUBROUTINE PRTINP( NLYR, DTAUC, DTAUCP, SSALB, PMOM, TEMPER,
     &                   WVNMLO, WVNMHI, NTAU, UTAU, NSTR, NUMU, UMU,
     &                   NPHI, PHI, IBCND, FBEAM, UMU0, PHI0, FISOT,
     &                   LAMBER, ALBEDO, HL, BTEMP, TTEMP, TEMIS,
     &                   DELTAM, PLANK, ONLYFL, ACCUR, FLYR, LYRCUT,
     &                   OPRIM, TAUC, TAUCPR, MAXCMU, PRTMOM )

c        Print values of input variables

c   Called by- DISORT
c --------------------------------------------------------------------

c     .. Scalar Arguments ..

      LOGICAL   DELTAM, LAMBER, LYRCUT, ONLYFL, PLANK, PRTMOM
      INTEGER   IBCND, MAXCMU, NLYR, NPHI, NSTR, NTAU, NUMU
      REAL      ACCUR, ALBEDO, BTEMP, FBEAM, FISOT, PHI0, TEMIS, TTEMP,
     &          UMU0, WVNMHI, WVNMLO
c     ..
c     .. Array Arguments ..

      REAL      DTAUC( * ), DTAUCP( * ), FLYR( * ), HL( 0:MAXCMU ),
     &          OPRIM( * ), PHI( * ), PMOM( 0:MAXCMU, * ), SSALB( * ),
     &          TAUC( 0:* ), TAUCPR( 0:* ), TEMPER( 0:* ), UMU( * ),
     &          UTAU( * )
c     ..
c     .. Local Scalars ..

      INTEGER   IU, J, K, LC, LU
      REAL      YESSCT
c     ..


      WRITE( *, '(/,A,I4,A,I4)' ) ' No. streams =', NSTR,
     &       '     No. computational layers =', NLYR

      IF( IBCND.NE.1 ) WRITE( *, '(I4,A,10F10.4,/,(26X,10F10.4))' )
     &    NTAU,' User optical depths :', ( UTAU(LU), LU = 1, NTAU )

      IF( .NOT.ONLYFL ) WRITE( *, '(I4,A,10F9.5,/,(31X,10F9.5))' )
     &    NUMU,' User polar angle cosines :',( UMU(IU), IU = 1, NUMU )

      IF( .NOT.ONLYFL .AND. IBCND.NE.1 )
     &    WRITE( *, '(I4,A,10F9.2,/,(28X,10F9.2))' )
     &           NPHI,' User azimuthal angles :',( PHI(J), J = 1, NPHI )

      IF( .NOT.PLANK .OR. IBCND.EQ.1 )
     &    WRITE( *, '(A)' ) ' No thermal emission'


      WRITE( *, '(A,I2)' ) ' Boundary condition flag: IBCND =', IBCND

      IF( IBCND.EQ.0 ) THEN

         WRITE( *, '(A,1P,E11.3,A,0P,F8.5,A,F7.2,/,A,1P,E11.3)' )
     &          '    Incident beam with intensity =', FBEAM,
     &          ' and polar angle cosine = ', UMU0,
     &          '  and azimuth angle =', PHI0,
     &          '    plus isotropic incident intensity =', FISOT

         IF( LAMBER ) WRITE( *, '(A,0P,F8.4)' )
     &                '    Bottom albedo (Lambertian) =', ALBEDO

         IF( .NOT.LAMBER ) WRITE( *, '(A,/,(10X,10F9.5))' )
     &     '    Legendre coeffs of bottom bidirectional reflectivity :',
     &         ( HL( K ), K = 0, NSTR )

         IF( PLANK ) WRITE( *, '(A,2F14.4,/,A,F10.2,A,F10.2,A,F8.4)' )
     &       '    Thermal emission in wavenumber interval :', WVNMLO,
     &       WVNMHI,
     &       '    Bottom temperature =', BTEMP,
     &       '    Top temperature =', TTEMP,
     &       '    Top emissivity =',TEMIS

      ELSE IF( IBCND.EQ.1 ) THEN

         WRITE(*,'(A)') '    Isotropic illumination from top and bottom'
         WRITE( *, '(A,0P,F8.4)' )
     &          '    Bottom albedo (Lambertian) =', ALBEDO
      END IF


      IF( DELTAM ) WRITE( *, '(A)' ) ' Uses delta-M method'
      IF( .NOT.DELTAM ) WRITE( *, '(A)' ) ' Does not use delta-M method'


      IF( IBCND.EQ.1 ) THEN

         WRITE( *, '(A)' ) ' Calculate albedo and transmissivity of'//
     &                     ' medium vs. incident beam angle'

      ELSE IF( ONLYFL ) THEN

         WRITE( *, '(A)' )
     &          ' Calculate fluxes and azim-averaged intensities only'

      ELSE

         WRITE( *, '(A)' ) ' Calculate fluxes and intensities'

      END IF


      WRITE( *, '(A,1P,E11.2)' )
     &       ' Relative convergence criterion for azimuth series =',
     &       ACCUR

      IF( LYRCUT ) WRITE( *, '(A)' )
     &    ' Sets radiation = 0 below absorption optical depth 10'


c                                    ** Print layer variables
C                                    ** (to read, skip every other line)

      IF( PLANK ) WRITE( *,'(/,37X,A,3(/,2A))') 
     & '<------------- Delta-M --------------->',
     &'                   Total    Single                           ',
     &               'Total    Single',
     &'       Optical   Optical   Scatter   Truncated   ',
     &   'Optical   Optical   Scatter    Asymm',
     &'         Depth     Depth    Albedo    Fraction     ',
     &     'Depth     Depth    Albedo   Factor   Temperature'

      IF( .NOT.PLANK ) WRITE( *,'(/,37X,A,3(/,2A))')
     & '<------------- Delta-M --------------->',
     &'                   Total    Single                           ',
     &               'Total    Single',
     &'       Optical   Optical   Scatter   Truncated   ',
     &   'Optical   Optical   Scatter    Asymm',
     &'         Depth     Depth    Albedo    Fraction     ',
     &     'Depth     Depth    Albedo   Factor'


      YESSCT = 0.0

      DO 10 LC = 1, NLYR

         YESSCT = YESSCT + SSALB( LC )
c                                       ** f90 nonadvancing I/O would 
c                                       ** simplify this a lot (also the
c                                       ** two WRITEs above)
         IF( PLANK )
     &       WRITE(*,'(I4,2F10.4,F10.5,F12.5,2F10.4,F10.5,F9.4,F14.3)')
     &             LC, DTAUC( LC ), TAUC( LC ), SSALB( LC ), FLYR( LC ),
     &             DTAUCP( LC ), TAUCPR( LC ), OPRIM( LC ), PMOM(1,LC),
     &             TEMPER( LC-1 )

         IF( .NOT.PLANK )
     &       WRITE(*,'(I4,2F10.4,F10.5,F12.5,2F10.4,F10.5,F9.4)')
     &             LC, DTAUC( LC ), TAUC( LC ), SSALB( LC ), FLYR( LC ),
     &             DTAUCP( LC ), TAUCPR( LC ), OPRIM( LC ), PMOM( 1,LC )
   10 CONTINUE

      IF( PLANK ) WRITE( *, '(85X,F14.3)' ) TEMPER( NLYR )


      IF( PRTMOM .AND. YESSCT.GT.0.0 ) THEN

         WRITE( *, '(/,A)' ) ' Layer   Phase Function Moments'

         DO 20 LC = 1, NLYR

            IF( SSALB( LC ).GT.0.0 )
     &          WRITE( *, '(I6,10F11.6,/,(6X,10F11.6))' )
     &                 LC, ( PMOM( K, LC ), K = 0, NSTR )
   20    CONTINUE

      END IF

      RETURN
      END

      SUBROUTINE PRTINT( UU, UTAU, NTAU, UMU, NUMU, PHI, NPHI, MAXULV,
     &                   MAXUMU )

c         Prints the intensity at user polar and azimuthal angles

c     All arguments are DISORT input or output variables

c   Called by- DISORT

c     LENFMT   Max number of azimuth angles PHI that can be printed
c                on one line, as set in FORMAT statement
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      INTEGER   MAXULV, MAXUMU, NPHI, NTAU, NUMU
c     ..
c     .. Array Arguments ..

      REAL      PHI( * ), UMU( * ), UTAU( * ), UU( MAXUMU, MAXULV, * )
c     ..
c     .. Local Scalars ..

      INTEGER   IU, J, JMAX, JMIN, LENFMT, LU, NP, NPASS
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC MIN
c     ..


      IF( NPHI.LT.1 )  RETURN

      WRITE( *, '(//,A)' )
     &   ' *********  I N T E N S I T I E S  *********'

      LENFMT = 10
      NPASS  = 1 + (NPHI-1) / LENFMT

      WRITE( *, '(/,A,/,A,/,A)' )
     &   '             Polar   Azimuth angles (degrees)',
     &   '   Optical   Angle',
     &   '    Depth   Cosine'

      DO 30 LU = 1, NTAU

         DO 20 NP = 1, NPASS

            JMIN   = 1 + LENFMT * ( NP - 1 )
            JMAX   = MIN( LENFMT*NP, NPHI )

            WRITE( *, '(/,18X,10F11.2)' ) ( PHI(J), J = JMIN, JMAX )

            IF( NP.EQ.1 ) WRITE( *, '(F10.4,F8.4,1P,10E11.3)' )
     &             UTAU(LU), UMU(1), (UU(1, LU, J), J = JMIN, JMAX)
            IF( NP.GT.1 ) WRITE( *, '(10X,F8.4,1P,10E11.3)' )
     &                       UMU(1), (UU(1, LU, J), J = JMIN, JMAX)

            DO 10 IU = 2, NUMU
               WRITE( *, '(10X,F8.4,1P,10E11.3)' ) 
     &                 UMU( IU ), ( UU( IU, LU, J ), J = JMIN, JMAX )
   10       CONTINUE

   20    CONTINUE

   30 CONTINUE


      RETURN
      END

      SUBROUTINE QGAUSN( M, GMU, GWT )

c       Compute weights and abscissae for ordinary Gaussian quadrature
c       on the interval (0,1);  that is, such that

c           sum(i=1 to M) ( GWT(i) f(GMU(i)) )

c       is a good approximation to

c           integral(0 to 1) ( f(x) dx )

c   INPUT :    M       order of quadrature rule

c   OUTPUT :  GMU(I)   array of abscissae (I = 1 TO M)
c             GWT(I)   array of weights (I = 1 TO M)

c   REFERENCE:  Davis, P.J. and P. Rabinowitz, Methods of Numerical
c                   Integration, Academic Press, New York, pp. 87, 1975

c   METHOD:  Compute the abscissae as roots of the Legendre
c            polynomial P-sub-M using a cubically convergent
c            refinement of Newton's method.  Compute the
c            weights from EQ. 2.7.3.8 of Davis/Rabinowitz.  Note
c            that Newton's method can very easily diverge; only a
c            very good initial guess can guarantee convergence.
c            The initial guess used here has never led to divergence
c            even for M up to 1000.

c   ACCURACY:  relative error no better than TOL or computer
c              precision (machine epsilon), whichever is larger

c   INTERNAL VARIABLES:

c    ITER      : number of Newton Method iterations
c    MAXIT     : maximum allowed iterations of Newton Method
c    PM2,PM1,P : 3 successive Legendre polynomials
c    PPR       : derivative of Legendre polynomial
c    P2PRI     : 2nd derivative of Legendre polynomial
c    TOL       : convergence criterion for Legendre poly root iteration
c    X,XI      : successive iterates in cubically-convergent version
c                of Newtons Method (seeking roots of Legendre poly.)

c   Called by- SETDIS, SURFAC
c   Calls- D1MACH, ERRMSG
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      INTEGER   M
c     ..
c     .. Array Arguments ..

      REAL      GMU( M ), GWT( M )
c     ..
c     .. Local Scalars ..

      INTEGER   ITER, K, LIM, MAXIT, NN, NP1
      REAL      CONA, PI, T
      DOUBLE PRECISION EN, NNP1, ONE, P, P2PRI, PM1, PM2, PPR, PROD,
     &                 TMP, TOL, TWO, X, XI
c     ..
c     .. External Functions ..

      DOUBLE PRECISION D1MACH
      EXTERNAL  D1MACH
c     ..
c     .. External Subroutines ..

      EXTERNAL  ERRMSG
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS, ASIN, COS, FLOAT, MOD, TAN
c     ..
      SAVE      PI, TOL

      DATA      PI / 0.0 / , MAXIT / 1000 / , ONE / 1.D0 / ,
     &          TWO / 2.D0 /


      IF( PI.EQ.0.0 ) THEN

         PI   = 2.*ASIN( 1.0 )
         TOL  = 10.*D1MACH( 4 )

      END IF


      IF( M.LT.1 ) CALL ERRMSG( 'QGAUSN--Bad value of M',.True.)

      IF( M.EQ.1 ) THEN

         GMU( 1 ) = 0.5
         GWT( 1 ) = 1.0
         RETURN

      END IF

      EN   = M
      NP1  = M + 1
      NNP1 = M*NP1
      CONA = FLOAT( M - 1 ) / ( 8*M**3 )

      LIM  = M / 2

      DO 30 K = 1, LIM
c                                        ** Initial guess for k-th root
c                                        ** of Legendre polynomial, from
c                                        ** Davis/Rabinowitz (2.7.3.3a)
         T  = ( 4*K - 1 )*PI / ( 4*M + 2 )
         X  = COS( T + CONA / TAN( T ) )
         ITER = 0
c                                        ** Upward recurrence for
c                                        ** Legendre polynomials
   10    CONTINUE
         ITER   = ITER + 1
         PM2    = ONE
         PM1    = X

         DO 20 NN = 2, M
            P    = ( ( 2*NN - 1 )*X*PM1 - ( NN - 1 )*PM2 ) / NN
            PM2  = PM1
            PM1  = P
   20    CONTINUE
c                                              ** Newton Method
         TMP    = ONE / ( ONE - X**2 )
         PPR    = EN*( PM2 - X*P )*TMP
         P2PRI  = ( TWO*X*PPR - NNP1*P )*TMP
         XI     = X - ( P / PPR )*( ONE +
     &            ( P / PPR )*P2PRI / ( TWO*PPR ) )

c                                              ** Check for convergence
         IF( ABS( XI - X ).GT.TOL ) THEN

            IF( ITER.GT.MAXIT )
     &          CALL ERRMSG( 'QGAUSN--max iteration count',.True.)

            X  = XI
            GO TO  10

         END IF
c                             ** Iteration finished--calculate weights,
c                             ** abscissae for (-1,1)
         GMU( K ) = -X
         GWT( K ) = TWO / ( TMP*( EN*PM2 )**2 )
         GMU( NP1 - K ) = -GMU( K )
         GWT( NP1 - K ) = GWT( K )
   30 CONTINUE
c                                    ** Set middle abscissa and weight
c                                    ** for rules of odd order
      IF( MOD( M,2 ).NE.0 ) THEN

         GMU( LIM + 1 ) = 0.0
         PROD   = ONE

         DO 40 K = 3, M, 2
            PROD   = PROD * K / ( K - 1 )
   40    CONTINUE

         GWT( LIM + 1 ) = TWO / PROD**2
      END IF

c                                        ** Convert from (-1,1) to (0,1)
      DO 50 K = 1, M
         GMU( K ) = 0.5*GMU( K ) + 0.5
         GWT( K ) = 0.5*GWT( K )
   50 CONTINUE


      RETURN
      END

      SUBROUTINE SETDIS( CMU, CWT, DELTAM, DTAUC, DTAUCP, EXPBEA, FBEAM,
     &                   FLYR, GL, HL, HLPR, IBCND, LAMBER, LAYRU,
     &                   LYRCUT, MAXUMU, MAXCMU, MXCMU, NCUT, NLYR,
     &                   NTAU, NN, NSTR, PLANK, NUMU, ONLYFL, OPRIM,
     &                   PMOM, SSALB, TAUC, TAUCPR, UTAU, UTAUPR, UMU,
     &                   UMU0, USRTAU, USRANG )

c          Perform miscellaneous setting-up operations
c
c    INPUT :  all are DISORT input variables (see DOC file)
c
c
c    O U T P U T     V A R I A B L E S:
c
c       NTAU,UTAU   if USRTAU = FALSE (defined in DISORT.doc)
c       NUMU,UMU    if USRANG = FALSE (defined in DISORT.doc)
c
c       CMU,CWT     computational polar angles and
c                   corresponding quadrature weights
c
c       EXPBEA      transmission of direct beam
c
c       FLYR        truncated fraction in delta-M method
c
c       GL          phase function Legendre coefficients multiplied
c                   by (2L+1) and single-scatter albedo
c
c       HLPR        Legendre moments of surface bidirectional
c                   reflectivity, times 2K+1
c
c       LAYRU       Computational layer in which UTAU falls
c
c       LYRCUT      flag as to whether radiation will be zeroed
c                   below layer NCUT
c
c       NCUT        computational layer where absorption
c                   optical depth first exceeds  ABSCUT
c
c       NN          NSTR / 2
c
c       OPRIM       delta-M-scaled single-scatter albedo
c
c       TAUCPR      delta-M-scaled optical depth
c
c       UTAUPR      delta-M-scaled version of  UTAU
c
c   Called by- DISORT
c   Calls- QGAUSN, ERRMSG
c ---------------------------------------------------------------------

c     .. Scalar Arguments ..

      LOGICAL   DELTAM, LAMBER, LYRCUT, ONLYFL, PLANK, USRANG, USRTAU
      INTEGER   IBCND, MAXCMU, MAXUMU, MXCMU, NCUT, NLYR, NN, NSTR,
     &          NTAU, NUMU
      REAL      FBEAM, UMU0
c     ..
c     .. Array Arguments ..

      INTEGER   LAYRU( * )
      REAL      CMU( MXCMU ), CWT( MXCMU ), DTAUC( * ), DTAUCP( * ),
     &          EXPBEA( 0:* ), FLYR( * ), GL( 0:MXCMU, * ),
     &          HL( 0:MAXCMU ), HLPR( 0:MXCMU ), OPRIM( * ),
     &          PMOM( 0:MAXCMU, * ), SSALB( * ), TAUC( 0:* ),
     &          TAUCPR( 0:* ), UMU( MAXUMU ), UTAU( * ), UTAUPR( * )
c     ..
c     .. Local Scalars ..

      INTEGER   IQ, IU, K, LC, LU
      REAL      ABSCUT, ABSTAU, F
c     ..
c     .. External Subroutines ..

      EXTERNAL  ERRMSG, QGAUSN
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS, EXP
c     ..
      DATA      ABSCUT / 10. /


      IF( .NOT.USRTAU ) THEN
c                              ** Set output levels at computational
c                              ** layer boundaries
         NTAU  = NLYR + 1

         DO 10 LC = 0, NTAU - 1
            UTAU( LC + 1 ) = TAUC( LC )
   10    CONTINUE

      END IF
c                        ** Apply delta-M scaling and move description
c                        ** of computational layers to local variables
      EXPBEA( 0 ) = 1.0
      TAUCPR( 0 ) = 0.0
      ABSTAU      = 0.0

      DO 40 LC = 1, NLYR

         PMOM( 0, LC ) = 1.0

         IF( ABSTAU.LT.ABSCUT ) NCUT  = LC

         ABSTAU = ABSTAU + ( 1.- SSALB( LC ) )*DTAUC( LC )

         IF( .NOT.DELTAM ) THEN

            OPRIM( LC )  = SSALB( LC )
            DTAUCP( LC ) = DTAUC( LC )
            TAUCPR( LC ) = TAUC( LC )

            DO 20 K = 0, NSTR - 1
               GL( K, LC ) = ( 2*K + 1 )*OPRIM( LC )*PMOM( K, LC )
   20       CONTINUE

            F  = 0.0


         ELSE
c                                    ** Do delta-M transformation

            F  = PMOM( NSTR, LC )
            OPRIM(LC) = SSALB(LC) * ( 1.- F ) / ( 1.- F * SSALB(LC) )
            DTAUCP( LC ) = ( 1.- F*SSALB( LC ) )*DTAUC( LC )
            TAUCPR( LC ) = TAUCPR( LC-1 ) + DTAUCP( LC )

            DO 30 K = 0, NSTR - 1
               GL( K, LC ) = ( 2*K + 1 ) * OPRIM( LC ) *
     &                       ( PMOM( K,LC ) - F ) / ( 1.- F )
   30       CONTINUE

         END IF

         FLYR( LC )   = F
         EXPBEA( LC ) = 0.0

         IF( FBEAM.GT.0.0 ) EXPBEA( LC ) = EXP( -TAUCPR( LC ) / UMU0 )

   40 CONTINUE
c                      ** If no thermal emission, cut off medium below
c                      ** absorption optical depth = ABSCUT ( note that
c                      ** delta-M transformation leaves absorption
c                      ** optical depth invariant ).  Not worth the
c                      ** trouble for one-layer problems, though.
      LYRCUT = .FALSE.

      IF( ABSTAU.GE.ABSCUT .AND. .NOT.PLANK .AND. IBCND.NE.1 .AND.
     &    NLYR.GT.1 ) LYRCUT = .TRUE.

      IF( .NOT.LYRCUT ) NCUT   = NLYR

c                             ** Set arrays defining location of user
c                             ** output levels within delta-M-scaled
c                             ** computational mesh
      DO 70 LU = 1, NTAU

         DO 50 LC = 1, NLYR

            IF( UTAU( LU ).GE.TAUC( LC - 1 ) .AND.
     &          UTAU( LU ).LE.TAUC( LC ) ) GO TO  60

   50    CONTINUE
         LC   = NLYR

   60    CONTINUE
         UTAUPR( LU ) = UTAU( LU )
         IF( DELTAM ) UTAUPR( LU ) = TAUCPR( LC - 1 ) +
     &                               ( 1.- SSALB( LC )*FLYR( LC ) )*
     &                               ( UTAU( LU ) - TAUC( LC-1 ) )
         LAYRU( LU ) = LC

   70 CONTINUE
c                      ** Calculate computational polar angle cosines
c                      ** and associated quadrature weights for Gaussian
c                      ** quadrature on the interval (0,1) (upward)
      NN   = NSTR / 2

      CALL QGAUSN( NN, CMU, CWT )
c                                  ** Downward (neg) angles and weights
      DO 80 IQ = 1, NN
         CMU( IQ + NN ) = - CMU( IQ )
         CWT( IQ + NN ) = CWT( IQ )
   80 CONTINUE


      IF( FBEAM.GT.0.0 ) THEN
c                               ** Compare beam angle to comput. angles
         DO 90 IQ = 1, NN

            IF( ABS( UMU0 - CMU( IQ ) ) / UMU0.LT.1.E-4 ) CALL ERRMSG(
     &          'SETDIS--beam angle=computational angle; change NSTR',
     &          .True. )

   90    CONTINUE

      END IF


      IF( .NOT.USRANG .OR. ( ONLYFL .AND. MAXUMU.GE.NSTR ) ) THEN

c                                   ** Set output polar angles to
c                                   ** computational polar angles
         NUMU   = NSTR

         DO 100 IU = 1, NN
            UMU( IU ) = - CMU( NN + 1 - IU )
  100    CONTINUE

         DO 110 IU = NN + 1, NSTR
            UMU( IU ) = CMU( IU - NN )
  110    CONTINUE

      END IF


      IF( USRANG .AND. IBCND.EQ.1 ) THEN

c                               ** Shift positive user angle cosines to
c                               ** upper locations and put negatives
c                               ** in lower locations
         DO 120 IU = 1, NUMU
            UMU( IU + NUMU ) = UMU( IU )
  120    CONTINUE

         DO 130 IU = 1, NUMU
            UMU( IU ) = -UMU( 2*NUMU + 1 - IU )
  130    CONTINUE

         NUMU   = 2*NUMU

      END IF


      IF( .NOT.LYRCUT .AND. .NOT.LAMBER ) THEN

         DO 140 K = 0, NSTR
            HLPR( K ) = ( 2*K + 1 )*HL( K )
  140    CONTINUE

      END IF


      RETURN
      END

      SUBROUTINE SETMTX( BDR, CBAND, CMU, CWT, DELM0, DTAUCP, GC, KK,
     &                   LAMBER, LYRCUT, MI, MI9M2, MXCMU, NCOL, NCUT,
     &                   NNLYRI, NN, NSTR, TAUCPR, WK )

c        Calculate coefficient matrix for the set of equations
c        obtained from the boundary conditions and the continuity-
c        of-intensity-at-layer-interface equations;  store in the
c        special banded-matrix format required by LINPACK routines
c
c
c    I N P U T      V A R I A B L E S:
c
c       BDR      :  surface bidirectional reflectivity
c
c       CMU,CWT     abscissae, weights for Gauss quadrature 
c                   over angle cosine
c
c       DELM0    :  Kronecker delta, delta-sub-m0
c
c       GC       :  Eigenvectors at polar quadrature angles, SC(1)
c
c       KK       :  Eigenvalues of coeff. matrix in Eq. SS(7)
c
c       LYRCUT   :  Logical flag for truncation of computational layers
c
c       NN       :  Number of streams in a hemisphere (NSTR/2)
c
c       NCUT     :  Total number of computational layers considered
c
c       TAUCPR   :  Cumulative optical depth (delta-M-scaled)
c
c       (remainder are DISORT input variables)
c
c
c   O U T P U T     V A R I A B L E S:
c
c       CBAND    :  Left-hand side matrix of linear system Eq. SC(5),
c                   scaled by Eq. SC(12); in banded form required
c                   by LINPACK solution routines
c
c       NCOL     :  Number of columns in CBAND
c
c
c   I N T E R N A L    V A R I A B L E S:
c
c       IROW     :  Points to row in CBAND
c       JCOL     :  Points to position in layer block
c       LDA      :  Row dimension of CBAND
c       NCD      :  Number of diagonals below or above main diagonal
c       NSHIFT   :  For positioning number of rows in band storage
c       WK       :  Temporary storage for EXP evaluations
c
c
c   BAND STORAGE
c
c      LINPACK requires band matrices to be input in a special
c      form where the elements of each diagonal are moved up or
c      down (in their column) so that each diagonal becomes a row.
c      (The column locations of diagonal elements are unchanged.)
c
c      Example:  if the original matrix is
c
c          11 12 13  0  0  0
c          21 22 23 24  0  0
c           0 32 33 34 35  0
c           0  0 43 44 45 46
c           0  0  0 54 55 56
c           0  0  0  0 65 66
c
c      then its LINPACK input form would be:
c
c           *  *  *  +  +  +  , * = not used
c           *  * 13 24 35 46  , + = used for pivoting
c           * 12 23 34 45 56
c          11 22 33 44 55 66
c          21 32 43 54 65  *
c
c      If A is a band matrix, the following program segment
c      will convert it to the form (ABD) required by LINPACK 
c      band-matrix routines:
c
c               N  = (column dimension of A, ABD)
c               ML = (band width below the diagonal)
c               MU = (band width above the diagonal)
c               M = ML + MU + 1
c               DO J = 1, N
c                  I1 = MAX(1, J-MU)
c                  I2 = MIN(N, J+ML)
c                  DO I = I1, I2
c                     K = I - J + M
c                     ABD(K,J) = A(I,J)
c                  END DO
c               END DO
c
c      This uses rows  ML+1  through  2*ML+MU+1  of ABD.
c      The total number of rows needed in ABD is  2*ML+MU+1 .
c      In the example above, N = 6, ML = 1, MU = 2, and the
c      row dimension of ABD must be >= 5.
c
c
c   Called by- DISORT, ALBTRN
c   Calls- ZEROIT
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      LOGICAL   LAMBER, LYRCUT
      INTEGER   MI, MI9M2, MXCMU, NCOL, NCUT, NN, NNLYRI, NSTR
      REAL      DELM0
c     ..
c     .. Array Arguments ..

      REAL      BDR( MI, 0:MI ), CBAND( MI9M2, NNLYRI ), CMU( MXCMU ),
     &          CWT( MXCMU ), DTAUCP( * ), GC( MXCMU, MXCMU, * ),
     &          KK( MXCMU, * ), TAUCPR( 0:* ), WK( MXCMU )
c     ..
c     .. Local Scalars ..

      INTEGER   IQ, IROW, JCOL, JQ, K, LC, LDA, NCD, NNCOL, NSHIFT
      REAL      EXPA, SUM
c     ..
c     .. External Subroutines ..

      EXTERNAL  ZEROIT
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC EXP
c     ..


      CALL ZEROIT( CBAND, MI9M2*NNLYRI )

      NCD    = 3*NN - 1
      LDA    = 3*NCD + 1
      NSHIFT = LDA - 2*NSTR + 1
      NCOL   = 0
c                         ** Use continuity conditions of Eq. STWJ(17)
c                         ** to form coefficient matrix in STWJ(20);
c                         ** employ scaling transformation STWJ(22)
      DO 60 LC = 1, NCUT

         DO 10 IQ = 1, NN
            WK( IQ ) = EXP( KK( IQ,LC )*DTAUCP( LC ) )
   10    CONTINUE

         JCOL  = 0

         DO 30 IQ = 1, NN

            NCOL  = NCOL + 1
            IROW  = NSHIFT - JCOL

            DO 20 JQ = 1, NSTR
               CBAND( IROW + NSTR, NCOL ) =   GC( JQ, IQ, LC )
               CBAND( IROW, NCOL )        = - GC( JQ, IQ, LC )*WK( IQ )
               IROW  = IROW + 1
   20       CONTINUE

            JCOL  = JCOL + 1

   30    CONTINUE


         DO 50 IQ = NN + 1, NSTR

            NCOL  = NCOL + 1
            IROW  = NSHIFT - JCOL

            DO 40 JQ = 1, NSTR
               CBAND( IROW + NSTR, NCOL ) =   GC( JQ, IQ, LC )*
     &                                          WK( NSTR + 1 - IQ )
               CBAND( IROW, NCOL )        = - GC( JQ, IQ, LC )
               IROW  = IROW + 1
   40       CONTINUE

            JCOL  = JCOL + 1

   50    CONTINUE

   60 CONTINUE
c                  ** Use top boundary condition of STWJ(20a) for
c                  ** first layer
      JCOL  = 0

      DO 80 IQ = 1, NN

         EXPA  = EXP( KK( IQ,1 )*TAUCPR( 1 ) )
         IROW  = NSHIFT - JCOL + NN

         DO 70 JQ = NN, 1, -1
            CBAND( IROW, JCOL + 1 ) = GC( JQ, IQ, 1 )*EXPA
            IROW  = IROW + 1
   70    CONTINUE

         JCOL  = JCOL + 1

   80 CONTINUE


      DO 100 IQ = NN + 1, NSTR

         IROW  = NSHIFT - JCOL + NN

         DO 90 JQ = NN, 1, -1
            CBAND( IROW, JCOL + 1 ) = GC( JQ, IQ, 1 )
            IROW  = IROW + 1
   90    CONTINUE

         JCOL  = JCOL + 1

  100 CONTINUE
c                           ** Use bottom boundary condition of
c                           ** STWJ(20c) for last layer

      NNCOL = NCOL - NSTR
      JCOL  = 0

      DO 130 IQ = 1, NN

         NNCOL  = NNCOL + 1
         IROW   = NSHIFT - JCOL + NSTR

         DO 120 JQ = NN + 1, NSTR

            IF( LYRCUT .OR. ( LAMBER .AND. DELM0.EQ.0 ) ) THEN

c                          ** No azimuthal-dependent intensity if Lam-
c                          ** bert surface; no intensity component if
c                          ** truncated bottom layer

               CBAND( IROW, NNCOL ) = GC( JQ, IQ, NCUT )

            ELSE

               SUM  = 0.0

               DO 110 K = 1, NN
                  SUM  = SUM + CWT( K )*CMU( K )*BDR( JQ - NN, K )*
     &                     GC( NN + 1 - K, IQ, NCUT )
  110          CONTINUE

               CBAND( IROW, NNCOL ) = GC( JQ, IQ, NCUT ) -
     &                                ( 1.+ DELM0 )*SUM
            END IF

            IROW  = IROW + 1

  120    CONTINUE

         JCOL  = JCOL + 1

  130 CONTINUE


      DO 160 IQ = NN + 1, NSTR

         NNCOL  = NNCOL + 1
         IROW   = NSHIFT - JCOL + NSTR
         EXPA   = WK( NSTR + 1 - IQ )

         DO 150 JQ = NN + 1, NSTR

            IF( LYRCUT .OR. ( LAMBER .AND. DELM0.EQ.0 ) ) THEN

               CBAND( IROW, NNCOL ) = GC( JQ, IQ, NCUT )*EXPA

            ELSE

               SUM  = 0.0

               DO 140 K = 1, NN
                  SUM  = SUM + CWT( K )*CMU( K )*BDR( JQ - NN, K )*
     &                         GC( NN + 1 - K, IQ, NCUT )
  140          CONTINUE

               CBAND( IROW, NNCOL ) = ( GC( JQ,IQ,NCUT ) -
     &                                ( 1.+ DELM0 )*SUM )*EXPA
            END IF

            IROW  = IROW + 1

  150    CONTINUE

         JCOL  = JCOL + 1

  160 CONTINUE


      RETURN
      END

      SUBROUTINE SLFTST( ACCUR, ALBEDO, BTEMP, DELTAM, DTAUC, FBEAM,
     &                   FISOT, IBCND, LAMBER, NLYR, PLANK, NPHI, NUMU,
     &                   NSTR, NTAU, ONLYFL, PHI, PHI0, PMOM, PRNT,
     &                   SSALB, TEMIS, TEMPER, TTEMP, UMU, USRANG,
     &                   USRTAU, UTAU, UMU0, WVNMHI, WVNMLO, COMPAR,
     &                   FLUP, RFLDIR, RFLDN, UU )

c       If  COMPAR = FALSE, save user input values that would otherwise
c       be destroyed and replace them with input values for self-test.
c       If  COMPAR = TRUE, compare self-test case results with correct
c       answers and restore user input values if test is passed.
c
c       (See file 'DISORT.doc' for variable definitions.)
c
c
c     I N T E R N A L    V A R I A B L E S:
c
c         ACC     Relative accuracy required for passing self-test
c
c         ERRORn  Relative errors in DISORT output variables
c
c         OK      Logical variable for determining failure of self-test
c
c         All variables ending in 'S' are temporary 'S'torage for input
c
c   Called by- DISORT
c   Calls- TSTBAD, ERRMSG
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      LOGICAL   COMPAR, DELTAM, LAMBER, ONLYFL, PLANK, USRANG, USRTAU
      INTEGER   IBCND, NLYR, NPHI, NSTR, NTAU, NUMU
      REAL      ACCUR, ALBEDO, BTEMP, DTAUC, FBEAM, FISOT, FLUP, PHI,
     &          PHI0, RFLDIR, RFLDN, SSALB, TEMIS, TTEMP, UMU, UMU0,
     &          UTAU, UU, WVNMHI, WVNMLO
c     ..
c     .. Array Arguments ..

      LOGICAL   PRNT( * )
      REAL      PMOM( 0:* ), TEMPER( 0:* )
c     ..
c     .. Local Scalars ..

      LOGICAL   DELTAS, LAMBES, OK, ONLYFS, PLANKS, USRANS, USRTAS
      INTEGER   I, IBCNDS, N, NLYRS, NPHIS, NSTRS, NTAUS, NUMUS
      REAL      ACC, ACCURS, ALBEDS, BTEMPS, DTAUCS, ERROR1, ERROR2,
     &          ERROR3, ERROR4, FBEAMS, FISOTS, PHI0S, PHIS, SSALBS,
     &          TEMISS, TTEMPS, UMU0S, UMUS, UTAUS, WVNMHS, WVNMLS
c     ..
c     .. Local Arrays ..

      LOGICAL   PRNTS( 7 )
      REAL      PMOMS( 0:4 ), TEMPES( 0:1 )
c     ..
c     .. External Functions ..

      LOGICAL   TSTBAD
      EXTERNAL  TSTBAD
c     ..
c     .. External Subroutines ..

      EXTERNAL  ERRMSG
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS
c     ..
      SAVE

      DATA      ACC / 1.E-4 /


      IF( .NOT.COMPAR ) THEN
c                                     ** Save user input values
         NLYRS  = NLYR
         DTAUCS = DTAUC
         SSALBS = SSALB

         DO 10 N = 0, 4
            PMOMS( N ) = PMOM( N )
   10    CONTINUE

         NSTRS  = NSTR
         USRANS = USRANG
         NUMUS  = NUMU
         UMUS   = UMU
         USRTAS = USRTAU
         NTAUS  = NTAU
         UTAUS  = UTAU
         NPHIS  = NPHI
         PHIS   = PHI
         IBCNDS = IBCND
         FBEAMS = FBEAM
         UMU0S  = UMU0
         PHI0S  = PHI0
         FISOTS = FISOT
         LAMBES = LAMBER
         ALBEDS = ALBEDO
         DELTAS = DELTAM
         ONLYFS = ONLYFL
         ACCURS = ACCUR
         PLANKS = PLANK
         WVNMLS = WVNMLO
         WVNMHS = WVNMHI
         BTEMPS = BTEMP
         TTEMPS = TTEMP
         TEMISS = TEMIS
         TEMPES( 0 ) = TEMPER( 0 )
         TEMPES( 1 ) = TEMPER( 1 )

         DO 20 I = 1, 7
            PRNTS( I ) = PRNT( I )
   20    CONTINUE

c                                     ** Set input values for self-test
         NSTR   = 4
         NLYR   = 1
         DTAUC  = 1.0
         SSALB  = 0.9
c                          ** Haze L moments
         PMOM( 0 ) = 1.0
         PMOM( 1 ) = 0.8042
         PMOM( 2 ) = 0.646094
         PMOM( 3 ) = 0.481851
         PMOM( 4 ) = 0.359056
         USRANG = .TRUE.
         NUMU   = 1
         UMU    = 0.5
         USRTAU = .TRUE.
         NTAU   = 1
         UTAU   = 0.5
         NPHI   = 1
         PHI    = 90.0
         IBCND  = 0
         FBEAM  = 3.14159265
         UMU0   = 0.866
         PHI0   = 0.0
         FISOT  = 1.0
         LAMBER = .TRUE.
         ALBEDO = 0.7
         DELTAM = .TRUE.
         ONLYFL = .FALSE.
         ACCUR  = 1.E-4
         PLANK  = .TRUE.
         WVNMLO = 0.0
         WVNMHI = 50000.
         BTEMP  = 300.0
         TTEMP  = 100.0
         TEMIS  = 0.8
         TEMPER( 0 ) = 210.0
         TEMPER( 1 ) = 200.0

         DO 30 I = 1, 7
            PRNT( I ) = .FALSE.
   30    CONTINUE


      ELSE
c                                    ** Compare test case results with
c                                    ** correct answers and abort if bad
         OK     = .TRUE.
         ERROR1 = ( UU - 47.86005 ) / 47.86005
         ERROR2 = ( RFLDIR - 1.527286 ) / 1.527286
         ERROR3 = ( RFLDN - 28.37223 ) / 28.37223
         ERROR4 = ( FLUP - 152.5853 ) / 152.5853

         IF( ABS( ERROR1 ).GT.ACC ) OK  = TSTBAD( 'UU', ERROR1 )

         IF( ABS( ERROR2 ).GT.ACC ) OK  = TSTBAD( 'RFLDIR', ERROR2 )

         IF( ABS( ERROR3 ).GT.ACC ) OK  = TSTBAD( 'RFLDN', ERROR3 )

         IF( ABS( ERROR4 ).GT.ACC ) OK  = TSTBAD( 'FLUP', ERROR4 )

         IF( .NOT.OK ) CALL ERRMSG( 'DISORT--self-test failed', .True. )

c                                      ** Restore user input values
         NLYR   = NLYRS
         DTAUC  = DTAUCS
         SSALB  = SSALBS

         DO 40 N = 0, 4
            PMOM( N ) = PMOMS( N )
   40    CONTINUE

         NSTR   = NSTRS
         USRANG = USRANS
         NUMU   = NUMUS
         UMU    = UMUS
         USRTAU = USRTAS
         NTAU   = NTAUS
         UTAU   = UTAUS
         NPHI   = NPHIS
         PHI    = PHIS
         IBCND  = IBCNDS
         FBEAM  = FBEAMS
         UMU0   = UMU0S
         PHI0   = PHI0S
         FISOT  = FISOTS
         LAMBER = LAMBES
         ALBEDO = ALBEDS
         DELTAM = DELTAS
         ONLYFL = ONLYFS
         ACCUR  = ACCURS
         PLANK  = PLANKS
         WVNMLO = WVNMLS
         WVNMHI = WVNMHS
         BTEMP  = BTEMPS
         TTEMP  = TTEMPS
         TEMIS  = TEMISS
         TEMPER( 0 ) = TEMPES( 0 )
         TEMPER( 1 ) = TEMPES( 1 )

         DO 50 I = 1, 7
            PRNT( I ) = PRNTS( I )
   50    CONTINUE

      END IF


      RETURN
      END

      SUBROUTINE SOLEIG( AMB, APB, ARRAY, CMU, CWT, GL, MI, MAZIM,
     &                   MXCMU, NN, NSTR, YLMC, CC, EVECC, EVAL, KK, GC,
     &                   AAD, EVECCD, EVALD, WKD )

c         Solves eigenvalue/vector problem necessary to construct
c         homogeneous part of discrete ordinate solution; STWJ(8b)
c         ** NOTE ** Eigenvalue problem is degenerate when single
c                    scattering albedo = 1;  present way of doing it
c                    seems numerically more stable than alternative
c                    methods that we tried
c
c
c   I N P U T     V A R I A B L E S:
c
c       GL     :  Delta-M scaled Legendre coefficients of phase function
c                 (including factors 2l+1 and single-scatter albedo)
c
c       CMU    :  Computational polar angle cosines
c
c       CWT    :  Weights for quadrature over polar angle cosine
c
c       MAZIM  :  Order of azimuthal component
c
c       NN     :  Half the total number of streams
c
c       YLMC   :  Normalized associated Legendre polynomial
c                 at the quadrature angles CMU
c
c       (remainder are DISORT input variables)
c
c
c   O U T P U T    V A R I A B L E S:
c
c       CC     :  C-sub-ij in Eq. SS(5); needed in SS(15&18)
c
c       EVAL   :  NN eigenvalues of Eq. SS(12) on return from ASYMTX
c                 but then square roots taken
c
c       EVECC  :  NN eigenvectors  (G+) - (G-)  on return
c                 from ASYMTX ( column j corresponds to EVAL(j) )
c                 but then  (G+) + (G-)  is calculated from SS(10),
c                 G+  and  G-  are separated, and  G+  is stacked on
c                 top of  G-  to form NSTR eigenvectors of SS(7)
c
c       GC     :  Permanent storage for all NSTR eigenvectors, but
c                 in an order corresponding to KK
c
c       KK     :  Permanent storage for all NSTR eigenvalues of SS(7),
c                 but re-ordered with negative values first ( square
c                 roots of EVAL taken and negatives added )
c
c
c   I N T E R N A L   V A R I A B L E S:
c
c       AMB,APB :  Matrices (alpha-beta), (alpha+beta) in reduced
c                    eigenvalue problem
c       ARRAY   :  Complete coefficient matrix of reduced eigenvalue
c                    problem: (alfa+beta)*(alfa-beta)
c       GPPLGM  :  (G+) + (G-) (cf. Eqs. SS(10-11))
c       GPMIGM  :  (G+) - (G-) (cf. Eqs. SS(10-11))
c       WKD     :  Scratch array required by ASYMTX
c
c   Called by- DISORT, ALBTRN
c   Calls- ASYMTX, ERRMSG
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      INTEGER   MAZIM, MI, MXCMU, NN, NSTR
c     ..
c     .. Array Arguments ..

      REAL      AMB( MI, MI ), APB( MI, MI ), ARRAY( MI, * ),
     &          CC( MXCMU, MXCMU ), CMU( MXCMU ), CWT( MXCMU ),
     &          EVAL( MI ), EVECC( MXCMU, MXCMU ), GC( MXCMU, MXCMU ),
     &          GL( 0:MXCMU ), KK( MXCMU ), YLMC( 0:MXCMU, MXCMU )
      DOUBLE PRECISION AAD( MI, MI ), EVALD( MI ), EVECCD( MI, MI ),
     &                 WKD( MXCMU )
c     ..
c     .. Local Scalars ..

      INTEGER   IER, IQ, JQ, KQ, L
      REAL      ALPHA, BETA, GPMIGM, GPPLGM, SUM
c     ..
c     .. External Subroutines ..

      EXTERNAL  ASYMTX, ERRMSG
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS, SQRT
c     ..

c                             ** Calculate quantities in Eqs. SS(5-6)
      DO 40 IQ = 1, NN

         DO 20 JQ = 1, NSTR

            SUM  = 0.0
            DO 10 L = MAZIM, NSTR - 1
               SUM  = SUM + GL( L )*YLMC( L, IQ )*YLMC( L, JQ )
   10       CONTINUE

            CC( IQ, JQ ) = 0.5*SUM*CWT( JQ )

   20    CONTINUE

         DO 30 JQ = 1, NN
c                             ** Fill remainder of array using symmetry
c                             ** relations  C(-mui,muj) = C(mui,-muj)
c                             ** and        C(-mui,-muj) = C(mui,muj)

            CC( IQ + NN, JQ ) = CC( IQ, JQ + NN )
            CC( IQ + NN, JQ + NN ) = CC( IQ, JQ )

c                                       ** Get factors of coeff. matrix
c                                       ** of reduced eigenvalue problem

            ALPHA  = CC( IQ, JQ ) / CMU( IQ )
            BETA   = CC( IQ, JQ + NN ) / CMU( IQ )
            AMB( IQ, JQ ) = ALPHA - BETA
            APB( IQ, JQ ) = ALPHA + BETA

   30    CONTINUE

         AMB( IQ, IQ ) = AMB( IQ, IQ ) - 1.0 / CMU( IQ )
         APB( IQ, IQ ) = APB( IQ, IQ ) - 1.0 / CMU( IQ )

   40 CONTINUE
c                      ** Finish calculation of coefficient matrix of
c                      ** reduced eigenvalue problem:  get matrix
c                      ** product (alfa+beta)*(alfa-beta); SS(12)
      DO 70 IQ = 1, NN

         DO 60 JQ = 1, NN

            SUM  = 0.
            DO 50 KQ = 1, NN
               SUM  = SUM + APB( IQ, KQ )*AMB( KQ, JQ )
   50       CONTINUE

            ARRAY( IQ, JQ ) = SUM

   60    CONTINUE

   70 CONTINUE
c                      ** Find (real) eigenvalues and eigenvectors

      CALL ASYMTX( ARRAY, EVECC, EVAL, NN, MI, MXCMU, IER, WKD, AAD,
     &             EVECCD, EVALD )

      IF( IER.GT.0 ) THEN

         WRITE( *, '(//,A,I4,A)' ) ' ASYMTX--eigenvalue no. ',
     &      IER, '  didnt converge.  Lower-numbered eigenvalues wrong.'

         CALL ERRMSG( 'ASYMTX--convergence problems',.True.)

      END IF

CDIR$ IVDEP
      DO 80 IQ = 1, NN
         EVAL( IQ )    = SQRT( ABS( EVAL( IQ ) ) )
         KK( IQ + NN ) = EVAL( IQ )
c                                      ** Add negative eigenvalue
         KK( NN + 1 - IQ ) = -EVAL( IQ )
   80 CONTINUE

c                          ** Find eigenvectors (G+) + (G-) from SS(10)
c                          ** and store temporarily in APB array
      DO 110 JQ = 1, NN

         DO 100 IQ = 1, NN

            SUM  = 0.
            DO 90 KQ = 1, NN
               SUM  = SUM + AMB( IQ, KQ )*EVECC( KQ, JQ )
   90       CONTINUE

            APB( IQ, JQ ) = SUM / EVAL( JQ )

  100    CONTINUE

  110 CONTINUE


      DO 130 JQ = 1, NN
CDIR$ IVDEP
         DO 120 IQ = 1, NN

            GPPLGM = APB( IQ, JQ )
            GPMIGM = EVECC( IQ, JQ )
c                                ** Recover eigenvectors G+,G- from
c                                ** their sum and difference; stack them
c                                ** to get eigenvectors of full system
c                                ** SS(7) (JQ = eigenvector number)

            EVECC( IQ,      JQ ) = 0.5*( GPPLGM + GPMIGM )
            EVECC( IQ + NN, JQ ) = 0.5*( GPPLGM - GPMIGM )

c                                ** Eigenvectors corresponding to
c                                ** negative eigenvalues (corresp. to
c                                ** reversing sign of 'k' in SS(10) )
            GPPLGM = - GPPLGM
            EVECC(IQ,   JQ+NN) = 0.5 * ( GPPLGM + GPMIGM )
            EVECC(IQ+NN,JQ+NN) = 0.5 * ( GPPLGM - GPMIGM )
            GC( IQ+NN,   JQ+NN )   = EVECC( IQ,    JQ )
            GC( NN+1-IQ, JQ+NN )   = EVECC( IQ+NN, JQ )
            GC( IQ+NN,   NN+1-JQ ) = EVECC( IQ,    JQ+NN )
            GC( NN+1-IQ, NN+1-JQ ) = EVECC( IQ+NN, JQ+NN )

  120    CONTINUE

  130 CONTINUE


      RETURN
      END

      SUBROUTINE SOLVE0( B, BDR, BEM, BPLANK, CBAND, CMU, CWT, EXPBEA,
     &                   FBEAM, FISOT, IPVT, LAMBER, LL, LYRCUT, MAZIM,
     &                   MI, MI9M2, MXCMU, NCOL, NCUT, NN, NSTR, NNLYRI,
     &                   PI, TPLANK, TAUCPR, UMU0, Z, ZZ, ZPLK0, ZPLK1 )

c        Construct right-hand side vector B for general boundary
c        conditions STWJ(17) and solve system of equations obtained
c        from the boundary conditions and the continuity-of-
c        intensity-at-layer-interface equations.
c        Thermal emission contributes only in azimuthal independence.
c
c
c    I N P U T      V A R I A B L E S:
c
c       BDR      :  Surface bidirectional reflectivity
c
c       BEM      :  Surface bidirectional emissivity
c
c       BPLANK   :  Bottom boundary thermal emission
c
c       CBAND    :  Left-hand side matrix of linear system Eq. SC(5),
c                   scaled by Eq. SC(12); in banded form required
c                   by LINPACK solution routines
c
c       CMU,CWT     Abscissae, weights for Gauss quadrature 
c                   over angle cosine
c
c       EXPBEA   :  Transmission of incident beam, EXP(-TAUCPR/UMU0)
c
c       LYRCUT   :  Logical flag for truncation of computational layers
c
c       MAZIM    :  Order of azimuthal component
c
c       NCOL     :  Number of columns in CBAND
c
c       NN       :  Order of double-Gauss quadrature (NSTR/2)
c
c       NCUT     :  Total number of computational layers considered
c
c       TPLANK   :  Top boundary thermal emission
c
c       TAUCPR   :  Cumulative optical depth (delta-M-scaled)
c
c       ZZ       :  Beam source vectors in Eq. SS(19)
c
c       ZPLK0    :  Thermal source vectors Z0, by solving Eq. SS(16)
c
c       ZPLK1    :  Thermal source vectors Z1, by solving Eq. SS(16)
c
c       (remainder are DISORT input variables)
c
c
c    O U T P U T     V A R I A B L E S:
c
c       B        :  Right-hand side vector of Eq. SC(5) going into
c                   SGBSL; returns as solution vector of Eq. SC(12),
c                   constants of integration without exponential term
c
c      LL        :  Permanent storage for B, but re-ordered
c
c
c   I N T E R N A L    V A R I A B L E S:
c
c       IPVT     :  Integer vector of pivot indices
c       IT       :  Pointer for position in  B
c       NCD      :  Number of diagonals below or above main diagonal
c       RCOND    :  Indicator of singularity for CBAND
c       Z        :  Scratch array required by SGBCO
c
c   Called by- DISORT
c   Calls- ZEROIT, SGBCO, ERRMSG, SGBSL
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      LOGICAL   LAMBER, LYRCUT
      INTEGER   MAZIM, MI, MI9M2, MXCMU, NCOL, NCUT, NN, NNLYRI, NSTR
      REAL      BPLANK, FBEAM, FISOT, PI, TPLANK, UMU0
c     ..
c     .. Array Arguments ..

      INTEGER   IPVT( * )
      REAL      B( NNLYRI ), BDR( MI, 0:MI ), BEM( MI ),
     &          CBAND( MI9M2, NNLYRI ), CMU( MXCMU ), CWT( MXCMU ),
     &          EXPBEA( 0:* ), LL( MXCMU, * ), TAUCPR( 0:* ),
     &          Z( NNLYRI ), ZPLK0( MXCMU, * ), ZPLK1( MXCMU, * ),
     &          ZZ( MXCMU, * )
c     ..
c     .. Local Scalars ..

      INTEGER   IPNT, IQ, IT, JQ, LC, NCD
      REAL      RCOND, SUM
c     ..
c     .. External Subroutines ..

      EXTERNAL  ERRMSG, SGBCO, SGBSL, ZEROIT
c     ..


      CALL ZEROIT( B, NNLYRI )
c                              ** Construct B,  STWJ(20a,c) for
c                              ** parallel beam + bottom reflection +
c                              ** thermal emission at top and/or bottom

      IF( MAZIM.GT.0 .AND. FBEAM.GT.0.0 ) THEN

c                                         ** Azimuth-dependent case
c                                         ** (never called if FBEAM = 0)
         IF( LYRCUT .OR. LAMBER ) THEN

c               ** No azimuthal-dependent intensity for Lambert surface;
c               ** no intensity component for truncated bottom layer

            DO 10 IQ = 1, NN
c                                                  ** Top boundary
               B( IQ ) = - ZZ( NN + 1 - IQ, 1 )
c                                                  ** Bottom boundary

               B( NCOL - NN + IQ ) = -ZZ( IQ + NN, NCUT )*EXPBEA( NCUT )

   10       CONTINUE


         ELSE

            DO 30 IQ = 1, NN

               B( IQ ) = - ZZ( NN + 1 - IQ, 1 )

               SUM  = 0.
               DO 20 JQ = 1, NN
                  SUM  = SUM + CWT( JQ )*CMU( JQ )*BDR( IQ, JQ )*
     &                         ZZ( NN + 1 - JQ, NCUT )*EXPBEA( NCUT )
   20          CONTINUE

               B( NCOL - NN + IQ ) = SUM
               IF( FBEAM.GT.0.0 ) B( NCOL - NN + IQ ) = SUM +
     &             ( BDR( IQ,0 )*UMU0*FBEAM / PI - ZZ( IQ + NN,NCUT ) )*
     &             EXPBEA( NCUT )

   30       CONTINUE

         END IF
c                             ** Continuity condition for layer
c                             ** interfaces of Eq. STWJ(20b)
         IT   = NN

         DO 50 LC = 1, NCUT - 1

            DO 40 IQ = 1, NSTR
               IT   = IT + 1
               B( IT ) = ( ZZ( IQ, LC+1 ) - ZZ( IQ, LC ) )*EXPBEA( LC )
   40       CONTINUE

   50    CONTINUE


      ELSE
c                                   ** Azimuth-independent case

         IF( FBEAM.EQ.0.0 ) THEN

            DO 60 IQ = 1, NN
c                                      ** Top boundary

               B( IQ ) = -ZPLK0( NN + 1 - IQ, 1 ) + FISOT + TPLANK

   60       CONTINUE


            IF( LYRCUT ) THEN
c                               ** No intensity component for truncated
c                               ** bottom layer
               DO 70 IQ = 1, NN
c                                      ** Bottom boundary

                  B( NCOL - NN + IQ ) = - ZPLK0( IQ + NN, NCUT ) -
     &                                    ZPLK1( IQ + NN, NCUT )*
     &                                    TAUCPR( NCUT )
   70          CONTINUE


            ELSE

               DO 90 IQ = 1, NN

                  SUM  = 0.
                  DO 80 JQ = 1, NN
                     SUM  = SUM + CWT( JQ )*CMU( JQ )*BDR( IQ, JQ )*
     &                            ( ZPLK0( NN + 1 - JQ,NCUT ) +
     &                        ZPLK1( NN + 1 - JQ,NCUT )*TAUCPR( NCUT ) )
   80             CONTINUE

                  B( NCOL - NN + IQ ) = 2.*SUM + BEM( IQ )*BPLANK -
     &                                  ZPLK0( IQ + NN, NCUT ) -
     &                                  ZPLK1( IQ + NN, NCUT )*
     &                                  TAUCPR( NCUT )
   90          CONTINUE

            END IF
c                             ** Continuity condition for layer
c                             ** interfaces, STWJ(20b)
            IT   = NN
            DO 110 LC = 1, NCUT - 1

               DO 100 IQ = 1, NSTR
                  IT   = IT + 1
                  B( IT ) =   ZPLK0( IQ, LC + 1 ) - ZPLK0( IQ, LC ) +
     &                      ( ZPLK1( IQ, LC + 1 ) - ZPLK1( IQ, LC ) )*
     &                      TAUCPR( LC )
  100          CONTINUE

  110       CONTINUE


         ELSE

            DO 120 IQ = 1, NN
               B( IQ ) = - ZZ( NN + 1 - IQ, 1 ) -
     &                   ZPLK0( NN + 1 - IQ, 1 ) + FISOT + TPLANK
  120       CONTINUE

            IF( LYRCUT ) THEN

               DO 130 IQ = 1, NN
                  B(NCOL-NN+IQ) = - ZZ(IQ+NN, NCUT) * EXPBEA(NCUT)
     &                            - ZPLK0(IQ+NN, NCUT)
     &                            - ZPLK1(IQ+NN, NCUT) * TAUCPR(NCUT)
  130          CONTINUE


            ELSE

               DO 150 IQ = 1, NN

                  SUM  = 0.
                  DO 140 JQ = 1, NN
                     SUM = SUM + CWT(JQ) * CMU(JQ) * BDR(IQ,JQ)
     &                          * ( ZZ(NN+1-JQ, NCUT) * EXPBEA(NCUT)
     &                            + ZPLK0(NN+1-JQ, NCUT)
     &                            + ZPLK1(NN+1-JQ, NCUT) * TAUCPR(NCUT))
  140             CONTINUE

                  B(NCOL-NN+IQ) = 2.*SUM + ( BDR(IQ,0) * UMU0*FBEAM/PI
     &                                - ZZ(IQ+NN, NCUT) ) * EXPBEA(NCUT)
     &                            + BEM(IQ) * BPLANK
     &                            - ZPLK0(IQ+NN, NCUT)
     &                            - ZPLK1(IQ+NN, NCUT) * TAUCPR(NCUT)
  150          CONTINUE

            END IF


            IT   = NN

            DO 170 LC = 1, NCUT - 1

               DO 160 IQ = 1, NSTR

                  IT   = IT + 1
                  B(IT) = ( ZZ(IQ,LC+1) - ZZ(IQ,LC) ) * EXPBEA(LC)
     &                    + ZPLK0(IQ,LC+1) - ZPLK0(IQ,LC) +
     &                    ( ZPLK1(IQ,LC+1) - ZPLK1(IQ,LC) ) * TAUCPR(LC)
  160          CONTINUE

  170       CONTINUE

         END IF

      END IF
c                     ** Find L-U (lower/upper triangular) decomposition
c                     ** of band matrix CBAND and test if it is nearly
c                     ** singular (note: CBAND is destroyed)
c                     ** (CBAND is in LINPACK packed format)
      RCOND  = 0.0
      NCD    = 3*NN - 1

      CALL SGBCO( CBAND, MI9M2, NCOL, NCD, NCD, IPVT, RCOND, Z )

      IF( 1.0 + RCOND.EQ.1.0 )
     &    CALL ERRMSG('SOLVE0--SGBCO says matrix near singular',.FALSE.)

c                   ** Solve linear system with coeff matrix CBAND
c                   ** and R.H. side(s) B after CBAND has been L-U
c                   ** decomposed.  Solution is returned in B.

      CALL SGBSL( CBAND, MI9M2, NCOL, NCD, NCD, IPVT, B, 0 )

c                   ** Zero CBAND (it may contain 'foreign'
c                   ** elements upon returning from LINPACK);
c                   ** necessary to prevent errors

      CALL ZEROIT( CBAND, MI9M2*NNLYRI )

      DO 190 LC = 1, NCUT

         IPNT  = LC*NSTR - NN

         DO 180 IQ = 1, NN
            LL( NN + 1 - IQ, LC ) = B( IPNT + 1 - IQ )
            LL( IQ + NN,     LC ) = B( IQ + IPNT )
  180    CONTINUE

  190 CONTINUE

      RETURN
      END

      SUBROUTINE SOLVE1( B, CBAND, FISOT, IHOM, IPVT, LL, MI9M2, MXCMU,
     &                   NCOL, NCUT, NN, NNLYRI, NSTR )

c        Construct right-hand side vector B for isotropic incidence
c        (only) on either top or bottom boundary and solve system
c        of equations obtained from the boundary conditions and the
c        continuity-of-intensity-at-layer-interface equations
c
c
c     I N P U T      V A R I A B L E S:
c
c       CBAND    :  Left-hand side matrix of banded linear system 
c                   Eq. SC(5), scaled by Eq. SC(12); assumed already
c                   in LU-decomposed form, ready for LINPACK solver
c
c       IHOM     :  Direction of illumination flag (1, top; 2, bottom)
c
c       NCOL     :  Number of columns in CBAND
c
c       NN       :  Order of double-Gauss quadrature (NSTR/2)
c
c       (remainder are DISORT input variables)
c
c
c    O U T P U T     V A R I A B L E S:
c
c       B        :  Right-hand side vector of Eq. SC(5) going into
c                   SGBSL; returns as solution vector of Eq.
c                   SC(12), constants of integration without
c                   exponential term
c
c       LL      :   permanent storage for B, but re-ordered
c
c
c    I N T E R N A L    V A R I A B L E S:
c
c       IPVT     :  INTEGER vector of pivot indices
c       NCD      :  Number of diagonals below or above main diagonal
c
c   Called by- ALBTRN
c   Calls- ZEROIT, ERRMSG, SGBSL
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      INTEGER   IHOM, MI9M2, MXCMU, NCOL, NCUT, NN, NNLYRI, NSTR
      REAL      FISOT
c     ..
c     .. Array Arguments ..

      INTEGER   IPVT( NNLYRI )
      REAL      B( NNLYRI ), CBAND( MI9M2, NNLYRI ), LL( MXCMU, * )
c     ..
c     .. Local Scalars ..

      INTEGER   I, IPNT, IQ, LC, NCD
c     ..
c     .. External Subroutines ..

      EXTERNAL  SGBSL, ZEROIT
c     ..


      CALL ZEROIT( B, NNLYRI )

      IF( IHOM.EQ.1 ) THEN
c                             ** Because there are no beam or emission
c                             ** sources, remainder of B array is zero
         DO 10 I = 1, NN
            B( I )             = FISOT
            B( NCOL - NN + I ) = 0.0
   10    CONTINUE

      ELSE IF( IHOM.EQ.2 ) THEN

         DO 20 I = 1, NN
            B( I )             = 0.0
            B( NCOL - NN + I ) = FISOT
   20    CONTINUE

      END IF


      NCD  = 3*NN - 1
      CALL SGBSL( CBAND, MI9M2, NCOL, NCD, NCD, IPVT, B, 0 )

      DO 40 LC = 1, NCUT

         IPNT  = LC*NSTR - NN

         DO 30 IQ = 1, NN
            LL( NN + 1 - IQ, LC ) = B( IPNT + 1 - IQ )
            LL( IQ + NN,     LC ) = B( IQ + IPNT )
   30    CONTINUE

   40 CONTINUE

      RETURN
      END

      SUBROUTINE SPALTR( CMU, CWT, GC, KK, LL, MXCMU, NLYR, NN, NSTR,
     &                   TAUCPR, SFLUP, SFLDN )

c       Calculates spherical albedo and transmissivity for the entire
c       medium from the m=0 intensity components
c       (this is a very specialized version of FLUXES)
c
c
c    I N P U T    V A R I A B L E S:
c
c       CMU,CWT    Abscissae, weights for Gauss quadrature 
c                  over angle cosine
c
c       KK      :  Eigenvalues of coeff. matrix in eq. SS(7)
c
c       GC      :  Eigenvectors at polar quadrature angles, SC(1)
c
c       LL      :  Constants of integration in eq. SC(1), obtained
c                  by solving scaled version of Eq. SC(5);
c                  exponential term of Eq. SC(12) not included
c
c       NN      :  Order of double-Gauss quadrature (NSTR/2)
c
c       (remainder are DISORT input variables)
c
c
c    O U T P U T   V A R I A B L E S:
c
c       SFLUP   :  Up-flux at top (equivalent to spherical albedo due to
c                  reciprocity).  For illumination from below it gives
c                  spherical transmissivity
c
c       SFLDN   :  Down-flux at bottom (for single layer, equivalent to
c                  spherical transmissivity due to reciprocity)
c
c
c    I N T E R N A L   V A R I A B L E S:
c
c       ZINT    :  Intensity of m=0 case, in Eq. SC(1)
c
c   Called by- ALBTRN
c +--------------------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   MXCMU, NLYR, NN, NSTR
      REAL      SFLDN, SFLUP
c     ..
c     .. Array Arguments ..

      REAL      CMU( MXCMU ), CWT( MXCMU ), GC( MXCMU, MXCMU, * ),
     &          KK( MXCMU, * ), LL( MXCMU, * ), TAUCPR( 0:* )
c     ..
c     .. Local Scalars ..

      INTEGER   IQ, JQ
      REAL      ZINT
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC EXP
c     ..


      SFLUP  = 0.0

      DO 30 IQ = NN + 1, NSTR

         ZINT   = 0.0
         DO 10 JQ = 1, NN
            ZINT  = ZINT + GC( IQ, JQ, 1 )*LL( JQ, 1 )*
     &                     EXP( KK( JQ,1 )*TAUCPR( 1 ) )
   10    CONTINUE

         DO 20 JQ = NN + 1, NSTR
            ZINT  = ZINT + GC( IQ, JQ, 1 )*LL( JQ, 1 )
   20    CONTINUE

         SFLUP  = SFLUP + CWT( IQ - NN )*CMU( IQ - NN )*ZINT

   30 CONTINUE


      SFLDN  = 0.0

      DO 60 IQ = 1, NN

         ZINT   = 0.0
         DO 40 JQ = 1, NN
            ZINT  = ZINT + GC( IQ, JQ, NLYR )*LL( JQ, NLYR )
   40    CONTINUE

         DO 50 JQ = NN + 1, NSTR
            ZINT  = ZINT + GC( IQ, JQ, NLYR )*LL( JQ, NLYR )*
     &                     EXP( - KK( JQ,NLYR ) *
     &                     ( TAUCPR( NLYR ) - TAUCPR( NLYR-1 ) ) )
   50    CONTINUE

         SFLDN  = SFLDN + CWT( NN + 1 - IQ )*CMU( NN + 1 - IQ )*ZINT

   60 CONTINUE

      SFLUP  = 2.0*SFLUP
      SFLDN  = 2.0*SFLDN


      RETURN
      END

      SUBROUTINE SURFAC( ALBEDO, DELM0, FBEAM, HLPR, LAMBER, MI, MAZIM,
     &                   MXCMU, MXUMU, NN, NUMU, NSTR, ONLYFL, UMU,
     &                   USRANG, YLM0, YLMC, YLMU, BDR, EMU, BEM, RMU,
     &                   SQT )

c       Specifies user's surface bidirectional properties, STWJ(21)
c
c
c   I N P U T     V A R I A B L E S:
c
c       DELM0  :  Kronecker delta, delta-sub-m0
c
c       HLPR   :  Legendre moments of surface bidirectional reflectivity
c                 (with 2K+1 factor included)
c
c       MAZIM  :  Order of azimuthal component
c
c       NN     :  Order of double-Gauss quadrature (NSTR/2)
c
c       YLM0   :  Normalized associated Legendre polynomial
c                 at the beam angle
c
c       YLMC   :  Normalized associated Legendre polynomials
c                 at the quadrature angles
c
c       YLMU   :  Normalized associated Legendre polynomials
c                 at the user angles
c
c       SQT(k) :  Square root of k
c
c       (remainder are DISORT input variables)
c
c
c    O U T P U T     V A R I A B L E S:
c
c       BDR :  Surface bidirectional reflectivity (computational angles)
c
c       RMU :  Surface bidirectional reflectivity (user angles)
c
c       BEM :  Surface directional emissivity (computational angles)
c
c       EMU :  Surface directional emissivity (user angles)
c
c
c    I N T E R N A L     V A R I A B L E S:
c
c       DREF      Directional reflectivity
c
c       NMUG   :  Number of angle cosine quadrature points on (0,1) for
c                 integrating bidirectional reflectivity to get
c                 directional emissivity (it is necessary to use a
c                 quadrature set distinct from the computational
c                 angles, because the computational angles may not be
c                 dense enough--NSTR may be too small--to give an
c                 accurate approximation for the integration).
c
c       GMU    :  The NMUG angle cosine quadrature points on (0,1)
c       GWT    :  The NMUG angle cosine quadrature weights on (0,1)
c
c       YLMG   :  Normalized associated Legendre polynomials
c                 at the NMUG quadrature angles
c
c   Called by- DISORT
c   Calls- QGAUSN, LEPOLY, ZEROIT, ERRMSG
c +-------------------------------------------------------------------+

c     .. Parameters ..

      INTEGER   NMUG, MAXSTR
c                             ** CAUTION:  Do not increase MAXSTR
c                             **           without checking if this
c                             **           would require a larger
c                             **           dimension for SQT
      PARAMETER ( NMUG = 10, MAXSTR = 100 )
c     ..
c     .. Scalar Arguments ..

      LOGICAL   LAMBER, ONLYFL, USRANG
      INTEGER   MAZIM, MI, MXCMU, MXUMU, NN, NSTR, NUMU
      REAL      ALBEDO, DELM0, FBEAM
c     ..
c     .. Array Arguments ..

      REAL      BDR( MI, 0:MI ), BEM( MI ), EMU( MXUMU ),
     &          HLPR( 0:MXCMU ), RMU( MXUMU, 0:MI ), UMU( * ),
     &          YLM0( 0:MXCMU ), YLMC( 0:MXCMU, MXCMU ),
     &          YLMU( 0:MXCMU, MXUMU ), SQT( * )
c     ..
c     .. Local Scalars ..

      LOGICAL   PASS1
      INTEGER   IQ, IU, JG, JQ, K
      REAL      DREF, SGN, SUM
c     ..
c     .. Local Arrays ..

      REAL      GMU( NMUG ), GWT( NMUG ), YLMG( 0:MAXSTR, NMUG )
c     ..
c     .. External Subroutines ..

      EXTERNAL  ERRMSG, LEPOLY, QGAUSN, ZEROIT
c     ..
      SAVE      PASS1, GMU, GWT, YLMG
      DATA      PASS1 / .True. /


      IF( PASS1 ) THEN

         PASS1  = .FALSE.

         CALL QGAUSN( NMUG, GMU, GWT )

         CALL LEPOLY( NMUG, 0, MAXSTR, MAXSTR, GMU, SQT, YLMG )

c                       ** Convert Legendre polys. to negative GMU
         SGN  = - 1.0

         DO 20 K = 0, MAXSTR

            SGN  = - SGN

            DO 10 JG = 1, NMUG
               YLMG( K, JG ) = SGN*YLMG( K, JG )
   10       CONTINUE

   20    CONTINUE

      END IF


      CALL ZEROIT( BDR, MI*( MI + 1 ) )
      CALL ZEROIT( BEM, MI )

      IF( LAMBER .AND. MAZIM.EQ.0 ) THEN

         DO 40 IQ = 1, NN

            BEM( IQ ) = 1.- ALBEDO

            DO 30 JQ = 0, NN
               BDR( IQ, JQ ) = ALBEDO
   30       CONTINUE

   40    CONTINUE


      ELSE IF( .NOT.LAMBER ) THEN
c                                  ** Compute surface bidirectional
c                                  ** properties at computational angles
         DO 80 IQ = 1, NN

            DO 60 JQ = 1, NN

               SUM  = 0.0
               DO 50 K = MAZIM, NSTR - 1
                  SUM  = SUM + HLPR( K )*YLMC( K, IQ )*
     &                         YLMC( K, JQ + NN )
   50          CONTINUE

               BDR( IQ, JQ ) = ( 2.- DELM0 )*SUM

   60       CONTINUE


            IF( FBEAM.GT.0.0 ) THEN

               SUM  = 0.0
               DO 70 K = MAZIM, NSTR - 1
                  SUM  = SUM + HLPR( K )*YLMC( K, IQ )*YLM0( K )
   70          CONTINUE

               BDR( IQ, 0 ) = ( 2.- DELM0 )*SUM

            END IF

   80    CONTINUE


         IF( MAZIM.EQ.0 ) THEN

            IF( NSTR.GT.MAXSTR )
     &          CALL ERRMSG('SURFAC--parameter MAXSTR too small',.True.)

c                              ** Integrate bidirectional reflectivity
c                              ** at reflection polar angles CMU and
c                              ** incident angles GMU to get
c                              ** directional emissivity at
c                              ** computational angles CMU.
            DO 110 IQ = 1, NN

               DREF  = 0.0

               DO 100 JG = 1, NMUG

                  SUM  = 0.0
                  DO 90 K = 0, NSTR - 1
                     SUM  = SUM + HLPR( K )*YLMC( K, IQ )*
     &                            YLMG( K, JG )
   90             CONTINUE

                  DREF  = DREF + 2.*GWT( JG )*GMU( JG )*SUM

  100          CONTINUE

               BEM( IQ ) = 1.- DREF

  110       CONTINUE

         END IF

      END IF
c                                       ** Compute surface bidirectional
c                                       ** properties at user angles

      IF( .NOT.ONLYFL .AND. USRANG ) THEN

         CALL ZEROIT( EMU, MXUMU )
         CALL ZEROIT( RMU, MXUMU*( MI + 1 ) )

         DO 180 IU = 1, NUMU

            IF( UMU( IU ).GT.0.0 ) THEN

               IF( LAMBER .AND. MAZIM.EQ.0 ) THEN

                  DO 120 IQ = 0, NN
                     RMU( IU, IQ ) = ALBEDO
  120             CONTINUE

                  EMU( IU ) = 1.- ALBEDO


               ELSE IF( .NOT.LAMBER ) THEN

                  DO 140 IQ = 1, NN

                     SUM  = 0.0
                     DO 130 K = MAZIM, NSTR - 1
                        SUM  = SUM + HLPR( K )*YLMU( K, IU )*
     &                               YLMC( K, IQ + NN )
  130                CONTINUE

                     RMU( IU, IQ ) = ( 2.- DELM0 )*SUM

  140             CONTINUE


                  IF( FBEAM.GT.0.0 ) THEN

                     SUM  = 0.0
                     DO 150 K = MAZIM, NSTR - 1
                        SUM  = SUM + HLPR( K )*YLMU( K, IU )*YLM0( K )
  150                CONTINUE

                     RMU( IU, 0 ) = ( 2.- DELM0 )*SUM

                  END IF


                  IF( MAZIM.EQ.0 ) THEN

c                               ** Integrate bidirectional reflectivity
c                               ** at reflection angles UMU and
c                               ** incident angles GMU to get
c                               ** directional emissivity at
c                               ** user angles UMU.
                     DREF  = 0.0

                     DO 170 JG = 1, NMUG

                        SUM  = 0.0
                        DO 160 K = 0, NSTR - 1
                           SUM  = SUM + HLPR( K )*YLMU( K, IU )*
     &                                  YLMG( K, JG )
  160                   CONTINUE

                        DREF  = DREF + 2.*GWT( JG )*GMU( JG )*SUM

  170                CONTINUE

                     EMU( IU ) = 1.- DREF

                  END IF

               END IF

            END IF

  180    CONTINUE

      END IF


      RETURN
      END

      SUBROUTINE TERPEV( CWT, EVECC, GL, GU, MAZIM, MXCMU, MXUMU, NN,
     &                   NSTR, NUMU, WK, YLMC, YLMU )

c         Interpolate eigenvectors to user angles; Eq SD(8)

c   Called by- DISORT, ALBTRN
c --------------------------------------------------------------------+

c     .. Scalar Arguments ..

      INTEGER   MAZIM, MXCMU, MXUMU, NN, NSTR, NUMU
c     ..
c     .. Array Arguments ..

      REAL      CWT( MXCMU ), EVECC( MXCMU, MXCMU ), GL( 0:MXCMU ),
     &          GU( MXUMU, MXCMU ), WK( MXCMU ), YLMC( 0:MXCMU, MXCMU ),
     &          YLMU( 0:MXCMU, MXUMU )
c     ..
c     .. Local Scalars ..

      INTEGER   IQ, IU, JQ, L
      REAL      SUM
c     ..


      DO 50 IQ = 1, NSTR

         DO 20 L = MAZIM, NSTR - 1
c                                   ** Inner sum in SD(8) times all
c                                   ** factors in outer sum but PLM(mu)
            SUM  = 0.0
            DO 10 JQ = 1, NSTR
               SUM  = SUM + CWT( JQ )*YLMC( L, JQ )*EVECC( JQ, IQ )
   10       CONTINUE

            WK( L + 1 ) = 0.5*GL( L )*SUM

   20    CONTINUE
c                                    ** Finish outer sum in SD(8)
c                                    ** and store eigenvectors
         DO 40 IU = 1, NUMU

            SUM  = 0.
            DO 30 L = MAZIM, NSTR - 1
               SUM  = SUM + WK( L + 1 )*YLMU( L, IU )
   30       CONTINUE

            IF( IQ.LE.NN ) GU( IU, IQ + NN )       = SUM
            IF( IQ.GT.NN ) GU( IU, NSTR + 1 - IQ ) = SUM

   40    CONTINUE

   50 CONTINUE


      RETURN
      END

      SUBROUTINE TERPSO( CWT, DELM0, FBEAM, GL, MAZIM, MXCMU, PLANK,
     &                   NUMU, NSTR, OPRIM, PI, YLM0, YLMC, YLMU, PSI,
     &                   XR0, XR1, Z0, ZJ, ZBEAM, Z0U, Z1U )

c         Interpolates source functions to user angles
c
c
c    I N P U T      V A R I A B L E S:
c
c       CWT    :  Weights for Gauss quadrature over angle cosine
c
c       DELM0  :  Kronecker delta, delta-sub-m0
c
c       GL     :  Delta-M scaled Legendre coefficients of phase function
c                 (including factors 2L+1 and single-scatter albedo)
c
c       MAZIM  :  Order of azimuthal component
c
c       OPRIM  :  Single scattering albedo
c
c       XR0    :  Expansion of thermal source function
c
c       XR1    :  Expansion of thermal source function Eqs.SS(14-16)
c
c       YLM0   :  Normalized associated Legendre polynomial
c                 at the beam angle
c
c       YLMC   :  Normalized associated Legendre polynomial
c                 at the quadrature angles
c
c       YLMU   :  Normalized associated Legendre polynomial
c                 at the user angles
c
c       Z0     :  Solution vectors Z-sub-zero of Eq. SS(16)
c
c       ZJ     :  Solution vector Z-sub-zero after solving Eq. SS(19)
c
c       (remainder are DISORT input variables)
c
c
c    O U T P U T     V A R I A B L E S:
c
c       ZBEAM  :  Incident-beam source function at user angles
c
c       Z0U,Z1U:  Components of a linear-in-optical-depth-dependent
c                 source (approximating the Planck emission source)
c
c
c   I N T E R N A L    V A R I A B L E S:
c
c       PSI    :  Sum just after square bracket in  Eq. SD(9)
c
c   Called by- DISORT
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      LOGICAL   PLANK
      INTEGER   MAZIM, MXCMU, NSTR, NUMU
      REAL      DELM0, FBEAM, OPRIM, PI, XR0, XR1
c     ..
c     .. Array Arguments ..

      REAL      CWT( MXCMU ), GL( 0:MXCMU ), PSI( MXCMU ),
     &          YLM0( 0:MXCMU ), YLMC( 0:MXCMU, MXCMU ),
     &          YLMU( 0:MXCMU, * ), Z0( MXCMU ), Z0U( * ), Z1U( * ),
     &          ZBEAM( * ), ZJ( MXCMU )
c     ..
c     .. Local Scalars ..

      INTEGER   IQ, IU, JQ
      REAL      FACT, PSUM, SUM
c     ..


      IF( FBEAM.GT.0.0 ) THEN
c                                  ** Beam source terms; Eq. SD(9)

         DO 20 IQ = MAZIM, NSTR - 1

            PSUM   = 0.
            DO 10 JQ = 1, NSTR
               PSUM  = PSUM + CWT( JQ )*YLMC( IQ, JQ )*ZJ( JQ )
   10       CONTINUE

            PSI( IQ + 1 ) = 0.5*GL( IQ )*PSUM

   20    CONTINUE

         FACT   = ( 2. - DELM0 )*FBEAM / ( 4.0*PI )

         DO 40 IU = 1, NUMU

            SUM  = 0.
            DO 30 IQ = MAZIM, NSTR - 1
               SUM  = SUM + YLMU( IQ, IU )*
     &                     ( PSI( IQ + 1 ) + FACT*GL( IQ )*YLM0( IQ ) )
   30       CONTINUE

            ZBEAM( IU ) = SUM

   40    CONTINUE

      END IF


      IF( PLANK .AND. MAZIM.EQ.0 ) THEN

c                                   ** Thermal source terms, STWJ(27c)
         DO 60 IQ = MAZIM, NSTR - 1

            PSUM   = 0.0
            DO 50 JQ = 1, NSTR
               PSUM  = PSUM + CWT( JQ )*YLMC( IQ, JQ )*Z0( JQ )
   50       CONTINUE

            PSI( IQ + 1 ) = 0.5*GL( IQ )*PSUM

   60    CONTINUE

         DO 80 IU = 1, NUMU

            SUM  = 0.0
            DO 70 IQ = MAZIM, NSTR - 1
               SUM  = SUM + YLMU( IQ, IU )*PSI( IQ + 1 )
   70       CONTINUE

            Z0U( IU ) = SUM + ( 1.- OPRIM )*XR0
            Z1U( IU ) = XR1

   80    CONTINUE

      END IF


      RETURN
      END

      SUBROUTINE UPBEAM( ARRAY, CC, CMU, DELM0, FBEAM, GL, IPVT, MAZIM,
     &                   MXCMU, NN, NSTR, PI, UMU0, WK, YLM0, YLMC, ZJ,
     &                   ZZ )

c         Finds the incident-beam particular solution of SS(18)
c
c
c   I N P U T    V A R I A B L E S:
c
c       CC     :  C-sub-ij in Eq. SS(5)
c
c       CMU    :  Abscissae for Gauss quadrature over angle cosine
c
c       DELM0  :  Kronecker delta, delta-sub-m0
c
c       GL     :  Delta-M scaled Legendre coefficients of phase function
c                 (including factors 2L+1 and single-scatter albedo)
c
c       MAZIM  :  Order of azimuthal component
c
c       YLM0   :  Normalized associated Legendre polynomial
c                 at the beam angle
c
c       YLMC   :  Normalized associated Legendre polynomial
c                 at the quadrature angles
c
c       (remainder are DISORT input variables)
c
c
c   O U T P U T    V A R I A B L E S:
c
c       ZJ     :  Right-hand side vector X-sub-zero in SS(19); also the
c                 solution vector Z-sub-zero after solving that system
c
c       ZZ     :  Permanent storage for ZJ, but re-ordered
c
c
c   I N T E R N A L    V A R I A B L E S:
c
c       ARRAY  :  Coefficient matrix in left-hand side of Eq. SS(19)
c       IPVT   :  Integer vector of pivot indices required by LINPACK
c       WK     :  Scratch array required by LINPACK
c
c   Called by- DISORT
c   Calls- SGECO, ERRMSG, SGESL
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      INTEGER   MAZIM, MXCMU, NN, NSTR
      REAL      DELM0, FBEAM, PI, UMU0
c     ..
c     .. Array Arguments ..

      INTEGER   IPVT( * )
      REAL      ARRAY( MXCMU, MXCMU ), CC( MXCMU, MXCMU ), CMU( MXCMU ),
     &          GL( 0:MXCMU ), WK( MXCMU ), YLM0( 0:MXCMU ),
     &          YLMC( 0:MXCMU, * ), ZJ( MXCMU ), ZZ( MXCMU )
c     ..
c     .. Local Scalars ..

      INTEGER   IQ, JOB, JQ, K
      REAL      RCOND, SUM
c     ..
c     .. External Subroutines ..

      EXTERNAL  ERRMSG, SGECO, SGESL
c     ..


      DO 30 IQ = 1, NSTR

         DO 10 JQ = 1, NSTR
            ARRAY( IQ, JQ ) = -CC( IQ, JQ )
   10    CONTINUE

         ARRAY( IQ, IQ ) = 1.+ CMU( IQ ) / UMU0 + ARRAY( IQ, IQ )

         SUM  = 0.
         DO 20 K = MAZIM, NSTR - 1
            SUM  = SUM + GL( K )*YLMC( K, IQ )*YLM0( K )
   20    CONTINUE

         ZJ( IQ ) = ( 2.- DELM0 )*FBEAM*SUM / ( 4.*PI )
   30 CONTINUE

c                  ** Find L-U (lower/upper triangular) decomposition
c                  ** of ARRAY and see if it is nearly singular
c                  ** (NOTE:  ARRAY is altered)
      RCOND  = 0.0

      CALL SGECO( ARRAY, MXCMU, NSTR, IPVT, RCOND, WK )

      IF( 1.0 + RCOND.EQ.1.0 )
     &    CALL ERRMSG('UPBEAM--SGECO says matrix near singular',.FALSE.)

c                ** Solve linear system with coeff matrix ARRAY
c                ** (assumed already L-U decomposed) and R.H. side(s)
c                ** ZJ;  return solution(s) in ZJ
      JOB  = 0

      CALL SGESL( ARRAY, MXCMU, NSTR, IPVT, ZJ, JOB )

CDIR$ IVDEP
      DO 40 IQ = 1, NN
         ZZ( IQ + NN )     = ZJ( IQ )
         ZZ( NN + 1 - IQ ) = ZJ( IQ + NN )
   40 CONTINUE


      RETURN
      END

      SUBROUTINE UPISOT( ARRAY, CC, CMU, IPVT, MXCMU, NN, NSTR, OPRIM,
     &                   WK, XR0, XR1, Z0, Z1, ZPLK0, ZPLK1 )

c       Finds the particular solution of thermal radiation of SS(15)
c
c
c    I N P U T     V A R I A B L E S:
c
c       CC     :  C-sub-ij in Eq. SS(5)
c
c       CMU    :  Abscissae for Gauss quadrature over angle cosine
c
c       OPRIM  :  Delta-M scaled single scattering albedo
c
c       XR0    :  Expansion of thermal source function
c
c       XR1    :  Expansion of thermal source function Eqs. SS(14-16)
c
c       (remainder are DISORT input variables)
c
c
c    O U T P U T    V A R I A B L E S:
c
c       Z0     :  Solution vectors Z-sub-zero of Eq. SS(16)
c
c       Z1     :  Solution vectors Z-sub-one  of Eq. SS(16)
c
c       ZPLK0, :  Permanent storage for Z0,Z1, but re-ordered
c        ZPLK1
c
c
c   I N T E R N A L    V A R I A B L E S:
c
c       ARRAY  :  Coefficient matrix in left-hand side of EQ. SS(16)
c       IPVT   :  Integer vector of pivot indices required by LINPACK
c       WK     :  Scratch array required by LINPACK
c
c   Called by- DISORT
c   Calls- SGECO, ERRMSG, SGESL
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      INTEGER   MXCMU, NN, NSTR
      REAL      OPRIM, XR0, XR1
c     ..
c     .. Array Arguments ..

      INTEGER   IPVT( * )
      REAL      ARRAY( MXCMU, MXCMU ), CC( MXCMU, MXCMU ), CMU( MXCMU ),
     &          WK( MXCMU ), Z0( MXCMU ), Z1( MXCMU ), ZPLK0( MXCMU ),
     &          ZPLK1( MXCMU )
c     ..
c     .. Local Scalars ..

      INTEGER   IQ, JQ
      REAL      RCOND
c     ..
c     .. External Subroutines ..

      EXTERNAL  ERRMSG, SGECO, SGESL
c     ..


      DO 20 IQ = 1, NSTR

         DO 10 JQ = 1, NSTR
            ARRAY( IQ, JQ ) = - CC( IQ, JQ )
   10    CONTINUE

         ARRAY( IQ, IQ ) = 1.0 + ARRAY( IQ, IQ )

         Z1( IQ ) = XR1
         Z0( IQ ) = ( 1.- OPRIM )*XR0 + CMU( IQ )*Z1( IQ )

   20 CONTINUE
c                       ** Solve linear equations: same as in UPBEAM,
c                       ** except ZJ replaced by Z0
      RCOND  = 0.0

      CALL SGECO( ARRAY, MXCMU, NSTR, IPVT, RCOND, WK )

      IF( 1.0 + RCOND.EQ.1.0 )
     &    CALL ERRMSG('UPISOT--SGECO says matrix near singular',.FALSE.)

      CALL SGESL( ARRAY, MXCMU, NSTR, IPVT, Z0, 0 )

CDIR$ IVDEP
      DO 30 IQ = 1, NN
         ZPLK0( IQ + NN ) = Z0( IQ )
         ZPLK1( IQ + NN ) = Z1( IQ )
         ZPLK0( NN + 1 - IQ ) = Z0( IQ + NN )
         ZPLK1( NN + 1 - IQ ) = Z1( IQ + NN )
   30 CONTINUE


      RETURN
      END

      SUBROUTINE USRINT( BPLANK, CMU, CWT, DELM0, DTAUCP, EMU, EXPBEA,
     &                   FBEAM, FISOT, GC, GU, KK, LAMBER, LAYRU, LL,
     &                   LYRCUT, MAZIM, MXCMU, MXULV, MXUMU, NCUT, NLYR,
     &                   NN, NSTR, PLANK, NUMU, NTAU, PI, RMU, TAUCPR,
     &                   TPLANK, UMU, UMU0, UTAUPR, WK, ZBEAM, Z0U, Z1U,
     &                   ZZ, ZPLK0, ZPLK1, UUM )

c       Computes intensity components at user output angles
c       for azimuthal expansion terms in Eq. SD(2)
c
c
c   I N P U T    V A R I A B L E S:
c
c       BPLANK :  Integrated Planck function for emission from
c                 bottom boundary
c
c       CMU    :  Abscissae for Gauss quadrature over angle cosine
c
c       CWT    :  Weights for Gauss quadrature over angle cosine
c
c       DELM0  :  Kronecker delta, delta-sub-M0
c
c       EMU    :  Surface directional emissivity (user angles)
c
c       EXPBEA :  Transmission of incident beam, EXP(-TAUCPR/UMU0)
c
c       GC     :  Eigenvectors at polar quadrature angles, SC(1)
c
c       GU     :  Eigenvectors interpolated to user polar angles
c                    (i.e., G in Eq. SC(1) )
c
c       KK     :  Eigenvalues of coeff. matrix in Eq. SS(7)
c
c       LAYRU  :  Layer number of user level UTAU
c
c       LL     :  Constants of integration in Eq. SC(1), obtained
c                 by solving scaled version of Eq. SC(5);
c                 exponential term of Eq. SC(12) not included
c
c       LYRCUT :  Logical flag for truncation of computational layer
c
c       MAZIM  :  Order of azimuthal component
c
c       NCUT   :  Total number of computational layers considered
c
c       NN     :  Order of double-Gauss quadrature (NSTR/2)
c
c       RMU    :  Surface bidirectional reflectivity (user angles)
c
c       TAUCPR :  Cumulative optical depth (delta-M-Scaled)
c
c       TPLANK :  Integrated Planck function for emission from
c                 top boundary
c
c       UTAUPR :  Optical depths of user output levels in delta-M
c                 coordinates;  equal to UTAU if no delta-M
c
c       Z0U    :  Z-sub-zero in Eq. SS(16) interpolated to user
c                 angles from an equation derived from SS(16)
c
c       Z1U    :  Z-sub-one in Eq. SS(16) interpolated to user
c                 angles from an equation derived from SS(16)
c
c       ZZ     :  Beam source vectors in Eq. SS(19)
c
c       ZPLK0  :  Thermal source vectors Z0, by solving Eq. SS(16)
c
c       ZPLK1  :  Thermal source vectors Z1, by solving Eq. SS(16)
c
c       ZBEAM  :  Incident-beam source vectors
c
c       nobeam :  1 => exclude atmospheric single scattering contribution
c                      to radiance. (direct beam contribution to surface
c                      reflectance is still included).
c                 0 => normal disort treatment of direct beam contribution
c
c       (Remainder are DISORT input variables)
c
c
c    O U T P U T    V A R I A B L E S:
c
c       UUM    :  Azimuthal components of the intensity in EQ. STWJ(5)
c
c
c    I N T E R N A L    V A R I A B L E S:
c
c       BNDDIR :  Direct intensity down at the bottom boundary
c       BNDDFU :  Diffuse intensity down at the bottom boundary
c       BNDINT :  Intensity attenuated at both boundaries, STWJ(25-6)
c       DTAU   :  Optical depth of a computational layer
c       LYREND :  End layer of integration
c       LYRSTR :  Start layer of integration
c       PALINT :  Intensity component from parallel beam
c       PLKINT :  Intensity component from planck source
c       WK     :  Scratch vector for saving EXP evaluations
c
c       All the exponential factors ( EXP1, EXPN,... etc.)
c       come from the substitution of constants of integration in
c       Eq. SC(12) into Eqs. S1(8-9).  They all have negative
c       arguments so there should never be overflow problems.
c
c   Called by- DISORT
c +-------------------------------------------------------------------+

c     .. Scalar Arguments ..

      LOGICAL   LAMBER, LYRCUT, PLANK
      INTEGER   MAZIM, MXCMU, MXULV, MXUMU, NCUT, NLYR, NN, NSTR, NTAU,
     &          NUMU
      REAL      BPLANK, DELM0, FBEAM, FISOT, PI, TPLANK, UMU0
c     ..
c     .. Array Arguments ..

      INTEGER   LAYRU( * )
      REAL      CMU( MXCMU ), CWT( MXCMU ), DTAUCP( * ), EMU( MXUMU ),
     &          EXPBEA( 0:* ), GC( MXCMU, MXCMU, * ),
     &          GU( MXUMU, MXCMU, * ), KK( MXCMU, * ), LL( MXCMU, * ),
     &          RMU( MXUMU, 0:* ), TAUCPR( 0:* ), UMU( * ),
     &          UTAUPR( MXULV ), UUM( MXUMU, MXULV ), WK( MXCMU ),
     &          Z0U( MXUMU, * ), Z1U( MXUMU, * ), ZBEAM( MXUMU, * ),
     &          ZPLK0( MXCMU, * ), ZPLK1( MXCMU, * ), ZZ( MXCMU, * )
c     ..
c     .. Local Scalars ..

      LOGICAL   NEGUMU

c pjr-- beamon --   New logical variable indicates when 
c                   to include parallel beam contribution

      INTEGER   IQ, IU, JQ, LC, LU, LYREND, LYRSTR, LYU
      REAL      BNDDFU, BNDDIR, BNDINT, DENOM, DFUINT, DTAU, DTAU1,
     &          DTAU2, EXP0, EXP1, EXP2, EXPN, FACT, PALINT, PLKINT, SGN
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS, EXP
c     ..

c                          ** Incorporate constants of integration into
c                          ** interpolated eigenvectors



      DO 30 LC = 1, NCUT

         DO 20 IQ = 1, NSTR

            DO 10 IU = 1, NUMU
               GU( IU, IQ, LC ) = GU( IU, IQ, LC )*LL( IQ, LC )
   10       CONTINUE

   20    CONTINUE

   30 CONTINUE
c                           ** Loop over levels at which intensities
c                           ** are desired ('user output levels')
      DO 160 LU = 1, NTAU

         IF( fbeam.gt.0.0 ) EXP0 = EXP( - UTAUPR(LU) / UMU0 )
         LYU  = LAYRU( LU )
c                              ** Loop over polar angles at which
c                              ** intensities are desired
         DO 150 IU = 1, NUMU

            IF( LYRCUT .AND. LYU.GT.NCUT ) GO TO  150

            NEGUMU = UMU( IU ).LT.0.0

            IF( NEGUMU ) THEN

               LYRSTR = 1
               LYREND = LYU - 1
               SGN    = -1.0

            ELSE

               LYRSTR = LYU + 1
               LYREND = NCUT
               SGN    = 1.0

            END IF
c                          ** For downward intensity, integrate from top
c                          ** to LYU-1 in Eq. S1(8); for upward,
c                          ** integrate from bottom to LYU+1 in S1(9)
            PALINT = 0.0
            PLKINT = 0.0

            DO 60 LC = LYRSTR, LYREND

               DTAU = DTAUCP( LC )
               EXP1 = EXP( (UTAUPR(LU) - TAUCPR(LC-1)) / UMU(IU) )
               EXP2 = EXP( (UTAUPR(LU) - TAUCPR( LC )) / UMU(IU) )

               IF ( PLANK .AND. MAZIM.EQ.0 )
     &           PLKINT = PLKINT + SGN * ( Z0U(IU,LC) * (EXP1 - EXP2) +
     &                    Z1U(IU,LC) * ( (TAUCPR(LC-1) + UMU(IU))*EXP1 -
     &                                   (TAUCPR(LC) + UMU(IU))*EXP2 ) )

               IF( fbeam.gt.0.0 ) THEN

                  DENOM  = 1.+ UMU( IU ) / UMU0

                  IF( ABS( DENOM ).LT.0.0001 ) THEN
c                                                   ** L'Hospital limit
                     EXPN  = ( DTAU / UMU0 )*EXP0

                  ELSE

                     EXPN  = ( EXP1*EXPBEA( LC-1 ) -
     &                         EXP2*EXPBEA( LC ) )*SGN / DENOM
                  END IF

                  PALINT = PALINT + ZBEAM( IU, LC )*EXPN

               END IF

c                                                   ** KK is negative
               DO 40 IQ = 1, NN

                  WK( IQ ) = EXP( KK( IQ,LC )*DTAU )
                  DENOM  = 1.0 + UMU( IU )*KK( IQ, LC )

                  IF( ABS( DENOM ).LT.0.0001 ) THEN
c                                                   ** L'Hospital limit
                     EXPN  = DTAU / UMU( IU )*EXP2

                  ELSE

                     EXPN  = SGN*( EXP1*WK( IQ ) - EXP2 ) / DENOM

                  END IF

                  PALINT = PALINT + GU( IU, IQ, LC )*EXPN

   40          CONTINUE

c                                                   ** KK is positive
               DO 50 IQ = NN + 1, NSTR

                  DENOM  = 1.0 + UMU( IU )*KK( IQ, LC )

                  IF( ABS( DENOM ).LT.0.0001 ) THEN
c                                                   ** L'Hospital limit
                     EXPN  = - DTAU / UMU( IU )*EXP1

                  ELSE

                     EXPN  = SGN*( EXP1 - EXP2*WK(NSTR+1 - IQ) ) /DENOM

                  END IF

                  PALINT = PALINT + GU( IU, IQ, LC )*EXPN

   50          CONTINUE


   60       CONTINUE
c                           ** Calculate contribution from user
c                           ** output level to next computational level

            DTAU1  = UTAUPR( LU ) - TAUCPR( LYU - 1 )
            DTAU2  = UTAUPR( LU ) - TAUCPR( LYU )

            IF( ABS( DTAU1 ).LT.1.E-6 .AND. NEGUMU ) GO TO  90
            IF( ABS( DTAU2 ).LT.1.E-6 .AND. (.NOT.NEGUMU) ) GO TO  90

            IF( NEGUMU )      EXP1   = EXP( DTAU1 / UMU( IU ) )
            IF( .NOT.NEGUMU ) EXP2   = EXP( DTAU2 / UMU( IU ) )

            IF( fbeam.gt.0.0 ) THEN

               DENOM  = 1.+ UMU( IU ) / UMU0

               IF( ABS( DENOM ).LT.0.0001 ) THEN

                  EXPN  = ( DTAU1 / UMU0 )*EXP0

               ELSE IF( NEGUMU ) THEN

                  EXPN  = ( EXP0 - EXPBEA( LYU - 1 )*EXP1 ) / DENOM

               ELSE

                  EXPN  = ( EXP0 - EXPBEA( LYU )*EXP2 ) / DENOM

               END IF

               PALINT = PALINT + ZBEAM( IU, LYU )*EXPN

            END IF

c                                                   ** KK is negative
            DTAU  = DTAUCP( LYU )

            DO 70 IQ = 1, NN

               DENOM  = 1.+ UMU( IU )*KK( IQ, LYU )

               IF( ABS( DENOM ).LT.0.0001 ) THEN

                  EXPN   = -DTAU2 / UMU( IU )*EXP2

               ELSE IF( NEGUMU ) THEN

                  EXPN   = ( EXP( -KK( IQ,LYU )*DTAU2 ) -
     &                       EXP(  KK( IQ,LYU )*DTAU  )*EXP1 ) / DENOM

               ELSE

                  EXPN   = ( EXP( -KK( IQ,LYU )*DTAU2 ) - EXP2 ) / DENOM

               END IF

               PALINT = PALINT + GU( IU, IQ, LYU )*EXPN

   70       CONTINUE

c                                                   ** KK is positive
            DO 80 IQ = NN + 1, NSTR

               DENOM  = 1.+ UMU( IU )*KK( IQ, LYU )

               IF( ABS( DENOM ).LT.0.0001 ) THEN

                  EXPN  = -DTAU1 / UMU( IU )*EXP1

               ELSE IF( NEGUMU ) THEN

                  EXPN  = ( EXP( -KK( IQ,LYU )*DTAU1 ) - EXP1 ) / DENOM

               ELSE

                  EXPN  = ( EXP( -KK( IQ,LYU )*DTAU1 ) -
     &                      EXP( -KK( IQ,LYU )*DTAU  )*EXP2 ) / DENOM
               END IF

               PALINT = PALINT + GU( IU, IQ, LYU )*EXPN

   80       CONTINUE


            IF( PLANK .AND. MAZIM.EQ.0 ) THEN

               IF( NEGUMU ) THEN

                  EXPN  = EXP1
                  FACT  = TAUCPR( LYU - 1 ) + UMU( IU )

               ELSE

                  EXPN  = EXP2
                  FACT  = TAUCPR( LYU ) + UMU( IU )

               END IF

               PLKINT = PLKINT + Z0U( IU, LYU )*( 1.- EXPN ) +
     &                  Z1U( IU, LYU )*( UTAUPR( LU ) + UMU( IU )
     &                                   - FACT*EXPN )
            END IF

c                            ** Calculate intensity components
c                            ** attenuated at both boundaries.
c                            ** NOTE: no azimuthal intensity
c                            ** component for isotropic surface
   90       CONTINUE
            BNDINT = 0.0

            IF( NEGUMU .AND. MAZIM.EQ.0 ) THEN

               BNDINT = ( FISOT + TPLANK )*
     &                  EXP( UTAUPR( LU ) / UMU( IU ) )


            ELSE IF( .NOT.NEGUMU ) THEN

               IF( LYRCUT .OR. ( LAMBER .AND. MAZIM.GT.0 ) ) GO TO 140

               DO 100 JQ = NN + 1, NSTR
                  WK( JQ ) = EXP( - KK( JQ,NLYR )*DTAUCP( NLYR ) )
  100          CONTINUE

               BNDDFU = 0.0

               DO 130 IQ = NN, 1, -1

                  DFUINT = 0.0
                  DO 110 JQ = 1, NN
                     DFUINT = DFUINT + GC( IQ, JQ, NLYR )*LL( JQ, NLYR )
  110             CONTINUE

                  DO 120 JQ = NN + 1, NSTR
                     DFUINT = DFUINT + GC( IQ, JQ, NLYR )*
     &                                 LL( JQ, NLYR )*WK( JQ )
  120             CONTINUE

                  IF( fbeam.gt.0.0 ) DFUINT = DFUINT +
     &                               ZZ( IQ, NLYR )*EXPBEA( NLYR )

                  DFUINT = DFUINT + DELM0*( ZPLK0( IQ,NLYR ) +
     &                              ZPLK1( IQ,NLYR )*TAUCPR( NLYR ) )
                 BNDDFU = BNDDFU + ( 1.+ DELM0 ) * RMU(IU,NN+1-IQ)
     &                           * CMU(NN+1-IQ) * CWT(NN+1-IQ) * DFUINT
  130          CONTINUE

               BNDDIR = 0.0
               IF( FBEAM.GT.0.0 ) BNDDIR = UMU0*FBEAM / PI*RMU( IU, 0 )*
     &                                     EXPBEA( NLYR )

               BNDINT = ( BNDDFU + BNDDIR + DELM0 * EMU(IU) * BPLANK )
     &                  * EXP( (UTAUPR(LU)-TAUCPR(NLYR)) / UMU(IU) )
            END IF

  140       CONTINUE

            UUM( IU, LU ) = PALINT + PLKINT + BNDINT

  150    CONTINUE

  160 CONTINUE


      RETURN
      END

      SUBROUTINE ZEROAL( ND1, EXPBEA, FLYR, OPRIM, TAUCPR, XR0, XR1,
     &                    ND2, CMU, CWT, PSI, WK, Z0, Z1, ZJ,
     &                    ND3, HLPR, YLM0,
     &                    ND4, ARRAY, CC, EVECC,
     &                    ND5, GL,
     &                    ND6, YLMC,
     &                    ND7, YLMU,
     &                    ND8, KK, LL, ZZ, ZPLK0, ZPLK1,
     &                    ND9, GC,
     &                    ND10, LAYRU, UTAUPR,
     &                    ND11, GU,
     &                    ND12, Z0U, Z1U, ZBEAM,
     &                    ND13, EVAL,
     &                    ND14, AMB, APB,
     &                    ND15, IPVT, Z,
     &                    ND16, RFLDIR, RFLDN, FLUP, UAVG, DFDT,
     &                    ND17, ALBMED, TRNMED,
     &                    ND18, U0U,
     &                    ND19, UU )

c         ZERO ARRAYS; NDn is dimension of all arrays following
c         it in the argument list

c   Called by- DISORT
c --------------------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   ND1, ND10, ND11, ND12, ND13, ND14, ND15, ND16, ND17,
     &          ND18, ND19, ND2, ND3, ND4, ND5, ND6, ND7, ND8, ND9
c     ..
c     .. Array Arguments ..

      INTEGER   IPVT( * ), LAYRU( * )
      REAL      ALBMED( * ), AMB( * ), APB( * ), ARRAY( * ), CC( * ),
     &          CMU( * ), CWT( * ), DFDT( * ), EVAL( * ), EVECC( * ),
     &          EXPBEA( * ), FLUP( * ), FLYR( * ), GC( * ), GL( * ),
     &          GU( * ), HLPR( * ), KK( * ), LL( * ), OPRIM( * ),
     &          PSI( * ), RFLDIR( * ), RFLDN( * ), TAUCPR( * ),
     &          TRNMED( * ), U0U( * ), UAVG( * ), UTAUPR( * ), UU( * ),
     &          WK( * ), XR0( * ), XR1( * ), YLM0( * ), YLMC( * ),
     &          YLMU( * ), Z( * ), Z0( * ), Z0U( * ), Z1( * ), Z1U( * ),
     &          ZBEAM( * ), ZJ( * ), ZPLK0( * ), ZPLK1( * ), ZZ( * )
c     ..
c     .. Local Scalars ..

      INTEGER   N
c     ..


      DO 10 N = 1, ND1
         EXPBEA( N ) = 0.0
         FLYR( N )   = 0.0
         OPRIM( N )  = 0.0
         TAUCPR( N ) = 0.0
         XR0( N )    = 0.0
         XR1( N )    = 0.0
   10 CONTINUE

      DO 20 N = 1, ND2
         CMU( N ) = 0.0
         CWT( N ) = 0.0
         PSI( N ) = 0.0
         WK( N )  = 0.0
         Z0( N )  = 0.0
         Z1( N )  = 0.0
         ZJ( N )  = 0.0
   20 CONTINUE

      DO 30 N = 1, ND3
         HLPR( N ) = 0.0
         YLM0( N ) = 0.0
   30 CONTINUE

      DO 40 N = 1, ND4
         ARRAY( N ) = 0.0
         CC( N )    = 0.0
         EVECC( N ) = 0.0
   40 CONTINUE

      DO 50 N = 1, ND5
         GL( N ) = 0.0
   50 CONTINUE

      DO 60 N = 1, ND6
         YLMC( N ) = 0.0
   60 CONTINUE

      DO 70 N = 1, ND7
         YLMU( N ) = 0.0
   70 CONTINUE

      DO 80 N = 1, ND8
         KK( N )    = 0.0
         LL( N )    = 0.0
         ZZ( N )    = 0.0
         ZPLK0( N ) = 0.0
         ZPLK1( N ) = 0.0
   80 CONTINUE

      DO 90 N = 1, ND9
         GC( N ) = 0.0
   90 CONTINUE

      DO 100 N = 1, ND10
         LAYRU( N )  = 0
         UTAUPR( N ) = 0.0
  100 CONTINUE

      DO 110 N = 1, ND11
         GU( N ) = 0.0
  110 CONTINUE

      DO 120 N = 1, ND12
         Z0U( N )   = 0.0
         Z1U( N )   = 0.0
         ZBEAM( N ) = 0.0
  120 CONTINUE

      DO 130 N = 1, ND13
         EVAL( N ) = 0.0
  130 CONTINUE

      DO 140 N = 1, ND14
         AMB( N ) = 0.0
         APB( N ) = 0.0
  140 CONTINUE

      DO 150 N = 1, ND15
         IPVT( N ) = 0
         Z( N )    = 0.0
  150 CONTINUE

      DO 160 N = 1, ND16
         RFLDIR( N ) = 0.
         RFLDN( N )  = 0.
         FLUP( N )   = 0.
         UAVG( N )   = 0.
         DFDT( N )   = 0.
  160 CONTINUE

      DO 170 N = 1, ND17
         ALBMED( N ) = 0.
         TRNMED( N ) = 0.
  170 CONTINUE

      DO 180 N = 1, ND18
         U0U( N ) = 0.
  180 CONTINUE

      DO 190 N = 1, ND19
         UU( N ) = 0.
  190 CONTINUE


      RETURN
      END

      SUBROUTINE ZEROIT( A, LENGTH )

c         Zeros a real array A having LENGTH elements
c --------------------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   LENGTH
c     ..
c     .. Array Arguments ..

      REAL      A( LENGTH )
c     ..
c     .. Local Scalars ..

      INTEGER   L
c     ..

      DO 10 L = 1, LENGTH
         A( L ) = 0.0
   10 CONTINUE

      RETURN
      END

      REAL FUNCTION DREF( MU, HL, NSTR )

c        Exact flux albedo for given angle of incidence, given
c        a bidirectional reflectivity characterized by its
c        Legendre coefficients ( NOTE** these will only agree
c        with bottom-boundary albedos calculated by DISORT in
c        the limit as number of streams go to infinity, because
c        DISORT evaluates the integral 'CL' only approximately,
c        by quadrature, while this routine calculates it exactly.)
c
c  INPUT :   MU     Cosine of incidence angle
c
c            HL     Legendre coefficients of bidirectional reflectivity
c
c          NSTR     Number of elements of HL to consider
c
c
c  INTERNAL VARIABLES (P-sub-L is the L-th Legendre polynomial) :
c
c       CL      Integral from 0 to 1 of  MU * P-sub-L(MU)
c                   (vanishes for  L = 3, 5, 7, ... )
c       PL      P-sub-L
c       PLM1    P-sub-(L-1)
c       PLM2    P-sub-(L-2)
c
c   Called by- CHEKIN
c   Calls- ERRMSG
c +-------------------------------------------------------------------+

c     .. Parameters ..

      INTEGER   MAXTRM
      PARAMETER ( MAXTRM = 100 )
c     ..
c     .. Scalar Arguments ..

      INTEGER   NSTR
      REAL      MU
c     ..
c     .. Array Arguments ..

      REAL      HL( 0:NSTR )
c     ..
c     .. Local Scalars ..

      LOGICAL   PASS1
      INTEGER   L
      REAL      CL, PL, PLM1, PLM2
c     ..
c     .. Local Arrays ..

      REAL      C( MAXTRM )
c     ..
c     .. External Subroutines ..

      EXTERNAL  ERRMSG
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC MOD
c     ..
      SAVE      PASS1, C
      DATA      PASS1 / .True. /
c     ..


      IF( PASS1 ) THEN

         PASS1  = .FALSE.
         CL     = 0.125
         C( 2 ) = 10.*CL

         DO 10 L = 4, MAXTRM, 2
            CL     = - CL*( L - 3 ) / ( L + 2 )
            C( L ) = 2.*( 2*L + 1 )*CL
   10    CONTINUE

      END IF


      IF( NSTR.LT.2 .OR. ABS(MU).GT.1.0 )
     &    CALL ERRMSG( 'DREF--input argument error(s)',.True. )

      IF( NSTR.GT.MAXTRM )
     &    CALL ERRMSG( 'DREF--parameter MAXTRM too small',.True. )


      DREF  = HL( 0 ) - 2.*HL( 1 )*MU
      PLM2  = 1.0
      PLM1  = - MU

      DO 20 L = 2, NSTR - 1
c                                ** Legendre polynomial recurrence

         PL = ( ( 2*L - 1 )*( -MU )*PLM1 - ( L-1 )*PLM2 ) / L

         IF( MOD( L,2 ).EQ.0 ) DREF   = DREF + C( L )*HL( L )*PL

         PLM2  = PLM1
         PLM1  = PL

   20 CONTINUE

      IF( DREF.LT.0.0 .OR. DREF.GT.1.0 )
     &    CALL ERRMSG( 'DREF--albedo value not in (0,1)',.False. )

      RETURN
      END


      REAL FUNCTION RATIO( A, B )

c        Calculate ratio  A/B  with over- and under-flow protection
c        (thanks to Prof. Jeff Dozier for some suggestions here).
c        Since this routine takes two logs, it is no speed demon,
c        but it is invaluable for comparing results from two runs
c        of a program under development.
c
c        NOTE:  In Fortran90, built-in functions TINY and HUGE
c               can replace the R1MACH calls.
c ---------------------------------------------------------------

c     .. Scalar Arguments ..

      REAL      A, B
c     ..
c     .. Local Scalars ..

      LOGICAL   PASS1
      REAL      ABSA, ABSB, HUGE, POWA, POWB, POWMAX, POWMIN, TINY
c     ..
c     .. External Functions ..

      REAL      R1MACH
      EXTERNAL  R1MACH
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS, LOG10, SIGN
c     ..
      SAVE      PASS1, TINY, HUGE, POWMAX, POWMIN
      DATA      PASS1 / .TRUE. /
c     ..


      IF( PASS1 ) THEN

         TINY   = R1MACH( 1 )
         HUGE   = R1MACH( 2 )
         POWMAX = LOG10( HUGE )
         POWMIN = LOG10( TINY )
         PASS1  = .FALSE.

      END IF


      IF( A.EQ.0.0 ) THEN

         IF( B.EQ.0.0 ) THEN

            RATIO  = 1.0

         ELSE

            RATIO  = 0.0

         END IF


      ELSE IF( B.EQ.0.0 ) THEN

         RATIO  = SIGN( HUGE, A )

      ELSE

         ABSA   = ABS( A )
         ABSB   = ABS( B )
         POWA   = LOG10( ABSA )
         POWB   = LOG10( ABSB )

         IF( ABSA.LT.TINY .AND. ABSB.LT.TINY ) THEN

            RATIO  = 1.0

         ELSE IF( POWA - POWB.GE.POWMAX ) THEN

            RATIO  = HUGE

         ELSE IF( POWA - POWB.LE.POWMIN ) THEN

            RATIO  = TINY

         ELSE

            RATIO  = ABSA / ABSB

         END IF
c                      ** DONT use old trick of determining sign
c                      ** from A*B because A*B may (over/under)flow

         IF( ( A.GT.0.0 .AND. B.LT.0.0 ) .OR.
     &       ( A.LT.0.0 .AND. B.GT.0.0 ) ) RATIO = -RATIO

      END IF

      RETURN
      END

c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c RCS version control information:
c $Header: /home/paul/rt/sbdart/RCS/sbdart.f,v 1.5 2001/02/27 00:28:49 paul Exp $
c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      DOUBLE PRECISION FUNCTION D1MACH(I)

c  Double-precision machine constants (see R1MACH for documentation).

c  By default, returns values appropriate for a computer with IEEE 
c  arithmetic.  This is an abbreviated version of a routine widely
c  used for 20+ years by numerical analysts.  Most of the values in
c  the original version pertain to computers which went to computer
c  heaven years ago and are of little if any interest.
c 
c  If the values herein do not work for any reason, just look in
c  your Fortran manual for the correct values (usually in the part
c  discussing representations of numbers) and insert them. The exact
c  values are not that important; they can be a factor of 2-3 off
c  without causing any harm.

c  Only I = 1,2,4 is actually used by DISORT. 

c  This routine is superseded in Fortran-90 by the intrinsic numeric 
c  inquiry functions HUGE(1.D0), TINY(1.D0), and EPSILON(1.D0).

c  The original version can be found on NetLib (search by name):
c      http://www.netlib.org/
c ====================================================================

      INTEGER   I
      EXTERNAL  ERRMSG

      IF( I.EQ.1 )  THEN
         D1MACH = 2.3D-308
c        D1MACH = TINY(1.D0)
      ELSE IF( I.EQ.2 )  THEN  
         D1MACH = 1.7D+308
c        D1MACH = HUGE(1.D0)
      ELSE IF( I.EQ.4 )  THEN  
         D1MACH = 2.3D-16
c        D1MACH = EPSILON(1.D0)
      ELSE
         CALL ERRMSG( 'D1MACH--argument incorrect', .TRUE.)
      END IF

      RETURN
      END

c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c RCS version control information:
c $Header: /home/paul/rt/sbdart/RCS/sbdart.f,v 1.5 2001/02/27 00:28:49 paul Exp $
c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      REAL FUNCTION R1MACH(I)

c        Single-precision machine constants

c  Assume floating-point numbers are represented in the t-digit,
c  base-b form

c         sign (b**e)*( (x(1)/b) + ... + (x(t)/b**t) )

c  where 0.le.x(i).lt.b  for  i = 1,...,t,
c  0.lt.x(1), and  emin.LE.e.LE.emax.  then

c  R1MACH(1) = b**(emin-1), the smallest positive magnitude
c              (use TINY(R) in Fortran 90, where R is a single
c              precision variable)

c  R1MACH(2) = b**emax*(1 - b**(-t)), the largest magnitude
c              (use HUGE(R) in Fortran 90, where R is a single
c              precision variable))

c  R1MACH(3) = b**(-t), the smallest relative spacing.

c  R1MACH(4) = b**(1-t), the largest relative spacing.  i.e.,
c              smallest positive eps such that  1+eps .ne. 1
c              (use EPSILON(R) in Fortran 90, where R is a single
c              precision variable))

c  R1MACH(5) = LOG10(b)


c  Reference: Fox P.A., Hall A.D., Schryer N.L.,'Framework For A
c               Portable Library', ACM Transactions On Mathematical
c               Software, Vol. 4, No. 2, June 1978, pp. 177-188.


c  By default, returns values appropriate for a computer with IEEE 
c  arithmetic.  This is an abbreviated version of a routine widely
c  used for 20+ years by numerical analysts.  Most of the values in
c  the original version pertain to computers which went to computer
c  heaven years ago and are of little if any interest.
c 
c  If the values herein do not work for any reason, just look in
c  your Fortran manual for the correct values (usually in the part
c  discussing representations of numbers) and insert them. The exact
c  values are not that important; they can be a factor of 2-3 off
c  without causing any harm.

c  Only I = 1,2,4 is actually used by DISORT. 

c  This routine is superseded in Fortran-90 by the intrinsic numeric 
c  inquiry functions HUGE(1.0), TINY(1.0), and EPSILON(1.0).

c  The original version can be found on NetLib (search by name):
c      http://www.netlib.org/
c ====================================================================

      INTEGER I
      EXTERNAL  ERRMSG

      IF( I.EQ.1 )  THEN
         R1MACH = 1.2E-38
c        R1MACH = TINY(1.0)
      ELSE IF( I.EQ.2 )  THEN  
         R1MACH = 3.4E+38
c        R1MACH = HUGE(1.0)
      ELSE IF( I.EQ.4 )  THEN  
         R1MACH = 1.2E-07
c        R1MACH = EPSILON(1.0)
      ELSE
         CALL ERRMSG( 'R1MACH--argument incorrect', .TRUE.)
      END IF

      RETURN
      END

c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c RCS version control information:
c $Header: /home/paul/rt/sbdart/RCS/sbdart.f,v 1.5 2001/02/27 00:28:49 paul Exp $
c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      SUBROUTINE  ErrMsg( MESSAG, FATAL )

c        Print out a warning or error message;  abort if error

      LOGICAL       FATAL, MsgLim
      CHARACTER*(*) MESSAG
      INTEGER       MaxMsg, NumMsg
      SAVE          MaxMsg, NumMsg, MsgLim
      DATA NumMsg / 0 /,  MaxMsg / 100 /,  MsgLim / .FALSE. /


      IF ( FATAL )  THEN
         WRITE ( *, '(/,2A,/)' )  ' ******* ERROR >>>>>>  ', MESSAG
	pause
         STOP
      END IF

      NumMsg = NumMsg + 1
      IF( MsgLim )  RETURN

      IF ( NumMsg.LE.MaxMsg )  THEN
         WRITE ( *, '(/,2A,/)' )  ' ******* WARNING >>>>>>  ', MESSAG
      ELSE
         WRITE ( *,99 )
         MsgLim = .True.
      ENDIF

      RETURN

   99 FORMAT( //,' >>>>>>  TOO MANY WARNING MESSAGES --  ',
     &   'They will no longer be printed  <<<<<<<', // )
      END

      LOGICAL FUNCTION  WrtBad ( VarNam )

c          Write names of erroneous variables and return 'TRUE'

c      INPUT :   VarNam = Name of erroneous variable to be written
c                         ( CHARACTER, any length )

      CHARACTER*(*)  VarNam
      INTEGER        MaxMsg, NumMsg
      SAVE  NumMsg, MaxMsg
      DATA  NumMsg / 0 /,  MaxMsg / 50 /


      WrtBad = .TRUE.
      NumMsg = NumMsg + 1
      WRITE ( *, '(3A)' )  ' ****  Input variable  ', VarNam,
     &                     '  in error  ****'
      IF ( NumMsg.EQ.MaxMsg )
     &   CALL  ErrMsg ( 'Too many input errors.  Aborting...', .TRUE. )

      RETURN
      END

      LOGICAL FUNCTION  WrtDim ( DimNam, MinVal )

c          Write name of too-small symbolic dimension and
c          the value it should be increased to;  return 'TRUE'

c      INPUT :  DimNam = Name of symbolic dimension which is too small
c                        ( CHARACTER, any length )
c               Minval = Value to which that dimension should be
c                        increased (at least)

      CHARACTER*(*)  DimNam
      INTEGER        MinVal


      WRITE ( *, '(/,3A,I7)' )  ' ****  Symbolic dimension  ', DimNam,
     &                     '  should be increased to at least ', MinVal
      WrtDim = .TRUE.

      RETURN
      END

      LOGICAL FUNCTION  TstBad( VarNam, RelErr )

c       Write name (VarNam) of variable failing self-test and its
c       percent error from the correct value;  return  'FALSE'.

      CHARACTER*(*)  VarNam
      REAL           RelErr


      TstBad = .FALSE.
      WRITE( *, '(/,3A,1P,E11.2,A)' )
     &       ' Output variable ', VarNam,' differed by ', 100.*RelErr,
     &       ' per cent from correct value.  Self-test failed.'

      RETURN
      END

c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
c RCS version control information:
c $Header: /home/paul/rt/sbdart/RCS/sbdart.f,v 1.5 2001/02/27 00:28:49 paul Exp $
c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

c Call tree:
c
c    SGBCO
c       SASUM
c       SDOT
c       SAXPY
c       SGBFA
c           ISAMAX
c           SAXPY
c           SSCAL
c       SSCAL
c   SGBSL
c       SDOT
c       SAXPY
c   SGECO
c       SASUM
c       SDOT
c       SAXPY
c       SGEFA
c           ISAMAX
c           SAXPY
c           SSCAL
c       SSCAL
c   SGESL
c       SDOT
c       SAXPY
c   SSWAP
c ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


      SUBROUTINE SGBCO( ABD, LDA, N, ML, MU, IPVT, RCOND, Z )

c         Factors a real band matrix by Gaussian elimination
c         and estimates the condition of the matrix.

c         Revision date:  8/1/82
c         Author:  Moler, C. B. (U. of New Mexico)

c     If  RCOND  is not needed, SGBFA is slightly faster.
c     To solve  A*X = B , follow SBGCO by SGBSL.

c     input:

C        ABD     REAL(LDA, N)
c                contains the matrix in band storage.  The columns
c                of the matrix are stored in the columns of  ABD  and
c                the diagonals of the matrix are stored in rows
c                ML+1 through 2*ML+MU+1 of  ABD .
c                See the comments below for details.

C        LDA     INTEGER
c                the leading dimension of the array  ABD .
c                LDA must be .GE. 2*ML + MU + 1 .

C        N       INTEGER
c                the order of the original matrix.

C        ML      INTEGER
c                number of diagonals below the main diagonal.
c                0 .LE. ML .LT. N .

C        MU      INTEGER
c                number of diagonals above the main diagonal.
c                0 .LE. MU .LT. N .
c                more efficient if  ML .LE. MU .

c     on return

c        ABD     an upper triangular matrix in band storage and
c                the multipliers which were used to obtain it.
c                The factorization can be written  A = L*U  where
c                L  is a product of permutation and unit lower
c                triangular matrices and  U  is upper triangular.

C        IPVT    INTEGER(N)
c                an integer vector of pivot indices.

C        RCOND   REAL
c                an estimate of the reciprocal condition of  A .
c                For the system  A*X = B , relative perturbations
c                in  A  and  B  of size  epsilon  may cause
c                relative perturbations in  X  of size  epsilon/RCOND .
c                If  RCOND  is so small that the logical expression
c                           1.0 + RCOND .EQ. 1.0
c                is true, then  A  may be singular to working
c                precision.  In particular,  RCOND  is zero  if
c                exact singularity is detected or the estimate
c                underflows.

C        Z       REAL(N)
c                a work vector whose contents are usually unimportant.
c                If  A  is close to a singular matrix, then  Z  is
c                an approximate null vector in the sense that
c                norm(a*z) = rcond*norm(a)*norm(z) .

c     Band storage

c           If  A  is a band matrix, the following program segment
c           will set up the input.

c                   ML = (band width below the diagonal)
c                   MU = (band width above the diagonal)
c                   M = ML + MU + 1
c                   DO 20 J = 1, N
c                      I1 = MAX(1, J-MU)
c                      I2 = MIN(N, J+ML)
c                      DO 10 I = I1, I2
c                         K = I - J + M
c                         ABD(K,J) = A(I,J)
c                10    CONTINUE
c                20 CONTINUE

c           This uses rows  ML+1  through  2*ML+MU+1  of  ABD .
c           In addition, the first  ML  rows in  ABD  are used for
c           elements generated during the triangularization.
c           The total number of rows needed in  ABD  is  2*ML+MU+1 .
c           The  ML+MU by ML+MU  upper left triangle and the
c           ML by ML  lower right triangle are not referenced.

c     Example:  if the original matrix is

c           11 12 13  0  0  0
c           21 22 23 24  0  0
c            0 32 33 34 35  0
c            0  0 43 44 45 46
c            0  0  0 54 55 56
c            0  0  0  0 65 66

c      then  N = 6, ML = 1, MU = 2, LDA .GE. 5  and ABD should contain

c            *  *  *  +  +  +  , * = not used
c            *  * 13 24 35 46  , + = used for pivoting
c            * 12 23 34 45 56
c           11 22 33 44 55 66
c           21 32 43 54 65  *

c --------------------------------------------------------------------


c     .. Scalar Arguments ..

      INTEGER   LDA, ML, MU, N
      REAL      RCOND
c     ..
c     .. Array Arguments ..

      INTEGER   IPVT( * )
      REAL      ABD( LDA, * ), Z( * )
c     ..
c     .. Local Scalars ..

      INTEGER   INFO, IS, J, JU, K, KB, KP1, L, LA, LM, LZ, M, MM
      REAL      ANORM, EK, S, SM, T, WK, WKM, YNORM
c     ..
c     .. External Functions ..

      REAL      SASUM, SDOT
      EXTERNAL  SASUM, SDOT
c     ..
c     .. External Subroutines ..

      EXTERNAL  SAXPY, SGBFA, SSCAL
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS, MAX, MIN, SIGN
c     ..


c                       ** compute 1-norm of A
      ANORM  = 0.0E0
      L  = ML + 1
      IS = L + MU

      DO 10 J = 1, N

         ANORM  = MAX( ANORM, SASUM( L,ABD( IS,J ),1 ) )

         IF( IS.GT.ML + 1 ) IS = IS - 1

         IF( J.LE.MU ) L  = L + 1

         IF( J.GE.N - ML ) L  = L - 1

   10 CONTINUE
c                                               ** factor

      CALL SGBFA( ABD, LDA, N, ML, MU, IPVT, INFO )

c     RCOND = 1/(norm(A)*(estimate of norm(inverse(A)))) .
c     estimate = norm(Z)/norm(Y) where  A*Z = Y  and  trans(A)*Y = E.
c     trans(A) is the transpose of A.  The components of E  are
c     chosen to cause maximum local growth in the elements of W  where
c     trans(U)*W = E.  The vectors are frequently rescaled to avoid
c     overflow.

c                     ** solve trans(U)*W = E
      EK = 1.0E0

      DO 20 J = 1, N
         Z( J ) = 0.0E0
   20 CONTINUE


      M  = ML + MU + 1
      JU = 0

      DO 50 K = 1, N

         IF( Z( K ).NE.0.0E0 ) EK = SIGN( EK, -Z( K ) )

         IF( ABS( EK - Z( K ) ).GT.ABS( ABD( M,K ) ) ) THEN

            S  = ABS( ABD( M,K ) ) / ABS( EK - Z( K ) )

            CALL SSCAL( N, S, Z, 1 )

            EK = S*EK

         END IF

         WK   = EK - Z( K )
         WKM  = -EK - Z( K )
         S    = ABS( WK )
         SM   = ABS( WKM )

         IF( ABD( M,K ).NE.0.0E0 ) THEN

            WK   = WK / ABD( M, K )
            WKM  = WKM / ABD( M, K )

         ELSE

            WK   = 1.0E0
            WKM  = 1.0E0

         END IF

         KP1  = K + 1
         JU   = MIN( MAX( JU,MU + IPVT( K ) ), N )
         MM   = M

         IF( KP1.LE.JU ) THEN

            DO 30 J = KP1, JU
               MM     = MM - 1
               SM     = SM + ABS( Z( J ) + WKM*ABD( MM,J ) )
               Z( J ) = Z( J ) + WK*ABD( MM, J )
               S      = S + ABS( Z( J ) )
   30       CONTINUE

            IF( S.LT.SM ) THEN

               T  = WKM - WK
               WK = WKM
               MM = M

               DO 40 J = KP1, JU
                  MM = MM - 1
                  Z( J ) = Z( J ) + T*ABD( MM, J )
   40          CONTINUE

            END IF

         END IF

         Z( K ) = WK

   50 CONTINUE


      S  = 1.0E0 / SASUM( N, Z, 1 )

      CALL SSCAL( N, S, Z, 1 )

c                         ** solve trans(L)*Y = W
      DO 60 KB = 1, N
         K  = N + 1 - KB
         LM = MIN( ML, N - K )

         IF( K.LT.N )
     &       Z( K ) = Z( K ) + SDOT( LM, ABD( M+1, K ), 1, Z( K+1 ), 1 )

         IF( ABS( Z( K ) ).GT.1.0E0 ) THEN

            S  = 1.0E0 / ABS( Z( K ) )

            CALL SSCAL( N, S, Z, 1 )

         END IF

         L      = IPVT( K )
         T      = Z( L )
         Z( L ) = Z( K )
         Z( K ) = T

   60 CONTINUE


      S  = 1.0E0 / SASUM( N, Z, 1 )

      CALL SSCAL( N, S, Z, 1 )

      YNORM  = 1.0E0
c                         ** solve L*V = Y
      DO 70 K = 1, N

         L      = IPVT( K )
         T      = Z( L )
         Z( L ) = Z( K )
         Z( K ) = T
         LM     = MIN( ML, N - K )

         IF( K.LT.N )
     &       CALL SAXPY( LM, T, ABD( M+1, K ), 1, Z( K+1 ), 1 )

         IF( ABS( Z(K) ).GT.1.0E0 ) THEN

            S  = 1.0E0 / ABS( Z(K) )

            CALL SSCAL( N, S, Z, 1 )

            YNORM  = S*YNORM

         END IF

   70 CONTINUE


      S  = 1.0E0 / SASUM( N, Z, 1 )

      CALL SSCAL( N, S, Z, 1 )

      YNORM  = S*YNORM

c                           ** solve  U*Z = W
      DO 80 KB = 1, N

         K  = N + 1 - KB

         IF( ABS( Z( K ) ).GT.ABS( ABD( M,K ) ) ) THEN

            S  = ABS( ABD( M,K ) ) / ABS( Z( K ) )

            CALL SSCAL( N, S, Z, 1 )

            YNORM  = S*YNORM

         END IF

         IF( ABD( M,K ).NE.0.0E0 ) Z( K ) = Z( K ) / ABD( M, K )
         IF( ABD( M,K ).EQ.0.0E0 ) Z( K ) = 1.0E0

         LM = MIN( K, M ) - 1
         LA = M - LM
         LZ = K - LM
         T  = -Z( K )

         CALL SAXPY( LM, T, ABD( LA,K ), 1, Z( LZ ), 1 )

   80 CONTINUE
c                              ** make znorm = 1.0

      S  = 1.0E0 / SASUM( N, Z, 1 )

      CALL SSCAL( N, S, Z, 1 )

      YNORM  = S*YNORM
      IF( ANORM.NE.0.0E0 ) RCOND  = YNORM / ANORM
      IF( ANORM.EQ.0.0E0 ) RCOND  = 0.0E0

      END

      SUBROUTINE SGBFA( ABD, LDA, N, ML, MU, IPVT, INFO )

c         Factors a real band matrix by elimination.

c         Revision date:  8/1/82
c         Author:  Moler, C. B. (U. of New Mexico)

c     SGBFA is usually called by SBGCO, but it can be called
c     directly with a saving in time if  RCOND  is not needed.

c     Input:  same as SGBCO

c     On return:

c        ABD,IPVT    same as SGBCO

c        INFO    INTEGER
c                = 0  normal value.
c                = k  if  u(k,k) .eq. 0.0 .  This is not an error
c                     condition for this subroutine, but it does
c                     indicate that SGBSL will divide by zero if
c                     called.  Use  RCOND  in SBGCO for a reliable
c                     indication of singularity.

c     (see SGBCO for description of band storage mode)

c ----------------------------------------------------------------


c     .. Scalar Arguments ..

      INTEGER   INFO, LDA, ML, MU, N
c     ..
c     .. Array Arguments ..

      INTEGER   IPVT( * )
      REAL      ABD( LDA, * )
c     ..
c     .. Local Scalars ..

      INTEGER   I, I0, J, J0, J1, JU, JZ, K, KP1, L, LM, M, MM, NM1
      REAL      T
c     ..
c     .. External Functions ..

      INTEGER   ISAMAX
      EXTERNAL  ISAMAX
c     ..
c     .. External Subroutines ..

      EXTERNAL  SAXPY, SSCAL
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC MAX, MIN
c     ..


      M    = ML + MU + 1
      INFO = 0
c                        ** zero initial fill-in columns
      J0 = MU + 2
      J1 = MIN( N, M ) - 1

      DO 20 JZ = J0, J1

         I0 = M + 1 - JZ

         DO 10 I = I0, ML
            ABD( I, JZ ) = 0.0E0
   10    CONTINUE

   20 CONTINUE

      JZ = J1
      JU = 0
c                       ** Gaussian elimination with partial pivoting
      NM1  = N - 1

      DO 50 K = 1, NM1

         KP1 = K + 1
c                                  ** zero next fill-in column
         JZ = JZ + 1

         IF( JZ.LE.N ) THEN

            DO 30 I = 1, ML
               ABD( I, JZ ) = 0.0E0
   30       CONTINUE

         END IF
c                                  ** find L = pivot index
         LM  = MIN( ML, N - K )
         L   = ISAMAX( LM + 1, ABD( M, K ), 1 ) + M - 1
         IPVT( K ) = L + K - M

         IF( ABD( L,K ).EQ.0.0E0 ) THEN
c                                      ** zero pivot implies this column
c                                      ** already triangularized
            INFO = K

         ELSE
c                                ** interchange if necessary
            IF( L.NE.M ) THEN

               T           = ABD( L, K )
               ABD( L, K ) = ABD( M, K )
               ABD( M, K ) = T
            END IF
c                                      ** compute multipliers
            T  = - 1.0E0 / ABD( M, K )

            CALL SSCAL( LM, T, ABD( M + 1,K ), 1 )

c                               ** row elimination with column indexing

            JU = MIN( MAX( JU,MU + IPVT( K ) ), N )
            MM = M

            DO 40 J = KP1, JU

               L  = L - 1
               MM = MM - 1
               T  = ABD( L, J )

               IF( L.NE.MM ) THEN

                  ABD( L, J ) = ABD( MM, J )
                  ABD( MM, J ) = T

               END IF

               CALL SAXPY( LM, T, ABD( M+1, K ), 1, ABD( MM+1, J ), 1)

   40       CONTINUE

         END IF

   50 CONTINUE


      IPVT( N ) = N
      IF( ABD( M,N ).EQ.0.0E0 ) INFO = N

      END

      SUBROUTINE SGBSL( ABD, LDA, N, ML, MU, IPVT, B, JOB )

c         Solves the real band system
c            A * X = B  or  transpose(A) * X = B
c         using the factors computed by SBGCO or SGBFA.

c         Revision date:  8/1/82
c         Author:  Moler, C. B. (U. of New Mexico)

c     Input:

C        ABD     REAL(LDA, N)
c                the output from SBGCO or SGBFA.

C        LDA     INTEGER
c                the leading dimension of the array  ABD .

C        N       INTEGER
c                the order of the original matrix.

C        ML      INTEGER
c                number of diagonals below the main diagonal.

C        MU      INTEGER
c                number of diagonals above the main diagonal.

C        IPVT    INTEGER(N)
c                the pivot vector from SBGCO or SGBFA.

C        B       REAL(N)
c                the right hand side vector.

C        JOB     INTEGER
c                = 0         to solve  A*X = B ,
c                = nonzero   to solve  transpose(A)*X = B

c     On return

c        B       the solution vector  X

c     Error condition

c        A division by zero will occur if the input factor contains a
c        zero on the diagonal.  Technically, this indicates singularity,
c        but it is often caused by improper arguments or improper
c        setting of LDA .  It will not occur if the subroutines are
c        called correctly and if SBGCO has set RCOND .GT. 0.0
c        or SGBFA has set INFO .EQ. 0 .

c     To compute  inverse(a) * c  where  c  is a matrix
c     with  p  columns
c           call sgbco(abd,lda,n,ml,mu,ipvt,rcond,z)
c           if (rcond is too small) go to ...
c           do 10 j = 1, p
c              call sgbsl(abd,lda,n,ml,mu,ipvt,c(1,j),0)
c        10 continue

c --------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   JOB, LDA, ML, MU, N
c     ..
c     .. Array Arguments ..

      INTEGER   IPVT( * )
      REAL      ABD( LDA, * ), B( * )
c     ..
c     .. Local Scalars ..

      INTEGER   K, KB, L, LA, LB, LM, M, NM1
      REAL      T
c     ..
c     .. External Functions ..

      REAL      SDOT
      EXTERNAL  SDOT
c     ..
c     .. External Subroutines ..

      EXTERNAL  SAXPY
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC MIN
c     ..


      M   = MU + ML + 1
      NM1 = N - 1

      IF( JOB.EQ.0 ) THEN
c                           ** solve  A * X = B

c                               ** first solve L*Y = B
         IF( ML.NE.0 ) THEN

            DO 10 K = 1, NM1

               LM = MIN( ML, N - K )
               L  = IPVT( K )
               T  = B( L )

               IF( L.NE.K ) THEN

                  B( L ) = B( K )
                  B( K ) = T

               END IF

               CALL SAXPY( LM, T, ABD( M + 1,K ), 1, B( K + 1 ), 1 )

   10       CONTINUE

         END IF

c                           ** now solve  U*X = Y
         DO 20 KB = 1, N

            K      = N + 1 - KB
            B( K ) = B( K ) / ABD( M, K )
            LM     = MIN( K, M ) - 1
            LA     = M - LM
            LB     = K - LM
            T      = -B( K )

            CALL SAXPY( LM, T, ABD( LA,K ), 1, B( LB ), 1 )

   20    CONTINUE


      ELSE
c                          ** solve  trans(A) * X = B

c                                  ** first solve  trans(U)*Y = B
         DO 30 K = 1, N

            LM     = MIN( K, M ) - 1
            LA     = M - LM
            LB     = K - LM
            T      = SDOT( LM, ABD( LA,K ), 1, B( LB ), 1 )
            B( K ) = ( B( K ) - T ) / ABD( M, K )

   30    CONTINUE

c                                  ** now solve trans(L)*X = Y
         IF( ML.NE.0 ) THEN

            DO 40 KB = 1, NM1

               K      = N - KB
               LM     = MIN( ML, N - K )
               B( K ) = B( K ) + SDOT( LM, ABD( M+1, K ), 1,
     &                                 B( K+1 ), 1 )
               L      = IPVT( K )

               IF( L.NE.K ) THEN

                  T    = B( L )
                  B( L ) = B( K )
                  B( K ) = T

               END IF

   40       CONTINUE

         END IF

      END IF

      END

      SUBROUTINE SGECO( A, LDA, N, IPVT, RCOND, Z )

c         Factors a real matrix by Gaussian elimination
c         and estimates the condition of the matrix.

c         Revision date:  8/1/82
c         Author:  Moler, C. B. (U. of New Mexico)

c         If  RCOND  is not needed, SGEFA is slightly faster.
c         To solve  A*X = B , follow SGECO by SGESL.

c     On entry

c        A       REAL(LDA, N)
c                the matrix to be factored.

c        LDA     INTEGER
c                the leading dimension of the array  A .

c        N       INTEGER
c                the order of the matrix  A .

c     On return

c        A       an upper triangular matrix and the multipliers
c                which were used to obtain it.
c                The factorization can be written  A = L*U , where
c                L  is a product of permutation and unit lower
c                triangular matrices and  U  is upper triangular.

c        IPVT    INTEGER(N)
c                an integer vector of pivot indices.

c        RCOND   REAL
c                an estimate of the reciprocal condition of  A .
c                For the system  A*X = B , relative perturbations
c                in  A  and  B  of size  epsilon  may cause
c                relative perturbations in  X  of size  epsilon/RCOND .
c                If  RCOND  is so small that the logical expression
c                           1.0 + RCOND .EQ. 1.0
c                is true, then  A  may be singular to working
c                precision.  In particular,  RCOND  is zero  if
c                exact singularity is detected or the estimate
c                underflows.

C        Z       REAL(N)
c                a work vector whose contents are usually unimportant.
c                If  A  is close to a singular matrix, then  Z  is
c                an approximate null vector in the sense that
c                norm(A*Z) = RCOND*norm(A)*norm(Z) .

c ------------------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   LDA, N
      REAL      RCOND
c     ..
c     .. Array Arguments ..

      INTEGER   IPVT( * )
      REAL      A( LDA, * ), Z( * )
c     ..
c     .. Local Scalars ..

      INTEGER   INFO, J, K, KB, KP1, L
      REAL      ANORM, EK, S, SM, T, WK, WKM, YNORM
c     ..
c     .. External Functions ..

      REAL      SASUM, SDOT
      EXTERNAL  SASUM, SDOT
c     ..
c     .. External Subroutines ..

      EXTERNAL  SAXPY, SGEFA, SSCAL
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS, MAX, SIGN
c     ..


c                        ** compute 1-norm of A
      ANORM  = 0.0E0
      DO 10 J = 1, N
         ANORM  = MAX( ANORM, SASUM( N,A( 1,J ),1 ) )
   10 CONTINUE
c                                      ** factor

      CALL SGEFA( A, LDA, N, IPVT, INFO )

c     RCOND = 1/(norm(A)*(estimate of norm(inverse(A)))) .
c     estimate = norm(Z)/norm(Y) where  A*Z = Y  and  trans(A)*Y = E .
c     trans(A) is the transpose of A.  The components of E  are
c     chosen to cause maximum local growth in the elements of W  where
c     trans(U)*W = E.  The vectors are frequently rescaled to avoid
c     overflow.

c                        ** solve trans(U)*W = E
      EK = 1.0E0

      DO 20 J = 1, N
         Z( J ) = 0.0E0
   20 CONTINUE


      DO 50 K = 1, N

         IF( Z( K ).NE.0.0E0 ) EK = SIGN( EK, -Z( K ) )

         IF( ABS( EK - Z( K ) ).GT.ABS( A( K,K ) ) ) THEN

            S  = ABS( A( K,K ) ) / ABS( EK - Z( K ) )

            CALL SSCAL( N, S, Z, 1 )

            EK = S*EK

         END IF

         WK   = EK - Z( K )
         WKM  = -EK - Z( K )
         S    = ABS( WK )
         SM   = ABS( WKM )

         IF( A( K,K ).NE.0.0E0 ) THEN

            WK   = WK / A( K, K )
            WKM  = WKM / A( K, K )

         ELSE

            WK   = 1.0E0
            WKM  = 1.0E0

         END IF

         KP1  = K + 1

         IF( KP1.LE.N ) THEN

            DO 30 J = KP1, N
               SM     = SM + ABS( Z( J ) + WKM*A( K,J ) )
               Z( J ) = Z( J ) + WK*A( K, J )
               S      = S + ABS( Z( J ) )
   30       CONTINUE

            IF( S.LT.SM ) THEN

               T  = WKM - WK
               WK = WKM

               DO 40 J = KP1, N
                  Z( J ) = Z( J ) + T*A( K, J )
   40          CONTINUE

            END IF

         END IF

         Z( K ) = WK

   50 CONTINUE


      S  = 1.0E0 / SASUM( N, Z, 1 )

      CALL SSCAL( N, S, Z, 1 )
c                                ** solve trans(L)*Y = W
      DO 60 KB = 1, N
         K  = N + 1 - KB

         IF( K.LT.N )
     &       Z( K ) = Z( K ) + SDOT( N - K, A( K+1, K ), 1, Z( K+1 ), 1)

         IF( ABS( Z( K ) ).GT.1.0E0 ) THEN

            S  = 1.0E0 / ABS( Z( K ) )

            CALL SSCAL( N, S, Z, 1 )

         END IF

         L      = IPVT( K )
         T      = Z( L )
         Z( L ) = Z( K )
         Z( K ) = T
   60 CONTINUE


      S  = 1.0E0 / SASUM( N, Z, 1 )

      CALL SSCAL( N, S, Z, 1 )
c                                 ** solve L*V = Y
      YNORM  = 1.0E0

      DO 70 K = 1, N
         L      = IPVT( K )
         T      = Z( L )
         Z( L ) = Z( K )
         Z( K ) = T

         IF( K.LT.N ) CALL SAXPY( N - K, T, A( K + 1,K ), 1, Z( K + 1 ),
     &                            1 )

         IF( ABS( Z( K ) ).GT.1.0E0 ) THEN

            S  = 1.0E0 / ABS( Z( K ) )

            CALL SSCAL( N, S, Z, 1 )

            YNORM  = S*YNORM
         END IF

   70 CONTINUE


      S  = 1.0E0 / SASUM( N, Z, 1 )

      CALL SSCAL( N, S, Z, 1 )
c                                  ** solve  U*Z = V
      YNORM  = S*YNORM

      DO 80 KB = 1, N

         K  = N + 1 - KB

         IF( ABS( Z( K ) ).GT.ABS( A( K,K ) ) ) THEN

            S  = ABS( A( K,K ) ) / ABS( Z( K ) )

            CALL SSCAL( N, S, Z, 1 )

            YNORM  = S*YNORM

         END IF

         IF( A( K,K ).NE.0.0E0 ) Z( K ) = Z( K ) / A( K, K )

         IF( A( K,K ).EQ.0.0E0 ) Z( K ) = 1.0E0

         T  = -Z( K )

         CALL SAXPY( K - 1, T, A( 1,K ), 1, Z( 1 ), 1 )

   80 CONTINUE
c                                   ** make znorm = 1.0
      S  = 1.0E0 / SASUM( N, Z, 1 )

      CALL SSCAL( N, S, Z, 1 )

      YNORM  = S*YNORM

      IF( ANORM.NE.0.0E0 ) RCOND = YNORM / ANORM
      IF( ANORM.EQ.0.0E0 ) RCOND = 0.0E0

      END

      SUBROUTINE SGEFA( A, LDA, N, IPVT, INFO )

c         Factors a real matrix by Gaussian elimination.

c         Revision date:  8/1/82
c         Author:  Moler, C. B. (U. of New Mexico)

c     SGEFA is usually called by SGECO, but it can be called
c     directly with a saving in time if  RCOND  is not needed.
c     (time for SGECO) = (1 + 9/N) * (time for SGEFA) .

c     Input:  same as SGECO

c     On return:

c        A,IPVT  same as SGECO

c        INFO    INTEGER
c                = 0  normal value.
c                = k  if  u(k,k) .eq. 0.0 .  This is not an error
c                     condition for this subroutine, but it does
c                     indicate that SGESL or SGEDI will divide by zero
c                     if called.  Use  RCOND  in SGECO for a reliable
c                     indication of singularity.

c ---------------------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   INFO, LDA, N
c     ..
c     .. Array Arguments ..

      INTEGER   IPVT( * )
      REAL      A( LDA, * )
c     ..
c     .. Local Scalars ..

      INTEGER   J, K, KP1, L, NM1
      REAL      T
c     ..
c     .. External Functions ..

      INTEGER   ISAMAX
      EXTERNAL  ISAMAX
c     ..
c     .. External Subroutines ..

      EXTERNAL  SAXPY, SSCAL
c     ..


c                      ** Gaussian elimination with partial pivoting
      INFO = 0
      NM1  = N - 1

      DO 20 K = 1, NM1

         KP1  = K + 1
c                                            ** find L = pivot index

         L  = ISAMAX( N - K + 1, A( K,K ), 1 ) + K - 1
         IPVT( K ) = L

         IF( A( L,K ).EQ.0.0E0 ) THEN
c                                     ** zero pivot implies this column
c                                     ** already triangularized
            INFO = K

         ELSE
c                                     ** interchange if necessary
            IF( L.NE.K ) THEN

               T         = A( L, K )
               A( L, K ) = A( K, K )
               A( K, K ) = T

            END IF
c                                     ** compute multipliers
            T  = -1.0E0 / A( K, K )

            CALL SSCAL( N - K, T, A( K + 1,K ), 1 )

c                              ** row elimination with column indexing
            DO 10 J = KP1, N

               T  = A( L, J )

               IF( L.NE.K ) THEN

                  A( L, J ) = A( K, J )
                  A( K, J ) = T

               END IF

               CALL SAXPY( N-K, T, A( K+1, K ), 1, A( K+1, J ), 1 )

   10       CONTINUE

         END IF

   20 CONTINUE


      IPVT( N ) = N
      IF( A( N,N ) .EQ. 0.0E0 ) INFO = N

      END

      SUBROUTINE SGESL( A, LDA, N, IPVT, B, JOB )

c         Solves the real system
c            A * X = B  or  transpose(A) * X = B
c         using the factors computed by SGECO or SGEFA.

c         Revision date:  8/1/82
c         Author:  Moler, C. B. (U. of New Mexico)

c     On entry

c        A       REAL(LDA, N)
c                the output from SGECO or SGEFA.

c        LDA     INTEGER
c                the leading dimension of the array  A

c        N       INTEGER
c                the order of the matrix  A

c        IPVT    INTEGER(N)
c                the pivot vector from SGECO or SGEFA.

c        B       REAL(N)
c                the right hand side vector.

c        JOB     INTEGER
c                = 0         to solve  A*X = B ,
c                = nonzero   to solve  transpose(A)*X = B

c     On return

c        B       the solution vector  X

c     Error condition

c        A division by zero will occur if the input factor contains a
c        zero on the diagonal.  Technically, this indicates singularity,
c        but it is often caused by improper arguments or improper
c        setting of LDA.  It will not occur if the subroutines are
c        called correctly and if SGECO has set RCOND .GT. 0.0
c        or SGEFA has set INFO .EQ. 0 .

c     To compute  inverse(a) * c  where  c  is a matrix
c     with  p  columns
c           call sgeco(a,lda,n,ipvt,rcond,z)
c           if (rcond is too small) go to ...
c           do 10 j = 1, p
c              call sgesl(a,lda,n,ipvt,c(1,j),0)
c        10 continue

c ---------------------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   JOB, LDA, N
c     ..
c     .. Array Arguments ..

      INTEGER   IPVT( * )
      REAL      A( LDA, * ), B( * )
c     ..
c     .. Local Scalars ..

      INTEGER   K, KB, L, NM1
      REAL      T
c     ..
c     .. External Functions ..

      REAL      SDOT
      EXTERNAL  SDOT
c     ..
c     .. External Subroutines ..

      EXTERNAL  SAXPY
c     ..


      NM1  = N - 1

      IF( JOB.EQ.0 ) THEN
c                                 ** solve  A * X = B

c                                     ** first solve  L*Y = B
         DO 10 K = 1, NM1

            L  = IPVT( K )
            T  = B( L )

            IF( L.NE.K ) THEN

               B( L ) = B( K )
               B( K ) = T

            END IF

            CALL SAXPY( N - K, T, A( K+1, K ), 1, B( K+1 ), 1 )

   10    CONTINUE
c                                    ** now solve  U*X = Y
         DO 20 KB = 1, N

            K      = N + 1 - KB
            B( K ) = B( K ) / A( K, K )
            T      = - B( K )

            CALL SAXPY( K-1, T, A( 1, K ), 1, B(1), 1 )

   20    CONTINUE


      ELSE
c                         ** solve  trans(A) * X = B

c                                    ** first solve  trans(U)*Y = B
         DO 30 K = 1, N

            T      = SDOT( K - 1, A( 1,K ), 1, B( 1 ), 1 )
            B( K ) = ( B( K ) - T ) / A( K, K )

   30    CONTINUE

c                                    ** now solve  trans(l)*x = y
         DO 40 KB = 1, NM1

            K      = N - KB
            B( K ) = B( K ) + SDOT( N - K, A( K+1, K ), 1, B( K+1 ), 1)
            L      = IPVT( K )

            IF( L.NE.K ) THEN

               T      = B( L )
               B( L ) = B( K )
               B( K ) = T

            END IF

   40    CONTINUE

      END IF

      END

      REAL FUNCTION SASUM( N, SX, INCX )

c  INPUT--    N  Number of elements in vector to be summed
c            SX  Sing-prec array, length 1+(N-1)*INCX, containing vector
c          INCX  Spacing of vector elements in SX

c  OUTPUT-- SASUM   Sum from 0 to N-1 of  ABS(SX(1+I*INCX))
c ----------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   INCX, N
c     ..
c     .. Array Arguments ..

      REAL      SX( * )
c     ..
c     .. Local Scalars ..

      INTEGER   I, M
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS, MOD
c     ..

      SASUM  = 0.0

      IF( N.LE.0 ) RETURN

      IF( INCX.NE.1 ) THEN
c                                          ** non-unit increments
         DO 10 I = 1, 1 + ( N - 1 )*INCX, INCX
            SASUM  = SASUM + ABS( SX( I ) )
   10    CONTINUE

      ELSE
c                                          ** unit increments
         M  = MOD( N, 6 )

         IF( M.NE.0 ) THEN
c                             ** clean-up loop so remaining vector
c                             ** length is a multiple of 6.
            DO 20 I = 1, M
               SASUM  = SASUM + ABS( SX( I ) )
   20       CONTINUE

         END IF
c                              ** unroll loop for speed
         DO 30 I = M + 1, N, 6
            SASUM  = SASUM + ABS( SX( I ) ) + ABS( SX( I + 1 ) ) +
     &               ABS( SX( I + 2 ) ) + ABS( SX( I + 3 ) ) +
     &               ABS( SX( I + 4 ) ) + ABS( SX( I + 5 ) )
   30    CONTINUE

      END IF

      END

      SUBROUTINE SAXPY( N, SA, SX, INCX, SY, INCY )

c          Y = A*X + Y  (X, Y = vectors, A = scalar)

c  INPUT--
c        N  Number of elements in input vectors X and Y
c       SA  Single precision scalar multiplier A
c       SX  Sing-prec array containing vector X
c     INCX  Spacing of elements of vector X in SX
c       SY  Sing-prec array containing vector Y
c     INCY  Spacing of elements of vector Y in SY

c OUTPUT--
c       SY   For I = 0 to N-1, overwrite  SY(LY+I*INCY) with
c                 SA*SX(LX+I*INCX) + SY(LY+I*INCY),
c            where LX = 1          if INCX .GE. 0,
c                     = (-INCX)*N  if INCX .LT. 0
c            and LY is defined analogously using INCY.
c ------------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   INCX, INCY, N
      REAL      SA
c     ..
c     .. Array Arguments ..

      REAL      SX( * ), SY( * )
c     ..
c     .. Local Scalars ..

      INTEGER   I, IX, IY, M
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC MOD
c     ..


      IF( N.LE.0 .OR. SA.EQ.0.0 ) RETURN

      IF( INCX.EQ.INCY .AND. INCX.GT.1 ) THEN

         DO 10 I = 1, 1 + ( N - 1 )*INCX, INCX
            SY( I ) = SY( I ) + SA*SX( I )
   10    CONTINUE

      ELSE IF( INCX.EQ.INCY .AND. INCX.EQ.1 ) THEN

c                                        ** equal, unit increments
         M  = MOD( N, 4 )

         IF( M.NE.0 ) THEN
c                            ** clean-up loop so remaining vector length
c                            ** is a multiple of 4.
            DO 20 I = 1, M
               SY( I ) = SY( I ) + SA*SX( I )
   20       CONTINUE

         END IF
c                              ** unroll loop for speed
         DO 30 I = M + 1, N, 4
            SY( I ) = SY( I ) + SA*SX( I )
            SY( I + 1 ) = SY( I + 1 ) + SA*SX( I + 1 )
            SY( I + 2 ) = SY( I + 2 ) + SA*SX( I + 2 )
            SY( I + 3 ) = SY( I + 3 ) + SA*SX( I + 3 )
   30    CONTINUE


      ELSE
c               ** nonequal or nonpositive increments.
         IX = 1
         IY = 1
         IF( INCX.LT.0 ) IX = 1 + ( N - 1 )*( -INCX )
         IF( INCY.LT.0 ) IY = 1 + ( N - 1 )*( -INCY )

         DO 40 I = 1, N
            SY( IY ) = SY( IY ) + SA*SX( IX )
            IX = IX + INCX
            IY = IY + INCY
   40    CONTINUE

      END IF

      END

      REAL FUNCTION SDOT( N, SX, INCX, SY, INCY )

c        Single-prec dot product of vectors  X  and  Y

c  INPUT--
c        N  Number of elements in input vectors X and Y
c       SX  Sing-prec array containing vector X
c     INCX  Spacing of elements of vector X in SX
c       SY  Sing-prec array containing vector Y
c     INCY  Spacing of elements of vector Y in SY

c OUTPUT--
c     SDOT   Sum for I = 0 to N-1 of  SX(LX+I*INCX) * SY(LY+I*INCY),
c            where  LX = 1          if INCX .GE. 0,
c                      = (-INCX)*N  if INCX .LT. 0,
c            and LY is defined analogously using INCY.
c ------------------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   INCX, INCY, N
c     ..
c     .. Array Arguments ..

      REAL      SX( * ), SY( * )
c     ..
c     .. Local Scalars ..

      INTEGER   I, IX, IY, M
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC MOD
c     ..


      SDOT = 0.0

      IF( N.LE.0 ) RETURN

      IF( INCX.EQ.INCY .AND. INCX.GT.1 ) THEN

         DO 10 I = 1, 1 + ( N - 1 )*INCX, INCX
            SDOT = SDOT + SX( I )*SY( I )
   10    CONTINUE


      ELSE IF( INCX.EQ.INCY .AND. INCX.EQ.1 ) THEN

c                                        ** equal, unit increments
         M  = MOD( N, 5 )

         IF( M.NE.0 ) THEN
c                            ** clean-up loop so remaining vector length
c                            ** is a multiple of 4.
            DO 20 I = 1, M
               SDOT = SDOT + SX( I )*SY( I )
   20       CONTINUE

         END IF
c                              ** unroll loop for speed
         DO 30 I = M + 1, N, 5
            SDOT = SDOT + SX( I )*SY( I ) + SX( I + 1 )*SY( I + 1 ) +
     &               SX( I + 2 )*SY( I + 2 ) + SX( I + 3 )*SY( I + 3 ) +
     &               SX( I + 4 )*SY( I + 4 )
   30    CONTINUE

      ELSE
c               ** nonequal or nonpositive increments.
         IX = 1
         IY = 1

         IF( INCX.LT.0 ) IX = 1 + ( N - 1 )*( -INCX )
         IF( INCY.LT.0 ) IY = 1 + ( N - 1 )*( -INCY )

         DO 40 I = 1, N
            SDOT = SDOT + SX( IX )*SY( IY )
            IX   = IX + INCX
            IY   = IY + INCY
   40    CONTINUE

      END IF

      END

      SUBROUTINE SSCAL( N, SA, SX, INCX )

c         Multiply vector SX by scalar SA

c  INPUT--  N  Number of elements in vector
c          SA  Single precision scale factor
c          SX  Sing-prec array, length 1+(N-1)*INCX, containing vector
c        INCX  Spacing of vector elements in SX

c OUTPUT-- SX  Replace  SX(1+I*INCX)  with  SA * SX(1+I*INCX)
c                for I = 0 to N-1
c ---------------------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   INCX, N
      REAL      SA
c     ..
c     .. Array Arguments ..

      REAL      SX( * )
c     ..
c     .. Local Scalars ..

      INTEGER   I, M
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC MOD
c     ..


      IF( N.LE.0 ) RETURN

      IF( INCX.NE.1 ) THEN

         DO 10 I = 1, 1 + ( N - 1 )*INCX, INCX
            SX( I ) = SA*SX( I )
   10    CONTINUE


      ELSE

         M  = MOD( N, 5 )

         IF( M.NE.0 ) THEN
c                           ** clean-up loop so remaining vector length
c                           ** is a multiple of 5.
            DO 20 I = 1, M
               SX( I ) = SA*SX( I )
   20       CONTINUE

         END IF
c                             ** unroll loop for speed
         DO 30 I = M + 1, N, 5
            SX( I ) = SA*SX( I )
            SX( I + 1 ) = SA*SX( I + 1 )
            SX( I + 2 ) = SA*SX( I + 2 )
            SX( I + 3 ) = SA*SX( I + 3 )
            SX( I + 4 ) = SA*SX( I + 4 )
   30    CONTINUE

      END IF

      END

      SUBROUTINE SSWAP( N, SX, INCX, SY, INCY )

c          Interchange s.p vectors  X  and  Y, as follows:

c     For I = 0 to N-1, interchange  SX(LX+I*INCX) and SY(LY+I*INCY),
c     where LX = 1          if INCX .GE. 0,
c              = (-INCX)*N  if INCX .LT. 0
c     and LY is defined analogously using INCY.


c  INPUT--
c        N  Number of elements in input vectors X and Y
c       SX  Sing-prec array containing vector X
c     INCX  Spacing of elements of vector X in SX
c       SY  Sing-prec array containing vector Y
c     INCY  Spacing of elements of vector Y in SY

c OUTPUT--
c       SX  Input vector SY (unchanged if N .LE. 0)
c       SY  Input vector SX (unchanged IF N .LE. 0)
c --------------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   INCX, INCY, N
c     ..
c     .. Array Arguments ..

      REAL      SX( * ), SY( * )
c     ..
c     .. Local Scalars ..

      INTEGER   I, IX, IY, M
      REAL      STEMP1, STEMP2, STEMP3
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC MOD
c     ..


      IF( N.LE.0 ) RETURN

      IF( INCX.EQ.INCY .AND. INCX.GT.1 ) THEN

         DO 10 I = 1, 1 + ( N-1 )*INCX, INCX
            STEMP1 = SX( I )
            SX( I ) = SY( I )
            SY( I ) = STEMP1
   10    CONTINUE


      ELSE IF( INCX.EQ.INCY .AND. INCX.EQ.1 ) THEN

c                                        ** equal, unit increments
         M  = MOD( N, 3 )

         IF( M.NE.0 ) THEN
c                            ** clean-up loop so remaining vector length
c                            ** is a multiple of 3.
            DO 20 I = 1, M
               STEMP1 = SX( I )
               SX( I ) = SY( I )
               SY( I ) = STEMP1
   20       CONTINUE

         END IF
c                              ** unroll loop for speed
         DO 30 I = M + 1, N, 3
            STEMP1 = SX( I )
            STEMP2 = SX( I + 1 )
            STEMP3 = SX( I + 2 )
            SX( I ) = SY( I )
            SX( I + 1 ) = SY( I + 1 )
            SX( I + 2 ) = SY( I + 2 )
            SY( I ) = STEMP1
            SY( I + 1 ) = STEMP2
            SY( I + 2 ) = STEMP3
   30    CONTINUE


      ELSE
c               ** nonequal or nonpositive increments.
         IX = 1
         IY = 1

         IF( INCX.LT.0 ) IX = 1 + ( N - 1 )*( -INCX )
         IF( INCY.LT.0 ) IY = 1 + ( N - 1 )*( -INCY )

         DO 40 I = 1, N
            STEMP1 = SX( IX )
            SX( IX ) = SY( IY )
            SY( IY ) = STEMP1
            IX   = IX + INCX
            IY   = IY + INCY
   40    CONTINUE

      END IF

      END

      INTEGER FUNCTION ISAMAX( N, SX, INCX )

c INPUT--  N     Number of elements in vector of interest
c          SX    Sing-prec array, length 1+(N-1)*INCX, containing vector
c          INCX  Spacing of vector elements in SX

c OUTPUT-- ISAMAX   First I, I = 1 to N, to maximize
c                         ABS(SX(1+(I-1)*INCX))
c ---------------------------------------------------------------------

c     .. Scalar Arguments ..

      INTEGER   INCX, N
c     ..
c     .. Array Arguments ..

      REAL      SX( * )
c     ..
c     .. Local Scalars ..

      INTEGER   I, II
      REAL      SMAX, XMAG
c     ..
c     .. Intrinsic Functions ..

      INTRINSIC ABS
c     ..


      IF( N.LE.0 ) THEN

         ISAMAX = 0

      ELSE IF( N.EQ.1 ) THEN

         ISAMAX = 1

      ELSE

         SMAX = 0.0
         II   = 1

         DO 10 I = 1, 1 + ( N-1 )*INCX, INCX

            XMAG = ABS( SX( I ) )

            IF( SMAX.LT.XMAG ) THEN

               SMAX   = XMAG
               ISAMAX = II

            END IF

            II = II + 1

   10    CONTINUE

      END IF

      END

C================================================================================	
C        CALCULATE PHASE FUNCTION LEGENDRE EXPANSION COEFFICIENTS
C        IN VARIOUS SPECIAL CASES
C--------------------------------------------------------------------------------
C       INPUT: IPHAS   PHASE FUNCTION OPTIONS
C                      1 : ISOTROPIC
C                      2 : RAYLEIGH
C                      3 : HENYEY-GREENSTEIN WITH ASYMMETRY FACTOR -GG-
C                      4 : HAZE L AS SPECIFIED BY GARCIA/SIEWERT
C                      5 : CLOUD C.1 AS SPECIFIED BY GARCIA/SIEWERT
C              GG      ASYMMETRY FACTOR FOR HENYEY-GREENSTEIN CASE
C              NMOM    INDEX OF HIGHEST LEGENDRE COEFFICIENT NEEDED
C                        ( = NUMBER OF STREAMS 'NSTR'  CHOSEN
C                         FOR THE DISCRETE ORDINATE METHOD)
C--------------------------------------------------------------------------------
C      OUTPUT: PMOM(K)  LEGENDRE EXPANSION COEFFICIENTS (K=0 TO NMOM)
C                         (BE SURE TO DIMENSION '0:maxval' IN CALLING PROGRAM)
C--------------------------------------------------------------------------------
C      REFERENCE:  GARCIA, R. AND C. SIEWERT, 1985: BENCHMARK RESULTS
C                     IN RADIATIVE TRANSFER, TRANSP. THEORY AND STAT.
C                     PHYSICS 14, 437-484, TABLES 10 AND 17
C--------------------------------------------------------------------------------
	SUBROUTINE  GETMOM( IPHAS, GG, NMOM, PMOM )

	INTEGER  IPHAS, NMOM
	REAL     GG, PMOM( 0:* )

	REAL  HAZELM( 82 ), CLDMOM( 299 )

	DATA HAZELM /  2.41260, 3.23047, 3.37296, 3.23150, 2.89350,
     A               2.49594, 2.11361, 1.74812, 1.44692, 1.17714,
     B               0.96643, 0.78237, 0.64114, 0.51966, 0.42563,
     C               0.34688, 0.28351, 0.23317, 0.18963, 0.15788,
     D               0.12739, 0.10762, 0.08597, 0.07381, 0.05828,
     E               0.05089, 0.03971, 0.03524, 0.02720, 0.02451,
     F               0.01874, 0.01711, 0.01298, 0.01198, 0.00904,
     G               0.00841, 0.00634, 0.00592, 0.00446, 0.00418,
     H               0.00316, 0.00296, 0.00225, 0.00210, 0.00160,
     I               0.00150, 0.00115, 0.00107, 0.00082, 0.00077,
     J               0.00059, 0.00055, 0.00043, 0.00040, 0.00031,
     K               0.00029, 0.00023, 0.00021, 0.00017, 0.00015,
     L               0.00012, 0.00011, 0.00009, 0.00008, 0.00006,
     M               0.00006, 0.00005, 0.00004, 0.00004, 0.00003,
     N               0.00003, 3*0.00002, 8*0.00001 /

	DATA  ( CLDMOM(K), K = 1, 159 ) /
     A  2.544,  3.883,  4.568,  5.235,  5.887,  6.457,  7.177,  7.859,
     B  8.494,  9.286,  9.856, 10.615, 11.229, 11.851, 12.503, 13.058,
     C 13.626, 14.209, 14.660, 15.231, 15.641, 16.126, 16.539, 16.934,
     D 17.325, 17.673, 17.999, 18.329, 18.588, 18.885, 19.103, 19.345,
     E 19.537, 19.721, 19.884, 20.024, 20.145, 20.251, 20.330, 20.401,
     F 20.444, 20.477, 20.489, 20.483, 20.467, 20.427, 20.382, 20.310,
     G 20.236, 20.136, 20.036, 19.909, 19.785, 19.632, 19.486, 19.311,
     H 19.145, 18.949, 18.764, 18.551, 18.348, 18.119, 17.901, 17.659,
     I 17.428, 17.174, 16.931, 16.668, 16.415, 16.144, 15.883, 15.606,
     J 15.338, 15.058, 14.784, 14.501, 14.225, 13.941, 13.662, 13.378,
     K 13.098, 12.816, 12.536, 12.257, 11.978, 11.703, 11.427, 11.156,
     L 10.884, 10.618, 10.350, 10.090,  9.827,  9.574,  9.318,  9.072,
     M  8.822, 8.584, 8.340, 8.110, 7.874, 7.652, 7.424, 7.211, 6.990,
     N  6.785, 6.573, 6.377, 6.173, 5.986, 5.790, 5.612, 5.424, 5.255,
     O  5.075, 4.915, 4.744, 4.592, 4.429, 4.285, 4.130, 3.994, 3.847,
     P  3.719, 3.580, 3.459, 3.327, 3.214, 3.090, 2.983, 2.866, 2.766,
     Q  2.656, 2.562, 2.459, 2.372, 2.274, 2.193, 2.102, 2.025, 1.940,
     R  1.869, 1.790, 1.723, 1.649, 1.588, 1.518, 1.461, 1.397, 1.344,
     S  1.284, 1.235, 1.179, 1.134, 1.082, 1.040, 0.992, 0.954, 0.909 /
	DATA  ( CLDMOM(K), K = 160, 299 ) /
     T  0.873, 0.832, 0.799, 0.762, 0.731, 0.696, 0.668, 0.636, 0.610,
     U  0.581, 0.557, 0.530, 0.508, 0.483, 0.463, 0.440, 0.422, 0.401,
     V  0.384, 0.364, 0.349, 0.331, 0.317, 0.301, 0.288, 0.273, 0.262,
     W  0.248, 0.238, 0.225, 0.215, 0.204, 0.195, 0.185, 0.177, 0.167,
     X  0.160, 0.151, 0.145, 0.137, 0.131, 0.124, 0.118, 0.112, 0.107,
     Y  0.101, 0.097, 0.091, 0.087, 0.082, 0.079, 0.074, 0.071, 0.067,
     Z  0.064, 0.060, 0.057, 0.054, 0.052, 0.049, 0.047, 0.044, 0.042,
     A  0.039, 0.038, 0.035, 0.034, 0.032, 0.030, 0.029, 0.027, 0.026,
     B  0.024, 0.023, 0.022, 0.021, 0.020, 0.018, 0.018, 0.017, 0.016,
     C  0.015, 0.014, 0.013, 0.013, 0.012, 0.011, 0.011, 0.010, 0.009,
     D  0.009, 3*0.008, 2*0.007, 3*0.006, 4*0.005, 4*0.004, 6*0.003,
     E  9*0.002, 18*0.001 /

	IF ( IPHAS.LT.1 .OR. IPHAS.GT.5 )
     $     CALL ERRMSG( 'GETMOM--BAD INPUT VARIABLE IPHAS', .TRUE. )
	IF ( IPHAS.EQ.3 .AND. (GG.LE.-1.0 .OR. GG.GE.1.0) )
     $     CALL ERRMSG( 'GETMOM--BAD INPUT VARIABLE GG', .TRUE. )
	IF ( NMOM.LT.2 )
     $     CALL ERRMSG( 'GETMOM--BAD INPUT VARIABLE NMOM', .TRUE. )

	PMOM(0) = 1.0
	DO  10  K = 1, NMOM
	   PMOM(K) = 0.0
   10 CONTINUE

	IF ( IPHAS.EQ.2 )  THEN
C---------------------------
C    RAYLEIGH PHASE FUNCTION
C---------------------------

	   PMOM(2) = 0.1

	ELSE IF ( IPHAS.EQ.3 ) THEN
C------------------------------
C   HENYEY-GREENSTEIN PHASE FCN
C------------------------------
	   DO  20  K = 1, NMOM
	      PMOM(K) = GG**K
   20    CONTINUE

	ELSE IF ( IPHAS.EQ.4 ) THEN
C---------------------------
C    HAZE-L PHASE FUNCTION
C---------------------------
	   DO  30  K = 1, MIN0(82,NMOM)
	      PMOM(K) = HAZELM(K) / ( 2*K+1 )
   30    CONTINUE

	ELSE IF ( IPHAS.EQ.5 ) THEN
C---------------------------
C   CLOUD C.1 PHASE FUNCTION
C---------------------------
	   DO  40  K = 1, MIN0(298,NMOM)
	      PMOM(K) = CLDMOM(K) / ( 2*K+1 )
40       CONTINUE

	END IF

	RETURN
	END
c file:                  solirr.f
c
c external routines:     zensun,solirr
c
c internal routines:     none
c
c internal common:       sundat

c=======================================================================

      function solirr(w,nf)
c
c input:
c     w          wavelength in microns
c
c     nf         solar spectrum database switch
c               -1 = read solar.dat, replace data in sundat common block
c                1 = 5s 
c                2 = lowtran7 
c                3 = modtran3 (degraded to 20 cm-1 resolution)
c
c               note: the 5s model uses a 1/w**4 power law for w > 4 um
c output:
c                estraterstrial solar flux in w/m2/micron
c
      implicit none

      real ws1,ws2,dws,wl1,wl2,wl3,dwl1,dwl2,wm1,wm2,dwm,dw,wmin,wmax,
     &     wave,w,solirr,f,sun1,sun2a,sun2b,sun3
      integer i,nw,ns,nla,nlb,nm,nf

      parameter (ws1=.25, ws2=4., dws=.005)
      parameter (wl1=0., wl2=28400., wl3=57490., dwl1=20., dwl2=10)
      parameter (wm1=100., wm2=49960, dwm=20.)

      parameter (ns=751, nla=1440, nlb=2910, nm=2494)

      common /sundat/ sun1(ns),sun2a(nla),sun2b(nlb),sun3(nm)
      data nw,wmin,wmax,dw/0,0.,0.,0./
      save nw,wmin,wmax,dw


      if(nf.eq.-1) then                          ! user defined 

        if(nw.eq.0) then                         ! read solar.dat
          open(13,file='solar.dat',status='old')
          read(13,*) nw,wmin,wmax
          if(nw.gt.ns+nla+nlb+nm) then 
	     pause
		 stop 'Too many points in solar.dat'
	    endif
          read(13,*) (sun1(i),i=1,nw)
          dw=(wmax-wmin)/nw
        endif

        wave=1.e4/w
        i=(wave-wmin)/dw+1.00001
        solirr=0.
        if(i.lt.1 .or. i.gt.nw-1) return
        f=(wave-wmin-dw*(i-1))/dw
        solirr=(1.-f)*sun1(i)+f*sun1(i+1)

      elseif(nf.eq.1) then                       ! 5s model

        i=(w-ws1)/dws+1.00001
        f=(w-ws1-dws*(i-1))/dws
        
        if(i.le.ns-1) then 
          solirr=(1.-f)*sun1(i)+f*sun1(i+1)
        else
          solirr=sun1(ns)*(ws2/w)**4
        endif

      elseif(nf.eq.2) then                       ! lowtran7 model

        wave=1.e4/w
        if(wave.lt.wl2) then
          i=(wave-wl1)/dwl1+1.00001
          f=(wave-wl1-dwl1*(i-1))/dwl1
          solirr=(1.-f)*sun2a(i)+f*sun2a(i+1)
        elseif(wave.lt.wl3) then
          i=(wave-wl2)/dwl2+1.00001
          f=(wave-wl2-dwl2*(i-1))/dwl2
          solirr=(1.-f)*sun2b(i)+f*sun2b(i+1)
        endif

      elseif(nf.eq.3) then                       ! modtran3 model

        wave=1.e4/w
        i=(wave-wm1)/dwm+1.00001
        solirr=0.
        if(i.lt.1 .or. i.gt.nm-1) return
        f=(wave-wm1-dwm*(i-1))/dwm
        solirr=(1.-f)*sun3(i)+f*sun3(i+1)

      endif
      return
      end      
c=======================================================================

      block data sundta
c
c block    source           range           resolution      n_elements
c -----    ------           -----           ----------      ----------
c sun1     5s           0.25-4.00 um        .005 um            751
c sun2a   lowtran7        0-28780 cm-1      20 cm-1           1440
c sun2b   lowtran7    28400-57490 cm-1      10 cm-1           2910
c sun3    modtran3      100-49960 cm-1      20 cm-1           2494
c
c units are w/m2/micron
c
      parameter (ns=751, nla=1440, nlb=2910, nm=2494)
      common /sundat/ sun1(ns),sun2a(nla),sun2b(nlb),sun3(nm)

      data (sun1(i),i=1,120)/
     &  6.930e+01,8.600e+01,1.141e+02,1.600e+02,1.790e+02,1.770e+02,
     &  2.104e+02,2.730e+02,3.638e+02,5.050e+02,5.580e+02,5.370e+02,
     &  5.810e+02,6.580e+02,7.308e+02,8.180e+02,9.260e+02,8.981e+02,
     &  9.433e+02,9.087e+02,9.635e+02,1.026e+03,9.351e+02,1.137e+03,
     &  1.190e+03,1.029e+03,1.149e+03,9.181e+02,1.146e+03,9.245e+02,
     &  1.614e+03,1.648e+03,1.706e+03,1.783e+03,1.717e+03,1.693e+03,
     &  1.502e+03,1.760e+03,1.790e+03,1.929e+03,2.057e+03,2.021e+03,
     &  2.040e+03,2.013e+03,1.986e+03,2.019e+03,2.057e+03,1.879e+03,
     &  1.933e+03,1.974e+03,1.897e+03,1.936e+03,1.938e+03,1.825e+03,
     &  1.803e+03,1.861e+03,1.911e+03,1.899e+03,1.853e+03,1.878e+03,
     &  1.871e+03,1.874e+03,1.827e+03,1.847e+03,1.835e+03,1.864e+03,
     &  1.838e+03,1.843e+03,1.763e+03,1.795e+03,1.760e+03,1.769e+03,
     &  1.737e+03,1.689e+03,1.717e+03,1.675e+03,1.669e+03,1.658e+03,
     &  1.637e+03,1.623e+03,1.589e+03,1.515e+03,1.543e+03,1.555e+03,
     &  1.534e+03,1.517e+03,1.499e+03,1.469e+03,1.459e+03,1.438e+03,
     &  1.408e+03,1.407e+03,1.389e+03,1.368e+03,1.336e+03,1.352e+03,
     &  1.328e+03,1.314e+03,1.276e+03,1.286e+03,1.270e+03,1.257e+03,
     &  1.242e+03,1.220e+03,1.204e+03,1.199e+03,1.190e+03,1.181e+03,
     &  1.168e+03,1.144e+03,1.143e+03,1.123e+03,1.110e+03,1.112e+03,
     &  1.078e+03,1.077e+03,1.070e+03,1.047e+03,1.044e+03,1.030e+03/
      data (sun1(i),i=121,240)/
     &  9.909e+02,9.429e+02,1.003e+03,9.550e+02,9.669e+02,9.997e+02,
     &  9.841e+02,9.740e+02,9.636e+02,9.529e+02,9.430e+02,9.330e+02,
     &  9.230e+02,9.134e+02,9.041e+02,8.940e+02,8.844e+02,8.751e+02,
     &  8.654e+02,8.565e+02,8.475e+02,8.385e+02,8.295e+02,8.205e+02,
     &  8.115e+02,8.025e+02,7.939e+02,7.857e+02,7.769e+02,7.690e+02,
     &  7.606e+02,7.515e+02,7.425e+02,7.339e+02,7.256e+02,7.169e+02,
     &  7.090e+02,7.006e+02,6.919e+02,6.840e+02,6.760e+02,6.676e+02,
     &  6.589e+02,6.518e+02,6.464e+02,6.411e+02,6.350e+02,6.294e+02,
     &  6.241e+02,6.180e+02,6.124e+02,6.075e+02,6.021e+02,5.964e+02,
     &  5.915e+02,5.861e+02,5.804e+02,5.755e+02,5.705e+02,5.655e+02,
     &  5.605e+02,5.505e+02,5.505e+02,5.455e+02,5.405e+02,5.355e+02,
     &  5.309e+02,5.270e+02,5.226e+02,5.179e+02,5.130e+02,5.062e+02,
     &  4.996e+02,4.931e+02,4.865e+02,4.800e+02,4.735e+02,4.669e+02,
     &  4.604e+02,4.538e+02,4.473e+02,4.408e+02,4.342e+02,4.277e+02,
     &  4.211e+02,4.146e+02,4.080e+02,4.015e+02,3.950e+02,3.884e+02,
     &  3.967e+02,4.071e+02,4.035e+02,3.998e+02,3.962e+02,3.925e+02,
     &  3.889e+02,3.852e+02,3.816e+02,3.780e+02,3.743e+02,3.707e+02,
     &  3.670e+02,3.634e+02,3.597e+02,3.560e+02,3.524e+02,3.488e+02,
     &  3.451e+02,3.415e+02,3.422e+02,3.437e+02,3.409e+02,3.381e+02,
     &  3.353e+02,3.325e+02,3.297e+02,3.270e+02,3.242e+02,3.214e+02/
      data (sun1(i),i=241,360)/
     &  3.186e+02,3.158e+02,3.130e+02,3.102e+02,3.075e+02,3.047e+02,
     &  3.019e+02,2.991e+02,2.963e+02,2.935e+02,2.933e+02,2.934e+02,
     &  2.911e+02,2.888e+02,2.865e+02,2.843e+02,2.820e+02,2.797e+02,
     &  2.774e+02,2.751e+02,2.728e+02,2.705e+02,2.682e+02,2.659e+02,
     &  2.636e+02,2.613e+02,2.591e+02,2.568e+02,2.545e+02,2.522e+02,
     &  2.501e+02,2.481e+02,2.459e+02,2.436e+02,2.414e+02,2.391e+02,
     &  2.369e+02,2.346e+02,2.324e+02,2.301e+02,2.279e+02,2.256e+02,
     &  2.234e+02,2.212e+02,2.189e+02,2.167e+02,2.144e+02,2.122e+02,
     &  2.099e+02,2.077e+02,2.063e+02,2.050e+02,2.029e+02,2.009e+02,
     &  1.988e+02,1.967e+02,1.946e+02,1.925e+02,1.905e+02,1.884e+02,
     &  1.863e+02,1.842e+02,1.821e+02,1.801e+02,1.780e+02,1.759e+02,
     &  1.738e+02,1.717e+02,1.697e+02,1.676e+02,1.676e+02,1.679e+02,
     &  1.663e+02,1.646e+02,1.629e+02,1.613e+02,1.596e+02,1.579e+02,
     &  1.562e+02,1.546e+02,1.529e+02,1.512e+02,1.496e+02,1.479e+02,
     &  1.462e+02,1.446e+02,1.429e+02,1.412e+02,1.395e+02,1.379e+02,
     &  1.381e+02,1.386e+02,1.373e+02,1.360e+02,1.347e+02,1.334e+02,
     &  1.321e+02,1.308e+02,1.295e+02,1.282e+02,1.269e+02,1.256e+02,
     &  1.243e+02,1.230e+02,1.217e+02,1.204e+02,1.191e+02,1.178e+02,
     &  1.165e+02,1.152e+02,1.153e+02,1.156e+02,1.146e+02,1.136e+02,
     &  1.125e+02,1.115e+02,1.105e+02,1.095e+02,1.084e+02,1.074e+02/
      data (sun1(i),i=361,480)/
     &  1.064e+02,1.054e+02,1.043e+02,1.033e+02,1.023e+02,1.013e+02,
     &  1.003e+02,9.922e+01,9.820e+01,9.718e+01,9.707e+01,9.711e+01,
     &  9.626e+01,9.542e+01,9.456e+01,9.372e+01,9.289e+01,9.203e+01,
     &  9.119e+01,9.034e+01,8.949e+01,8.866e+01,8.781e+01,8.697e+01,
     &  8.612e+01,8.526e+01,8.443e+01,8.359e+01,8.275e+01,8.189e+01,
     &  8.189e+01,8.202e+01,8.135e+01,8.065e+01,7.999e+01,7.930e+01,
     &  7.861e+01,7.794e+01,7.726e+01,7.657e+01,7.590e+01,7.522e+01,
     &  7.454e+01,7.386e+01,7.318e+01,7.250e+01,7.182e+01,7.114e+01,
     &  7.047e+01,6.979e+01,6.973e+01,6.980e+01,6.924e+01,6.868e+01,
     &  6.814e+01,6.757e+01,6.702e+01,6.648e+01,6.590e+01,6.536e+01,
     &  6.480e+01,6.425e+01,6.369e+01,6.314e+01,6.257e+01,6.203e+01,
     &  6.147e+01,6.092e+01,6.036e+01,5.981e+01,5.980e+01,5.985e+01,
     &  5.940e+01,5.895e+01,5.850e+01,5.806e+01,5.760e+01,5.715e+01,
     &  5.670e+01,5.626e+01,5.579e+01,5.536e+01,5.490e+01,5.443e+01,
     &  5.400e+01,5.355e+01,5.309e+01,5.265e+01,5.220e+01,5.175e+01,
     &  5.168e+01,5.167e+01,5.130e+01,5.092e+01,5.055e+01,5.018e+01,
     &  4.979e+01,4.943e+01,4.904e+01,4.867e+01,4.830e+01,4.793e+01,
     &  4.754e+01,4.718e+01,4.679e+01,4.642e+01,4.606e+01,4.567e+01,
     &  4.530e+01,4.493e+01,4.482e+01,4.479e+01,4.445e+01,4.414e+01,
     &  4.383e+01,4.349e+01,4.318e+01,4.286e+01,4.255e+01,4.221e+01/
      data (sun1(i),i=481,600)/
     &  4.190e+01,4.158e+01,4.126e+01,4.094e+01,4.062e+01,4.031e+01,
     &  3.997e+01,3.966e+01,3.934e+01,3.903e+01,3.896e+01,3.892e+01,
     &  3.866e+01,3.838e+01,3.812e+01,3.786e+01,3.758e+01,3.730e+01,
     &  3.705e+01,3.677e+01,3.650e+01,3.623e+01,3.596e+01,3.569e+01,
     &  3.542e+01,3.515e+01,3.488e+01,3.461e+01,3.434e+01,3.407e+01,
     &  3.403e+01,3.403e+01,3.379e+01,3.357e+01,3.335e+01,3.312e+01,
     &  3.290e+01,3.267e+01,3.244e+01,3.223e+01,3.200e+01,3.177e+01,
     &  3.155e+01,3.131e+01,3.110e+01,3.087e+01,3.066e+01,3.042e+01,
     &  3.020e+01,2.997e+01,2.990e+01,2.987e+01,2.966e+01,2.946e+01,
     &  2.927e+01,2.908e+01,2.888e+01,2.867e+01,2.849e+01,2.830e+01,
     &  2.810e+01,2.791e+01,2.771e+01,2.752e+01,2.731e+01,2.712e+01,
     &  2.693e+01,2.674e+01,2.654e+01,2.635e+01,2.631e+01,2.628e+01,
     &  2.612e+01,2.595e+01,2.579e+01,2.564e+01,2.545e+01,2.530e+01,
     &  2.512e+01,2.498e+01,2.480e+01,2.463e+01,2.447e+01,2.431e+01,
     &  2.414e+01,2.397e+01,2.381e+01,2.366e+01,2.347e+01,2.331e+01,
     &  2.326e+01,2.321e+01,2.306e+01,2.292e+01,2.276e+01,2.263e+01,
     &  2.247e+01,2.235e+01,2.219e+01,2.204e+01,2.190e+01,2.176e+01,
     &  2.160e+01,2.147e+01,2.131e+01,2.118e+01,2.103e+01,2.089e+01,
     &  2.073e+01,2.060e+01,2.055e+01,2.053e+01,2.040e+01,2.028e+01,
     &  2.014e+01,2.003e+01,1.990e+01,1.977e+01,1.965e+01,1.953e+01/
      data (sun1(i),i=601,720)/
     &  1.939e+01,1.927e+01,1.915e+01,1.902e+01,1.890e+01,1.878e+01,
     &  1.864e+01,1.853e+01,1.840e+01,1.827e+01,1.825e+01,1.824e+01,
     &  1.814e+01,1.803e+01,1.793e+01,1.783e+01,1.771e+01,1.762e+01,
     &  1.750e+01,1.741e+01,1.729e+01,1.721e+01,1.708e+01,1.700e+01,
     &  1.687e+01,1.679e+01,1.666e+01,1.657e+01,1.646e+01,1.636e+01,
     &  1.633e+01,1.630e+01,1.622e+01,1.613e+01,1.604e+01,1.596e+01,
     &  1.584e+01,1.578e+01,1.568e+01,1.559e+01,1.550e+01,1.540e+01,
     &  1.532e+01,1.524e+01,1.513e+01,1.505e+01,1.496e+01,1.487e+01,
     &  1.478e+01,1.469e+01,1.464e+01,1.463e+01,1.455e+01,1.445e+01,
     &  1.438e+01,1.432e+01,1.421e+01,1.415e+01,1.405e+01,1.398e+01,
     &  1.391e+01,1.382e+01,1.374e+01,1.367e+01,1.358e+01,1.350e+01,
     &  1.343e+01,1.335e+01,1.325e+01,1.318e+01,1.316e+01,1.312e+01,
     &  1.306e+01,1.300e+01,1.292e+01,1.285e+01,1.278e+01,1.270e+01,
     &  1.265e+01,1.257e+01,1.250e+01,1.243e+01,1.236e+01,1.228e+01,
     &  1.222e+01,1.215e+01,1.207e+01,1.201e+01,1.194e+01,1.186e+01,
     &  1.185e+01,1.184e+01,1.178e+01,1.172e+01,1.166e+01,1.160e+01,
     &  1.155e+01,1.147e+01,1.142e+01,1.136e+01,1.130e+01,1.124e+01,
     &  1.118e+01,1.112e+01,1.106e+01,1.100e+01,1.094e+01,1.089e+01,
     &  1.082e+01,1.075e+01,1.072e+01,1.070e+01,1.064e+01,1.059e+01,
     &  1.052e+01,1.047e+01,1.042e+01,1.037e+01,1.031e+01,1.025e+01/
      data (sun1(i),i=721,751)/
     &  1.020e+01,1.015e+01,1.010e+01,1.003e+01,9.980e+00,9.920e+00,
     &  9.860e+00,9.820e+00,9.750e+00,9.710e+00,9.700e+00,9.700e+00,
     &  9.630e+00,9.590e+00,9.560e+00,9.500e+00,9.450e+00,9.410e+00,
     &  9.360e+00,9.320e+00,9.270e+00,9.220e+00,9.180e+00,9.130e+00,
     &  9.080e+00,9.050e+00,8.990e+00,8.940e+00,8.900e+00,8.850e+00,
     &  8.810e+00/
c
      data (sun2a(i),i=1,120)/
     &  0.000e+00,4.576e-08,7.010e-07,3.458e-06,1.073e-05,2.570e-05,
     &  5.250e-05,9.600e-05,1.619e-04,2.577e-04,3.910e-04,5.692e-04,
     &  8.020e-04,1.101e-03,1.477e-03,1.946e-03,2.521e-03,3.215e-03,
     &  4.044e-03,5.023e-03,6.170e-03,7.515e-03,9.068e-03,1.085e-02,
     &  1.289e-02,1.521e-02,1.776e-02,2.064e-02,2.389e-02,2.752e-02,
     &  3.154e-02,3.596e-02,4.085e-02,4.624e-02,5.213e-02,5.854e-02,
     &  6.549e-02,7.302e-02,8.117e-02,9.000e-02,9.954e-02,1.098e-01,
     &  1.208e-01,1.326e-01,1.452e-01,1.586e-01,1.731e-01,1.885e-01,
     &  2.049e-01,2.224e-01,2.411e-01,2.609e-01,2.820e-01,3.043e-01,
     &  3.279e-01,3.527e-01,3.789e-01,4.065e-01,4.355e-01,4.660e-01,
     &  4.980e-01,5.316e-01,5.669e-01,6.039e-01,6.426e-01,6.832e-01,
     &  7.256e-01,7.699e-01,8.162e-01,8.644e-01,9.147e-01,9.671e-01,
     &  1.022e+00,1.078e+00,1.137e+00,1.199e+00,1.263e+00,1.329e+00,
     &  1.399e+00,1.471e+00,1.546e+00,1.625e+00,1.706e+00,1.791e+00,
     &  1.880e+00,1.971e+00,2.067e+00,2.166e+00,2.268e+00,2.374e+00,
     &  2.484e+00,2.597e+00,2.714e+00,2.835e+00,2.960e+00,3.089e+00,
     &  3.221e+00,3.357e+00,3.498e+00,3.642e+00,3.790e+00,3.944e+00,
     &  4.104e+00,4.273e+00,4.445e+00,4.615e+00,4.791e+00,4.983e+00,
     &  5.195e+00,5.421e+00,5.656e+00,5.893e+00,6.127e+00,6.356e+00,
     &  6.582e+00,6.808e+00,7.036e+00,7.270e+00,7.517e+00,7.789e+00/
      data (sun2a(i),i=121,240)/
     &  8.091e+00,8.407e+00,8.712e+00,8.990e+00,9.249e+00,9.500e+00,
     &  9.755e+00,1.001e+01,1.025e+01,1.048e+01,1.070e+01,1.095e+01,
     &  1.123e+01,1.155e+01,1.190e+01,1.225e+01,1.260e+01,1.293e+01,
     &  1.325e+01,1.353e+01,1.378e+01,1.404e+01,1.432e+01,1.466e+01,
     &  1.507e+01,1.553e+01,1.601e+01,1.643e+01,1.677e+01,1.708e+01,
     &  1.747e+01,1.796e+01,1.843e+01,1.873e+01,1.891e+01,1.914e+01,
     &  1.949e+01,1.984e+01,2.016e+01,2.051e+01,2.102e+01,2.177e+01,
     &  2.257e+01,2.319e+01,2.358e+01,2.390e+01,2.433e+01,2.483e+01,
     &  2.524e+01,2.565e+01,2.631e+01,2.721e+01,2.798e+01,2.842e+01,
     &  2.882e+01,2.957e+01,3.053e+01,3.125e+01,3.167e+01,3.222e+01,
     &  3.309e+01,3.397e+01,3.460e+01,3.500e+01,3.540e+01,3.603e+01,
     &  3.699e+01,3.789e+01,3.840e+01,3.889e+01,3.986e+01,4.093e+01,
     &  4.157e+01,4.213e+01,4.308e+01,4.435e+01,4.552e+01,4.598e+01,
     &  4.628e+01,4.833e+01,5.199e+01,5.437e+01,5.408e+01,5.217e+01,
     &  5.071e+01,5.215e+01,5.571e+01,5.655e+01,5.441e+01,5.327e+01,
     &  5.608e+01,6.197e+01,6.441e+01,6.065e+01,5.515e+01,5.307e+01,
     &  5.748e+01,6.464e+01,6.835e+01,6.906e+01,6.987e+01,7.094e+01,
     &  7.166e+01,7.277e+01,7.433e+01,7.526e+01,7.488e+01,7.361e+01,
     &  7.321e+01,7.489e+01,7.804e+01,8.020e+01,8.088e+01,8.267e+01,
     &  8.498e+01,8.624e+01,8.836e+01,9.200e+01,9.538e+01,9.812e+01/
      data (sun2a(i),i=241,360)/
     &  1.003e+02,1.006e+02,1.000e+02,1.018e+02,1.051e+02,1.075e+02,
     &  1.100e+02,1.124e+02,1.139e+02,1.138e+02,1.192e+02,1.220e+02,
     &  1.246e+02,1.271e+02,1.252e+02,1.244e+02,1.250e+02,1.279e+02,
     &  1.307e+02,1.320e+02,1.337e+02,1.367e+02,1.362e+02,1.350e+02,
     &  1.374e+02,1.384e+02,1.373e+02,1.364e+02,1.426e+02,1.445e+02,
     &  1.484e+02,1.519e+02,1.516e+02,1.554e+02,1.576e+02,1.597e+02,
     &  1.623e+02,1.684e+02,1.714e+02,1.698e+02,1.703e+02,1.723e+02,
     &  1.767e+02,1.819e+02,1.861e+02,1.879e+02,1.860e+02,1.898e+02,
     &  1.894e+02,1.929e+02,2.020e+02,2.096e+02,2.058e+02,2.129e+02,
     &  2.156e+02,2.165e+02,2.192e+02,2.203e+02,2.211e+02,2.271e+02,
     &  2.300e+02,2.332e+02,2.339e+02,2.345e+02,2.344e+02,2.358e+02,
     &  2.398e+02,2.431e+02,2.412e+02,2.423e+02,2.437e+02,2.428e+02,
     &  2.462e+02,2.461e+02,2.468e+02,2.518e+02,2.554e+02,2.587e+02,
     &  2.603e+02,2.634e+02,2.687e+02,2.718e+02,2.730e+02,2.739e+02,
     &  2.747e+02,2.744e+02,2.797e+02,2.878e+02,2.877e+02,2.880e+02,
     &  2.900e+02,2.919e+02,2.953e+02,2.968e+02,3.005e+02,3.022e+02,
     &  2.991e+02,3.014e+02,3.057e+02,3.093e+02,3.106e+02,3.132e+02,
     &  3.146e+02,3.096e+02,3.188e+02,3.205e+02,3.216e+02,3.286e+02,
     &  3.317e+02,3.372e+02,3.456e+02,3.455e+02,3.430e+02,3.444e+02,
     &  3.462e+02,3.492e+02,3.518e+02,3.547e+02,3.570e+02,3.583e+02/
      data (sun2a(i),i=361,480)/
     &  3.623e+02,3.641e+02,3.650e+02,3.678e+02,3.690e+02,3.691e+02,
     &  3.722e+02,3.778e+02,3.813e+02,3.842e+02,3.887e+02,3.936e+02,
     &  3.970e+02,3.987e+02,4.006e+02,4.041e+02,4.082e+02,4.125e+02,
     &  4.156e+02,4.162e+02,4.165e+02,4.195e+02,4.259e+02,4.333e+02,
     &  4.377e+02,4.381e+02,4.398e+02,4.415e+02,4.387e+02,4.343e+02,
     &  4.375e+02,4.490e+02,4.489e+02,4.395e+02,4.371e+02,4.393e+02,
     &  4.443e+02,4.550e+02,4.670e+02,4.730e+02,4.696e+02,4.675e+02,
     &  4.738e+02,4.775e+02,4.775e+02,4.810e+02,4.839e+02,4.822e+02,
     &  4.791e+02,4.821e+02,4.934e+02,4.984e+02,4.920e+02,4.895e+02,
     &  4.933e+02,4.955e+02,4.965e+02,4.996e+02,5.046e+02,5.097e+02,
     &  5.120e+02,5.120e+02,5.123e+02,5.150e+02,5.207e+02,5.273e+02,
     &  5.319e+02,5.322e+02,5.305e+02,5.323e+02,5.393e+02,5.486e+02,
     &  5.530e+02,5.490e+02,5.460e+02,5.510e+02,5.564e+02,5.572e+02,
     &  5.578e+02,5.610e+02,5.640e+02,5.656e+02,5.664e+02,5.679e+02,
     &  5.715e+02,5.767e+02,5.815e+02,5.865e+02,5.936e+02,6.007e+02,
     &  6.028e+02,6.014e+02,6.030e+02,6.069e+02,6.060e+02,6.010e+02,
     &  6.008e+02,6.072e+02,6.129e+02,6.141e+02,6.144e+02,6.166e+02,
     &  6.205e+02,6.252e+02,6.298e+02,6.338e+02,6.373e+02,6.405e+02,
     &  6.425e+02,6.426e+02,6.419e+02,6.431e+02,6.467e+02,6.506e+02,
     &  6.543e+02,6.610e+02,6.721e+02,6.823e+02,6.849e+02,6.822e+02/
      data (sun2a(i),i=481,600)/
     &  6.825e+02,6.878e+02,6.914e+02,6.896e+02,6.881e+02,6.937e+02,
     &  7.033e+02,7.081e+02,7.062e+02,7.046e+02,7.090e+02,7.173e+02,
     &  7.254e+02,7.311e+02,7.342e+02,7.354e+02,7.366e+02,7.393e+02,
     &  7.429e+02,7.450e+02,7.443e+02,7.424e+02,7.495e+02,7.557e+02,
     &  7.588e+02,7.663e+02,7.615e+02,7.621e+02,7.697e+02,7.642e+02,
     &  7.638e+02,7.689e+02,7.627e+02,7.539e+02,7.624e+02,7.658e+02,
     &  7.722e+02,7.607e+02,7.621e+02,7.668e+02,7.670e+02,7.693e+02,
     &  7.735e+02,7.668e+02,7.636e+02,7.738e+02,7.772e+02,7.796e+02,
     &  7.925e+02,7.975e+02,7.878e+02,7.938e+02,8.060e+02,8.048e+02,
     &  8.066e+02,8.217e+02,8.303e+02,8.275e+02,8.311e+02,8.302e+02,
     &  8.262e+02,8.233e+02,8.222e+02,8.339e+02,8.546e+02,8.598e+02,
     &  8.626e+02,8.712e+02,8.752e+02,8.677e+02,8.639e+02,8.833e+02,
     &  8.934e+02,8.977e+02,9.052e+02,9.054e+02,9.111e+02,9.302e+02,
     &  9.392e+02,9.347e+02,9.352e+02,9.424e+02,9.481e+02,9.470e+02,
     &  9.519e+02,9.601e+02,9.519e+02,9.542e+02,9.591e+02,9.634e+02,
     &  9.802e+02,9.837e+02,9.788e+02,9.794e+02,9.852e+02,9.771e+02,
     &  9.199e+02,8.997e+02,9.629e+02,9.972e+02,9.999e+02,9.957e+02,
     &  9.999e+02,1.015e+03,9.516e+02,8.935e+02,9.551e+02,1.003e+03,
     &  9.901e+02,9.788e+02,1.011e+03,1.035e+03,1.032e+03,1.030e+03,
     &  1.040e+03,1.046e+03,1.044e+03,1.050e+03,1.056e+03,1.050e+03/
      data (sun2a(i),i=601,720)/
     &  1.038e+03,1.052e+03,1.072e+03,1.076e+03,1.077e+03,1.079e+03,
     &  1.078e+03,1.076e+03,1.080e+03,1.081e+03,1.070e+03,1.078e+03,
     &  1.104e+03,1.111e+03,1.112e+03,1.118e+03,1.120e+03,1.109e+03,
     &  1.101e+03,1.113e+03,1.123e+03,1.120e+03,1.124e+03,1.136e+03,
     &  1.144e+03,1.141e+03,1.141e+03,1.152e+03,1.149e+03,1.138e+03,
     &  1.141e+03,1.151e+03,1.160e+03,1.171e+03,1.178e+03,1.180e+03,
     &  1.182e+03,1.182e+03,1.180e+03,1.182e+03,1.188e+03,1.190e+03,
     &  1.191e+03,1.197e+03,1.196e+03,1.192e+03,1.201e+03,1.210e+03,
     &  1.209e+03,1.208e+03,1.205e+03,1.193e+03,1.193e+03,1.220e+03,
     &  1.243e+03,1.245e+03,1.242e+03,1.240e+03,1.241e+03,1.244e+03,
     &  1.249e+03,1.253e+03,1.257e+03,1.260e+03,1.262e+03,1.264e+03,
     &  1.266e+03,1.270e+03,1.277e+03,1.284e+03,1.284e+03,1.283e+03,
     &  1.287e+03,1.287e+03,1.272e+03,1.262e+03,1.271e+03,1.289e+03,
     &  1.305e+03,1.312e+03,1.312e+03,1.314e+03,1.320e+03,1.326e+03,
     &  1.328e+03,1.325e+03,1.323e+03,1.325e+03,1.335e+03,1.346e+03,
     &  1.354e+03,1.354e+03,1.347e+03,1.338e+03,1.331e+03,1.330e+03,
     &  1.338e+03,1.352e+03,1.363e+03,1.369e+03,1.372e+03,1.376e+03,
     &  1.382e+03,1.388e+03,1.389e+03,1.388e+03,1.392e+03,1.402e+03,
     &  1.413e+03,1.418e+03,1.411e+03,1.396e+03,1.386e+03,1.388e+03,
     &  1.405e+03,1.424e+03,1.428e+03,1.422e+03,1.424e+03,1.435e+03/
      data (sun2a(i),i=721,840)/
     &  1.445e+03,1.451e+03,1.452e+03,1.452e+03,1.454e+03,1.460e+03,
     &  1.467e+03,1.471e+03,1.469e+03,1.463e+03,1.460e+03,1.469e+03,
     &  1.482e+03,1.491e+03,1.495e+03,1.498e+03,1.501e+03,1.505e+03,
     &  1.510e+03,1.512e+03,1.513e+03,1.516e+03,1.522e+03,1.524e+03,
     &  1.521e+03,1.520e+03,1.532e+03,1.546e+03,1.548e+03,1.542e+03,
     &  1.542e+03,1.554e+03,1.564e+03,1.564e+03,1.560e+03,1.561e+03,
     &  1.570e+03,1.582e+03,1.578e+03,1.530e+03,1.447e+03,1.397e+03,
     &  1.429e+03,1.506e+03,1.567e+03,1.594e+03,1.606e+03,1.614e+03,
     &  1.609e+03,1.589e+03,1.568e+03,1.567e+03,1.587e+03,1.610e+03,
     &  1.624e+03,1.630e+03,1.631e+03,1.628e+03,1.622e+03,1.617e+03,
     &  1.619e+03,1.632e+03,1.648e+03,1.658e+03,1.660e+03,1.658e+03,
     &  1.658e+03,1.659e+03,1.660e+03,1.659e+03,1.654e+03,1.645e+03,
     &  1.642e+03,1.653e+03,1.674e+03,1.694e+03,1.701e+03,1.703e+03,
     &  1.698e+03,1.655e+03,1.644e+03,1.662e+03,1.676e+03,1.708e+03,
     &  1.703e+03,1.711e+03,1.732e+03,1.717e+03,1.720e+03,1.730e+03,
     &  1.683e+03,1.629e+03,1.684e+03,1.727e+03,1.708e+03,1.689e+03,
     &  1.698e+03,1.733e+03,1.738e+03,1.714e+03,1.735e+03,1.750e+03,
     &  1.750e+03,1.760e+03,1.764e+03,1.765e+03,1.769e+03,1.780e+03,
     &  1.793e+03,1.765e+03,1.729e+03,1.746e+03,1.753e+03,1.758e+03,
     &  1.775e+03,1.768e+03,1.768e+03,1.790e+03,1.807e+03,1.799e+03/
      data (sun2a(i),i=841,960)/
     &  1.783e+03,1.779e+03,1.792e+03,1.810e+03,1.808e+03,1.794e+03,
     &  1.819e+03,1.774e+03,1.649e+03,1.674e+03,1.789e+03,1.847e+03,
     &  1.848e+03,1.813e+03,1.796e+03,1.840e+03,1.868e+03,1.865e+03,
     &  1.873e+03,1.872e+03,1.856e+03,1.845e+03,1.842e+03,1.824e+03,
     &  1.795e+03,1.820e+03,1.862e+03,1.858e+03,1.839e+03,1.841e+03,
     &  1.864e+03,1.877e+03,1.884e+03,1.895e+03,1.875e+03,1.821e+03,
     &  1.779e+03,1.810e+03,1.855e+03,1.832e+03,1.837e+03,1.882e+03,
     &  1.866e+03,1.820e+03,1.805e+03,1.831e+03,1.862e+03,1.867e+03,
     &  1.863e+03,1.852e+03,1.835e+03,1.835e+03,1.845e+03,1.832e+03,
     &  1.804e+03,1.793e+03,1.822e+03,1.846e+03,1.832e+03,1.848e+03,
     &  1.894e+03,1.909e+03,1.901e+03,1.891e+03,1.870e+03,1.854e+03,
     &  1.866e+03,1.874e+03,1.869e+03,1.882e+03,1.897e+03,1.884e+03,
     &  1.856e+03,1.841e+03,1.855e+03,1.885e+03,1.904e+03,1.900e+03,
     &  1.887e+03,1.888e+03,1.879e+03,1.845e+03,1.844e+03,1.877e+03,
     &  1.847e+03,1.785e+03,1.793e+03,1.849e+03,1.894e+03,1.909e+03,
     &  1.893e+03,1.867e+03,1.886e+03,1.960e+03,1.972e+03,1.896e+03,
     &  1.884e+03,1.918e+03,1.854e+03,1.793e+03,1.876e+03,1.974e+03,
     &  1.976e+03,1.944e+03,1.926e+03,1.914e+03,1.903e+03,1.883e+03,
     &  1.813e+03,1.711e+03,1.718e+03,1.860e+03,1.965e+03,1.970e+03,
     &  1.941e+03,1.903e+03,1.852e+03,1.836e+03,1.879e+03,1.902e+03/
      data (sun2a(i),i=961,1080)/
     &  1.863e+03,1.839e+03,1.841e+03,1.780e+03,1.685e+03,1.677e+03,
     &  1.719e+03,1.697e+03,1.684e+03,1.785e+03,1.898e+03,1.910e+03,
     &  1.877e+03,1.867e+03,1.863e+03,1.860e+03,1.900e+03,1.971e+03,
     &  2.000e+03,1.971e+03,1.937e+03,1.923e+03,1.923e+03,1.924e+03,
     &  1.917e+03,1.912e+03,1.926e+03,1.960e+03,1.995e+03,1.996e+03,
     &  1.939e+03,1.884e+03,1.895e+03,1.933e+03,1.935e+03,1.899e+03,
     &  1.853e+03,1.820e+03,1.822e+03,1.865e+03,1.936e+03,1.966e+03,
     &  1.920e+03,1.881e+03,1.932e+03,2.016e+03,2.050e+03,2.021e+03,
     &  1.961e+03,1.938e+03,1.997e+03,2.051e+03,2.003e+03,1.912e+03,
     &  1.880e+03,1.895e+03,1.898e+03,1.899e+03,1.938e+03,1.994e+03,
     &  2.010e+03,1.982e+03,1.949e+03,1.927e+03,1.912e+03,1.878e+03,
     &  1.792e+03,1.680e+03,1.645e+03,1.727e+03,1.845e+03,1.926e+03,
     &  1.973e+03,2.005e+03,2.022e+03,2.022e+03,2.026e+03,2.054e+03,
     &  2.087e+03,2.083e+03,2.053e+03,2.047e+03,2.070e+03,2.072e+03,
     &  2.038e+03,2.020e+03,2.050e+03,2.074e+03,2.038e+03,1.979e+03,
     &  1.964e+03,1.997e+03,2.038e+03,2.058e+03,2.048e+03,2.018e+03,
     &  1.999e+03,2.011e+03,2.040e+03,2.056e+03,2.040e+03,1.982e+03,
     &  1.911e+03,1.892e+03,1.938e+03,1.992e+03,2.006e+03,2.001e+03,
     &  2.011e+03,2.023e+03,1.998e+03,1.948e+03,1.936e+03,1.987e+03,
     &  2.038e+03,2.033e+03,1.996e+03,1.984e+03,2.012e+03,2.056e+03/
      data (sun2a(i),i=1081,1200)/
     &  2.092e+03,2.107e+03,2.095e+03,2.070e+03,2.053e+03,2.047e+03,
     &  2.044e+03,2.036e+03,2.017e+03,1.988e+03,1.973e+03,1.999e+03,
     &  2.057e+03,2.104e+03,2.109e+03,2.089e+03,2.069e+03,2.052e+03,
     &  2.031e+03,2.006e+03,1.987e+03,1.982e+03,1.979e+03,1.964e+03,
     &  1.944e+03,1.952e+03,2.007e+03,2.083e+03,2.139e+03,2.158e+03,
     &  2.143e+03,2.103e+03,2.051e+03,2.002e+03,1.975e+03,1.988e+03,
     &  2.038e+03,2.075e+03,2.051e+03,1.972e+03,1.885e+03,1.829e+03,
     &  1.821e+03,1.866e+03,1.935e+03,1.974e+03,1.959e+03,1.925e+03,
     &  1.920e+03,1.950e+03,1.985e+03,1.996e+03,1.966e+03,1.885e+03,
     &  1.782e+03,1.727e+03,1.759e+03,1.817e+03,1.800e+03,1.693e+03,
     &  1.593e+03,1.599e+03,1.700e+03,1.824e+03,1.910e+03,1.938e+03,
     &  1.903e+03,1.822e+03,1.738e+03,1.683e+03,1.667e+03,1.683e+03,
     &  1.715e+03,1.734e+03,1.712e+03,1.668e+03,1.655e+03,1.698e+03,
     &  1.727e+03,1.637e+03,1.416e+03,1.204e+03,1.156e+03,1.278e+03,
     &  1.450e+03,1.561e+03,1.595e+03,1.588e+03,1.571e+03,1.566e+03,
     &  1.590e+03,1.641e+03,1.688e+03,1.708e+03,1.704e+03,1.701e+03,
     &  1.719e+03,1.749e+03,1.772e+03,1.773e+03,1.745e+03,1.690e+03,
     &  1.625e+03,1.589e+03,1.619e+03,1.701e+03,1.783e+03,1.816e+03,
     &  1.801e+03,1.765e+03,1.734e+03,1.715e+03,1.705e+03,1.702e+03,
     &  1.697e+03,1.682e+03,1.661e+03,1.657e+03,1.693e+03,1.763e+03/
      data (sun2a(i),i=1201,1320)/
     &  1.827e+03,1.842e+03,1.806e+03,1.756e+03,1.726e+03,1.724e+03,
     &  1.737e+03,1.749e+03,1.756e+03,1.760e+03,1.762e+03,1.770e+03,
     &  1.792e+03,1.827e+03,1.849e+03,1.820e+03,1.721e+03,1.596e+03,
     &  1.514e+03,1.523e+03,1.602e+03,1.706e+03,1.793e+03,1.838e+03,
     &  1.820e+03,1.738e+03,1.631e+03,1.553e+03,1.539e+03,1.574e+03,
     &  1.624e+03,1.661e+03,1.677e+03,1.673e+03,1.653e+03,1.626e+03,
     &  1.607e+03,1.604e+03,1.621e+03,1.655e+03,1.701e+03,1.752e+03,
     &  1.796e+03,1.823e+03,1.827e+03,1.809e+03,1.767e+03,1.714e+03,
     &  1.667e+03,1.644e+03,1.644e+03,1.653e+03,1.655e+03,1.639e+03,
     &  1.592e+03,1.506e+03,1.377e+03,1.210e+03,1.011e+03,8.076e+02,
     &  6.668e+02,6.645e+02,8.352e+02,1.100e+03,1.331e+03,1.423e+03,
     &  1.364e+03,1.194e+03,9.618e+02,7.250e+02,5.513e+02,5.040e+02,
     &  5.963e+02,7.752e+02,9.756e+02,1.150e+03,1.287e+03,1.386e+03,
     &  1.448e+03,1.474e+03,1.469e+03,1.435e+03,1.377e+03,1.296e+03,
     &  1.196e+03,1.085e+03,9.854e+02,9.173e+02,8.946e+02,9.109e+02,
     &  9.515e+02,1.002e+03,1.046e+03,1.071e+03,1.061e+03,1.021e+03,
     &  9.772e+02,9.592e+02,9.821e+02,1.021e+03,1.033e+03,9.834e+02,
     &  8.798e+02,7.627e+02,6.753e+02,6.433e+02,6.627e+02,7.215e+02,
     &  8.083e+02,9.132e+02,1.027e+03,1.140e+03,1.236e+03,1.293e+03,
     &  1.287e+03,1.210e+03,1.102e+03,1.022e+03,1.023e+03,1.109e+03/
      data (sun2a(i),i=1321,1440)/
     &  1.233e+03,1.337e+03,1.383e+03,1.373e+03,1.325e+03,1.258e+03,
     &  1.189e+03,1.134e+03,1.107e+03,1.114e+03,1.137e+03,1.148e+03,
     &  1.121e+03,1.054e+03,9.681e+02,8.892e+02,8.379e+02,8.176e+02,
     &  8.237e+02,8.510e+02,8.965e+02,9.598e+02,1.041e+03,1.138e+03,
     &  1.231e+03,1.294e+03,1.300e+03,1.241e+03,1.155e+03,1.092e+03,
     &  1.097e+03,1.170e+03,1.264e+03,1.322e+03,1.307e+03,1.234e+03,
     &  1.146e+03,1.091e+03,1.093e+03,1.135e+03,1.189e+03,1.229e+03,
     &  1.246e+03,1.249e+03,1.250e+03,1.261e+03,1.275e+03,1.280e+03,
     &  1.262e+03,1.214e+03,1.145e+03,1.070e+03,1.001e+03,9.525e+02,
     &  9.305e+02,9.417e+02,9.903e+02,1.064e+03,1.135e+03,1.172e+03,
     &  1.149e+03,1.076e+03,9.843e+02,9.063e+02,8.682e+02,8.738e+02,
     &  9.153e+02,9.844e+02,1.067e+03,1.137e+03,1.163e+03,1.116e+03,
     &  9.905e+02,8.309e+02,6.923e+02,6.274e+02,6.541e+02,7.392e+02,
     &  8.389e+02,9.117e+02,9.419e+02,9.444e+02,9.396e+02,9.461e+02,
     &  9.702e+02,1.005e+03,1.042e+03,1.074e+03,1.097e+03,1.114e+03,
     &  1.129e+03,1.143e+03,1.153e+03,1.152e+03,1.132e+03,1.084e+03,
     &  1.017e+03,9.460e+02,8.904e+02,8.662e+02,8.765e+02,9.131e+02,
     &  9.661e+02,1.025e+03,1.080e+03,1.119e+03,1.103e+03,1.244e+03,
     &  1.210e+03,1.079e+03,8.522e+02,9.568e+02,8.423e+02,8.974e+02,
     &  1.082e+03,9.142e+02,9.931e+02,1.050e+03,8.450e+02,8.392e+02/

      data (sun2b(i),i=1,120)/
     &  8.765e+02,8.922e+02,9.131e+02,9.382e+02,9.661e+02,9.956e+02,
     &  1.025e+03,1.054e+03,1.080e+03,1.102e+03,1.119e+03,1.132e+03,
     &  1.103e+03,1.159e+03,1.244e+03,1.238e+03,1.210e+03,1.196e+03,
     &  1.079e+03,8.956e+02,8.522e+02,9.356e+02,9.568e+02,8.971e+02,
     &  8.423e+02,8.212e+02,8.974e+02,1.043e+03,1.082e+03,9.888e+02,
     &  9.142e+02,9.294e+02,9.931e+02,1.042e+03,1.050e+03,9.843e+02,
     &  8.450e+02,7.708e+02,8.392e+02,9.397e+02,1.026e+03,1.121e+03,
     &  1.163e+03,1.143e+03,1.078e+03,1.027e+03,1.078e+03,1.094e+03,
     &  9.698e+02,8.537e+02,8.499e+02,9.091e+02,9.957e+02,1.095e+03,
     &  1.147e+03,1.086e+03,1.010e+03,1.065e+03,1.129e+03,1.081e+03,
     &  9.879e+02,8.982e+02,8.352e+02,7.716e+02,6.871e+02,6.145e+02,
     &  6.061e+02,7.371e+02,9.081e+02,9.976e+02,1.081e+03,1.126e+03,
     &  1.057e+03,1.028e+03,1.142e+03,1.253e+03,1.225e+03,1.103e+03,
     &  1.039e+03,1.043e+03,1.003e+03,9.655e+02,1.035e+03,1.151e+03,
     &  1.201e+03,1.152e+03,1.069e+03,9.958e+02,8.895e+02,8.185e+02,
     &  9.070e+02,1.042e+03,1.056e+03,1.001e+03,9.720e+02,9.857e+02,
     &  1.027e+03,1.055e+03,1.078e+03,1.127e+03,1.205e+03,1.246e+03,
     &  1.201e+03,1.145e+03,1.098e+03,1.030e+03,9.268e+02,8.367e+02,
     &  8.641e+02,9.935e+02,1.075e+03,1.033e+03,1.009e+03,1.066e+03,
     &  1.067e+03,1.005e+03,9.715e+02,9.232e+02,8.157e+02,7.997e+02/
      data (sun2b(i),i=121,240)/
     &  9.462e+02,1.100e+03,1.126e+03,1.032e+03,8.951e+02,7.843e+02,
     &  7.348e+02,7.265e+02,7.269e+02,7.655e+02,8.639e+02,9.922e+02,
     &  1.071e+03,1.028e+03,8.588e+02,6.472e+02,5.632e+02,6.800e+02,
     &  9.064e+02,1.094e+03,1.155e+03,1.124e+03,1.098e+03,1.110e+03,
     &  1.076e+03,9.442e+02,8.492e+02,9.285e+02,1.062e+03,1.119e+03,
     &  1.119e+03,1.075e+03,1.006e+03,9.800e+02,9.991e+02,1.002e+03,
     &  9.398e+02,8.381e+02,8.161e+02,9.087e+02,1.015e+03,1.058e+03,
     &  1.044e+03,9.875e+02,9.463e+02,9.814e+02,1.056e+03,1.094e+03,
     &  1.028e+03,9.164e+02,9.090e+02,9.918e+02,1.050e+03,1.076e+03,
     &  1.094e+03,1.076e+03,1.015e+03,9.496e+02,9.473e+02,1.001e+03,
     &  1.052e+03,1.073e+03,1.068e+03,1.013e+03,9.078e+02,8.663e+02,
     &  9.509e+02,1.038e+03,1.080e+03,1.184e+03,1.291e+03,1.269e+03,
     &  1.199e+03,1.189e+03,1.188e+03,1.187e+03,1.198e+03,1.171e+03,
     &  1.133e+03,1.132e+03,1.096e+03,9.711e+02,8.471e+02,8.366e+02,
     &  9.228e+02,9.910e+02,9.875e+02,9.692e+02,9.815e+02,9.814e+02,
     &  9.720e+02,9.853e+02,1.003e+03,1.037e+03,1.071e+03,1.066e+03,
     &  1.027e+03,9.848e+02,1.003e+03,1.070e+03,1.118e+03,1.116e+03,
     &  1.049e+03,9.653e+02,9.723e+02,1.046e+03,1.097e+03,1.128e+03,
     &  1.134e+03,1.100e+03,1.079e+03,1.083e+03,1.027e+03,9.275e+02,
     &  8.791e+02,8.588e+02,8.310e+02,8.078e+02,7.896e+02,8.138e+02/
      data (sun2b(i),i=241,360)/
     &  8.935e+02,9.376e+02,9.016e+02,8.645e+02,8.733e+02,8.910e+02,
     &  8.625e+02,8.103e+02,7.874e+02,7.529e+02,7.153e+02,7.081e+02,
     &  7.289e+02,7.868e+02,8.077e+02,7.363e+02,6.451e+02,6.169e+02,
     &  6.492e+02,6.918e+02,7.492e+02,8.202e+02,8.207e+02,7.913e+02,
     &  8.543e+02,9.406e+02,9.564e+02,9.094e+02,8.242e+02,7.672e+02,
     &  7.221e+02,6.534e+02,6.247e+02,6.337e+02,6.551e+02,7.079e+02,
     &  7.849e+02,8.808e+02,9.612e+02,9.856e+02,9.862e+02,9.665e+02,
     &  9.215e+02,8.889e+02,8.558e+02,8.517e+02,8.868e+02,8.510e+02,
     &  7.670e+02,7.390e+02,7.245e+02,6.576e+02,5.878e+02,6.169e+02,
     &  7.606e+02,9.032e+02,9.173e+02,8.385e+02,7.848e+02,7.594e+02,
     &  7.196e+02,6.715e+02,6.246e+02,5.886e+02,5.747e+02,5.967e+02,
     &  6.980e+02,8.664e+02,9.748e+02,9.604e+02,9.301e+02,9.627e+02,
     &  1.007e+03,1.002e+03,9.263e+02,8.166e+02,7.633e+02,7.729e+02,
     &  7.627e+02,7.294e+02,7.250e+02,7.272e+02,6.727e+02,5.814e+02,
     &  5.210e+02,4.888e+02,4.786e+02,5.421e+02,6.637e+02,7.495e+02,
     &  7.859e+02,8.110e+02,8.182e+02,8.138e+02,8.245e+02,8.366e+02,
     &  7.997e+02,7.280e+02,6.604e+02,5.593e+02,4.733e+02,5.502e+02,
     &  7.520e+02,8.858e+02,9.068e+02,9.122e+02,9.293e+02,8.997e+02,
     &  8.302e+02,7.746e+02,7.364e+02,7.241e+02,7.401e+02,7.541e+02,
     &  7.650e+02,7.808e+02,7.889e+02,7.849e+02,7.588e+02,7.259e+02/
      data (sun2b(i),i=361,480)/
     &  7.518e+02,8.042e+02,7.777e+02,7.034e+02,6.653e+02,6.640e+02,
     &  6.794e+02,7.061e+02,7.576e+02,8.361e+02,8.800e+02,8.812e+02,
     &  9.079e+02,9.293e+02,8.943e+02,8.740e+02,9.186e+02,9.535e+02,
     &  9.223e+02,8.666e+02,8.365e+02,8.253e+02,7.525e+02,5.860e+02,
     &  4.275e+02,3.740e+02,4.372e+02,5.343e+02,5.567e+02,5.631e+02,
     &  6.293e+02,6.313e+02,5.188e+02,4.383e+02,4.603e+02,5.305e+02,
     &  6.085e+02,6.580e+02,6.621e+02,6.862e+02,7.752e+02,8.431e+02,
     &  7.975e+02,6.853e+02,6.113e+02,6.287e+02,7.114e+02,7.549e+02,
     &  7.288e+02,7.228e+02,7.264e+02,6.797e+02,6.658e+02,7.105e+02,
     &  7.231e+02,7.241e+02,7.602e+02,7.840e+02,7.428e+02,6.343e+02,
     &  5.465e+02,5.635e+02,6.110e+02,6.232e+02,6.654e+02,7.435e+02,
     &  7.645e+02,6.711e+02,5.132e+02,4.019e+02,4.058e+02,5.157e+02,
     &  6.399e+02,6.778e+02,6.795e+02,7.593e+02,8.481e+02,8.199e+02,
     &  7.518e+02,7.105e+02,6.153e+02,5.251e+02,5.833e+02,7.152e+02,
     &  7.675e+02,7.391e+02,6.640e+02,5.806e+02,5.728e+02,6.341e+02,
     &  6.488e+02,5.613e+02,4.977e+02,5.917e+02,7.378e+02,7.942e+02,
     &  8.025e+02,7.993e+02,7.358e+02,6.584e+02,6.595e+02,7.182e+02,
     &  7.617e+02,6.972e+02,5.451e+02,4.745e+02,5.270e+02,5.977e+02,
     &  5.847e+02,4.473e+02,2.914e+02,2.613e+02,3.303e+02,4.020e+02,
     &  4.663e+02,5.313e+02,5.723e+02,5.849e+02,5.852e+02,5.695e+02/
      data (sun2b(i),i=481,600)/
     &  5.583e+02,5.594e+02,5.120e+02,4.264e+02,3.781e+02,3.983e+02,
     &  4.735e+02,5.422e+02,5.318e+02,4.375e+02,3.419e+02,3.058e+02,
     &  2.999e+02,3.281e+02,4.400e+02,5.865e+02,6.603e+02,6.252e+02,
     &  5.103e+02,4.189e+02,4.474e+02,5.349e+02,6.059e+02,6.671e+02,
     &  6.873e+02,6.368e+02,5.496e+02,4.729e+02,4.195e+02,3.701e+02,
     &  3.280e+02,3.205e+02,3.540e+02,3.992e+02,4.510e+02,5.283e+02,
     &  6.083e+02,6.961e+02,7.743e+02,7.608e+02,6.906e+02,6.482e+02,
     &  5.806e+02,4.780e+02,4.539e+02,4.887e+02,4.640e+02,4.216e+02,
     &  4.443e+02,4.466e+02,3.760e+02,3.421e+02,3.975e+02,5.110e+02,
     &  6.464e+02,7.251e+02,7.031e+02,6.391e+02,6.191e+02,6.547e+02,
     &  6.660e+02,6.114e+02,5.802e+02,6.073e+02,5.910e+02,5.423e+02,
     &  5.838e+02,6.730e+02,6.732e+02,5.824e+02,4.657e+02,3.773e+02,
     &  3.770e+02,4.873e+02,6.079e+02,6.175e+02,5.835e+02,6.017e+02,
     &  6.159e+02,5.755e+02,5.416e+02,5.421e+02,5.223e+02,4.725e+02,
     &  4.233e+02,4.381e+02,5.567e+02,6.643e+02,6.699e+02,6.575e+02,
     &  6.847e+02,7.057e+02,6.831e+02,6.008e+02,5.099e+02,4.976e+02,
     &  5.111e+02,4.961e+02,5.003e+02,5.187e+02,5.299e+02,5.630e+02,
     &  6.092e+02,6.265e+02,6.221e+02,6.157e+02,6.004e+02,5.913e+02,
     &  5.981e+02,5.931e+02,5.909e+02,6.316e+02,6.965e+02,7.185e+02,
     &  6.761e+02,6.316e+02,6.196e+02,6.205e+02,6.241e+02,6.366e+02/
      data (sun2b(i),i=601,720)/
     &  6.580e+02,6.888e+02,7.248e+02,7.426e+02,7.223e+02,6.759e+02,
     &  6.660e+02,7.047e+02,7.037e+02,6.450e+02,5.983e+02,5.878e+02,
     &  5.909e+02,5.759e+02,5.280e+02,4.779e+02,4.575e+02,4.568e+02,
     &  4.549e+02,4.486e+02,4.455e+02,4.454e+02,4.444e+02,4.460e+02,
     &  4.559e+02,4.680e+02,4.543e+02,3.933e+02,3.012e+02,2.114e+02,
     &  1.671e+02,1.940e+02,2.540e+02,3.054e+02,3.530e+02,3.851e+02,
     &  3.870e+02,3.916e+02,4.062e+02,4.153e+02,4.353e+02,4.698e+02,
     &  4.921e+02,4.727e+02,4.099e+02,3.533e+02,3.407e+02,3.553e+02,
     &  3.798e+02,4.018e+02,4.097e+02,4.069e+02,3.932e+02,3.789e+02,
     &  3.752e+02,3.735e+02,3.602e+02,3.228e+02,2.735e+02,2.378e+02,
     &  2.123e+02,1.848e+02,1.562e+02,1.278e+02,9.627e+01,6.881e+01,
     &  6.205e+01,7.714e+01,1.005e+02,1.276e+02,1.599e+02,1.941e+02,
     &  2.252e+02,2.546e+02,2.858e+02,3.001e+02,2.944e+02,3.089e+02,
     &  3.408e+02,3.463e+02,3.363e+02,3.475e+02,3.738e+02,3.888e+02,
     &  3.727e+02,3.253e+02,2.944e+02,3.176e+02,3.603e+02,3.781e+02,
     &  3.742e+02,3.740e+02,3.833e+02,3.879e+02,3.775e+02,3.570e+02,
     &  3.407e+02,3.287e+02,3.140e+02,3.169e+02,3.445e+02,3.555e+02,
     &  3.357e+02,3.187e+02,3.186e+02,3.224e+02,3.186e+02,3.049e+02,
     &  2.848e+02,2.681e+02,2.658e+02,2.735e+02,2.742e+02,2.524e+02,
     &  2.150e+02,1.886e+02,1.813e+02,1.813e+02,1.808e+02,1.752e+02/
      data (sun2b(i),i=721,840)/
     &  1.621e+02,1.451e+02,1.288e+02,1.138e+02,9.808e+01,8.307e+01,
     &  7.622e+01,7.836e+01,7.843e+01,7.424e+01,7.584e+01,8.032e+01,
     &  7.786e+01,7.030e+01,6.465e+01,6.705e+01,7.781e+01,8.317e+01,
     &  7.529e+01,7.120e+01,8.055e+01,9.201e+01,1.002e+02,1.086e+02,
     &  1.194e+02,1.308e+02,1.423e+02,1.589e+02,1.771e+02,1.864e+02,
     &  1.866e+02,1.815e+02,1.753e+02,1.755e+02,1.790e+02,1.770e+02,
     &  1.726e+02,1.727e+02,1.790e+02,1.938e+02,2.151e+02,2.336e+02,
     &  2.521e+02,2.777e+02,2.989e+02,2.984e+02,2.808e+02,2.742e+02,
     &  2.865e+02,2.855e+02,2.597e+02,2.414e+02,2.470e+02,2.599e+02,
     &  2.743e+02,2.985e+02,3.169e+02,3.032e+02,2.637e+02,2.293e+02,
     &  2.279e+02,2.561e+02,2.816e+02,3.002e+02,3.106e+02,2.795e+02,
     &  2.119e+02,1.522e+02,1.299e+02,1.475e+02,1.816e+02,2.154e+02,
     &  2.395e+02,2.331e+02,1.916e+02,1.394e+02,1.105e+02,1.189e+02,
     &  1.348e+02,1.291e+02,1.244e+02,1.435e+02,1.583e+02,1.418e+02,
     &  1.163e+02,1.116e+02,1.289e+02,1.492e+02,1.534e+02,1.456e+02,
     &  1.485e+02,1.593e+02,1.558e+02,1.542e+02,1.773e+02,2.034e+02,
     &  2.074e+02,2.053e+02,2.229e+02,2.532e+02,2.713e+02,2.793e+02,
     &  3.022e+02,3.215e+02,2.888e+02,2.301e+02,2.064e+02,2.132e+02,
     &  2.165e+02,2.075e+02,1.962e+02,1.952e+02,2.020e+02,1.943e+02,
     &  1.649e+02,1.366e+02,1.239e+02,1.281e+02,1.619e+02,2.170e+02/
      data (sun2b(i),i=841,960)/
     &  2.537e+02,2.493e+02,2.229e+02,2.131e+02,2.436e+02,2.931e+02,
     &  3.094e+02,2.864e+02,2.696e+02,2.722e+02,2.717e+02,2.658e+02,
     &  2.656e+02,2.648e+02,2.660e+02,2.895e+02,3.257e+02,3.373e+02,
     &  3.212e+02,3.003e+02,2.826e+02,2.871e+02,3.221e+02,3.358e+02,
     &  2.972e+02,2.541e+02,2.435e+02,2.395e+02,2.193e+02,2.119e+02,
     &  2.393e+02,2.714e+02,2.794e+02,2.723e+02,2.648e+02,2.505e+02,
     &  2.299e+02,2.221e+02,2.353e+02,2.568e+02,2.753e+02,2.869e+02,
     &  2.849e+02,2.695e+02,2.551e+02,2.535e+02,2.632e+02,2.748e+02,
     &  2.792e+02,2.702e+02,2.494e+02,2.290e+02,2.216e+02,2.314e+02,
     &  2.527e+02,2.806e+02,3.101e+02,3.283e+02,3.250e+02,2.903e+02,
     &  2.390e+02,2.234e+02,2.572e+02,2.826e+02,2.643e+02,2.433e+02,
     &  2.532e+02,2.729e+02,2.713e+02,2.561e+02,2.602e+02,2.714e+02,
     &  2.571e+02,2.366e+02,2.387e+02,2.489e+02,2.559e+02,2.720e+02,
     &  2.918e+02,2.974e+02,2.881e+02,2.833e+02,2.929e+02,3.017e+02,
     &  3.091e+02,3.220e+02,3.204e+02,2.954e+02,2.696e+02,2.544e+02,
     &  2.409e+02,2.282e+02,2.212e+02,2.137e+02,2.012e+02,1.972e+02,
     &  2.123e+02,2.334e+02,2.476e+02,2.617e+02,2.862e+02,3.225e+02,
     &  3.495e+02,3.383e+02,2.971e+02,2.615e+02,2.523e+02,2.646e+02,
     &  2.869e+02,2.989e+02,2.805e+02,2.444e+02,2.135e+02,1.930e+02,
     &  1.821e+02,1.685e+02,1.431e+02,1.141e+02,8.961e+01,7.359e+01/
      data (sun2b(i),i=961,1080)/
     &  7.399e+01,8.791e+01,9.626e+01,9.481e+01,9.660e+01,1.023e+02,
     &  1.022e+02,1.031e+02,1.178e+02,1.374e+02,1.461e+02,1.443e+02,
     &  1.379e+02,1.281e+02,1.228e+02,1.282e+02,1.307e+02,1.173e+02,
     &  9.891e+01,9.340e+01,1.056e+02,1.227e+02,1.264e+02,1.131e+02,
     &  9.232e+01,7.634e+01,6.903e+01,6.632e+01,7.128e+01,8.743e+01,
     &  1.059e+02,1.140e+02,1.079e+02,9.187e+01,7.521e+01,6.912e+01,
     &  7.593e+01,9.093e+01,1.097e+02,1.257e+02,1.358e+02,1.411e+02,
     &  1.381e+02,1.213e+02,9.181e+01,6.350e+01,5.211e+01,5.956e+01,
     &  8.101e+01,1.067e+02,1.190e+02,1.164e+02,1.108e+02,1.009e+02,
     &  8.906e+01,9.043e+01,1.044e+02,1.149e+02,1.248e+02,1.489e+02,
     &  1.717e+02,1.672e+02,1.423e+02,1.184e+02,9.865e+01,7.891e+01,
     &  6.813e+01,7.729e+01,1.009e+02,1.201e+02,1.255e+02,1.318e+02,
     &  1.557e+02,1.808e+02,1.818e+02,1.668e+02,1.501e+02,1.332e+02,
     &  1.161e+02,9.773e+01,8.163e+01,7.669e+01,8.761e+01,1.102e+02,
     &  1.349e+02,1.491e+02,1.476e+02,1.399e+02,1.352e+02,1.351e+02,
     &  1.380e+02,1.367e+02,1.288e+02,1.222e+02,1.205e+02,1.220e+02,
     &  1.231e+02,1.163e+02,1.014e+02,8.630e+01,7.472e+01,6.880e+01,
     &  7.133e+01,8.063e+01,9.049e+01,9.674e+01,1.007e+02,1.008e+02,
     &  9.368e+01,8.474e+01,8.153e+01,8.289e+01,8.456e+01,8.758e+01,
     &  9.178e+01,9.127e+01,8.701e+01,8.739e+01,9.015e+01,8.492e+01/
      data (sun2b(i),i=1081,1200)/
     &  7.127e+01,5.787e+01,5.186e+01,5.388e+01,5.791e+01,5.851e+01,
     &  5.702e+01,5.743e+01,6.067e+01,6.467e+01,6.736e+01,6.751e+01,
     &  6.423e+01,5.903e+01,5.570e+01,5.664e+01,5.940e+01,5.907e+01,
     &  5.652e+01,5.583e+01,5.586e+01,5.404e+01,5.198e+01,5.234e+01,
     &  5.467e+01,5.645e+01,5.675e+01,5.677e+01,5.800e+01,6.003e+01,
     &  5.960e+01,5.313e+01,4.293e+01,3.559e+01,3.345e+01,3.517e+01,
     &  3.938e+01,4.437e+01,4.774e+01,4.693e+01,4.244e+01,3.788e+01,
     &  3.560e+01,3.646e+01,4.105e+01,4.730e+01,5.110e+01,5.002e+01,
     &  4.533e+01,4.128e+01,4.008e+01,4.000e+01,3.910e+01,3.733e+01,
     &  3.663e+01,3.779e+01,3.919e+01,4.106e+01,4.521e+01,5.074e+01,
     &  5.428e+01,5.501e+01,5.614e+01,6.093e+01,6.738e+01,6.953e+01,
     &  6.516e+01,5.637e+01,4.733e+01,4.432e+01,4.994e+01,5.970e+01,
     &  6.793e+01,7.133e+01,6.990e+01,6.562e+01,5.930e+01,5.402e+01,
     &  5.588e+01,6.515e+01,7.407e+01,7.622e+01,7.351e+01,7.141e+01,
     &  7.085e+01,6.975e+01,6.927e+01,7.138e+01,7.272e+01,6.893e+01,
     &  6.167e+01,5.490e+01,4.742e+01,3.833e+01,3.222e+01,3.124e+01,
     &  3.331e+01,3.536e+01,3.562e+01,3.684e+01,4.155e+01,4.750e+01,
     &  5.118e+01,5.034e+01,4.536e+01,3.834e+01,3.313e+01,3.380e+01,
     &  4.014e+01,4.912e+01,5.538e+01,5.517e+01,5.045e+01,4.651e+01,
     &  4.749e+01,5.188e+01,5.635e+01,5.960e+01,6.158e+01,6.322e+01/
      data (sun2b(i),i=1201,1320)/
     &  6.460e+01,6.410e+01,5.903e+01,5.096e+01,4.763e+01,5.254e+01,
     &  5.888e+01,5.983e+01,5.762e+01,5.673e+01,5.737e+01,5.790e+01,
     &  5.718e+01,5.513e+01,5.295e+01,5.202e+01,5.219e+01,5.204e+01,
     &  5.027e+01,4.659e+01,4.251e+01,4.076e+01,4.189e+01,4.412e+01,
     &  4.654e+01,4.886e+01,5.049e+01,5.192e+01,5.408e+01,5.471e+01,
     &  5.193e+01,4.945e+01,4.987e+01,5.093e+01,5.050e+01,4.862e+01,
     &  4.672e+01,4.607e+01,4.626e+01,4.673e+01,4.801e+01,5.019e+01,
     &  5.242e+01,5.354e+01,5.251e+01,5.138e+01,5.321e+01,5.699e+01,
     &  6.061e+01,6.314e+01,6.400e+01,6.387e+01,6.510e+01,6.939e+01,
     &  7.474e+01,7.818e+01,7.810e+01,7.411e+01,6.737e+01,6.085e+01,
     &  5.892e+01,6.268e+01,6.803e+01,6.912e+01,6.460e+01,5.911e+01,
     &  5.600e+01,5.684e+01,6.178e+01,6.587e+01,6.508e+01,6.304e+01,
     &  6.481e+01,6.991e+01,7.484e+01,7.644e+01,7.359e+01,6.885e+01,
     &  6.750e+01,7.268e+01,8.060e+01,8.342e+01,7.896e+01,7.223e+01,
     &  6.674e+01,6.284e+01,6.153e+01,6.357e+01,6.925e+01,7.658e+01,
     &  7.992e+01,7.775e+01,7.394e+01,7.052e+01,6.800e+01,6.634e+01,
     &  6.398e+01,6.110e+01,5.942e+01,5.810e+01,5.574e+01,5.255e+01,
     &  4.808e+01,4.258e+01,3.837e+01,3.730e+01,3.746e+01,3.486e+01,
     &  3.048e+01,2.963e+01,3.473e+01,4.246e+01,4.707e+01,4.585e+01,
     &  4.016e+01,3.429e+01,3.158e+01,3.065e+01,2.905e+01,2.779e+01/
      data (sun2b(i),i=1321,1440)/
     &  3.043e+01,3.757e+01,4.420e+01,4.688e+01,4.785e+01,4.917e+01,
     &  4.918e+01,4.500e+01,3.813e+01,3.506e+01,3.810e+01,4.175e+01,
     &  4.090e+01,3.572e+01,2.888e+01,2.483e+01,2.867e+01,3.965e+01,
     &  5.031e+01,5.572e+01,5.740e+01,5.811e+01,5.941e+01,5.936e+01,
     &  5.342e+01,4.300e+01,3.479e+01,3.370e+01,3.968e+01,4.755e+01,
     &  5.260e+01,5.363e+01,5.100e+01,4.527e+01,3.784e+01,3.103e+01,
     &  2.594e+01,2.280e+01,2.188e+01,2.348e+01,2.786e+01,3.345e+01,
     &  3.732e+01,3.919e+01,4.283e+01,5.040e+01,5.875e+01,6.330e+01,
     &  6.109e+01,5.353e+01,4.605e+01,4.112e+01,3.765e+01,3.630e+01,
     &  4.043e+01,5.089e+01,6.155e+01,6.539e+01,6.268e+01,5.809e+01,
     &  5.462e+01,5.133e+01,4.687e+01,4.287e+01,4.055e+01,3.976e+01,
     &  4.022e+01,4.036e+01,3.956e+01,4.067e+01,4.626e+01,5.341e+01,
     &  5.604e+01,5.257e+01,4.667e+01,4.107e+01,3.551e+01,3.123e+01,
     &  3.108e+01,3.596e+01,4.520e+01,5.546e+01,6.180e+01,6.351e+01,
     &  6.185e+01,5.641e+01,4.939e+01,4.637e+01,5.006e+01,5.669e+01,
     &  6.088e+01,6.103e+01,5.811e+01,5.430e+01,5.194e+01,5.051e+01,
     &  4.675e+01,3.915e+01,3.153e+01,2.896e+01,3.097e+01,3.267e+01,
     &  3.157e+01,2.934e+01,2.727e+01,2.518e+01,2.426e+01,2.707e+01,
     &  3.430e+01,4.247e+01,4.723e+01,4.742e+01,4.444e+01,4.054e+01,
     &  3.687e+01,3.302e+01,2.941e+01,2.875e+01,3.408e+01,4.425e+01/
      data (sun2b(i),i=1441,1560)/
     &  5.378e+01,5.797e+01,5.638e+01,5.120e+01,4.531e+01,4.027e+01,
     &  3.590e+01,3.334e+01,3.401e+01,3.686e+01,4.128e+01,4.737e+01,
     &  5.309e+01,5.620e+01,5.563e+01,5.084e+01,4.400e+01,3.877e+01,
     &  3.625e+01,3.638e+01,4.076e+01,5.070e+01,6.337e+01,7.343e+01,
     &  7.642e+01,7.037e+01,5.874e+01,4.703e+01,3.860e+01,3.466e+01,
     &  3.579e+01,4.208e+01,4.997e+01,5.434e+01,5.396e+01,5.229e+01,
     &  5.278e+01,5.557e+01,5.903e+01,6.027e+01,5.625e+01,4.736e+01,
     &  3.806e+01,3.289e+01,3.174e+01,3.173e+01,3.248e+01,3.506e+01,
     &  3.909e+01,4.340e+01,4.813e+01,5.357e+01,5.875e+01,6.360e+01,
     &  6.897e+01,7.342e+01,7.386e+01,6.900e+01,6.056e+01,5.187e+01,
     &  4.488e+01,4.206e+01,4.480e+01,4.795e+01,4.688e+01,4.297e+01,
     &  3.929e+01,3.771e+01,3.714e+01,3.522e+01,3.224e+01,3.049e+01,
     &  3.260e+01,4.043e+01,5.110e+01,5.771e+01,5.715e+01,5.299e+01,
     &  5.028e+01,4.999e+01,4.978e+01,4.837e+01,4.642e+01,4.460e+01,
     &  4.273e+01,4.124e+01,4.156e+01,4.381e+01,4.701e+01,4.899e+01,
     &  4.643e+01,4.060e+01,3.784e+01,4.235e+01,5.225e+01,6.053e+01,
     &  6.157e+01,5.680e+01,5.204e+01,5.226e+01,5.708e+01,6.102e+01,
     &  6.071e+01,5.705e+01,5.148e+01,4.635e+01,4.437e+01,4.495e+01,
     &  4.548e+01,4.494e+01,4.383e+01,4.210e+01,3.947e+01,3.683e+01,
     &  3.591e+01,3.636e+01,3.566e+01,3.395e+01,3.369e+01,3.443e+01/
      data (sun2b(i),i=1561,1680)/
     &  3.400e+01,3.265e+01,3.141e+01,3.028e+01,2.941e+01,2.913e+01,
     &  2.933e+01,2.987e+01,3.060e+01,3.131e+01,3.210e+01,3.278e+01,
     &  3.276e+01,3.210e+01,3.198e+01,3.348e+01,3.605e+01,3.917e+01,
     &  4.337e+01,4.724e+01,4.821e+01,4.579e+01,4.159e+01,3.878e+01,
     &  4.075e+01,4.675e+01,5.168e+01,5.260e+01,5.145e+01,5.068e+01,
     &  4.945e+01,4.675e+01,4.537e+01,4.769e+01,5.024e+01,4.896e+01,
     &  4.669e+01,4.860e+01,5.369e+01,5.647e+01,5.434e+01,5.072e+01,
     &  4.988e+01,5.125e+01,5.209e+01,5.276e+01,5.625e+01,6.333e+01,
     &  6.974e+01,7.107e+01,6.835e+01,6.512e+01,6.255e+01,5.919e+01,
     &  5.371e+01,4.816e+01,4.624e+01,4.771e+01,4.966e+01,5.080e+01,
     &  5.184e+01,5.454e+01,5.965e+01,6.471e+01,6.584e+01,6.163e+01,
     &  5.557e+01,5.408e+01,5.878e+01,6.489e+01,6.978e+01,7.401e+01,
     &  7.649e+01,7.623e+01,7.475e+01,7.494e+01,7.780e+01,7.962e+01,
     &  7.619e+01,6.719e+01,5.523e+01,4.581e+01,4.314e+01,4.565e+01,
     &  4.947e+01,5.223e+01,5.222e+01,4.889e+01,4.472e+01,4.261e+01,
     &  4.338e+01,4.597e+01,4.812e+01,4.900e+01,4.988e+01,5.071e+01,
     &  4.989e+01,4.832e+01,4.820e+01,5.028e+01,5.383e+01,5.591e+01,
     &  5.482e+01,5.294e+01,5.194e+01,4.944e+01,4.296e+01,3.461e+01,
     &  2.810e+01,2.450e+01,2.420e+01,2.784e+01,3.460e+01,4.162e+01,
     &  4.532e+01,4.544e+01,4.553e+01,4.718e+01,4.576e+01,3.686e+01/
      data (sun2b(i),i=1681,1800)/
     &  2.604e+01,2.057e+01,2.033e+01,2.426e+01,3.086e+01,3.594e+01,
     &  3.671e+01,3.569e+01,3.726e+01,4.086e+01,4.442e+01,4.880e+01,
     &  5.418e+01,5.765e+01,5.843e+01,5.997e+01,6.394e+01,6.682e+01,
     &  6.546e+01,5.948e+01,4.940e+01,3.942e+01,3.418e+01,3.539e+01,
     &  4.288e+01,5.203e+01,5.760e+01,5.909e+01,5.727e+01,5.217e+01,
     &  4.549e+01,3.942e+01,3.558e+01,3.590e+01,4.035e+01,4.673e+01,
     &  5.331e+01,5.878e+01,6.178e+01,5.926e+01,5.003e+01,4.157e+01,
     &  4.052e+01,4.358e+01,4.488e+01,4.275e+01,4.008e+01,3.994e+01,
     &  4.098e+01,3.957e+01,3.496e+01,3.042e+01,3.104e+01,3.869e+01,
     &  4.748e+01,4.983e+01,4.679e+01,4.483e+01,4.655e+01,5.042e+01,
     &  5.460e+01,5.766e+01,5.846e+01,5.728e+01,5.562e+01,5.451e+01,
     &  5.334e+01,5.003e+01,4.282e+01,3.364e+01,2.713e+01,2.552e+01,
     &  2.790e+01,3.139e+01,3.213e+01,2.946e+01,2.658e+01,2.596e+01,
     &  2.774e+01,3.117e+01,3.496e+01,3.767e+01,3.864e+01,3.796e+01,
     &  3.673e+01,3.568e+01,3.388e+01,3.085e+01,2.806e+01,2.761e+01,
     &  2.932e+01,2.938e+01,2.539e+01,2.066e+01,1.948e+01,2.230e+01,
     &  2.728e+01,3.247e+01,3.591e+01,3.714e+01,3.790e+01,3.913e+01,
     &  3.978e+01,3.987e+01,4.078e+01,4.232e+01,4.293e+01,4.043e+01,
     &  3.423e+01,2.770e+01,2.388e+01,2.217e+01,2.164e+01,2.259e+01,
     &  2.518e+01,2.902e+01,3.298e+01,3.611e+01,3.858e+01,4.124e+01/
      data (sun2b(i),i=1801,1920)/
     &  4.443e+01,4.694e+01,4.701e+01,4.417e+01,3.966e+01,3.556e+01,
     &  3.284e+01,3.155e+01,3.268e+01,3.696e+01,4.233e+01,4.493e+01,
     &  4.370e+01,4.094e+01,3.797e+01,3.520e+01,3.357e+01,3.334e+01,
     &  3.419e+01,3.635e+01,3.996e+01,4.396e+01,4.716e+01,4.899e+01,
     &  4.898e+01,4.795e+01,4.800e+01,4.989e+01,5.106e+01,4.783e+01,
     &  4.049e+01,3.267e+01,2.680e+01,2.446e+01,2.666e+01,3.193e+01,
     &  3.763e+01,4.135e+01,4.096e+01,3.683e+01,3.211e+01,2.861e+01,
     &  2.648e+01,2.660e+01,2.883e+01,3.088e+01,3.098e+01,3.006e+01,
     &  2.989e+01,3.031e+01,2.997e+01,2.826e+01,2.652e+01,2.707e+01,
     &  3.040e+01,3.454e+01,3.710e+01,3.760e+01,3.725e+01,3.706e+01,
     &  3.650e+01,3.417e+01,2.981e+01,2.419e+01,1.851e+01,1.509e+01,
     &  1.504e+01,1.716e+01,2.081e+01,2.568e+01,3.035e+01,3.420e+01,
     &  3.790e+01,4.253e+01,4.783e+01,5.051e+01,4.802e+01,4.262e+01,
     &  3.832e+01,3.737e+01,4.017e+01,4.440e+01,4.613e+01,4.391e+01,
     &  3.840e+01,3.138e+01,2.627e+01,2.508e+01,2.665e+01,2.896e+01,
     &  3.117e+01,3.417e+01,3.805e+01,4.023e+01,3.835e+01,3.274e+01,
     &  2.620e+01,2.186e+01,2.025e+01,2.018e+01,2.173e+01,2.556e+01,
     &  3.032e+01,3.343e+01,3.445e+01,3.496e+01,3.637e+01,3.787e+01,
     &  3.665e+01,3.197e+01,2.592e+01,2.126e+01,2.066e+01,2.466e+01,
     &  3.026e+01,3.402e+01,3.434e+01,3.136e+01,2.693e+01,2.311e+01/
      data (sun2b(i),i=1921,2040)/
     &  2.087e+01,2.068e+01,2.242e+01,2.488e+01,2.678e+01,2.733e+01,
     &  2.654e+01,2.521e+01,2.401e+01,2.294e+01,2.180e+01,2.045e+01,
     &  1.929e+01,1.953e+01,2.174e+01,2.413e+01,2.399e+01,2.156e+01,
     &  1.956e+01,1.892e+01,1.834e+01,1.733e+01,1.655e+01,1.648e+01,
     &  1.721e+01,1.844e+01,1.929e+01,1.898e+01,1.791e+01,1.716e+01,
     &  1.710e+01,1.726e+01,1.692e+01,1.584e+01,1.448e+01,1.368e+01,
     &  1.365e+01,1.391e+01,1.401e+01,1.377e+01,1.346e+01,1.340e+01,
     &  1.355e+01,1.376e+01,1.406e+01,1.443e+01,1.464e+01,1.444e+01,
     &  1.399e+01,1.375e+01,1.393e+01,1.439e+01,1.476e+01,1.482e+01,
     &  1.468e+01,1.445e+01,1.419e+01,1.394e+01,1.375e+01,1.366e+01,
     &  1.354e+01,1.331e+01,1.305e+01,1.284e+01,1.270e+01,1.274e+01,
     &  1.281e+01,1.266e+01,1.235e+01,1.210e+01,1.200e+01,1.201e+01,
     &  1.207e+01,1.222e+01,1.244e+01,1.247e+01,1.216e+01,1.173e+01,
     &  1.152e+01,1.162e+01,1.187e+01,1.203e+01,1.195e+01,1.172e+01,
     &  1.140e+01,1.093e+01,1.047e+01,1.020e+01,1.022e+01,1.069e+01,
     &  1.147e+01,1.201e+01,1.208e+01,1.190e+01,1.150e+01,1.089e+01,
     &  1.057e+01,1.085e+01,1.135e+01,1.161e+01,1.141e+01,1.088e+01,
     &  1.038e+01,1.031e+01,1.069e+01,1.124e+01,1.164e+01,1.183e+01,
     &  1.192e+01,1.186e+01,1.167e+01,1.151e+01,1.141e+01,1.130e+01,
     &  1.122e+01,1.114e+01,1.104e+01,1.098e+01,1.100e+01,1.090e+01/
      data (sun2b(i),i=2041,2160)/
     &  1.065e+01,1.056e+01,1.078e+01,1.119e+01,1.160e+01,1.181e+01,
     &  1.158e+01,1.106e+01,1.057e+01,1.034e+01,1.041e+01,1.073e+01,
     &  1.116e+01,1.154e+01,1.165e+01,1.137e+01,1.093e+01,1.052e+01,
     &  9.997e+00,9.378e+00,8.988e+00,9.016e+00,9.413e+00,9.918e+00,
     &  1.028e+01,1.047e+01,1.055e+01,1.057e+01,1.052e+01,1.022e+01,
     &  9.682e+00,9.150e+00,8.706e+00,8.389e+00,8.344e+00,8.624e+00,
     &  9.137e+00,9.718e+00,1.019e+01,1.044e+01,1.046e+01,1.029e+01,
     &  9.977e+00,9.583e+00,9.310e+00,9.319e+00,9.469e+00,9.518e+00,
     &  9.433e+00,9.248e+00,8.820e+00,7.981e+00,7.000e+00,6.486e+00,
     &  6.746e+00,7.541e+00,8.281e+00,8.726e+00,9.068e+00,9.167e+00,
     &  8.864e+00,8.464e+00,8.239e+00,8.166e+00,8.188e+00,8.358e+00,
     &  8.649e+00,8.898e+00,9.012e+00,9.066e+00,9.196e+00,9.421e+00,
     &  9.553e+00,9.424e+00,9.129e+00,8.844e+00,8.614e+00,8.424e+00,
     &  8.298e+00,8.260e+00,8.286e+00,8.347e+00,8.453e+00,8.628e+00,
     &  8.831e+00,8.887e+00,8.675e+00,8.331e+00,8.009e+00,7.730e+00,
     &  7.624e+00,7.869e+00,8.273e+00,8.409e+00,8.252e+00,8.091e+00,
     &  8.000e+00,7.937e+00,7.927e+00,7.958e+00,8.049e+00,8.238e+00,
     &  8.426e+00,8.481e+00,8.331e+00,8.026e+00,7.763e+00,7.699e+00,
     &  7.812e+00,7.939e+00,8.018e+00,8.082e+00,8.043e+00,7.892e+00,
     &  7.696e+00,7.497e+00,7.401e+00,7.429e+00,7.449e+00,7.406e+00/
      data (sun2b(i),i=2161,2280)/
     &  7.420e+00,7.526e+00,7.525e+00,7.324e+00,7.126e+00,7.142e+00,
     &  7.334e+00,7.505e+00,7.548e+00,7.532e+00,7.516e+00,7.499e+00,
     &  7.573e+00,7.810e+00,8.059e+00,8.095e+00,7.914e+00,7.698e+00,
     &  7.512e+00,7.214e+00,6.806e+00,6.543e+00,6.523e+00,6.587e+00,
     &  6.561e+00,6.398e+00,6.189e+00,6.059e+00,6.068e+00,6.199e+00,
     &  6.314e+00,6.253e+00,6.093e+00,6.028e+00,6.094e+00,6.303e+00,
     &  6.659e+00,6.940e+00,6.957e+00,6.831e+00,6.737e+00,6.681e+00,
     &  6.656e+00,6.834e+00,7.202e+00,7.401e+00,7.295e+00,7.049e+00,
     &  6.797e+00,6.629e+00,6.587e+00,6.598e+00,6.601e+00,6.650e+00,
     &  6.763e+00,6.785e+00,6.632e+00,6.486e+00,6.520e+00,6.649e+00,
     &  6.727e+00,6.723e+00,6.670e+00,6.619e+00,6.598e+00,6.619e+00,
     &  6.711e+00,6.834e+00,6.875e+00,6.825e+00,6.788e+00,6.827e+00,
     &  6.856e+00,6.807e+00,6.838e+00,7.047e+00,7.278e+00,7.414e+00,
     &  7.471e+00,7.462e+00,7.407e+00,7.359e+00,7.337e+00,7.322e+00,
     &  7.294e+00,7.253e+00,7.205e+00,7.134e+00,7.030e+00,6.853e+00,
     &  6.554e+00,6.223e+00,6.014e+00,5.938e+00,5.904e+00,5.857e+00,
     &  5.791e+00,5.733e+00,5.774e+00,5.961e+00,6.187e+00,6.368e+00,
     &  6.500e+00,6.544e+00,6.464e+00,6.271e+00,6.045e+00,5.956e+00,
     &  6.085e+00,6.254e+00,6.245e+00,6.080e+00,5.910e+00,5.845e+00,
     &  5.922e+00,6.106e+00,6.290e+00,6.327e+00,6.110e+00,5.742e+00/
      data (sun2b(i),i=2281,2400)/
     &  5.445e+00,5.298e+00,5.326e+00,5.494e+00,5.682e+00,5.825e+00,
     &  5.893e+00,5.963e+00,6.170e+00,6.452e+00,6.633e+00,6.696e+00,
     &  6.719e+00,6.624e+00,6.311e+00,5.924e+00,5.699e+00,5.665e+00,
     &  5.743e+00,5.879e+00,5.971e+00,5.962e+00,5.967e+00,6.075e+00,
     &  6.254e+00,6.430e+00,6.497e+00,6.456e+00,6.408e+00,6.302e+00,
     &  6.014e+00,5.643e+00,5.396e+00,5.299e+00,5.264e+00,5.223e+00,
     &  5.128e+00,4.931e+00,4.635e+00,4.317e+00,4.015e+00,3.662e+00,
     &  3.291e+00,3.103e+00,3.135e+00,3.199e+00,3.260e+00,3.414e+00,
     &  3.595e+00,3.653e+00,3.630e+00,3.628e+00,3.588e+00,3.429e+00,
     &  3.266e+00,3.228e+00,3.258e+00,3.300e+00,3.454e+00,3.737e+00,
     &  4.057e+00,4.356e+00,4.600e+00,4.778e+00,4.885e+00,4.900e+00,
     &  4.839e+00,4.762e+00,4.706e+00,4.698e+00,4.767e+00,4.845e+00,
     &  4.824e+00,4.729e+00,4.686e+00,4.713e+00,4.773e+00,4.871e+00,
     &  4.960e+00,4.953e+00,4.896e+00,4.925e+00,5.074e+00,5.223e+00,
     &  5.251e+00,5.154e+00,5.016e+00,4.888e+00,4.769e+00,4.655e+00,
     &  4.553e+00,4.483e+00,4.466e+00,4.504e+00,4.590e+00,4.703e+00,
     &  4.786e+00,4.833e+00,4.928e+00,5.038e+00,5.006e+00,4.847e+00,
     &  4.683e+00,4.559e+00,4.481e+00,4.431e+00,4.390e+00,4.383e+00,
     &  4.407e+00,4.390e+00,4.297e+00,4.198e+00,4.146e+00,4.108e+00,
     &  4.149e+00,4.390e+00,4.686e+00,4.821e+00,4.794e+00,4.678e+00/
      data (sun2b(i),i=2401,2520)/
     &  4.522e+00,4.396e+00,4.336e+00,4.295e+00,4.226e+00,4.145e+00,
     &  4.106e+00,4.146e+00,4.215e+00,4.255e+00,4.306e+00,4.374e+00,
     &  4.374e+00,4.272e+00,4.139e+00,4.041e+00,3.946e+00,3.813e+00,
     &  3.710e+00,3.734e+00,3.859e+00,3.960e+00,3.953e+00,3.838e+00,
     &  3.671e+00,3.536e+00,3.493e+00,3.537e+00,3.638e+00,3.789e+00,
     &  3.967e+00,4.100e+00,4.142e+00,4.130e+00,4.123e+00,4.162e+00,
     &  4.251e+00,4.295e+00,4.223e+00,4.099e+00,3.968e+00,3.947e+00,
     &  4.196e+00,4.513e+00,4.610e+00,4.513e+00,4.347e+00,4.175e+00,
     &  4.047e+00,3.996e+00,4.008e+00,4.037e+00,4.025e+00,3.938e+00,
     &  3.819e+00,3.753e+00,3.767e+00,3.826e+00,3.865e+00,3.852e+00,
     &  3.815e+00,3.803e+00,3.810e+00,3.793e+00,3.766e+00,3.794e+00,
     &  3.869e+00,3.898e+00,3.886e+00,3.892e+00,3.857e+00,3.694e+00,
     &  3.469e+00,3.322e+00,3.282e+00,3.289e+00,3.304e+00,3.322e+00,
     &  3.331e+00,3.333e+00,3.348e+00,3.381e+00,3.419e+00,3.460e+00,
     &  3.497e+00,3.515e+00,3.516e+00,3.516e+00,3.526e+00,3.541e+00,
     &  3.548e+00,3.534e+00,3.534e+00,3.582e+00,3.640e+00,3.645e+00,
     &  3.587e+00,3.511e+00,3.480e+00,3.526e+00,3.624e+00,3.729e+00,
     &  3.802e+00,3.802e+00,3.727e+00,3.658e+00,3.644e+00,3.642e+00,
     &  3.637e+00,3.640e+00,3.641e+00,3.649e+00,3.661e+00,3.625e+00,
     &  3.521e+00,3.402e+00,3.284e+00,3.123e+00,2.948e+00,2.852e+00/
      data (sun2b(i),i=2521,2640)/
     &  2.843e+00,2.864e+00,2.897e+00,2.951e+00,3.003e+00,3.055e+00,
     &  3.111e+00,3.118e+00,3.060e+00,2.985e+00,2.932e+00,2.890e+00,
     &  2.859e+00,2.850e+00,2.845e+00,2.812e+00,2.763e+00,2.742e+00,
     &  2.767e+00,2.802e+00,2.816e+00,2.811e+00,2.813e+00,2.857e+00,
     &  2.966e+00,3.106e+00,3.199e+00,3.213e+00,3.209e+00,3.239e+00,
     &  3.266e+00,3.236e+00,3.117e+00,2.909e+00,2.695e+00,2.532e+00,
     &  2.396e+00,2.295e+00,2.251e+00,2.224e+00,2.181e+00,2.130e+00,
     &  2.148e+00,2.326e+00,2.586e+00,2.723e+00,2.649e+00,2.451e+00,
     &  2.244e+00,2.085e+00,1.989e+00,1.984e+00,2.082e+00,2.223e+00,
     &  2.325e+00,2.355e+00,2.348e+00,2.361e+00,2.430e+00,2.536e+00,
     &  2.613e+00,2.622e+00,2.607e+00,2.620e+00,2.646e+00,2.643e+00,
     &  2.582e+00,2.468e+00,2.332e+00,2.240e+00,2.264e+00,2.397e+00,
     &  2.552e+00,2.689e+00,2.851e+00,3.010e+00,3.068e+00,3.006e+00,
     &  2.911e+00,2.861e+00,2.852e+00,2.837e+00,2.789e+00,2.729e+00,
     &  2.714e+00,2.773e+00,2.871e+00,2.954e+00,2.995e+00,2.991e+00,
     &  2.940e+00,2.855e+00,2.773e+00,2.730e+00,2.737e+00,2.765e+00,
     &  2.770e+00,2.737e+00,2.683e+00,2.622e+00,2.566e+00,2.534e+00,
     &  2.535e+00,2.568e+00,2.612e+00,2.631e+00,2.602e+00,2.543e+00,
     &  2.484e+00,2.455e+00,2.468e+00,2.510e+00,2.545e+00,2.553e+00,
     &  2.556e+00,2.589e+00,2.662e+00,2.755e+00,2.847e+00,2.929e+00/
      data (sun2b(i),i=2641,2760)/
     &  2.996e+00,3.017e+00,2.977e+00,2.899e+00,2.800e+00,2.693e+00,
     &  2.617e+00,2.593e+00,2.581e+00,2.528e+00,2.428e+00,2.336e+00,
     &  2.316e+00,2.385e+00,2.487e+00,2.546e+00,2.577e+00,2.681e+00,
     &  2.972e+00,3.576e+00,4.401e+00,5.004e+00,5.030e+00,4.514e+00,
     &  3.707e+00,2.906e+00,2.360e+00,2.142e+00,2.112e+00,2.087e+00,
     &  2.030e+00,2.004e+00,2.036e+00,2.096e+00,2.152e+00,2.188e+00,
     &  2.195e+00,2.186e+00,2.190e+00,2.217e+00,2.257e+00,2.289e+00,
     &  2.278e+00,2.215e+00,2.164e+00,2.234e+00,2.473e+00,2.812e+00,
     &  3.129e+00,3.298e+00,3.221e+00,2.886e+00,2.447e+00,2.144e+00,
     &  2.073e+00,2.139e+00,2.217e+00,2.258e+00,2.265e+00,2.248e+00,
     &  2.210e+00,2.166e+00,2.136e+00,2.132e+00,2.144e+00,2.146e+00,
     &  2.140e+00,2.146e+00,2.159e+00,2.158e+00,2.148e+00,2.134e+00,
     &  2.110e+00,2.075e+00,2.040e+00,2.012e+00,1.993e+00,1.980e+00,
     &  1.970e+00,1.961e+00,1.954e+00,1.945e+00,1.931e+00,1.906e+00,
     &  1.873e+00,1.847e+00,1.847e+00,1.869e+00,1.884e+00,1.863e+00,
     &  1.814e+00,1.762e+00,1.719e+00,1.685e+00,1.666e+00,1.671e+00,
     &  1.704e+00,1.752e+00,1.812e+00,1.901e+00,2.012e+00,2.098e+00,
     &  2.138e+00,2.148e+00,2.135e+00,2.109e+00,2.095e+00,2.106e+00,
     &  2.109e+00,2.069e+00,2.000e+00,1.946e+00,1.919e+00,1.909e+00,
     &  1.902e+00,1.898e+00,1.905e+00,1.930e+00,1.959e+00,1.964e+00/
      data (sun2b(i),i=2761,2880)/
     &  1.936e+00,1.902e+00,1.889e+00,1.894e+00,1.902e+00,1.904e+00,
     &  1.898e+00,1.875e+00,1.829e+00,1.772e+00,1.730e+00,1.733e+00,
     &  1.790e+00,1.878e+00,1.955e+00,1.991e+00,1.981e+00,1.943e+00,
     &  1.917e+00,1.922e+00,1.920e+00,1.872e+00,1.783e+00,1.696e+00,
     &  1.639e+00,1.608e+00,1.592e+00,1.582e+00,1.558e+00,1.514e+00,
     &  1.462e+00,1.424e+00,1.425e+00,1.483e+00,1.597e+00,1.741e+00,
     &  1.877e+00,1.978e+00,2.045e+00,2.087e+00,2.091e+00,2.038e+00,
     &  1.957e+00,1.900e+00,1.882e+00,1.866e+00,1.819e+00,1.754e+00,
     &  1.687e+00,1.622e+00,1.573e+00,1.545e+00,1.529e+00,1.531e+00,
     &  1.570e+00,1.641e+00,1.719e+00,1.768e+00,1.755e+00,1.662e+00,
     &  1.512e+00,1.359e+00,1.260e+00,1.235e+00,1.261e+00,1.309e+00,
     &  1.359e+00,1.388e+00,1.380e+00,1.348e+00,1.322e+00,1.316e+00,
     &  1.344e+00,1.414e+00,1.495e+00,1.544e+00,1.552e+00,1.528e+00,
     &  1.490e+00,1.461e+00,1.446e+00,1.440e+00,1.440e+00,1.454e+00,
     &  1.476e+00,1.478e+00,1.451e+00,1.423e+00,1.418e+00,1.422e+00,
     &  1.412e+00,1.391e+00,1.378e+00,1.381e+00,1.393e+00,1.409e+00,
     &  1.427e+00,1.442e+00,1.441e+00,1.419e+00,1.386e+00,1.355e+00,
     &  1.326e+00,1.298e+00,1.277e+00,1.273e+00,1.286e+00,1.300e+00,
     &  1.306e+00,1.299e+00,1.282e+00,1.259e+00,1.229e+00,1.187e+00,
     &  1.143e+00,1.118e+00,1.114e+00,1.112e+00,1.101e+00,1.080e+00/
      data (sun2b(i),i=2881,2910)/
     &  1.052e+00,1.028e+00,1.025e+00,1.058e+00,1.120e+00,1.179e+00,
     &  1.206e+00,1.201e+00,1.194e+00,1.200e+00,1.204e+00,1.182e+00,
     &  1.149e+00,1.140e+00,1.154e+00,1.163e+00,1.162e+00,1.159e+00,
     &  1.156e+00,1.157e+00,1.156e+00,1.140e+00,1.104e+00,1.063e+00,
     &  1.034e+00,1.022e+00,1.020e+00,1.019e+00,1.017e+00,1.016e+00/

      data (sun3(i),i=1,120)/
     &  2.616e-05,5.360e-05,9.862e-05,1.675e-04,2.676e-04,4.072e-04,
     &  5.959e-04,8.435e-04,1.161e-03,1.561e-03,2.056e-03,2.660e-03,
     &  3.387e-03,4.254e-03,5.277e-03,6.473e-03,7.861e-03,9.461e-03,
     &  1.129e-02,1.338e-02,1.574e-02,1.840e-02,2.138e-02,2.471e-02,
     &  2.840e-02,3.250e-02,3.702e-02,4.200e-02,4.744e-02,5.341e-02,
     &  5.993e-02,6.699e-02,7.469e-02,8.299e-02,9.200e-02,1.017e-01,
     &  1.121e-01,1.234e-01,1.354e-01,1.482e-01,1.620e-01,1.767e-01,
     &  1.924e-01,2.090e-01,2.268e-01,2.455e-01,2.653e-01,2.864e-01,
     &  3.087e-01,3.323e-01,3.571e-01,3.832e-01,4.111e-01,4.403e-01,
     &  4.709e-01,5.029e-01,5.366e-01,5.721e-01,6.095e-01,6.483e-01,
     &  6.888e-01,7.313e-01,7.738e-01,8.219e-01,8.701e-01,9.209e-01,
     &  9.728e-01,1.028e+00,1.085e+00,1.143e+00,1.205e+00,1.269e+00,
     &  1.334e+00,1.403e+00,1.473e+00,1.545e+00,1.623e+00,1.697e+00,
     &  1.780e+00,1.861e+00,1.942e+00,2.036e+00,2.125e+00,2.218e+00,
     &  2.311e+00,2.410e+00,2.511e+00,2.613e+00,2.724e+00,2.833e+00,
     &  2.950e+00,3.064e+00,3.188e+00,3.305e+00,3.446e+00,3.570e+00,
     &  3.708e+00,3.854e+00,3.995e+00,4.136e+00,4.285e+00,4.433e+00,
     &  4.562e+00,4.727e+00,4.871e+00,5.046e+00,5.262e+00,5.429e+00,
     &  5.615e+00,5.912e+00,6.135e+00,6.392e+00,6.773e+00,6.996e+00,
     &  7.194e+00,7.452e+00,7.702e+00,7.942e+00,8.132e+00,8.433e+00/
      data (sun3(i),i=121,240)/
     &  8.682e+00,8.981e+00,9.277e+00,9.561e+00,9.832e+00,1.015e+01,
     &  1.044e+01,1.071e+01,1.099e+01,1.126e+01,1.160e+01,1.202e+01,
     &  1.238e+01,1.279e+01,1.313e+01,1.347e+01,1.385e+01,1.425e+01,
     &  1.464e+01,1.502e+01,1.543e+01,1.579e+01,1.616e+01,1.665e+01,
     &  1.709e+01,1.754e+01,1.788e+01,1.826e+01,1.892e+01,1.939e+01,
     &  1.989e+01,2.037e+01,2.090e+01,2.138e+01,2.187e+01,2.239e+01,
     &  2.291e+01,2.350e+01,2.405e+01,2.451e+01,2.505e+01,2.579e+01,
     &  2.634e+01,2.700e+01,2.760e+01,2.817e+01,2.878e+01,2.947e+01,
     &  3.010e+01,3.050e+01,3.142e+01,3.210e+01,3.282e+01,3.350e+01,
     &  3.423e+01,3.481e+01,3.531e+01,3.637e+01,3.704e+01,3.783e+01,
     &  3.860e+01,3.937e+01,3.996e+01,4.046e+01,4.133e+01,4.156e+01,
     &  4.284e+01,4.417e+01,4.461e+01,4.582e+01,4.649e+01,4.738e+01,
     &  4.823e+01,4.949e+01,4.999e+01,5.126e+01,5.166e+01,5.270e+01,
     &  5.403e+01,5.429e+01,5.603e+01,5.703e+01,5.750e+01,5.929e+01,
     &  6.004e+01,6.080e+01,6.217e+01,6.299e+01,6.477e+01,6.565e+01,
     &  6.636e+01,6.828e+01,6.955e+01,7.028e+01,7.174e+01,7.342e+01,
     &  7.435e+01,7.547e+01,7.690e+01,7.851e+01,7.960e+01,8.073e+01,
     &  8.188e+01,8.337e+01,8.455e+01,8.548e+01,8.388e+01,8.903e+01,
     &  9.049e+01,9.183e+01,9.305e+01,9.434e+01,9.624e+01,9.754e+01,
     &  9.832e+01,1.002e+02,1.022e+02,1.031e+02,1.050e+02,1.068e+02/
      data (sun3(i),i=241,360)/
     &  1.079e+02,1.091e+02,1.110e+02,1.137e+02,1.151e+02,1.161e+02,
     &  1.179e+02,1.188e+02,1.198e+02,1.230e+02,1.240e+02,1.251e+02,
     &  1.209e+02,1.291e+02,1.299e+02,1.335e+02,1.357e+02,1.372e+02,
     &  1.386e+02,1.373e+02,1.416e+02,1.409e+02,1.381e+02,1.469e+02,
     &  1.496e+02,1.534e+02,1.525e+02,1.566e+02,1.586e+02,1.597e+02,
     &  1.551e+02,1.651e+02,1.670e+02,1.699e+02,1.722e+02,1.742e+02,
     &  1.752e+02,1.789e+02,1.810e+02,1.821e+02,1.851e+02,1.847e+02,
     &  1.874e+02,1.813e+02,1.922e+02,1.946e+02,1.992e+02,2.003e+02,
     &  2.034e+02,2.056e+02,2.103e+02,2.102e+02,2.065e+02,2.106e+02,
     &  2.174e+02,2.200e+02,2.246e+02,2.266e+02,2.268e+02,2.266e+02,
     &  2.236e+02,2.355e+02,2.401e+02,2.393e+02,2.363e+02,2.408e+02,
     &  2.434e+02,2.464e+02,2.490e+02,2.479e+02,2.454e+02,2.538e+02,
     &  2.494e+02,2.602e+02,2.603e+02,2.664e+02,2.656e+02,2.683e+02,
     &  2.712e+02,2.753e+02,2.748e+02,2.787e+02,2.791e+02,2.815e+02,
     &  2.844e+02,2.852e+02,2.877e+02,2.798e+02,2.883e+02,2.928e+02,
     &  2.983e+02,2.898e+02,2.998e+02,3.005e+02,3.003e+02,3.058e+02,
     &  3.080e+02,3.095e+02,3.128e+02,3.122e+02,3.177e+02,3.178e+02,
     &  3.161e+02,3.260e+02,3.263e+02,3.245e+02,3.261e+02,3.317e+02,
     &  3.368e+02,3.350e+02,3.419e+02,3.424e+02,3.439e+02,3.496e+02,
     &  3.515e+02,3.534e+02,3.553e+02,3.570e+02,3.580e+02,3.626e+02/
      data (sun3(i),i=361,480)/
     &  3.608e+02,3.661e+02,3.684e+02,3.691e+02,3.716e+02,3.755e+02,
     &  3.792e+02,3.820e+02,3.808e+02,3.857e+02,3.868e+02,3.864e+02,
     &  3.926e+02,3.953e+02,3.973e+02,3.951e+02,3.974e+02,4.050e+02,
     &  4.067e+02,4.071e+02,4.118e+02,4.145e+02,4.156e+02,4.172e+02,
     &  4.172e+02,3.925e+02,4.252e+02,4.295e+02,4.324e+02,4.321e+02,
     &  4.345e+02,4.379e+02,4.412e+02,4.429e+02,4.450e+02,4.501e+02,
     &  4.513e+02,4.513e+02,4.551e+02,4.610e+02,4.613e+02,4.633e+02,
     &  4.643e+02,4.702e+02,4.716e+02,4.748e+02,4.787e+02,4.798e+02,
     &  4.759e+02,4.728e+02,4.782e+02,4.883e+02,4.758e+02,4.890e+02,
     &  4.985e+02,4.974e+02,4.925e+02,5.032e+02,4.967e+02,5.067e+02,
     &  5.043e+02,5.155e+02,5.195e+02,5.145e+02,5.168e+02,5.220e+02,
     &  5.154e+02,5.328e+02,5.352e+02,5.348e+02,5.380e+02,5.442e+02,
     &  5.393e+02,5.367e+02,5.405e+02,5.500e+02,5.499e+02,5.546e+02,
     &  5.535e+02,5.538e+02,5.655e+02,5.632e+02,5.667e+02,5.714e+02,
     &  5.733e+02,5.755e+02,5.800e+02,5.817e+02,5.851e+02,5.802e+02,
     &  5.812e+02,5.811e+02,5.676e+02,6.020e+02,6.002e+02,5.986e+02,
     &  6.136e+02,5.933e+02,6.165e+02,6.227e+02,6.190e+02,6.219e+02,
     &  6.277e+02,6.196e+02,6.351e+02,6.417e+02,6.398e+02,6.411e+02,
     &  6.543e+02,6.575e+02,6.563e+02,6.618e+02,6.636e+02,6.595e+02,
     &  6.708e+02,6.734e+02,6.752e+02,6.738e+02,6.779e+02,6.821e+02/
      data (sun3(i),i=481,600)/
     &  6.895e+02,6.921e+02,6.972e+02,6.996e+02,6.967e+02,6.977e+02,
     &  7.032e+02,7.055e+02,7.114e+02,7.164e+02,7.207e+02,7.219e+02,
     &  6.953e+02,7.163e+02,7.332e+02,7.349e+02,7.385e+02,7.406e+02,
     &  7.446e+02,7.453e+02,7.400e+02,7.501e+02,7.525e+02,7.556e+02,
     &  7.620e+02,7.627e+02,7.606e+02,7.633e+02,7.630e+02,7.749e+02,
     &  7.766e+02,7.803e+02,7.783e+02,7.758e+02,7.792e+02,7.886e+02,
     &  7.940e+02,7.932e+02,7.923e+02,7.738e+02,8.072e+02,8.093e+02,
     &  8.181e+02,8.155e+02,8.121e+02,8.103e+02,7.890e+02,8.237e+02,
     &  8.339e+02,8.325e+02,8.386e+02,8.418e+02,8.482e+02,8.440e+02,
     &  8.558e+02,8.305e+02,8.363e+02,8.231e+02,8.442e+02,8.718e+02,
     &  8.636e+02,8.772e+02,8.843e+02,8.800e+02,8.759e+02,8.658e+02,
     &  8.900e+02,8.899e+02,9.093e+02,8.799e+02,8.652e+02,9.115e+02,
     &  9.090e+02,9.277e+02,9.107e+02,9.087e+02,9.335e+02,9.345e+02,
     &  9.326e+02,8.978e+02,9.425e+02,9.270e+02,9.424e+02,9.147e+02,
     &  9.525e+02,9.536e+02,9.335e+02,9.519e+02,9.660e+02,9.639e+02,
     &  9.387e+02,9.488e+02,8.045e+02,9.736e+02,9.908e+02,9.743e+02,
     &  9.846e+02,9.786e+02,1.002e+03,9.952e+02,7.876e+02,9.779e+02,
     &  9.915e+02,9.268e+02,1.020e+03,1.008e+03,1.027e+03,1.017e+03,
     &  1.015e+03,1.034e+03,1.039e+03,1.019e+03,1.049e+03,1.047e+03,
     &  1.036e+03,1.025e+03,1.055e+03,1.048e+03,1.065e+03,1.075e+03/
      data (sun3(i),i=601,720)/
     &  1.076e+03,1.072e+03,1.060e+03,1.069e+03,1.062e+03,1.060e+03,
     &  1.072e+03,1.097e+03,1.100e+03,1.109e+03,1.112e+03,1.111e+03,
     &  1.103e+03,1.099e+03,1.114e+03,1.134e+03,1.105e+03,1.137e+03,
     &  1.126e+03,1.145e+03,1.128e+03,1.151e+03,1.153e+03,1.148e+03,
     &  1.125e+03,1.125e+03,1.153e+03,1.159e+03,1.173e+03,1.176e+03,
     &  1.181e+03,1.173e+03,1.187e+03,1.173e+03,1.198e+03,1.192e+03,
     &  1.196e+03,1.208e+03,1.199e+03,1.219e+03,1.179e+03,1.217e+03,
     &  1.200e+03,1.203e+03,1.220e+03,1.226e+03,1.235e+03,1.192e+03,
     &  1.207e+03,1.256e+03,1.257e+03,1.220e+03,1.250e+03,1.256e+03,
     &  1.243e+03,1.253e+03,1.261e+03,1.265e+03,1.284e+03,1.256e+03,
     &  1.274e+03,1.273e+03,1.257e+03,1.287e+03,1.289e+03,1.291e+03,
     &  1.273e+03,1.294e+03,1.279e+03,1.260e+03,1.270e+03,1.293e+03,
     &  1.283e+03,1.326e+03,1.312e+03,1.315e+03,1.340e+03,1.308e+03,
     &  1.335e+03,1.312e+03,1.330e+03,1.287e+03,1.347e+03,1.343e+03,
     &  1.353e+03,1.356e+03,1.369e+03,1.332e+03,1.359e+03,1.344e+03,
     &  1.315e+03,1.341e+03,1.382e+03,1.353e+03,1.343e+03,1.393e+03,
     &  1.374e+03,1.384e+03,1.387e+03,1.416e+03,1.396e+03,1.413e+03,
     &  1.393e+03,1.416e+03,1.432e+03,1.422e+03,1.421e+03,1.385e+03,
     &  1.418e+03,1.419e+03,1.454e+03,1.427e+03,1.452e+03,1.450e+03,
     &  1.453e+03,1.453e+03,1.462e+03,1.459e+03,1.455e+03,1.480e+03/
      data (sun3(i),i=721,840)/
     &  1.488e+03,1.469e+03,1.492e+03,1.480e+03,1.449e+03,1.489e+03,
     &  1.479e+03,1.500e+03,1.500e+03,1.490e+03,1.504e+03,1.506e+03,
     &  1.508e+03,1.518e+03,1.513e+03,1.521e+03,1.519e+03,1.530e+03,
     &  1.530e+03,1.519e+03,1.526e+03,1.533e+03,1.554e+03,1.554e+03,
     &  1.552e+03,1.523e+03,1.563e+03,1.547e+03,1.550e+03,1.553e+03,
     &  1.583e+03,1.565e+03,1.586e+03,1.526e+03,1.579e+03,1.543e+03,
     &  1.435e+03,1.230e+03,1.547e+03,1.564e+03,1.595e+03,1.605e+03,
     &  1.590e+03,1.618e+03,1.545e+03,1.536e+03,1.614e+03,1.605e+03,
     &  1.573e+03,1.598e+03,1.616e+03,1.598e+03,1.611e+03,1.634e+03,
     &  1.609e+03,1.605e+03,1.614e+03,1.630e+03,1.644e+03,1.675e+03,
     &  1.638e+03,1.606e+03,1.647e+03,1.644e+03,1.618e+03,1.687e+03,
     &  1.584e+03,1.655e+03,1.645e+03,1.683e+03,1.703e+03,1.684e+03,
     &  1.690e+03,1.672e+03,1.587e+03,1.655e+03,1.623e+03,1.648e+03,
     &  1.712e+03,1.658e+03,1.734e+03,1.715e+03,1.684e+03,1.729e+03,
     &  1.712e+03,1.645e+03,1.588e+03,1.678e+03,1.695e+03,1.643e+03,
     &  1.676e+03,1.668e+03,1.735e+03,1.739e+03,1.702e+03,1.756e+03,
     &  1.746e+03,1.738e+03,1.802e+03,1.756e+03,1.783e+03,1.802e+03,
     &  1.806e+03,1.809e+03,1.762e+03,1.743e+03,1.758e+03,1.758e+03,
     &  1.782e+03,1.796e+03,1.786e+03,1.799e+03,1.816e+03,1.827e+03,
     &  1.817e+03,1.782e+03,1.828e+03,1.826e+03,1.777e+03,1.840e+03/
      data (sun3(i),i=841,960)/
     &  1.788e+03,1.820e+03,1.834e+03,1.642e+03,1.648e+03,1.816e+03,
     &  1.864e+03,1.845e+03,1.760e+03,1.838e+03,1.855e+03,1.874e+03,
     &  1.862e+03,1.886e+03,1.874e+03,1.862e+03,1.834e+03,1.878e+03,
     &  1.851e+03,1.802e+03,1.848e+03,1.859e+03,1.875e+03,1.891e+03,
     &  1.803e+03,1.876e+03,1.891e+03,1.911e+03,1.933e+03,1.895e+03,
     &  1.808e+03,1.811e+03,1.842e+03,1.877e+03,1.835e+03,1.861e+03,
     &  1.913e+03,1.844e+03,1.695e+03,1.853e+03,1.898e+03,1.868e+03,
     &  1.869e+03,1.936e+03,1.832e+03,1.772e+03,1.966e+03,1.856e+03,
     &  1.834e+03,1.789e+03,1.792e+03,1.881e+03,1.826e+03,1.832e+03,
     &  1.882e+03,1.873e+03,1.928e+03,1.919e+03,1.884e+03,1.836e+03,
     &  1.905e+03,1.944e+03,1.852e+03,1.869e+03,1.874e+03,1.870e+03,
     &  1.886e+03,1.883e+03,1.784e+03,1.945e+03,1.906e+03,1.866e+03,
     &  2.008e+03,1.862e+03,1.984e+03,1.871e+03,1.841e+03,1.908e+03,
     &  1.879e+03,1.839e+03,1.742e+03,1.822e+03,1.897e+03,1.957e+03,
     &  1.913e+03,2.002e+03,1.799e+03,1.910e+03,2.024e+03,1.954e+03,
     &  1.870e+03,1.780e+03,1.853e+03,1.694e+03,1.869e+03,1.932e+03,
     &  2.035e+03,2.026e+03,1.871e+03,1.908e+03,2.022e+03,1.882e+03,
     &  1.964e+03,1.777e+03,1.548e+03,1.731e+03,1.895e+03,1.950e+03,
     &  1.917e+03,2.002e+03,1.849e+03,1.749e+03,1.967e+03,1.864e+03,
     &  1.984e+03,1.736e+03,1.954e+03,1.783e+03,1.773e+03,1.450e+03/
      data (sun3(i),i=961,1080)/
     &  1.883e+03,1.551e+03,1.453e+03,1.813e+03,1.994e+03,1.858e+03,
     &  1.854e+03,1.853e+03,1.855e+03,1.940e+03,1.821e+03,1.956e+03,
     &  2.079e+03,1.982e+03,1.940e+03,1.864e+03,2.056e+03,2.043e+03,
     &  1.902e+03,1.846e+03,1.950e+03,1.976e+03,2.007e+03,2.095e+03,
     &  2.067e+03,1.899e+03,1.970e+03,1.782e+03,1.980e+03,1.921e+03,
     &  1.883e+03,1.896e+03,1.826e+03,1.933e+03,1.817e+03,1.904e+03,
     &  1.971e+03,2.043e+03,1.701e+03,1.918e+03,2.093e+03,1.947e+03,
     &  2.036e+03,1.940e+03,2.122e+03,2.134e+03,2.066e+03,1.939e+03,
     &  1.960e+03,2.112e+03,1.978e+03,1.692e+03,2.074e+03,1.826e+03,
     &  2.060e+03,2.111e+03,2.142e+03,1.782e+03,1.950e+03,2.053e+03,
     &  1.944e+03,1.821e+03,1.932e+03,1.422e+03,1.792e+03,1.975e+03,
     &  2.007e+03,2.026e+03,1.999e+03,2.095e+03,2.090e+03,2.096e+03,
     &  2.156e+03,2.103e+03,2.064e+03,2.069e+03,2.068e+03,2.139e+03,
     &  2.077e+03,1.972e+03,2.155e+03,2.180e+03,2.155e+03,2.122e+03,
     &  2.006e+03,2.114e+03,2.065e+03,2.182e+03,2.096e+03,2.127e+03,
     &  2.013e+03,2.049e+03,1.991e+03,2.172e+03,2.127e+03,2.039e+03,
     &  2.109e+03,1.982e+03,1.994e+03,2.058e+03,2.160e+03,2.077e+03,
     &  2.084e+03,2.027e+03,2.220e+03,2.086e+03,1.889e+03,2.053e+03,
     &  2.162e+03,2.042e+03,1.953e+03,2.039e+03,2.161e+03,1.941e+03,
     &  2.095e+03,1.999e+03,2.096e+03,1.983e+03,2.085e+03,2.082e+03/
      data (sun3(i),i=1081,1200)/
     &  2.112e+03,2.002e+03,2.077e+03,1.993e+03,2.120e+03,2.017e+03,
     &  1.869e+03,2.139e+03,2.088e+03,2.201e+03,2.035e+03,2.193e+03,
     &  1.990e+03,2.160e+03,1.951e+03,2.020e+03,2.062e+03,1.927e+03,
     &  1.922e+03,1.784e+03,2.011e+03,2.039e+03,2.137e+03,2.166e+03,
     &  2.242e+03,2.191e+03,2.135e+03,1.894e+03,1.964e+03,2.069e+03,
     &  1.913e+03,2.091e+03,2.059e+03,1.914e+03,2.001e+03,1.814e+03,
     &  1.783e+03,1.703e+03,1.915e+03,2.018e+03,1.790e+03,2.047e+03,
     &  1.767e+03,1.838e+03,1.930e+03,1.858e+03,2.124e+03,1.644e+03,
     &  2.019e+03,1.787e+03,1.647e+03,1.700e+03,1.783e+03,1.752e+03,
     &  1.634e+03,1.187e+03,1.864e+03,1.751e+03,1.724e+03,1.737e+03,
     &  2.002e+03,1.917e+03,1.827e+03,1.669e+03,1.568e+03,1.834e+03,
     &  1.518e+03,1.219e+03,1.926e+03,1.877e+03,1.690e+03,1.182e+03,
     &  1.956e+03,1.933e+03,1.284e+03,8.052e+02,1.086e+03,9.452e+02,
     &  1.145e+03,1.526e+03,1.192e+03,1.498e+03,1.667e+03,1.576e+03,
     &  1.515e+03,1.254e+03,1.602e+03,1.841e+03,1.509e+03,1.805e+03,
     &  1.577e+03,1.566e+03,1.627e+03,1.814e+03,1.623e+03,1.554e+03,
     &  1.743e+03,1.616e+03,1.227e+03,1.923e+03,1.812e+03,1.572e+03,
     &  1.848e+03,1.978e+03,1.688e+03,1.446e+03,1.410e+03,1.780e+03,
     &  1.822e+03,1.558e+03,1.759e+03,1.856e+03,1.663e+03,1.530e+03,
     &  1.777e+03,1.944e+03,1.931e+03,1.905e+03,1.656e+03,1.954e+03/
      data (sun3(i),i=1201,1320)/
     &  1.836e+03,1.583e+03,1.752e+03,1.960e+03,1.672e+03,1.668e+03,
     &  1.729e+03,1.854e+03,1.915e+03,1.920e+03,1.893e+03,1.877e+03,
     &  1.851e+03,1.583e+03,1.310e+03,1.619e+03,1.943e+03,1.964e+03,
     &  1.933e+03,1.559e+03,1.932e+03,1.421e+03,1.840e+03,1.441e+03,
     &  1.633e+03,1.266e+03,1.996e+03,1.645e+03,1.640e+03,1.914e+03,
     &  1.521e+03,1.420e+03,1.697e+03,1.998e+03,1.573e+03,1.522e+03,
     &  1.889e+03,1.730e+03,1.811e+03,1.671e+03,1.828e+03,1.749e+03,
     &  1.840e+03,1.497e+03,1.957e+03,1.658e+03,1.594e+03,1.896e+03,
     &  1.756e+03,1.631e+03,1.444e+03,1.691e+03,1.382e+03,8.553e+02,
     &  4.010e+02,3.110e+02,8.529e+02,1.101e+03,1.349e+03,1.541e+03,
     &  1.358e+03,1.272e+03,1.161e+03,1.074e+03,8.786e+02,3.822e+02,
     &  2.173e+02,5.268e+02,9.261e+02,1.253e+03,1.066e+03,1.399e+03,
     &  1.506e+03,1.544e+03,1.582e+03,1.102e+03,1.306e+03,1.203e+03,
     &  1.403e+03,1.399e+03,9.520e+02,7.840e+02,1.046e+03,9.084e+02,
     &  7.732e+02,1.194e+03,6.025e+02,9.981e+02,1.144e+03,1.157e+03,
     &  4.782e+02,8.259e+02,1.030e+03,9.441e+02,1.151e+03,1.107e+03,
     &  8.535e+02,5.215e+02,7.978e+02,4.610e+02,8.221e+02,6.668e+02,
     &  7.040e+02,7.287e+02,1.121e+03,8.432e+02,1.049e+03,1.427e+03,
     &  1.115e+03,1.509e+03,1.312e+03,6.955e+02,1.074e+03,1.133e+03,
     &  1.021e+03,1.020e+03,1.725e+03,1.730e+03,1.467e+03,1.406e+03/
      data (sun3(i),i=1321,1440)/
     &  1.436e+03,1.132e+03,9.268e+02,1.102e+03,1.193e+03,7.077e+02,
     &  1.646e+03,1.241e+03,5.566e+02,6.371e+02,7.420e+02,1.420e+03,
     &  9.540e+02,4.338e+02,8.207e+02,1.289e+03,1.063e+03,1.279e+03,
     &  7.421e+02,7.780e+02,1.525e+03,1.708e+03,1.203e+03,8.153e+02,
     &  9.097e+02,1.317e+03,1.352e+03,1.334e+03,1.235e+03,1.418e+03,
     &  1.152e+03,9.400e+02,1.236e+03,1.122e+03,1.159e+03,1.363e+03,
     &  1.387e+03,1.103e+03,1.227e+03,1.348e+03,1.342e+03,1.454e+03,
     &  1.448e+03,1.483e+03,1.161e+03,7.835e+02,9.843e+02,9.535e+02,
     &  1.307e+03,1.182e+03,9.650e+02,8.898e+02,8.146e+02,1.513e+03,
     &  1.224e+03,1.119e+03,5.361e+02,1.182e+03,1.276e+03,1.034e+03,
     &  6.753e+02,1.069e+03,9.200e+02,1.243e+03,1.355e+03,1.119e+03,
     &  1.181e+03,1.125e+03,7.264e+02,3.851e+02,7.448e+02,5.304e+02,
     &  8.958e+02,9.643e+02,8.306e+02,5.733e+02,9.510e+02,5.896e+02,
     &  1.246e+03,1.098e+03,1.125e+03,1.083e+03,1.063e+03,1.326e+03,
     &  1.075e+03,1.334e+03,1.190e+03,1.331e+03,9.672e+02,1.218e+03,
     &  1.075e+03,1.229e+03,9.998e+02,7.448e+02,9.717e+02,1.197e+03,
     &  1.305e+03,9.595e+02,8.832e+02,1.129e+03,1.162e+03,1.184e+03,
     &  1.342e+03,1.263e+03,9.291e+02,9.784e+02,9.976e+02,8.360e+02,
     &  1.326e+03,1.304e+03,1.144e+03,1.307e+03,1.108e+03,5.392e+02,
     &  1.027e+03,1.248e+03,1.085e+03,8.488e+02,1.214e+03,9.699e+02/
      data (sun3(i),i=1441,1560)/
     &  9.096e+02,1.369e+03,1.118e+03,9.123e+02,1.176e+03,1.046e+03,
     &  8.571e+02,6.842e+02,5.575e+02,9.405e+02,1.046e+03,8.434e+02,
     &  9.864e+02,9.891e+02,7.194e+02,6.664e+02,9.103e+02,1.127e+03,
     &  7.969e+02,6.468e+02,8.385e+02,8.230e+02,8.359e+02,9.173e+02,
     &  8.132e+02,1.177e+03,1.016e+03,9.794e+02,5.923e+02,8.344e+02,
     &  9.039e+02,9.497e+02,8.562e+02,8.964e+02,6.116e+02,1.092e+03,
     &  9.351e+02,6.175e+02,5.049e+02,6.799e+02,8.828e+02,9.557e+02,
     &  4.216e+02,3.581e+02,1.047e+03,1.029e+03,1.087e+03,8.082e+02,
     &  9.585e+02,1.027e+03,1.031e+03,9.652e+02,9.996e+02,7.608e+02,
     &  1.049e+03,1.053e+03,9.285e+02,1.007e+03,1.213e+03,8.617e+02,
     &  9.966e+02,1.115e+03,1.092e+03,7.323e+02,9.399e+02,9.989e+02,
     &  9.204e+02,7.284e+02,1.037e+03,1.177e+03,1.178e+03,9.469e+02,
     &  1.137e+03,1.201e+03,1.149e+03,9.677e+02,8.670e+02,9.166e+02,
     &  9.096e+02,9.328e+02,9.598e+02,1.088e+03,1.204e+03,9.403e+02,
     &  1.045e+03,1.137e+03,1.043e+03,1.217e+03,9.163e+02,1.141e+03,
     &  1.146e+03,8.977e+02,8.804e+02,8.169e+02,6.701e+02,1.193e+03,
     &  7.830e+02,9.112e+02,5.866e+02,7.196e+02,5.980e+02,7.290e+02,
     &  7.352e+02,5.010e+02,4.252e+02,7.595e+02,6.654e+02,7.978e+02,
     &  8.962e+02,7.806e+02,5.683e+02,6.081e+02,5.947e+02,9.489e+02,
     &  9.340e+02,1.035e+03,7.730e+02,6.878e+02,1.069e+03,6.922e+02/
      data (sun3(i),i=1561,1680)/
     &  6.132e+02,4.768e+02,1.128e+03,8.246e+02,6.237e+02,5.390e+02,
     &  5.126e+02,5.142e+02,1.013e+03,1.022e+03,9.397e+02,1.115e+03,
     &  7.794e+02,6.980e+02,5.552e+02,8.115e+02,4.396e+02,4.824e+02,
     &  4.740e+02,8.546e+02,9.784e+02,8.321e+02,9.878e+02,6.204e+02,
     &  6.790e+02,3.038e+02,9.230e+02,8.131e+02,1.036e+03,8.095e+02,
     &  6.136e+02,7.761e+02,7.880e+02,8.014e+02,7.458e+02,8.269e+02,
     &  6.337e+02,6.414e+02,6.504e+02,8.785e+02,8.504e+02,1.136e+03,
     &  9.529e+02,1.086e+03,9.323e+02,7.545e+02,7.780e+02,2.312e+02,
     &  5.092e+02,5.440e+02,7.925e+02,3.707e+02,5.603e+02,7.485e+02,
     &  5.859e+02,9.702e+02,7.035e+02,5.693e+02,9.062e+02,6.349e+02,
     &  6.152e+02,8.680e+02,6.633e+02,8.073e+02,6.675e+02,4.866e+02,
     &  5.959e+02,7.526e+02,7.618e+02,3.963e+02,4.099e+02,7.378e+02,
     &  7.068e+02,8.668e+02,7.861e+02,4.051e+02,8.343e+02,7.763e+02,
     &  4.941e+02,6.495e+02,5.904e+02,5.761e+02,7.947e+02,8.966e+02,
     &  6.009e+02,6.533e+02,8.680e+02,3.771e+02,6.289e+02,4.458e+02,
     &  2.255e+02,3.380e+02,5.338e+02,6.043e+02,5.928e+02,5.851e+02,
     &  4.306e+02,3.351e+02,5.880e+02,4.450e+02,3.235e+02,2.487e+02,
     &  5.846e+02,6.711e+02,3.432e+02,5.508e+02,6.835e+02,6.591e+02,
     &  4.658e+02,4.033e+02,2.514e+02,4.175e+02,5.239e+02,6.458e+02,
     &  8.497e+02,6.651e+02,3.887e+02,5.942e+02,3.061e+02,5.717e+02/
      data (sun3(i),i=1681,1800)/
     &  2.725e+02,4.818e+02,7.439e+02,6.226e+02,6.662e+02,5.715e+02,
     &  6.673e+02,3.917e+02,7.972e+02,6.082e+02,3.719e+02,4.311e+02,
     &  7.118e+02,5.424e+02,5.332e+02,6.237e+02,4.479e+02,3.117e+02,
     &  7.760e+02,5.962e+02,7.501e+02,6.620e+02,4.200e+02,4.756e+02,
     &  5.516e+02,5.493e+02,6.381e+02,6.239e+02,5.589e+02,6.256e+02,
     &  6.069e+02,7.299e+02,6.370e+02,6.039e+02,6.705e+02,6.279e+02,
     &  7.775e+02,6.866e+02,7.114e+02,6.659e+02,5.818e+02,6.354e+02,
     &  4.635e+02,4.454e+02,4.498e+02,4.285e+02,4.388e+02,4.641e+02,
     &  4.066e+02,2.264e+02,1.395e+02,2.680e+02,4.347e+02,3.362e+02,
     &  4.051e+02,4.642e+02,5.097e+02,3.298e+02,3.507e+02,4.057e+02,
     &  4.052e+02,3.658e+02,3.675e+02,3.581e+02,2.417e+02,1.870e+02,
     &  1.356e+02,6.816e+01,5.988e+01,1.213e+02,1.771e+02,2.441e+02,
     &  3.429e+02,2.237e+02,3.777e+02,3.196e+02,3.687e+02,3.892e+02,
     &  2.577e+02,4.301e+02,3.660e+02,3.880e+02,3.655e+02,3.284e+02,
     &  2.890e+02,3.682e+02,3.186e+02,3.097e+02,3.144e+02,2.747e+02,
     &  2.556e+02,2.859e+02,1.762e+02,1.761e+02,1.817e+02,1.524e+02,
     &  1.149e+02,8.834e+01,7.683e+01,7.632e+01,7.916e+01,7.886e+01,
     &  5.946e+01,1.126e+02,5.685e+01,8.710e+01,1.066e+02,1.352e+02,
     &  1.435e+02,1.906e+02,1.908e+02,1.672e+02,1.839e+02,1.708e+02,
     &  1.688e+02,2.351e+02,2.706e+02,3.222e+02,2.620e+02,3.370e+02/
      data (sun3(i),i=1801,1920)/
     &  2.246e+02,2.711e+02,2.740e+02,3.223e+02,2.464e+02,2.250e+02,
     &  2.712e+02,3.674e+02,1.455e+02,1.025e+02,1.822e+02,2.591e+02,
     &  1.733e+02,7.562e+01,1.675e+02,8.840e+01,1.955e+02,9.706e+01,
     &  1.313e+02,1.521e+02,1.425e+02,1.314e+02,2.077e+02,2.148e+02,
     &  2.221e+02,2.609e+02,3.694e+02,2.561e+02,1.989e+02,2.048e+02,
     &  1.751e+02,2.295e+02,1.492e+02,1.115e+02,1.910e+02,2.912e+02,
     &  2.025e+02,2.581e+02,3.009e+02,2.744e+02,2.616e+02,3.026e+02,
     &  2.379e+02,3.989e+02,2.989e+02,2.512e+02,3.752e+02,2.299e+02,
     &  2.515e+02,2.060e+02,2.521e+02,2.668e+02,2.880e+02,2.163e+02,
     &  2.388e+02,2.681e+02,3.094e+02,2.222e+02,2.844e+02,2.888e+02,
     &  2.518e+02,1.974e+02,2.464e+02,3.416e+02,3.662e+02,1.890e+02,
     &  3.015e+02,2.317e+02,2.568e+02,2.766e+02,2.468e+02,2.684e+02,
     &  2.399e+02,2.336e+02,3.133e+02,2.578e+02,3.153e+02,2.888e+02,
     &  3.633e+02,2.550e+02,2.250e+02,2.327e+02,1.786e+02,2.246e+02,
     &  2.416e+02,2.701e+02,3.772e+02,2.879e+02,2.425e+02,2.990e+02,
     &  2.995e+02,2.105e+02,1.778e+02,1.457e+02,7.720e+01,6.322e+01,
     &  1.064e+02,7.888e+01,1.098e+02,9.072e+01,1.461e+02,1.476e+02,
     &  1.062e+02,1.460e+02,8.945e+01,9.599e+01,1.301e+02,7.194e+01,
     &  7.451e+01,5.351e+01,1.079e+02,1.027e+02,6.458e+01,6.250e+01,
     &  1.209e+02,1.227e+02,1.337e+02,8.561e+01,3.841e+01,5.427e+01/
      data (sun3(i),i=1921,2040)/
     &  1.080e+02,1.280e+02,7.147e+01,1.374e+02,9.922e+01,1.996e+02,
     &  1.352e+02,1.245e+02,5.456e+01,1.015e+02,1.376e+02,1.946e+02,
     &  1.687e+02,1.519e+02,1.291e+02,7.997e+01,8.464e+01,1.539e+02,
     &  1.388e+02,1.282e+02,1.479e+02,1.222e+02,1.136e+02,1.363e+02,
     &  9.164e+01,6.305e+01,6.575e+01,9.692e+01,1.085e+02,9.025e+01,
     &  7.116e+01,7.687e+01,1.037e+02,6.924e+01,9.677e+01,6.201e+01,
     &  4.701e+01,6.277e+01,4.705e+01,6.230e+01,6.935e+01,5.770e+01,
     &  5.294e+01,6.882e+01,5.187e+01,5.422e+01,4.341e+01,5.599e+01,
     &  5.054e+01,6.250e+01,6.156e+01,3.641e+01,3.311e+01,4.122e+01,
     &  4.713e+01,3.622e+01,3.476e+01,4.600e+01,5.285e+01,3.377e+01,
     &  4.219e+01,3.859e+01,4.106e+01,3.686e+01,5.796e+01,5.901e+01,
     &  5.489e+01,7.432e+01,6.193e+01,3.488e+01,5.671e+01,8.196e+01,
     &  6.374e+01,5.236e+01,5.935e+01,7.155e+01,7.274e+01,6.400e+01,
     &  7.918e+01,6.098e+01,5.309e+01,3.760e+01,2.594e+01,3.493e+01,
     &  3.272e+01,5.058e+01,5.836e+01,3.784e+01,2.624e+01,5.231e+01,
     &  6.284e+01,4.004e+01,5.164e+01,5.762e+01,7.071e+01,6.756e+01,
     &  4.732e+01,5.337e+01,5.979e+01,5.802e+01,5.745e+01,5.218e+01,
     &  5.144e+01,4.906e+01,4.635e+01,3.534e+01,4.767e+01,5.670e+01,
     &  5.252e+01,5.597e+01,4.499e+01,5.471e+01,4.781e+01,4.579e+01,
     &  4.603e+01,5.262e+01,5.848e+01,4.638e+01,6.333e+01,6.969e+01/
      data (sun3(i),i=2041,2160)/
     &  6.198e+01,6.684e+01,8.475e+01,7.516e+01,5.147e+01,6.639e+01,
     &  7.242e+01,5.904e+01,4.354e+01,7.080e+01,5.808e+01,7.827e+01,
     &  7.732e+01,6.127e+01,7.943e+01,8.996e+01,6.309e+01,5.738e+01,
     &  6.335e+01,8.789e+01,7.135e+01,6.003e+01,6.743e+01,6.353e+01,
     &  5.726e+01,5.364e+01,3.072e+01,4.746e+01,2.748e+01,3.586e+01,
     &  4.882e+01,4.172e+01,2.564e+01,2.906e+01,2.866e+01,4.954e+01,
     &  4.829e+01,5.449e+01,3.629e+01,4.069e+01,4.651e+01,2.370e+01,
     &  2.414e+01,4.737e+01,5.656e+01,4.891e+01,6.514e+01,3.573e+01,
     &  3.176e+01,5.154e+01,5.273e+01,4.244e+01,2.847e+01,2.383e+01,
     &  2.527e+01,4.103e+01,3.772e+01,5.802e+01,6.462e+01,4.367e+01,
     &  4.600e+01,2.743e+01,6.466e+01,6.665e+01,5.024e+01,4.406e+01,
     &  4.300e+01,3.468e+01,4.870e+01,3.738e+01,5.671e+01,4.959e+01,
     &  4.490e+01,2.841e+01,3.720e+01,6.337e+01,5.811e+01,5.665e+01,
     &  4.692e+01,5.812e+01,6.171e+01,5.185e+01,5.224e+01,3.369e+01,
     &  2.443e+01,3.862e+01,2.890e+01,2.843e+01,2.034e+01,4.568e+01,
     &  4.942e+01,4.139e+01,3.106e+01,2.490e+01,4.091e+01,6.734e+01,
     &  4.449e+01,4.418e+01,3.171e+01,3.274e+01,4.878e+01,6.330e+01,
     &  5.296e+01,3.797e+01,2.738e+01,5.176e+01,8.211e+01,7.092e+01,
     &  3.145e+01,3.651e+01,3.577e+01,5.826e+01,4.686e+01,5.272e+01,
     &  6.938e+01,4.323e+01,3.563e+01,3.304e+01,3.057e+01,4.194e+01/
      data (sun3(i),i=2161,2280)/
     &  5.544e+01,5.358e+01,7.675e+01,7.967e+01,5.509e+01,3.162e+01,
     &  5.621e+01,4.262e+01,3.411e+01,3.832e+01,2.636e+01,2.769e+01,
     &  6.848e+01,4.867e+01,4.911e+01,4.705e+01,4.805e+01,4.111e+01,
     &  3.913e+01,5.750e+01,3.711e+01,3.647e+01,7.327e+01,5.108e+01,
     &  4.743e+01,6.879e+01,5.846e+01,4.600e+01,4.756e+01,4.743e+01,
     &  4.324e+01,3.099e+01,4.147e+01,3.100e+01,3.869e+01,3.353e+01,
     &  3.266e+01,3.007e+01,2.612e+01,3.186e+01,3.489e+01,3.122e+01,
     &  2.619e+01,3.952e+01,4.272e+01,5.374e+01,3.969e+01,3.272e+01,
     &  6.732e+01,4.805e+01,5.042e+01,3.893e+01,6.223e+01,3.210e+01,
     &  6.969e+01,4.771e+01,4.838e+01,5.313e+01,5.035e+01,8.284e+01,
     &  5.962e+01,7.108e+01,4.481e+01,4.740e+01,5.227e+01,4.850e+01,
     &  5.727e+01,7.848e+01,4.580e+01,6.122e+01,6.765e+01,8.359e+01,
     &  6.884e+01,8.798e+01,7.355e+01,4.449e+01,4.375e+01,5.330e+01,
     &  5.738e+01,3.991e+01,3.993e+01,5.581e+01,4.410e+01,5.360e+01,
     &  4.338e+01,5.720e+01,5.419e+01,5.738e+01,3.930e+01,2.626e+01,
     &  1.729e+01,3.990e+01,4.838e+01,4.419e+01,5.060e+01,2.202e+01,
     &  1.686e+01,3.075e+01,4.232e+01,3.349e+01,4.126e+01,5.598e+01,
     &  5.419e+01,6.771e+01,6.643e+01,5.781e+01,2.666e+01,3.649e+01,
     &  5.739e+01,6.306e+01,5.101e+01,3.100e+01,3.587e+01,6.027e+01,
     &  6.500e+01,4.575e+01,3.671e+01,4.481e+01,3.958e+01,4.664e+01/
      data (sun3(i),i=2281,2400)/
     &  3.204e+01,2.037e+01,6.077e+01,4.514e+01,3.080e+01,6.122e+01,
     &  5.890e+01,5.913e+01,5.740e+01,4.575e+01,2.203e+01,2.816e+01,
     &  3.919e+01,2.405e+01,2.529e+01,3.516e+01,4.197e+01,3.179e+01,
     &  4.408e+01,2.210e+01,3.246e+01,2.951e+01,1.504e+01,1.979e+01,
     &  3.906e+01,3.498e+01,4.719e+01,3.388e+01,4.383e+01,4.237e+01,
     &  2.460e+01,2.003e+01,2.041e+01,3.133e+01,3.428e+01,3.913e+01,
     &  5.984e+01,3.579e+01,3.764e+01,1.886e+01,5.297e+01,4.162e+01,
     &  3.732e+01,3.322e+01,3.610e+01,3.482e+01,4.446e+01,5.240e+01,
     &  4.404e+01,4.902e+01,5.670e+01,2.677e+01,1.921e+01,3.275e+01,
     &  4.919e+01,3.033e+01,2.480e+01,2.635e+01,3.751e+01,2.508e+01,
     &  3.481e+01,2.401e+01,2.568e+01,3.745e+01,3.819e+01,3.457e+01,
     &  3.925e+01,2.334e+01,1.154e+01,1.498e+01,2.897e+01,2.974e+01,
     &  4.410e+01,5.718e+01,3.462e+01,3.537e+01,4.820e+01,4.615e+01,
     &  2.739e+01,2.411e+01,3.083e+01,3.577e+01,4.155e+01,2.980e+01,
     &  1.823e+01,1.893e+01,2.293e+01,3.506e+01,2.732e+01,4.131e+01,
     &  3.547e+01,1.718e+01,1.806e+01,3.905e+01,2.913e+01,1.955e+01,
     &  2.049e+01,2.506e+01,2.768e+01,1.744e+01,2.600e+01,1.984e+01,
     &  1.572e+01,2.821e+01,2.124e+01,1.929e+01,1.685e+01,1.679e+01,
     &  1.421e+01,2.265e+01,1.402e+01,1.903e+01,1.463e+01,1.278e+01,
     &  1.428e+01,1.396e+01,1.367e+01,1.307e+01,1.378e+01,1.407e+01/
      data (sun3(i),i=2401,2494)/
     &  1.296e+01,1.356e+01,1.480e+01,1.382e+01,1.323e+01,1.381e+01,
     &  1.313e+01,1.231e+01,1.190e+01,1.277e+01,1.166e+01,1.112e+01,
     &  1.217e+01,1.218e+01,1.171e+01,1.057e+01,1.253e+01,1.129e+01,
     &  1.238e+01,8.687e+00,1.062e+01,1.212e+01,1.270e+01,1.028e+01,
     &  1.004e+01,1.203e+01,1.108e+01,9.293e+00,1.157e+01,1.150e+01,
     &  1.198e+01,1.150e+01,1.105e+01,1.174e+01,1.049e+01,1.140e+01,
     &  9.622e+00,1.142e+01,1.230e+01,1.116e+01,1.043e+01,1.001e+01,
     &  1.170e+01,1.139e+01,1.078e+01,9.622e+00,8.734e+00,9.449e+00,
     &  1.113e+01,9.840e+00,1.103e+01,9.832e+00,8.365e+00,7.702e+00,
     &  9.123e+00,1.067e+01,1.097e+01,9.437e+00,9.154e+00,8.843e+00,
     &  1.021e+01,8.275e+00,6.018e+00,7.045e+00,8.009e+00,1.007e+01,
     &  8.980e+00,7.486e+00,7.783e+00,9.095e+00,9.285e+00,8.224e+00,
     &  1.030e+01,8.923e+00,8.154e+00,8.251e+00,8.283e+00,8.517e+00,
     &  9.428e+00,8.940e+00,7.486e+00,7.695e+00,9.173e+00,8.089e+00,
     &  8.193e+00,7.251e+00,8.160e+00,8.710e+00,8.561e+00,7.154e+00,
     &  8.829e+00,8.004e+00,8.322e+00,8.312e+00/

      end
c  
c----------------------------------------------------------------------
      subroutine zensun(iday,time,alat,alon,zenith,azimuth,solfac)
c
c   routine:      zensun
c  
c   purpose:  compute the solar zenith and azimuth angles and solar flux
c             multiplier for a given location, time and day.
c
c   input:
c     iday    day of year (used to fraction into a 364.75 day year)
c  
c     time    universal time in decimal hours
c  
c     alat    geographic latitude of point on earth's surface (degrees)
c  
c     alon    geographic longitude of point on earth's surface (degrees)
c  
c   output:
c  
c     zenith  solar zenith angle (degrees)
c  
c     azimuth solar azimuth measured clockwise from due north (degrees)
c
c     solfac  solar flux multiplier. solfac=1./rsun**2 
c             where rsun is the current earth-sun distance in 
c             astronomical units.  
c  
      parameter (pi=3.141592654)
      parameter (dtor=pi/180.)


      dimension nday(74),eqt(74),dec(74)
      data nday/
     &   1,   6,  11,  16,  21,  26,  31,  36,  41,
     &  46,  51,  56,  61,  66,  71,  76,  81,  86,
     &  91,  96, 101, 106, 111, 116, 121, 126, 131,
     & 136, 141, 146, 151, 156, 161, 166, 171, 176,
     & 181, 186, 191, 196, 201, 206, 211, 216, 221,
     & 226, 231, 236, 241, 246, 251, 256, 261, 266,
     & 271, 276, 281, 286, 291, 296, 301, 306, 311,
     & 316, 321, 326, 331, 336, 341, 346, 351, 356,
     & 361, 366/

      data eqt/
     &    -3.23, -5.49, -7.60, -9.48,-11.09,-12.39,-13.34,-13.95,
     &   -14.23,-14.19,-13.85,-13.22,-12.35,-11.26,-10.01, -8.64,
     &    -7.18, -5.67, -4.16, -2.69, -1.29, -0.02,  1.10,  2.05,
     &     2.80,  3.33,  3.63,  3.68,  3.49,  3.09,  2.48,  1.71,
     &     0.79, -0.24, -1.33, -2.41, -3.45, -4.39, -5.20, -5.84,
     &    -6.28, -6.49, -6.44, -6.15, -5.60, -4.82, -3.81, -2.60,
     &    -1.19,  0.36,  2.03,  3.76,  5.54,  7.31,  9.04, 10.69,
     &    12.20, 13.53, 14.65, 15.52, 16.12, 16.41, 16.36, 15.95,
     &    15.19, 14.09, 12.67, 10.93,  8.93,  6.70,  4.32,  1.86,
     &    -0.62, -3.23/

      data dec/
     &   -23.06,-22.57,-21.91,-21.06,-20.05,-18.88,-17.57,-16.13,
     &   -14.57,-12.91,-11.16, -9.34, -7.46, -5.54, -3.59, -1.62,
     &     0.36,  2.33,  4.28,  6.19,  8.06,  9.88, 11.62, 13.29,
     &    14.87, 16.34, 17.70, 18.94, 20.04, 21.00, 21.81, 22.47,
     &    22.95, 23.28, 23.43, 23.40, 23.21, 22.85, 22.32, 21.63,
     &    20.79, 19.80, 18.67, 17.42, 16.05, 14.57, 13.00, 11.33,
     &     9.60,  7.80,  5.95,  4.06,  2.13,  0.19, -1.75, -3.69,
     &    -5.62, -7.51, -9.36,-11.16,-12.88,-14.53,-16.07,-17.50,
     &   -18.81,-19.98,-20.99,-21.85,-22.52,-23.02,-23.33,-23.44,
     &   -23.35,-23.06/

c
c compute the subsolar coordinates
c
      dd=mod(iday-1, 365)+1
      do 10 i=1,74
        if(nday(i) .gt. dd ) goto 20
 10   continue
 20   continue
      frac=(dd-nday(i-1))/(nday(i)-nday(i-1))
      eqtime=eqt(i-1)*(1.-frac)+frac*eqt(i)
      decang=dec(i-1)*(1.-frac)+frac*dec(i)
      sunlat=decang
      sunlon=-15.*(time-12.+eqtime/60.)
      
c      write(12,'(2i4,1p9e11.3)') i,nday(i),frac,eqtime,sunlat,sunlon
c      write(12,'(1p9e11.3)') eqt(i-1),eqt(i),eqtime
c      write(12,'(1p9e11.3)') dec(i-1),dec(i),decang
c
c compute the solar zenith, azimuth and flux multiplier
c
      t0=(90.-alat)*dtor                            
      t1=(90.-sunlat)*dtor                         
      p0=alon*dtor                                  
      p1=sunlon*dtor                               
      zz=cos(t0)*cos(t1)+sin(t0)*sin(t1)*cos(p1-p0) 
c      write(12,'(1p9e11.3)') t0,t1,p0,p1,zz
c      write(12,'(1p9e11.3)') cos(t0),cos(t1),sin(t0),sin(t1),cos(p1-p0)
      xx=sin(t1)*sin(p1-p0)
      yy=sin(t0)*cos(t1)-cos(t0)*sin(t1)*cos(p1-p0)
      azimuth=atan2(xx,yy)/dtor
      zenith=acos(zz)/dtor                         
c
      rsun=1.-0.01673*cos(.9856*(dd-2.)*dtor)      
      solfac=1./rsun**2                              
      return
      end

c file:                  suralb.f
c
c external routines:     salbedo,suralb
c
c internal routines:     useralb,snow,clearw,lakew,seaw,sand,vegeta
c
c internal common:       sr
c=======================================================================
      function salbedo(wl)
c 
c input:   wl
c output:  surface albedo
c
      parameter (mxwv=751)
c
      common/sr/ alb(mxwv),wmin,wmax,dw
c
      i=int((wl-wmin)/dw)+1
      i=max(1,min(mxwv-1,i))
      f=(wl-wmin-dw*(i-1))/dw
      f=max(0.,min(1.,f))
      salbedo=(1.-f)*alb(i)+f*alb(i+1)
      return
      end
c=======================================================================
      subroutine suralb(isalb,albcon,sc)
c
c purpose: specify surface composition.  Must be called before SALBEDO
c
c input:   isalb    surface type
c          albcon   constant surface albedo (if it applies)
c          sc       surface component fractions
c
      parameter (mxwv=751)
      common / sr / alb(mxwv),wmin,wmax,dw
      dimension r(mxwv),r1(mxwv),r2(mxwv),r3(mxwv),r4(mxwv),sc(4)

      wmin=.25
      wmax=4.
      dw=.005

      if(isalb.eq.1) call snow(r)
      if(isalb.eq.2) call clearw(r)
      if(isalb.eq.3) call lakew(r)
      if(isalb.eq.4) call seaw(r)
      if(isalb.eq.5) call sand(r)
      if(isalb.eq.6) call vegeta(r)

      if(isalb.eq.-1) call useralb(r,wmin,wmax,dw)

      if(isalb.eq.0) then
        do 1 i=1,mxwv
          alb(i)=albcon
 1      continue
      else if(isalb.lt.10) then
        do 10 i=1,mxwv
          alb(i)=r(i)
 10     continue
      else if(isalb.eq.10) then
        call snow(r1)
        call seaw(r2)
        call sand(r3)
        call vegeta(r4)
        do 20 i=1,mxwv
          alb(i)=sc(1)*r1(i)+sc(2)*r2(i)+sc(3)*r3(i)+sc(4)*r4(i)
 20     continue
      endif
      return
      end
c============================================================
      subroutine useralb(r,wmin,wmax,dw)
c
c purpose:     read user specified surface spectral reflectance
c
c discussion:  albedo data is read in from file "albedo.dat"
c
c
      parameter (mxwv=751)
      dimension r(mxwv)

      open(unit=13,file='albedo.dat',status='old',form='formatted')
      read(13,*) nn,wmin,wmax
      dw=(wmax-wmin)/(nn-1)
      read(13,*,end=20) (r(i),i=1,nn)
      close(unit=13)
      return
 20   continue
      write(*,*) 'Error in USERALB: expected ',nn,' elements'
      write(*,*) '  EOF detected at element ',i
	pause
      stop
      end
      
c============================================================

      subroutine snow(r)
      parameter (mxwv=751)
      dimension sr(mxwv),r(mxwv)

c  
c  Wiscombe, W.J. and and S.G. Warren, 1980: "A model for the spectral
c  albedo of snow. I: pure snow."  J. Atmospheric Sciences, 37, 2712-2733.
c  (based on there Mie/delta-eddington model with Reff=125um )

      data (sr(i),i=1,110) /
     a.970,.970,.970,.970,.970,.970,.970,.970,.970,.970,.970,
     a.971,.972,.973,.974,.975,.975,.975,.975,.976,.977,.978,
     a.979,.980,.980,.980,.980,.980,.980,.980,.980,.981,.982,
     a.983,.984,.985,.985,.985,.985,.986,.987,.988,.989,.990,
     a.990,.990,.990,.990,.990,.990,.990,.990,.990,.990,.990,
     a.988,.987,.986,.985,.983,.982,.981,.980,.978,.977,.976,
     a.975,.973,.972,.971,.970,.968,.967,.966,.965,.965,.965,
     a.965,.965,.963,.962,.961,.960,.953,.952,.951,.950,.950,
     a.950,.950,.950,.948,.945,.943,.940,.938,.935,.933,.930,
     a.928,.925,.923,.920,.918,.915,.913,.910,.908,.907,.906/
      data (sr(i),i=111,220) /
     a.905,.903,.902,.901,.900,.898,.895,.893,.890,.885,.880,
     a.875,.870,.865,.860,.855,.850,.843,.842,.841,.840,.835,
     a.830,.825,.820,.810,.800,.790,.780,.771,.762,.753,.745,
     a.739,.733,.727,.720,.718,.715,.713,.710,.715,.720,.725,
     a.730,.733,.735,.738,.740,.742,.743,.744,.745,.745,.745,
     a.745,.745,.743,.742,.741,.740,.732,.724,.716,.710,.692,
     a.674,.656,.640,.630,.620,.610,.600,.584,.568,.552,.535,
     a.524,.513,.502,.490,.490,.490,.490,.490,.490,.490,.490,
     a.490,.492,.493,.494,.495,.495,.495,.495,.495,.495,.495,
     a.495,.495,.493,.492,.491,.490,.488,.485,.483,.480,.470/
      data (sr(i),i=221,330) /
     a.460,.450,.440,.424,.408,.392,.375,.320,.264,.198,.150,
     a.134,.118,.101,.085,.074,.063,.051,.040,.036,.032,.028,
     a.025,.025,.025,.025,.025,.028,.030,.033,.035,.039,.043,
     a.047,.050,.053,.055,.058,.060,.063,.065,.068,.070,.073,
     a.075,.078,.080,.083,.085,.088,.090,.093,.095,.098,.100,
     a.104,.108,.112,.115,.119,.123,.126,.130,.135,.140,.145,
     a.150,.153,.155,.158,.160,.163,.165,.168,.170,.173,.175,
     a.178,.180,.184,.188,.192,.195,.204,.213,.222,.230,.238,
     a.246,.254,.260,.254,.248,.242,.235,.206,.177,.248,.120,
     a.104,.088,.072,.055,.049,.043,.037,.030,.038,.035,.033/
      data (sr(i),i=331,mxwv) /
     a.030,.028,.025,.023,.020,.023,.022,.021,.020,.018,.017,
     a.016,.015,.013,.012,.011,.010,.010,.010,.010,.010,.010,
     a.010,.010,.010,.012,.013,.014,.015,.017,.018,.019,.020,
     a.022,.023,.024,.025,.025,.025,.025,.025,.027,.030,.032,
     a.035,.040,.045,.050,.055,.059,.063,.067,.070,.074,.078,
     a.082,.085,.089,.093,.097,.100,.102,.103,.104,.105,.109,
     a.113,.117,.120,.124,.128,.132,.135,.130,.125,.120,.115,
     a.108,.100,.092,.085,.081,.077,.073,.070,.068,.065,.063,
     a.062,.058,.055,.053,.050,.048,.047,.046,.045,.042,.040,
     a.038,.035,.033,.032,.031,.030,.030,.030,.030,.030,.028,
     a.027,.026,.025,.025,.025,.025,.025,.025,.025,.025,.025,
     a.025,.025,.025,.025,.025,.025,.025,.025,.025,.025,.025,
     a.025,.025,.025,.025,.025,.023,.022,.021,.020,.018,.017,
     a.016,.015,.013,.012,.011,.010,.008,.007,.006,.005,.003,
     a.002,.001,.000,264*0.0/

      do 1 i=1,mxwv
      r(i)=sr(i)
1     continue
      return
      end

c=============================================================================

      subroutine   clearw (r)
      parameter (mxwv=751)
      dimension sr(mxwv),r(mxwv)

c     clear water reflectance
c     warning : values of dry sand ground reflectance are given
c     between 0.5 and 1.0 microns. outside this interval the
c     values are set to 0.
c
c     Viollier, M. "Teledetection des concentrations de seston et
c     pigments chlorophylliens contenus dans l'Ocean", These de Doctorat
c     d'Etat, no 503, 1980

      data (sr(i),i=1,mxwv) / 30*0.,
     a.041,.041,.041,.041,.041,.041,.041,.041,.041,.041,.041,
     a.041,.041,.041,.041,.041,.041,.041,.041,.041,.041,.042,
     a.043,.044,.044,.046,.047,.049,.050,.052,.054,.055,.056,
     a.059,.060,.061,.061,.059,.057,.054,.053,.051,.050,.049,
     a.047,.046,.046,.045,.044,.043,.043,.041,.040,.038,.037,
     a.037,.036,.033,.032,.031,.029,.027,.024,.023,.021,.018,
     a.015,.012,.009,.008,.006,.004,.002,.001,.000,.000,.000,
     a644*0./
      do 1 i=1,mxwv
      r(i)=sr(i)
    1 continue
      return
      end

c=============================================================================

      subroutine   lakew (r)
      parameter (mxwv=751)
      dimension sr(mxwv),r(mxwv)

c     lake water reflectance
c     warning : values of lake water reflectance are given
c     between 0.35 and 1.0 microns. outside this interval the
c     values are set to 0.
c
c     Kondratyev, K. Y., 1969: "Radiation in the atmosphere", Academic
c     Press, N.Y. 10003 USA


      data (sr(i),i=1,mxwv) / 21*0.,
     a.045,.047,.048,.050,.051,.051,.053,.053,.055,.057,.058,
     a.059,.060,.060,.062,.064,.065,.067,.068,.070,.070,.069,
     a.071,.071,.072,.074,.074,.075,.076,.076,.077,.077,.077,
     a.077,.079,.080,.080,.081,.081,.082,.082,.082,.083,.082,
     a.083,.082,.082,.082,.082,.082,.080,.079,.079,.077,.075,
     a.074,.072,.071,.070,.068,.066,.065,.064,.063,.061,.060,
     a.059,.057,.056,.054,.053,.051,.050,.048,.047,.046,.045,
     a.044,.042,.041,.040,.039,.037,.036,.035,.034,.032,.032,
     a.031,.030,.030,.028,.027,.027,.025,.024,.024,.023,.022,
     a.022,.020,.020,.020,.019,.019,.019,.019,.019,.019,.018,
     a.016,.016,.015,.014,.012,.012,.012,.011,.011,.009,.008,
     a.008,.006,.005,.005,.003,.002,.000,602*0./
      do 1 i=1,mxwv
      r(i)=sr(i)
    1 continue
      return
      end

c=============================================================================

      subroutine seaw(r)
      parameter (mxwv=751)
      dimension sr(mxwv),r(mxwv)
c
c  sea water (actually just clear water)
c
c     Viollier, M. "Teledetection des concentrations de seston et
c     pigments chlorophylliens contenus dans l'Ocean", These de Doctorat
c     d'Etat, no 503, 1980


      data (sr(i),i=1,mxwv) / 41*0.041,
     a.041,.041,.041,.041,.041,.041,.041,.041,.041,.041,.042,
     a.043,.044,.044,.046,.047,.049,.050,.052,.054,.055,.056,
     a.059,.060,.061,.061,.059,.057,.054,.053,.051,.050,.049,
     a.047,.046,.046,.045,.044,.043,.043,.041,.040,.038,.037,
     a.037,.036,.033,.032,.031,.029,.027,.024,.023,.021,.018,
     a.015,.012,.009,.008,.006,.004,.002,.001,.000,.000,.000,
     a644*0./
      do 1 i=1,mxwv
      r(i)=sr(i)
    1 continue
      return
      end

c=============================================================================

      subroutine   sand (r)
      parameter (mxwv=751)
      dimension sr(mxwv),r(mxwv)

c     sand average reflectance
c     warning : values of dry sand ground reflectance are given
c     between 0.4 and 2.2 microns. outside this interval the
c     values are set to 0.
c
c     Staetter, R., and M. Schroeder, 1978: "Spectral characteristics of
c     natural surfaces", Proceeding of the tenth Int. Conf. on Earth
c     Obs. from Space, 6-11 March 1978, (ESA-SP, 134)


      data (sr(i),i=1,140) / 30*0.,
     a.091,.091,.091,.091,.091,.091,.095,.095,.095,.095,.095,
     a.095,.095,.097,.097,.100,.103,.103,.107,.107,.107,.107,
     a.110,.114,.117,.121,.121,.125,.125,.125,.128,.126,.131,
     a.134,.134,.134,.134,.134,.134,.141,.145,.149,.149,.154,
     a.157,.160,.163,.163,.166,.169,.173,.177,.181,.185,.189,
     a.195,.199,.204,.204,.208,.214,.220,.224,.228,.233,.235,
     a.239,.242,.246,.246,.248,.251,.254,.256,.260,.263,.263,
     a.263,.266,.270,.273,.276,.279,.279,.282,.284,.284,.284,
     a.286,.286,.286,.290,.292,.292,.292,.292,.292,.292,.292,
     a.295,.295,.298,.298,.301,.301,.306,.306,.310,.310,.314/
      data (sr(i),i=141,240) /
     a.314,.314,.316,.316,.316,.316,.316,.319,.321,.321,
     a.321,.321,.324,.324,.324,.324,.322,.322,.322,.320,
     a.320,.317,.317,.317,.320,.320,.320,.323,.323,.327,
     a.327,.327,.329,.329,.332,.332,.332,.332,.333,.335,
     a.338,.341,.345,.348,.353,.353,.353,.353,.355,.355,
     a.355,.355,.353,.353,.353,.353,.353,.353,.356,.356,
     a.356,.356,.360,.360,.360,.363,.363,.363,.367,.367,
     a.367,.370,.370,.370,.370,.370,.370,.367,.367,.364,
     a.362,.362,.362,.359,.359,.359,.359,.359,.363,.363,
     a.363,.363,.363,.365,.369,.369,.369,.369,.369,.372/
      data (sr(i),i=241,340) /
     a.372,.372,.372,.375,.375,.375,.375,.375,.375,.375,
     a.375,.375,.375,.375,.375,.375,.375,.375,.377,.377,
     a.377,.377,.377,.377,.377,.377,.377,.377,.377,.377,
     a.379,.379,.379,.379,.382,.382,.382,.382,.385,.385,
     a.385,.385,.385,.385,.388,.388,.388,.388,.388,.388,
     a.388,.391,.391,.391,.391,.391,.391,.391,.391,.391,
     a.391,.391,.394,.394,.394,.394,.394,.394,.394,.396,
     a.396,.396,.396,.396,.396,.393,.393,.393,.393,.389,
     a.386,.386,.382,.382,.378,.378,.374,.369,.369,.369,
     a.371,.371,.371,.371,.371,.371,.371,.371,.371,.371/
      data (sr(i),i=341,mxwv) /
     a.374,.374,.377,.377,.377,.377,.379,.379,.379,.379,
     a.383,.385,.388,.388,.388,.392,.392,.392,.395,.395,
     a.395,.395,.395,.393,.393,.393,.388,.388,.388,.388,
     a.388,.385,.385,.385,.381,.381,.381,.381,.381,.381,
     a.381,.381,.374,.374,.374,.374,.374,.374,.374,.374,
     a.372,.369,.369,.369,.369,.369,.369,.369,.369,.369,
     a.369,.369,.369,.369,.369,.369,.369,.369,.369,.369,
     a.369,340*0./
      do 1 i=1,mxwv
      r(i)=sr(i)
    1 continue
      return
      end

c=============================================================================

      subroutine   vegeta (r)
      parameter (mxwv=751)
      dimension sr(mxwv),r(mxwv)

c     vegetation average reflectance
c     warning : values of dry sand ground reflectance are given
c     between 0.4 and 2.2 microns. outside this interval the
c     values are set to 0.
c
c     Manual of Remote Sensing American Society of Photogrammetry,
c     R.G. Reeves, A. Anson, D. Landen, eds.  1st ed. Falls Church, Va.,
c     1975.

      data (sr(i),i=1,140) / 30*0.,
     a.060,.060,.062,.064,.066,.069,.070,.072,.074,.078,.080,
     a.083,.084,.089,.093,.098,.102,.104,.106,.110,.115,.119,
     a.121,.125,.127,.130,.133,.133,.134,.133,.131,.127,.121,
     a.115,.110,.105,.101,.098,.094,.090,.087,.083,.081,.080,
     a.078,.076,.075,.074,.073,.073,.073,.074,.079,.100,.138,
     a.169,.199,.228,.259,.290,.316,.350,.378,.403,.436,.462,
     a.487,.509,.511,.514,.519,.520,.520,.522,.522,.522,.523,
     a.524,.524,.524,.524,.526,.526,.526,.527,.527,.527,.528,
     a.528,.528,.529,.529,.529,.529,.531,.531,.531,.531,.531,
     a.532,.532,.532,.532,.532,.533,.533,.533,.534,.534,.534/
      data (sr(i),i=141,240) /
     a.534,.535,.535,.536,.536,.537,.537,.536,.536,.535,
     a.535,.534,.532,.531,.530,.528,.528,.527,.527,.526,
     a.525,.524,.522,.521,.519,.518,.515,.513,.512,.510,
     a.508,.507,.506,.505,.502,.500,.498,.496,.495,.493,
     a.492,.492,.492,.492,.492,.493,.495,.495,.496,.496,
     a.496,.497,.497,.497,.498,.498,.497,.497,.497,.495,
     a.493,.492,.491,.488,.486,.482,.478,.476,.472,.467,
     a.462,.451,.441,.429,.421,.408,.399,.385,.371,.365,
     a.349,.339,.330,.321,.309,.298,.289,.279,.272,.267,
     a.259,.251,.243,.233,.229,.224,.218,.215,.215,.215/
      data (sr(i),i=241,340) /
     a.215,.219,.223,.229,.234,.240,.249,.256,.260,.267,
     a.273,.279,.286,.293,.300,.306,.312,.319,.325,.331,
     a.337,.341,.345,.351,.355,.360,.362,.367,.369,.372,
     a.376,.378,.379,.381,.382,.384,.386,.387,.389,.388,
     a.388,.388,.388,.388,.388,.384,.383,.381,.380,.378,
     a.376,.374,.373,.371,.370,.368,.367,.366,.365,.365,
     a.363,.362,.361,.359,.358,.357,.355,.353,.350,.347,
     a.346,.345,.343,.340,.337,.335,.331,.330,.321,.312,
     a.296,.273,.221,.186,.158,.138,.129,.121,.110,.102,
     a.095,.091,.089,.086,.086,.084,.084,.084,.086,.087/
      data (sr(i),i=341,mxwv) /
     a.093,.098,.105,.114,.116,.124,.133,.134,.141,.147,
     a.151,.156,.162,.166,.170,.174,.175,.178,.181,.185,
     a.187,.188,.192,.196,.199,.201,.205,.208,.212,.213,
     a.214,.217,.219,.220,.221,.224,.227,.229,.231,.233,
     a.237,.238,.239,.241,.242,.243,.245,.245,.246,.248,
     a.248,.250,.246,.242,.238,.234,.230,.226,.222,.218,
     a.214,.210,.206,.202,.198,.194,.190,.186,.182,.178,
     a.174,.170,.166,.162,.158,.154,.150,.146,.142,.138,
     a.134,.130,.126,.122,.118,.114,.110,.106,.102,.098,
     a.094,.090,.086,.082,.078,.074,.070,.066,.062,.058,
     a.054,.050,.046,.042,.038,.034,.030,.026,.022,.018,
     a.014,.010,.010,.010,.010,.010,.010,.010,.010,.010,
     a.010,.010,.010,.010,.010,.010,.010,.010,.010,.010,
     a.010,280*0./
      do 1 i=1,mxwv
      r(i)=sr(i)
    1 continue
      return
      end
c
c
c  diagnostic main program:
c
c        common / sr / alb(751),wmin,wmax,dw
c        dimension sc(4)
c        write(*,1000) (.25+.005*(i-1),i=1,751)
c        call suralb(1,0,sc)
c        write(*,1000) (alb(i),i=1,751)
c        call suralb(2,0,sc)
c        write(*,1000) (alb(i),i=1,751)
c        call suralb(3,0,sc)
c        write(*,1000) (alb(i),i=1,751)
c        call suralb(4,0,sc)
c        write(*,1000) (alb(i),i=1,751)
c        call suralb(5,0,sc)
c        write(*,1000) (alb(i),i=1,751)
c        call suralb(6,0,sc)
c        write(*,1000) (alb(i),i=1,751)
c   1000 format(10f10.4)
c        end

c file:                  filter.f
c
c external routines:     setfilt,filter
c
c internal routines      meteo, goese,goesw,avhr81,avhr82,avhr91,avhr92,
c                        avhr101,avhr102,avhr111,avhr112,gtr1,gtr2,nm410
c                        nm936,usersat,mfrsr1,mfrsr2,mfrsr3,mfrsr4,mfrsr5,
c                        mfrsr6,avhr83,avhr84,avhr85,setlow
c
c internal common        fltblk
c=======================================================================
      subroutine setfilt(isat,wlinf,wlsup,wlinc,wl1,wl2,nwl)
      parameter (iwvmx=1000)
      common /fltblk/filfun(iwvmx),wmin,wmax,dw,nnf
      
c
c input   isat      filter selection flag
c 
c         wlinf     lower wavelength limit
c                      or central wavelength for isat=-2,-3
c         wlsup     upper wavelength limit
c                      or equivalent width for isat=-2,-3
c         wlinc     wavelength increment
c output
c         wl1       lower wavelength limit
c         wl2       upper wavelength limit
c         nwl       number of sample points
c
c NOTE: actual filter values are returned by the function "filter"
c
      if(wlsup.eq.0.and.isat.le.2) then
        write(*,*) 'Error -- WLSUP must be non-zero when ISAT=',isat
        write(*,*) '         WLSUP =',wlsup
	pause
        stop
      endif

      if(isat.eq.-4) then   ! center, equivalent width, gaussian
        sqpi=sqrt(acos(-1.))
        xc=2
        xlim=xc*sqpi
        wmin=wlinf-xc*wlsup
        wmax=wlinf+xc*wlsup
        nnf=1000
        dw=(wmax-wmin)/(nnf-1)
        do i=1,nnf
          xx=-xlim+(i-1)*(2*xlim)/(nnf-1)
          filfun(i)=exp(-xx**2)
        enddo
      endif
       
      if(isat.eq.-3) then  ! center, equivalent width, triangular
        wmin=wlinf-wlsup
        wmax=wlinf+wlsup
        filfun(1)=0.
        filfun(2)=1.
        filfun(3)=0.
        nnf=3
        dw=wlsup
      endif

      if(isat.eq.-2) then   ! center, width, flat top
        wmin=wlinf-.5*wlsup
        wmax=wlinf+.5*wlsup
        nnf=0
      endif

      if(isat.eq.0.) then ! wl_min, wl_max, flat  top
        wmin=wlinf
        wmax=wlsup
        nwl=1
        nnf=0
        if(wlinf.eq.wlsup) then
          wlinc=1.
          wl1=wmin
          wl2=wmax
          return
        endif
      endif

      if(isat.eq.-1) call usersat(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.1)  call meteo(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.2)  call goese(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.3)  call goesw(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.4)  call avhr81(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.5)  call avhr82(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.6)  call avhr91(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.7)  call avhr92(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.8)  call avhr101(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.9)  call avhr102(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.10) call avhr111(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.11) call avhr112(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.12) call gtr1(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.13) call gtr2(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.14) call nm410(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.15) call nm936(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.16) call mfrsr1(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.17) call mfrsr2(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.18) call mfrsr3(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.19) call mfrsr4(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.20) call mfrsr5(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.21) call mfrsr6(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.22) call avhr83(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.23) call avhr84(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.24) call avhr85(filfun,wmin,wmax,dw,nnf)
      if(isat.eq.25) call setlow(filfun,wmin,wmax,dw,nnf)
	if(isat.eq.31) call modis1(filfun,wmin,wmax,dw,nnf)
	if(isat.eq.32) call modis2(filfun,wmin,wmax,dw,nnf)
	if(isat.eq.33) call modis3(filfun,wmin,wmax,dw,nnf)
	if(isat.eq.34) call modis4(filfun,wmin,wmax,dw,nnf)
	if(isat.eq.35) call modis5(filfun,wmin,wmax,dw,nnf)
	if(isat.eq.36) call modis6(filfun,wmin,wmax,dw,nnf)
	if(isat.eq.37) call modis7(filfun,wmin,wmax,dw,nnf)
	

      if(wmin.lt.0.2) then
        write(*,*) 'Error in setfilt -- illegal wavelength limits '
        write(*,*) wmin,wmax
	pause
        stop
      endif

      if(wlinc.gt.1.) then
c       equal spacing in wavenumber
        nwl=((10000./wmin) - (10000./wmax))/wlinc + 1.
      elseif(wlinc.lt.0.) then
c       equal spacing in ln(wavelength) and ln(wavenumber)
        nwl=1+log(wmax/wmin)/abs(wlinc)
      else
c       use default wavelength increment
        if(wlinc.eq.0)
     &       wlinc=(wmax-wmin)/max(10,1+int((wmax-wmin)/0.005))
c       equal spacing in wavelength
        nwl=nint((wmax-wmin)/wlinc)+1
      endif

      wl1=wmin
      wl2=wmax

      return
      end     
      
c=======================================================================
      function filter(w)
c
c input:  w       wavelength in microns
c output:         filter functions
c 
c NOTE: "setfilt" must be called before "filter"
c
      parameter (iwvmx=1000)
      common /fltblk/filfun(iwvmx),wmin,wmax,dw,nnf
      if(nnf.eq.0) then 
        filter=1.
      else
        i=(w-wmin)/dw+1.00001
        f=(w-wmin-dw*(i-1))/dw
        if(i.ge.1.and.i.lt.nnf)  then 
          filter=(1.-f)*filfun(i)+f*filfun(i+1)
        else
          filter=0.
        endif
      endif
      return
      end
c=======================================================================
      subroutine usersat(srr,wmin,wmax,dww,nnf)
      dimension srr(*)

c
c     user specified filter function
c
      open(unit=13,file='filter.dat',status='old',form='formatted')
      read(13,*) wmin,wmax,dww,nnf,(srr(i),i=1,nnf)
      close(unit=13)
c
      return
      end
c=======================================================================
      subroutine meteo(srr,wmin,wmax,dww,nnf)
      parameter (wmn=.355, wmx=1.11, dw=.005)
      parameter (mwv=152)
      dimension srr(*),sr(mwv)
c
c    spectral band of meteosat
c
      data sr/ 
     & 0.0050,0.0094,0.0154,0.0191,0.0208,0.0263,0.0357,0.0404,0.0513,
     & 0.0570,0.0689,0.0746,0.0820,0.0900,0.1001,0.1071,0.1152,0.1222,
     & 0.1358,0.1482,0.1561,0.1683,0.1789,0.1908,0.2047,0.2146,0.2280,
     & 0.2426,0.2582,0.2758,0.2897,0.3029,0.3209,0.3388,0.3514,0.3705,
     & 0.3886,0.4035,0.4240,0.4387,0.4644,0.4885,0.5095,0.5348,0.5611,
     & 0.5841,0.6109,0.6332,0.6478,0.6617,0.6736,0.6857,0.7006,0.7120,
     & 0.7254,0.7430,0.7698,0.7834,0.8002,0.8206,0.8434,0.8563,0.8753,
     & 0.8949,0.9214,0.9410,0.9571,0.9722,0.9844,0.9893,0.9948,0.9968,
     & 0.9960,1.0000,0.9960,0.9953,0.9921,0.9874,0.9824,0.9770,0.9735,
     & 0.9710,0.9660,0.9660,0.9623,0.9623,0.9628,0.9599,0.9569,0.9509,
     & 0.9405,0.9271,0.9150,0.9029,0.8865,0.8753,0.8644,0.8548,0.8426,
     & 0.8283,0.8151,0.8037,0.7901,0.7804,0.7660,0.7591,0.7489,0.7393,
     & 0.7326,0.7192,0.6984,0.6664,0.6434,0.6178,0.6005,0.5824,0.5603,
     & 0.5385,0.5232,0.5038,0.4862,0.4706,0.4471,0.4211,0.4007,0.3809,
     & 0.3618,0.3388,0.3147,0.2924,0.2758,0.2548,0.2332,0.2099,0.1908,
     & 0.1678,0.1509,0.1348,0.1138,0.0994,0.0838,0.0751,0.0642,0.0538,
     & 0.0456,0.0372,0.0263,0.0178,0.0097,0.0084,0.0020,0.0000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
      return
      end
c=======================================================================
      subroutine goese(srr,wmin,wmax,dww,nnf)
      parameter (wmn=.500, wmx=.895, dw=.005)
      parameter (mwv=80)
      dimension srr(*),sr(mwv)
c
c    spectral band of goes east
c
      data sr/
     & 0.013,0.046,0.133,0.302,0.455,0.584,0.680,0.727,0.772,0.807,
     & 0.838,0.859,0.879,0.899,0.919,0.934,0.948,0.965,0.983,0.991,
     & 0.983,0.974,0.961,0.949,0.937,0.925,0.916,0.912,0.907,0.911,
     & 0.914,0.907,0.892,0.877,0.843,0.808,0.772,0.734,0.695,0.678,
     & 0.660,0.639,0.613,0.588,0.556,0.521,0.486,0.457,0.427,0.397,
     & 0.363,0.330,0.301,0.279,0.257,0.234,0.210,0.186,0.165,0.146,
     & 0.127,0.110,0.096,0.082,0.069,0.058,0.047,0.038,0.031,0.024,
     & 0.018,0.014,0.010,0.006,0.004,0.003,0.002,0.001,0.001,0.000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
      return
      end
c=======================================================================
      subroutine goesw(srr,wmin,wmax,dww,nnf)
      parameter (wmn=.500, wmx=.905, dw=.005)
      parameter (mwv=82)
      dimension srr(*),sr(mwv)
c
c    spectral band of goes west
c
      data sr/
     & 0.002,0.020,0.065,0.183,0.409,0.611,0.775,0.889,0.925,0.957,
     & 0.973,0.987,0.993,0.999,0.998,0.997,0.990,0.983,0.974,0.964,
     & 0.956,0.951,0.944,0.928,0.912,0.893,0.874,0.853,0.832,0.811,
     & 0.795,0.780,0.760,0.738,0.716,0.686,0.656,0.625,0.592,0.560,
     & 0.536,0.513,0.489,0.464,0.440,0.413,0.385,0.358,0.331,0.305,
     & 0.279,0.256,0.233,0.211,0.192,0.174,0.157,0.143,0.129,0.115,
     & 0.101,0.087,0.077,0.070,0.062,0.054,0.046,0.038,0.032,0.027,
     & 0.022,0.018,0.015,0.011,0.008,0.006,0.004,0.003,0.002,0.001,
     & 0.001,0.000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
      return
      end
c=======================================================================
      subroutine avhr81(srr,wmin,wmax,dww,nnf)
      parameter (wmn=0.505, wmx=0.745, dw=.005)
      parameter (mwv=49)
      dimension srr(*),sr(mwv)
c
c    1st spectral band of avhrr  (noaa 8)
c
      data sr/
     &  .004,.008,.019,.028,.035,.048, .060, .070, .078, .087,
     &  .095,.099,.367,.527,.665,.788, .815, .811, .807, .828,
     &  .870,.903,.931,.956,.978,.993,1.000,1.000,1.000,1.000,
     & 1.000,.976,.900,.817,.743,.622, .438, .306, .217, .140,
     &  .088,.067,.047,.032,.024,.015, .003, .001, .000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
      subroutine avhr82(srr,wmin,wmax,dww,nnf)
      parameter (wmn=0.70, wmx=1.085, dw=.005)
      parameter (mwv=78)
      dimension srr(*),sr(mwv)
c
c    2nd spectral band of avhr  (noaa 8)
c
      data sr/
     & .035,.168,.350,.510,.622,.756,.837,.896,.929,.949,
     & .952,.946,.945,.986,.998,.998,.998,.988,.939,.910,
     & .889,.869,.853,.840,.827,.817,.809,.802,.797,.793,
     & .789,.785,.781,.775,.768,.759,.753,.749,.745,.741,
     & .738,.719,.695,.678,.662,.648,.636,.627,.618,.612,
     & .603,.600,.597,.593,.587,.582,.562,.523,.485,.433,
     & .376,.288,.230,.189,.145,.107,.075,.051,.030,.020,
     & .014,.008,.006,.003,.001,.001,.001,.000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
      subroutine avhr91(srr,wmin,wmax,dww,nnf)
      parameter (wmn=.54, wmx=.80, dw=.005)
      parameter (mwv=53)
      dimension srr(*),sr(mwv)
c
c     revised  jan94
c
c    1st spectral band of avhr (noaa 9)
c
      data sr/
     &    0.0010, 0.0040, 0.0400, 0.1398, 0.2700, 0.3929, 0.5000,
     &    0.5898, 0.6700, 0.7448, 0.8000, 0.8203, 0.8150, 0.7973,
     &    0.7850, 0.7933, 0.8200, 0.8587, 0.8950, 0.9134, 0.9050,
     &    0.8663, 0.8250, 0.8087, 0.8150, 0.8397, 0.8900, 0.9645,
     &    1.0000, 0.9363, 0.8100, 0.6633, 0.5000, 0.3232, 0.1800,
     &    0.1138, 0.0900, 0.0697, 0.0500, 0.0351, 0.0250, 0.0188,
     &    0.0150, 0.0124, 0.0100, 0.0073, 0.0050, 0.0038, 0.0030,
     &    0.0019, 0.0010, 0.0009, 0.0010/

c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
      subroutine avhr92(srr,wmin,wmax,dww,nnf)
      parameter (wmn=.645, wmx=1.190, dw=.005)
      parameter (mwv=110)
      dimension srr(*),sr(mwv)
c
c    2nd spectral band of avhr  (noaa 9)
c
      data sr/
     & .0036,.0071,.0071,.0071,.0075,.0079,.0079,.0079,.0100,.0120,
     & .0864,.1607,.3715,.4222,.5381,.6540,.7888,.9235,.9481,.9727,
     & .9845,.9963,.9982,1.000,.9945,.9891,.9891,.9891,.9593,.9294,
     & .9366,.9438,.9276,.9114,.8919,.8724,.8724,.8724,.8724,.8724,
     & .8724,.8724,.8724,.8724,.8724,.8724,.8710,.8695,.8647,.8600,
     & .8533,.8465,.8418,.8372,.8284,.8197,.8041,.7886,.7845,.7805,
     & .7762,.7719,.7656,.7594,.7374,.7154,.6489,.5824,.4963,.4103,
     & .3259,.2415,.1862,.1309,.1009,.0709,.0537,.0364,.0299,.0234,
     & .0188,.0142,.0106,.0070,.0070,.0070,.0061,.0051,.0038,.0025,
     & .0025,.0025,.0025,.0025,.0025,.0025,.0025,.0025,.0025,.0025,
     & .0025,.0025,.0025,.0025,.0025,.0025,.0025,.0025,.0025,.0000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
      subroutine avhr101(srr,wmin,wmax,dww,nnf)
      parameter (wmn=.555, wmx=.750, dw=.005)
      parameter (mwv=40)
      dimension srr(*),sr(mwv)
      data sr/ 
     $    0.039998,    0.079998,    0.274987,    0.469986,    0.604990,
     $    0.739990,    0.779997,    0.819997,    0.815000,    0.810000,
     $    0.829999,    0.849999,    0.894997,    0.939997,    0.964998,
     $    0.989998,    0.975001,    0.960001,    0.955000,    0.950000,
     $    0.974998,    0.999998,    0.995000,    0.990000,    0.810015,
     $    0.630015,    0.455016,    0.280017,    0.192508,    0.105008,
     $    0.077503,    0.050003,    0.040001,    0.030001,    0.025000,
     $    0.020000,    0.015000,    0.010000,    0.008000,    0.000000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
       return
       end
c======================================================================       
      subroutine avhr102(srr,wmin,wmax,dww,nnf)
      parameter (wmn=.685, wmx=1.180, dw=.005)
      parameter (mwv=100)
      dimension srr(*),sr(mwv)

      data sr/
     $    0.001000,    0.002000,    0.002000,    0.002000,    0.040996,
     $    0.079996,    0.239985,    0.399985,    0.564984,    0.729984,
     $    0.804993,    0.879993,    0.909997,    0.939997,    0.959998,
     $    0.979998,    0.989999,    0.999999,    0.985002,    0.970002,
     $    0.955002,    0.940002,    0.920002,    0.900002,    0.894501,
     $    0.889001,    0.883501,    0.878001,    0.872501,    0.867001,
     $    0.861501,    0.856001,    0.850501,    0.845001,    0.838001,
     $    0.831001,    0.824001,    0.817001,    0.810001,    0.803001,
     $    0.796001,    0.789001,    0.782001,    0.775001,    0.763501,
     $    0.752001,    0.740501,    0.729001,    0.717502,    0.706002,
     $    0.694502,    0.683002,    0.671502,    0.660002,    0.617006,
     $    0.574006,    0.531006,    0.488006,    0.445006,    0.402006,
     $    0.359006,    0.316007,    0.273006,    0.230006,    0.211503,
     $    0.193003,    0.174503,    0.156003,    0.137503,    0.119003,
     $    0.100003,    0.081003,    0.062503,    0.044003,    0.025503,
     $    0.007003,    0.006500,    0.006000,    0.005500,    0.005000,
     $    0.004000,    0.003000,    0.002500,    0.002000,    0.002000,
     $    0.002000,    0.002000,    0.002000,    0.001500,    0.001000,
     $    0.001000,    0.001000,    0.001000,    0.001000,    0.001000,
     $    0.001000,    0.001000,    0.001000,    0.000500,    0.000000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c======================================================================       
      subroutine avhr111(srr,wmin,wmax,dww,nnf)
      parameter (wmn=.545, wmx=.750, dw=.005)
      parameter (mwv=42)
       dimension srr(*),sr(mwv)
       data sr/
     $    0.000500,    0.001000,    0.047997,    0.094997,    0.297487,
     $    0.499986,    0.569995,    0.639995,    0.699996,    0.759996,
     $    0.779999,    0.799999,    0.785001,    0.770001,    0.779999,
     $    0.789999,    0.839996,    0.889996,    0.885000,    0.880000,
     $    0.850002,    0.820002,    0.802501,    0.785002,    0.799999,
     $    0.814999,    0.907492,    0.999992,    0.900009,    0.800010,
     $    0.605019,    0.410019,    0.290011,    0.170011,    0.122505,
     $    0.075005,    0.057502,    0.040002,    0.030001,    0.020001,
     $    0.017000,    0.000000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
       return
       end
c======================================================================       
       subroutine avhr112(srr,wmin,wmax,dww,nnf)
      parameter (wmn=.685, wmx=1.100, dw=.005)
      parameter (mwv=84)
       dimension srr(*),sr(mwv)
       data sr/
     $    0.004000,    0.008000,    0.018999,    0.029999,    0.189985,
     $    0.349985,    0.494986,    0.639986,    0.749990,    0.859990,
     $    0.899996,    0.939996,    0.964997,    0.989997,    0.994000,
     $    0.998000,    0.983002,    0.968002,    0.946502,    0.925002,
     $    0.892503,    0.860004,    0.855001,    0.850001,    0.847500,
     $    0.845000,    0.842500,    0.840000,    0.837500,    0.835000,
     $    0.832500,    0.830000,    0.827500,    0.825000,    0.824500,
     $    0.824000,    0.823500,    0.823000,    0.822500,    0.822000,
     $    0.821500,    0.821000,    0.820500,    0.820000,    0.801003,
     $    0.782003,    0.763003,    0.744003,    0.725003,    0.706003,
     $    0.687003,    0.668003,    0.649003,    0.630003,    0.585006,
     $    0.540006,    0.495006,    0.450006,    0.405006,    0.360006,
     $    0.315007,    0.270007,    0.225007,    0.180006,    0.165502,
     $    0.151002,    0.136002,    0.121003,    0.106502,    0.092002,
     $    0.077502,    0.063002,    0.048003,    0.033003,    0.018502,
     $    0.004002,    0.003500,    0.003000,    0.002500,    0.002000,
     $    0.001500,    0.001000,    0.000500,    0.000000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c======================================================================       
       subroutine gtr1(srr,wmin,wmax,dww,nnf)
c      gtr-100 ch 1 (bsi's predeployment calibration measurement 
c      linearly interpolated to 5nm intervals)
      parameter (wmn=.555, wmx=.805, dw=.005)
      parameter (mwv=51)
       dimension srr(*),sr(mwv)
       data sr/
     &    0.0048,    0.0501,    0.2077,    0.4466,    0.6530,
     &    0.7900,    0.8780,    0.9232,    0.9468,    0.9712,
     &    0.9877,    0.9930,    0.9944,    1.0000,    0.9940,
     &    0.9785,    0.9700,    0.9538,    0.9241,    0.9531,
     &    0.9024,    0.8780,    0.8550,    0.8311,    0.8164,
     &    0.7743,    0.7516,    0.7424,    0.6844,    0.6400,
     &    0.5675,    0.5034,    0.4515,    0.3408,    0.2231,
     &    0.1521,    0.1057,    0.0716,    0.0511,    0.0414,
     &    0.0332,    0.0247,    0.0320,    0.0226,    0.0195,
     &    0.0167,    0.0153,    0.0139,    0.0113,    0.0117,
     &    0.0000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c======================================================================       
       subroutine gtr2(srr,wmin,wmax,dww,nnf)
c      gtr-100 ch 2 (sbrc's postdeployment calibration measurements
c      spline fit to 5nm intervals)
      parameter (wmn=.705, wmx=1.130, dw=.005)
      parameter (mwv=86)
       dimension srr(*),sr(mwv)
       data sr/
     &   0.0713, 0.1737, 0.2703, 0.3611, 0.4461,
     &   0.5248, 0.5972, 0.6629, 0.7213, 0.7720,
     &   0.8146, 0.8500, 0.8790, 0.9026, 0.9217,
     &   0.9368, 0.9490, 0.9586, 0.9666, 0.9734,
     &   0.9797, 0.9854, 0.9904, 0.9946, 0.9977,
     &   0.9996, 1.0000, 0.9988, 0.9956, 0.9903,
     &   0.9828, 0.9735, 0.9628, 0.9511, 0.9387,
     &   0.9261, 0.9134, 0.9012, 0.8897, 0.8793,
     &   0.8704, 0.8626, 0.8555, 0.8489, 0.8424,
     &   0.8356, 0.8281, 0.8196, 0.8096, 0.7978,
     &   0.7839, 0.7679, 0.7499, 0.7300, 0.7084,
     &   0.6851, 0.6603, 0.6338, 0.6057, 0.5760,
     &   0.5447, 0.5122, 0.4787, 0.4447, 0.4106,
     &   0.3766, 0.3432, 0.3106, 0.2792, 0.2493,
     &   0.2212, 0.1950, 0.1704, 0.1476, 0.1263,
     &   0.1067, 0.0886, 0.0721, 0.0572, 0.0440,
     &   0.0325, 0.0227, 0.0144, 0.0077, 0.0025,
     &   0.0000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c======================================================================       
       subroutine nm410(srr,wmin,wmax,dww,nnf)
c      gtr-100 410nm channel
      parameter (wmn=.389, wmx=.423, dw=.001)
      parameter (mwv=35)
       dimension srr(*),sr(mwv)
       data sr/
     &   0.0000,    0.0124,    0.0116,    0.0157,    0.0101,    0.0293,
     &   0.0280,    0.0510,    0.0549,    0.0566,    0.0797,    0.1107,
     &   0.1277,    0.1723,    0.2512,    0.3532,    0.5287,    0.7189,
     &   0.8874,    0.9670,    1.0000,    0.9932,    0.9853,    0.9357,
     &   0.8522,    0.6905,    0.4765,    0.2993,    0.1549,    0.0775,
     &   0.0400,    0.0263,    0.0131,    0.0035,    0.0000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
       subroutine nm936(srr,wmin,wmax,dww,nnf)
c      gtr-100 410nm channel
      parameter (wmn=.878, wmx=.955, dw=.001)
      parameter (mwv=78)
       dimension srr(*),sr(mwv)
       data sr/
     &  0.0004,    0.0018,    0.0038,    0.0059,    0.0071,    0.0070,
     &  0.0070,    0.0080,    0.0095,    0.0117,    0.0134,    0.0149,
     &  0.0152,    0.0160,    0.0187,    0.0246,    0.0324,    0.0389,
     &  0.0383,    0.0349,    0.0383,    0.0416,    0.0383,    0.0373,
     &  0.0436,    0.0621,    0.0888,    0.1028,    0.0833,    0.0734,
     &  0.0849,    0.0926,    0.0928,    0.0824,    0.0775,    0.0888,
     &  0.1136,    0.1431,    0.1580,    0.1482,    0.1292,    0.1255,
     &  0.1252,    0.1264,    0.1263,    0.1236,    0.1229,    0.1270,
     &  0.1392,    0.1690,    0.2288,    0.3384,    0.4835,    0.6716,
     &  0.8228,    0.9022,    0.9113,    0.9200,    0.9597,    1.0000,
     &  0.9954,    0.9095,    0.7721,    0.5937,    0.4003,    0.2264,
     &  0.1207,    0.0613,    0.0323,    0.0172,    0.0100,    0.0062,
     &  0.0042,    0.0030,    0.0022,    0.0014,    0.0010,    0.0000/
c
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
       subroutine mfrsr1(srr,wmin,wmax,dww,nnf)
c      MFRSR channel 1
      parameter (wmn=0.397, wmx=0.433, dw=0.001)
      parameter (mwv=37)
       dimension srr(*),sr(mwv)
       data sr/
     &    0.0001,    0.0003,    0.0008,    0.0020,    0.0044,
     &    0.0092,    0.0185,    0.0349,    0.0625,    0.1058,
     &    0.1696,    0.2570,    0.3686,    0.5000,    0.6417,
     &    0.7792,    0.8950,    0.9727,    1.0000,    0.9727,
     &    0.8950,    0.7792,    0.6417,    0.5000,    0.3686,
     &    0.2570,    0.1696,    0.1058,    0.0625,    0.0349,
     &    0.0185,    0.0092,    0.0044,    0.0020,    0.0008,
     &    0.0003,    0.0001/
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
       subroutine mfrsr2(srr,wmin,wmax,dww,nnf)
c      MFRSR channel 2
      parameter (wmn=0.482, wmx=0.518, dw=0.001)
      parameter (mwv=37)
       dimension srr(*),sr(mwv)
       data sr/
     &    0.0001,    0.0003,    0.0008,    0.0020,    0.0044,
     &    0.0092,    0.0185,    0.0349,    0.0625,    0.1058,
     &    0.1696,    0.2570,    0.3686,    0.5000,    0.6417,
     &    0.7792,    0.8950,    0.9727,    1.0000,    0.9727,
     &    0.8950,    0.7792,    0.6417,    0.5000,    0.3686,
     &    0.2570,    0.1696,    0.1058,    0.0625,    0.0349,
     &    0.0185,    0.0092,    0.0044,    0.0020,    0.0008,
     &    0.0003,    0.0001/
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
       subroutine mfrsr3(srr,wmin,wmax,dww,nnf)
c      MFRSR channel 3
      parameter (wmn=0.592, wmx=0.628, dw=0.001)
      parameter (mwv=37)
       dimension srr(*),sr(mwv)
       data sr/
     &    0.0001,    0.0003,    0.0008,    0.0020,    0.0044,
     &    0.0092,    0.0185,    0.0349,    0.0625,    0.1058,
     &    0.1696,    0.2570,    0.3686,    0.5000,    0.6417,
     &    0.7792,    0.8950,    0.9727,    1.0000,    0.9727,
     &    0.8950,    0.7792,    0.6417,    0.5000,    0.3686,
     &    0.2570,    0.1696,    0.1058,    0.0625,    0.0349,
     &    0.0185,    0.0092,    0.0044,    0.0020,    0.0008,
     &    0.0003,    0.0001/
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
       subroutine mfrsr4(srr,wmin,wmax,dww,nnf)
c      MFRSR channel 4
      parameter (wmn=0.647, wmx=0.683, dw=0.001)
      parameter (mwv=37)
       dimension srr(*),sr(mwv)
       data sr/
     &    0.0001,    0.0003,    0.0008,    0.0020,    0.0044,
     &    0.0092,    0.0185,    0.0349,    0.0625,    0.1058,
     &    0.1696,    0.2570,    0.3686,    0.5000,    0.6417,
     &    0.7792,    0.8950,    0.9727,    1.0000,    0.9727,
     &    0.8950,    0.7792,    0.6417,    0.5000,    0.3686,
     &    0.2570,    0.1696,    0.1058,    0.0625,    0.0349,
     &    0.0185,    0.0092,    0.0044,    0.0020,    0.0008,
     &    0.0003,    0.0001/
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
       subroutine mfrsr5(srr,wmin,wmax,dww,nnf)
c      MFRSR channel 5
      parameter (wmn=0.844, wmx=0.880, dw=0.001)
      parameter (mwv=37)
       dimension srr(*),sr(mwv)
       data sr/
     &    0.0001,    0.0003,    0.0008,    0.0020,    0.0044,
     &    0.0092,    0.0185,    0.0349,    0.0625,    0.1058,
     &    0.1696,    0.2570,    0.3686,    0.5000,    0.6417,
     &    0.7792,    0.8950,    0.9727,    1.0000,    0.9727,
     &    0.8950,    0.7792,    0.6417,    0.5000,    0.3686,
     &    0.2570,    0.1696,    0.1058,    0.0625,    0.0349,
     &    0.0185,    0.0092,    0.0044,    0.0020,    0.0008,
     &    0.0003,    0.0001/
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
       subroutine mfrsr6(srr,wmin,wmax,dww,nnf)
c      MFRSR channel 6
      parameter (wmn=0.922, wmx=0.958, dw=0.001)
      parameter (mwv=37)
       dimension srr(*),sr(mwv)
       data sr/
     &    0.0001,    0.0003,    0.0008,    0.0020,    0.0044,
     &    0.0092,    0.0185,    0.0349,    0.0625,    0.1058,
     &    0.1696,    0.2570,    0.3686,    0.5000,    0.6417,
     &    0.7792,    0.8950,    0.9727,    1.0000,    0.9727,
     &    0.8950,    0.7792,    0.6417,    0.5000,    0.3686,
     &    0.2570,    0.1696,    0.1058,    0.0625,    0.0349,
     &    0.0185,    0.0092,    0.0044,    0.0020,    0.0008,
     &    0.0003,    0.0001/
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
      subroutine avhr83(srr,wmin,wmax,dww,nnf)
c     noaa-8    ahvrr channel 3
      parameter (wmn=3.40, wmx=4.05, dw=.025)
      parameter (mwv=27)
      dimension srr(*),sr(mwv)
      data sr/
     &   0.0000, 0.0084, 0.0953, 0.2715, 0.4908, 0.7088, 0.8807, 0.9713,
     &   1.0000, 0.9932, 0.9719, 0.9551, 0.9506, 0.9427, 0.9295, 0.9197,
     &   0.9128, 0.9067, 0.8991, 0.8869, 0.8325, 0.6741, 0.3732, 0.1003,
     &   0.0306, 0.0056, 0.0000/
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
      subroutine avhr84(srr,wmin,wmax,dww,nnf)
c     noaa-8    ahvrr channel 4
      parameter (wmn=10.225, wmx=11.675, dw=.05)
      parameter (mwv=30)
      dimension srr(*),sr(mwv)
      data sr/
     &   0.0000, 0.1228, 0.3305, 0.5884, 0.8287, 0.9459, 0.9889, 1.0000,
     &   0.9901, 0.9670, 0.9371, 0.9061, 0.8765, 0.8479, 0.8193, 0.7899,
     &   0.7590, 0.7255, 0.6881, 0.6450, 0.5895, 0.5109, 0.3960, 0.2395,
     &   0.1127, 0.0509, 0.0238, 0.0101, 0.0013, 0.0000/
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
      subroutine avhr85(srr,wmin,wmax,dww,nnf)
c     noaa-8    ahvrr channel 5
      parameter (wmn=11.300, wmx=12.600, dw=.05)
      parameter (mwv=27)
      dimension srr(*),sr(mwv)
      data sr/
     &   0.0000, 0.0613, 0.2334, 0.5287, 0.8555, 0.9537, 0.9249, 0.9351,
     &   0.9946, 1.0000, 0.9491, 0.8988, 0.8862, 0.8969, 0.9098, 0.9071,
     &   0.8867, 0.8515, 0.8029, 0.7409, 0.6642, 0.5720, 0.4648, 0.3412,
     &   0.2026, 0.0694, 0.0000/
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end
c=======================================================================
      subroutine modis1(srr,wmin,wmax,dww,nnf)
c     MODIS 1
      parameter (wmn=0.610, wmx=0.685, dw=.0025)
      parameter (mwv=31)
      dimension srr(*),sr(mwv)
      data sr/
     +  0.000E+00, 0.000E+00, 0.101E-01, 0.984E-01, 0.291E+00,
     +  0.502E+00, 0.656E+00, 0.688E+00, 0.706E+00, 0.711E+00,
     +  0.729E+00, 0.752E+00, 0.772E+00, 0.785E+00, 0.811E+00,
     +  0.866E+00, 0.931E+00, 0.979E+00, 0.100E+01, 0.985E+00,
     +  0.933E+00, 0.843E+00, 0.719E+00, 0.567E+00, 0.400E+00,
     +  0.233E+00, 0.102E+00, 0.369E-01, 0.157E-01, 0.920E-02,
     +  0.000E+00/
 
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end

c=======================================================================
      subroutine modis2(srr,wmin,wmax,dww,nnf)
c     MODIS 2
      parameter (wmn=0.820, wmx=0.9025, dw=.0025)
      parameter (mwv=34)
      dimension srr(*),sr(mwv)
      data sr/
     +   0.000E+00, 0.216E-01, 0.502E-01, 0.923E-01, 0.143E+00,
     +   0.194E+00, 0.271E+00, 0.429E+00, 0.654E+00, 0.861E+00,
     +   0.967E+00, 0.961E+00, 0.942E+00, 0.927E+00, 0.931E+00,
     +   0.955E+00, 0.983E+00, 0.995E+00, 0.100E+01, 0.978E+00,
     +   0.931E+00, 0.786E+00, 0.543E+00, 0.293E+00, 0.148E+00,
     +   0.824E-01, 0.520E-01, 0.367E-01, 0.276E-01, 0.213E-01,
     +   0.159E-01, 0.112E-01, 0.760E-02, 0.000E+00/
 
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end

c=======================================================================
      subroutine modis3(srr,wmin,wmax,dww,nnf)
c     MODIS 3
      parameter (wmn=0.450, wmx=0.4825, dw=.0025)
      parameter (mwv=14)
      dimension srr(*),sr(mwv)
      data sr/
     +   0.000E+00, 0.222E-01, 0.202E+00, 0.745E+00, 0.101E+01,
     +   0.904E+00, 0.874E+00, 0.924E+00, 0.100E+01, 0.930E+00,
     +   0.588E+00, 0.150E+00, 0.170E-01, 0.000E+00/
 
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end

c=======================================================================
      subroutine modis4(srr,wmin,wmax,dww,nnf)
c     MODIS 4
      parameter (wmn=0.540, wmx=0.570, dw=.0025)
      parameter (mwv=13)
      dimension srr(*),sr(mwv)
      data sr/
     +    0.286E-01, 0.264E+00, 0.758E+00, 0.989E+00, 0.100E+01,
     +    0.975E+00, 0.973E+00, 0.988E+00, 0.962E+00, 0.704E+00,
     +    0.215E+00, 0.163E-01, 0.000E+00/
 
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end

c=======================================================================
      subroutine modis5(srr,wmin,wmax,dww,nnf)
c     MODIS 5
      parameter (wmn=1.215, wmx=1.270, dw=.0025)
      parameter (mwv=23)
      dimension srr(*),sr(mwv)
      data sr/
     +    0.000E+00, 0.188E-01, 0.381E-01, 0.984E-01, 0.187E-00, 
     +    0.319E+00, 0.493E+00, 0.658E+00, 0.805E+00, 0.888E+00,
     +    0.956E+00, 0.997E+00, 0.100E+01, 0.945E+00, 0.817E+00,
     +    0.637E+00, 0.395E+00, 0.226E+00, 0.122E+00, 0.623E-01, 
     +    0.253E-01, 0.173E-01, 0.000E+00/
     
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end


c=======================================================================
      subroutine modis6(srr,wmin,wmax,dww,nnf)
c     MODIS 6
      parameter (wmn=1.600, wmx=1.665, dw=.0025)
      parameter (mwv=27)
      dimension srr(*),sr(mwv)
      data sr/
     +    0.000E+00, 0.580E-01, 0.910E-01, 0.161E+00, 0.271E+00,
     +    0.429E+00, 0.605E+00, 0.769E+00, 0.895E+00, 0.973E+00,
     +    1.000E+00, 0.997E+00, 0.988E+00, 0.965E+00, 0.928E+00,
     +    0.863E+00, 0.753E+00, 0.604E+00, 0.434E+00, 0.275E+00,
     +    0.161E+00, 0.091E+00, 0.508E-01, 0.299E-01, 0.162E-01,
     +    0.108E-01, 0.000E+00/
 
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end


c=======================================================================
      subroutine modis7(srr,wmin,wmax,dww,nnf)
c     MODIS 7
      parameter (wmn=2.0575, wmx=2.1825, dw=.0025)
      parameter (mwv=51)
      dimension srr(*),sr(mwv)
      data sr/
     +    0.000E+00, 0.124E-01, 0.165E-01, 0.229E-01, 0.317E-01,
     +    0.444E-01, 0.630E-01, 0.918E-01, 0.136E+00, 0.201E+00,
     +    0.290E+00, 0.403E+00, 0.533E+00, 0.663E+00, 0.778E+00,
     +    0.868E+00, 0.931E+00, 0.970E+00, 0.991E+00, 1.000E+00,
     +    1.001E+00, 0.996E+00, 0.987E+00, 0.972E+00, 0.950E+00,
     +    0.921E+00, 0.885E+00, 0.845E+00, 0.802E+00, 0.761E+00,
     +    0.724E+00, 0.686E+00, 0.642E+00, 0.592E+00, 0.533E+00,
     +    0.464E+00, 0.385E+00, 0.304E+00, 0.232E+00, 0.170E+00,
     +    0.120E+00, 0.814E-01, 0.553E-01, 0.381E-01, 0.266E-01,
     +    0.189E-01, 0.137E-01, 0.097E-01, 0.056E-01, 0.001E-01,
     +    0.000E+00/
 
      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
c
      return
      end


c=======================================================================

      subroutine setlow(srr,wmin,wmax,dww,nnf)
c     action spectra for DNA damage by UVB radiation (Setlow, R.B, 1974)
      parameter (wmn=.280, wmx=0.341, dw=.001)
      parameter (mwv=61)

      dimension srr(*),sr(mwv)
      data  sr /
     $  7.6459E-01, 6.8615E-01, 6.1575E-01, 5.5258E-01, 4.9589E-01,
     $  4.4501E-01, 3.9935E-01, 3.5838E-01, 3.2161E-01, 2.8862E-01,
     $  2.5901E-01, 2.1868E-01, 1.8459E-01, 1.5582E-01, 1.3153E-01,
     $  1.1103E-01, 8.7078E-02, 6.8320E-02, 5.3602E-02, 4.2055E-02,
     $  3.2996E-02, 2.3459E-02, 1.6681E-02, 1.1862E-02, 8.4351E-03,
     $  5.9981E-03, 4.1937E-03, 2.9307E-03, 2.0480E-03, 1.4312E-03,
     $  1.0002E-03, 6.9896E-04, 4.8845E-04, 3.4134E-04, 2.3854E-04,
     $  1.6670E-04, 1.1649E-04, 8.1409E-05, 5.6891E-05, 3.9757E-05,
     $  2.7783E-05, 1.9416E-05, 1.3568E-05, 9.4818E-06, 6.6261E-06,
     $  4.6305E-06, 3.2359E-06, 2.2614E-06, 1.5803E-06, 1.1044E-06,
     $  7.7176E-07, 5.3932E-07, 3.7689E-07, 2.6338E-07, 1.8406E-07,
     $  1.2863E-07, 8.9888E-08, 6.2816E-08, 4.3898E-08, 3.0677E-08,
     $  2.1438E-08 /

      wmin=wmn
      wmax=wmx
      dww=dw
      nnf=mwv
      do 10 i=1,nnf
        srr(i)=sr(i)
 10   continue
      return
      end
c=======================================================================

c file:                  tauaero.f
c
c
c external routines:     uaerden,phaers,pharw,aerbwi,aerswi,usraer,
c                        angstrom,tauaero,relhum,stdaer
c
c required routines:     reverse, locate
c
c internal routines:     aeroden,aervint,aerswi
c
c internal common:       extd,aerblk
c=======================================================================
      subroutine aeroden(zz,v,aerd)

c purpose:   find number density of boundary layer aerosols, aerd,
c            at a given altitude, zz, and for a specified visibility
c input:
c   zz       altitude   (km)
c   v        visibility for a horizontal surface path (km) 
c output:
c   aerd     aerosol density at altitude z

c the vertical distribution of the boundary layer aerosol density is 
c based on the 5s vertical profile models for 5 and 23 km visibility.
c above 5 km, the aden05 and aden23 models are the same 
c below 5 km, the models differ as follows;
c aden05     0.99 km scale height (94% of extinction occurs below 5 km)
c aden23     1.45 km scale heigth (80% of extinction occurs below 5 km)
c    

      parameter (mz=33)
      dimension alt(mz),aden05(mz),aden23(mz)
      dimension zbaer(*),dbaer(*)
      save alt,aden05,aden23,nz

      data nz/mz/

      data alt/
     &        0.0,        1.0,        2.0,        3.0,        4.0,  
     &        5.0,        6.0,        7.0,        8.0,        9.0,
     &       10.0,       11.0,       12.0,       13.0,       14.0, 
     &       15.0,       16.0,       17.0,       18.0,       19.0,
     &       20.0,       21.0,       22.0,       23.0,       24.0, 
     &       25.0,       30.0,       35.0,       40.0,       45.0,
     &       50.0,       70.0,      100.0/
      data aden05/
     &  1.378E+04,  5.030E+03,  1.844E+03,  6.731E+02,  2.453E+02,      
     &  8.987E+01,  6.337E+01,  5.890E+01,  6.069E+01,  5.818E+01,
     &  5.675E+01,  5.317E+01,  5.585E+01,  5.156E+01,  5.048E+01,
     &  4.744E+01,  4.511E+01,  4.458E+01,  4.314E+01,  3.634E+01,
     &  2.667E+01,  1.933E+01,  1.455E+01,  1.113E+01,  8.826E+00,
     &  7.429E+00,  2.238E+00,  5.890E-01,  1.550E-01,  4.082E-02,
     &  1.078E-02,  5.550E-05,  1.969E-08/
      data aden23/
     &  2.828E+03,  1.244E+03,  5.371E+02,  2.256E+02,  1.192E+02,
     &  8.987E+01,  6.337E+01,  5.890E+01,  6.069E+01,  5.818E+01,
     &  5.675E+01,  5.317E+01,  5.585E+01,  5.156E+01,  5.048E+01,
     &  4.744E+01,  4.511E+01,  4.458E+01,  4.314E+01,  3.634E+01,
     &  2.667E+01,  1.933E+01,  1.455E+01,  1.113E+01,  8.826E+00,
     &  7.429E+00,  2.238E+00,  5.890E-01,  1.550E-01,  4.082E-02,
     &  1.078E-02,  5.550E-05,  1.969E-08/
c
      z=max(0.,min(100.,zz))
      aerd=0.
      if(z.gt.alt(nz)) return
        
      call locate(alt,nz,z,k)
      kp=k+1
      f=(z-alt(k))/(alt(kp)-alt(k))
      
      if(min(aden05(k),aden05(kp),aden23(k),aden23(kp)).le.0.) then
        aer05=aden05(k)*(1.-f)+aden05(kp)*f
        aer23=aden23(k)*(1.-f)+aden23(kp)*f
      else
        aer05=aden05(k)*(aden05(kp)/aden05(k))**f
        aer23=aden23(k)*(aden23(kp)/aden23(k))**f
      endif

      wth=(1./v-1/5.)/(1./23.-1./5.)
      wth=max(0.,min(1.,wth))

      aerd=(1.-wth)*aer05+wth*aer23

c      write(*,*) 'aeroden k,kp,z,aer05(k),aer05(kp),f,aerd'
c      write(*,'(2i5,1p5e11.3)') k,kp,z,aden05(k),aden05(kp),f,aerd

      return

c.......................................................................

      entry uaerden(nzb,zbaer,dbaer)
c
c purpose 
c       set the boundary layer aerosol vertical distribution.
c       This routine replaces data in aer05 and aer23. 
c
c input:
c
c   zbaer   altitude grid for aerosol density interpolation
c
c   dbaer   aerosol density at zbaer altitudes. The aerosol density at the
c           computational grid altitudes are obtained by interpolation
c           on the (zbaer,dbaer) grid.  If no elements of zbaer are set,
c           then dbaer represents the aerosol density at each
c           computational layer (unset values of dbaer have a default
c           value of -1, these values are pushed up to zero).
c 
      do 10 i=1,nz
        if(zbaer(1).lt.0.) then 
          aden05(i)=max(dbaer(i),0.)
        elseif(alt(i).lt.zbaer(1).or.alt(i).gt.zbaer(nzb)) then
          aden05(i)=0.
        else
          call locate(zbaer,nzb,alt(i),j)
          if(zbaer(j+1) .le. zbaer(j)) then 
            write(*,*) 'error -- incorrect specification of zbaer'
          endif
          w=(alt(i)-zbaer(j))/(zbaer(j+1)-zbaer(j))
          aden05(i)=dbaer(j)*(dbaer(j+1)/dbaer(j))**w
        endif
        
        aden23(i)=aden05(i)

c        if(i.eq.1) write(*,'(6x,7a11)')
c     &   'alt(i)','zbaer(j)','zbaer(j+1)','dbaer(j)',
c     &       'dbaer(j+1)','w','aden05(i)'
c        write(*,'(2i3,1p7e11.3)')
c     &   i,j,alt(i),zbaer(j),zbaer(j+1),dbaer(j),dbaer(j+1),w,aden05(i)
 10   continue

      return

      end

c=======================================================================

      subroutine phaers(nwa,wbaer,pmaer)
c
c purpose
c     save legendre moments of scattering phase function of 
c     boundary layer aerosols.  A single phase function is used
c     for all boundary layer aerosols
c
c input
c     nstr      number of radiation streams
c     nwa       number of wavelength bins
c     wbaer     wavelength at which phase information is available
c     pmaer     legendre moments of phase function
c
      parameter (naerw=47)
      parameter (nstrms=40)
      real wbaer(*),pmaer(*),wb(naerw),pm(naerw*nstrms),p(0:nstrms)

      save nw,wb,pm
      
      nw=nwa

      do i=1,nw
        wb(i)=wbaer(i)
      enddo

      nn=nstrms*nw
      do i=1,nn
        pm(i)=pmaer(i)
      enddo
c      write(*,'(a,/,1p(8e11.3))') 'wb',(wb(i),i=1,8)
c      write(*,'(a,/,1p(8e11.3))') 'pm',(pm(i),i=1,8*nstrms)

      return

c-----------------------------------------------------------------------
      entry phaerw(w,ta,tb,p)
c
c purpose:
c   Interpolate phase function moments to wavelength w.
c   Must use linear interpolation because moments can be pos or neg.
c   if w>wmax then p(w)=ptable(wmax)
c   if w<wmin then p(w)=ptable(wmin)
c
c input
c   w      wavelength in microns
c   ta     total aerosol optical depth increment in layer
c   tb     boundary layer aerosol optical depth increment in layer
c   p      legendre moments of scat phase function due to all 
c          aerosols except boundary layer aerosols
c output
c   p      legendre moments of scattering phase function (0:nstrms)
c          due to all aersols
c
      call locate(wb,nw,w,l)
      wt=(w-wb(l))/(wb(l+1)-wb(l))
      wt=max(0.,min(wt,1.))
      if(ta.gt.0.) then
        wa=tb/ta
      else
        wa=1.
      endif

c      write(*,'(8a11)') 'l','w','wt','wa','wb(l)','wb(l+1)','ta','tb'
c      write(*,'(i11,1p8e11.3)') l,w,wt,wa,wb(l),wb(l+1),ta,tb
c      write(*,'(a,/,1p(10e11.3))') 'pmaer1',
c     &     (pm(l+i*nw),i=1,nstrms)
c      write(*,'(a,/,1p(10e11.3))') 'pmaer2',
c     &     (pm(l+1+i*nw),i=1,nstrms)

      do i=1,nstrms
        pin=p(i)
        j=l+(i-1)*nw
        p(i)=pm(j)*(1.-wt)+pm(j+1)*wt
        p(i)=pin*(1.-wa)+p(i)*wa
      enddo
      p(0)=1.

c      write(*,'(a,/,1p(10e11.3))') 'pmaer3',
c     &     (p(i),0=1,nstrms)

      return
      end

c=======================================================================
      subroutine aerbwi(wl,extinc,wa,ga)
c 
c purpose
c     At a given wavelength find the extinction efficiency,
c     single scattering albedo and asymmetry factor of boundary
c     layer aerosols by interpolation
c
c input
c  wl         wavelength
c 
c output
c  extinc     extinction efficiency
c  wa         single scattering albedo
c  ga         asymmetry factor
c  pa         legendre moments of scattering phase function 

      
      parameter (nstrms=40)
      parameter (naerw=47)
      parameter (naerwm=naerw*nstrms)
      real*8 zip
      parameter (zip=-1.d0)

      character*80 errmes(10)

      real wlbaer(naerw),qbaer(naerw),wbaer(naerw),gbaer(naerw)
      real pmaer(*)
c
      common /extd/ awl(naerw),dummy(naerw,48),aerstr(naerw,3,4)
c
      common /aerblk/
     &    wlaer(naerw),aerext(naerw),aerabs(naerw),aerasm(naerw),beta
      
      data maerw/naerw/
      save maerw

c . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

      !write(*,*) 'db_aerbwi.1'

      if(wlaer(1).eq.0.) then   ! no boundary layer aerosol
        extinc=0.
        wa=0.
        ga=0.
        return
      endif        

      call locate(wlaer,maerw,wl,l)
      if(wl.le.wlaer(1)) then 
        extinc=aerext(1)*(wlaer(1)/wl)**beta
        wa=1.-(aerabs(1)/aerext(1))
        ga=aerasm(1)
      elseif(wl.ge.wlaer(maerw)) then 
        extinc=aerext(maerw)*(wlaer(maerw)/wl)**beta
        wa=1.-(aerabs(maerw)/aerext(maerw))
        ga=aerasm(maerw)
      else
        wt=log(wl/wlaer(l))/log(wlaer(l+1)/wlaer(l))

        extinc=aerext(l)*(aerext(l+1)/aerext(l))**wt
        if(aerabs(l).gt.0. .and. aerabs(l+1).gt.0. ) then 
          absorp=aerabs(l)*(aerabs(l+1)/aerabs(l))**wt
        else
          absorp=aerabs(l)*(1.-wt)+aerabs(l+1)*wt
        endif
        if(extinc.gt.0.) wa=max(0.,min(1.-absorp/extinc,1.))
        ga=(1.-wt)*aerasm(l)+wt*aerasm(l+1)  
        ! linear interpolation because aerasm can be negative
      endif
      !write(*,*) 'wlaer: ',wlaer(1),wlaer(2)
      !write(*,*) 'extinc: ',extinc
      !write(*,*) 'aerext: ',aerext(1),aerext(2)
      !write(*,*) 'wl,l ',wl,l

      return

c.......................................................................

      entry aerswi(ja,wl,extinc,wa,ga)

c 
c purpose
c     compute extinction efficiency, single scattering albedo and
c     asymmetry factor of STRATOSPHERIC aerosols by interpolation
c
c input
c  ja         stratospheric aerosol type
c  wl         wavelength
c 
c output
c  extinc     extinction efficiency of stratospheric aerosol of type ja
c  wa         single scattering albedo
c  ga         asymmetry factor
c

      call locate(awl,naerw,wl,l)
      if(wl.le.awl(1)) then 
        extinc=aerstr(1,1,ja)*(awl(1)/wl)**beta
        wa=1.-(aerstr(1,2,ja)/aerstr(1,1,ja))
        ga=aerstr(l,3,ja)
      elseif(wl.ge.awl(maerw)) then 
        extinc=aerstr(naerw,1,ja)*(awl(1)/wl)**beta
        wa=1.-(aerstr(naerw,2,ja)/aerstr(naerw,1,ja))
        ga=aerstr(naerw,3,ja)
      else
        wt=log(wl/awl(l))/log(awl(l+1)/awl(l))
        extinc=aerstr(l,1,ja)*(aerstr(l+1,1,ja)/aerstr(l,1,ja))**wt
        absorp=aerstr(l,2,ja)*(aerstr(l+1,2,ja)/aerstr(l,2,ja))**wt
        if(extinc.gt.0.) wa=max(0.,min(1.-absorp/extinc,1.))
        ga=(1.-wt)*aerstr(l,3,ja)+wt*aerstr(l+1,3,ja)  
        ! linear interpolation because aerasm can be negative
      endif
      !write(*,*) 'awl: ',awl(1),awl(2)
      !write(*,*) 'extinc: ',extinc
      !write(*,*) 'aerext: ',aerext(1),aerext(2)
      !write(*,*) 'wl,l ',wl,l

      return

c.......................................................................

      entry usraer(wlbaer,qbaer,wbaer,gbaer,pmaer,abaer,q55,imoma)
c
c purpose 
c       Replaces data in wlaer,aerext,aerabs,aerasm with user specified
c       aerosol spectral data.  If pmaer is defined, it is saved for
c       later use in PHAERW
c
c       A similar function is performed by subroutine STDAER, which
c       fills the same variables with spectral properties of standard
c       aerosol models
c
c input:
c
c  wlaer    wavelengths at which aerosol model is specified
c  qbaer    aerosol extinction efficiency
c  wbaer    aerosol single scattering albedo
c  gbaer    aerosol asymmetry factor
c  abaer    power law slope used to extrapolate optical depth
c           outside of wlaer range  tauaer=(wlaer(j)/wl)**abaer
c           where j is 1 or n (n = total number of assigned values
c           of wlaer).  Power law extrapolation is not used when
c           ABAER.le.0
c  pmaer    user defined aerosol phase function (may be undefined)
c
c input/output:
c
c  q55      extinction efficiency at 0.55 um
c
c output:
c
c  imoma    0 => aerosol phase function not defined (use Henyey-Greenstein)
c           1 => user defined aersol phase function
c

c check input parameters

      beta=max(abaer,0.)
      
      nwlbaer=numberset(zip,wlbaer,naerw)
      nqbaer=numberset(zip,qbaer,naerw)
      nwbaer=numberset(zip,wbaer,naerw)
      ngbaer=numberset(zip,gbaer,naerw)
      npmaer=numberset(zip,pmaer,naerw)

      ne=0
      
c	write(*,*), 'nwlbaer=',nwlbaer,'ngbaer=',ngbaer,'npmaer=',npmaer
      
      if(nwlbaer.eq.0) then         ! wavelength points not set
        qbaer(1)=1.
        nqbaer=1
        if(nwbaer.ne.1) then
          ne=ne+1
          errmes(ne)='specify one value of wbaer when wlbaer not set'
        endif

      elseif(nwlbaer.eq.1) then     ! only one wavelength point

        if(nqbaer.gt.1) then 
          ne=ne+1
          errmes(ne)='number of elements must match: wlbaer, qbaer'
        endif          

      else                          ! many wavelength point

        if(nwlbaer.ne.nqbaer) then
          ne=ne+1
          errmes(ne)='number of elements must match: wlbaer, qbaer'
        endif

        if(nwlbaer.ne.nwbaer) then
          ne=ne+1
          errmes(ne)='number of elements must match: wlbaer, wbaer'
        endif

        if(ngbaer.eq.0) then 
          if(npmaer.ge.1) then 
            if(mod(npmaer,nwlbaer).ne.0) then
              ne=ne+1
              errmes(ne)='incorrect number of phase function moments'
            endif
          else
            ne=ne+1
            errmes(ne)='must specify either gbaer or pmaer'
          endif
        else
          if(ngbaer.ne.nwbaer) then
            ne=ne+1
            errmes(ne)='number of elements must match: wlbaer, gbaer'
          endif
        endif
      
      endif

      if((ngbaer.eq.0).eqv.(npmaer.eq.0)) then 
        ne=ne+1
        errmes(ne)='must specify either gbaer or pmaer, not both'
	write(*,*) 'Error in ngbaer & npmaer'
	pause
      endif
       
      if(ne.gt.0) then 
        write(*,*) 'Error in user specified aerosols (iaer=5)'
C       write(*,'(/,1x,5a8)')
C    &          'nwlbaer','nqbaer','nwbaer','ngbaer','npmaer'
C        write(*,'(5i8,/)')  nwlbaer,nqbaer,nwbaer,ngbaer,npmaer
        do i=1,ne
          write(*,'(2a)') 'Error in USRAER -- ',errmes(i)
        enddo
	pause
        stop
      endif
      
c duplicate input to two wavelength points if a 
c single wavelength specified in the input file

      !write(*,*) 'db usraer 1'
      if(nwbaer.eq.1) then  
        if(nwlbaer.eq.0) wlbaer(1)=.55 
        wlbaer(2)=2*wlbaer(1)
        nwlbaer=2
        if(abaer.ge.0.) then
          qbaer(2)=qbaer(1)*(wlbaer(1)/wlbaer(2))**beta
        else
          qbaer(2)=qbaer(1)
        endif
        wbaer(2)=wbaer(1)
        gbaer(2)=gbaer(1)

c duplicate phase function entries

        !write(*,*) 'db usraer 2'
        if(npmaer.gt.0) then
          do i=npmaer,1,-1
            pmaer(2*i)=pmaer(i)
            pmaer(2*i-1)=pmaer(i)
          enddo
          npmaer=2*npmaer
        endif
        nqbaer=2
      endif

      !write(*,'(a10,/,1p10e11.3)')  'wlbaer',(wlbaer(i),i=1,2)
      !write(*,'(a10,/,1p10e11.3)')  'qbaer',(qbaer(i),i=1,2)
        
      !write(*,*) 'db usraer 3'
      if(nwlbaer.gt.naerw) then
        write(*,*) 'Too many spectral points in usraer'
	pause
        stop
      endif
      do i=1,nwlbaer 
        wlaer(i)=wlbaer(i)
        aerext(i)=qbaer(i)
        aerabs(i)=(1.-wbaer(i))*aerext(i)
        aerasm(i)=gbaer(i)
      enddo

      !write(*,*) 'db usraer 4'
      !write(*,'(a10,/,1p10e11.3)')  'wlaer',(wlaer(i),i=1,nwlbaer)
      !write(*,'(a10,/,1p10e11.3)')  'aerext',(aerext(i),i=1,nwlbaer)
      !write(*,'(a10,/,1p10e11.3)')  'aerabs',(aerabs(i),i=1,nwlbaer)
      !write(*,'(a10,/,1p10e11.3)')  'aerasm',(aerasm(i),i=1,nwlbaer)
      !write(*,*) 'pmaer'
      !do j=1,npmaer/nwlbaer
      !  write(*,'(1p10e11.3)') (pmaer((j-1)*nwlbaer+i),i=1,nwlbaer)
      !enddo
        
      call locate(wlbaer,nwlbaer,.55,j)

      !write(*,*) 'db usraer 5'
      !write(*,*) 'wlbaer ',j,wlbaer(j),wlbaer(j+1)
      f=log(0.55/wlbaer(j))/log(wlbaer(j+1)/wlbaer(j))
      !write(*,*) 'f ',f
      if(0.55.lt.wlbaer(1)) then
        !write(*,*) 'db usraer 5.1',beta
        q55=qbaer(1)*(wlbaer(1)/0.55)**beta
      elseif(0.55.gt.wlbaer(nwlbaer)) then
        !write(*,*) 'db usraer 5.2',beta
        q55=qbaer(nwlbaer)*(wlbaer(nwlbaer)/0.55)**beta
      else
        !write(*,*) 'db usraer 5.3',qbaer(j),f
        q55=qbaer(j)*(qbaer(j+1)/qbaer(j))**f
      endif

      maerw=nwlbaer

c if defined, save aerosol phase function for use in phaerw

      !write(*,*) 'db usraer 6'
      imoma=0
      if(npmaer.gt.0) then
        call phaers(nqbaer,wlbaer,pmaer)
        imoma=1
      endif

      !write(*,*) 'db usraer 7'
      return

      end

c=======================================================================

      subroutine tauaero(wl,nz,z,v55,taer55,naerz,taerst,laer,jaer,
     &                   waer,gaer,taua,tauab,imoma)
c
c purpose:  
c     compute the optical depth and scattering parameters at all
c     atmospheric levels of both boundary layer and stratospheric
c     aerosols
c
c input:
c   wl      wavelength
c   nz      number of atmospheric levels
c   z       altitude (km)
c   wh      water vapor density (g/m3)
c   v55     visibility at 550nm 
c   taer55  optical depth at 550nm  
c
c           (v55 and taer55 are alternate ways of setting the aerosol 
c           optical depth. Note that v55 cant be used to set aerosol
c           optical depth when the aerosol density in the lowest layer
c           is set to zero through zbaer and dbaer)
c
c naer number of stratospheric aerosol scattering layers
c laer index array of stratospheric aerosols (see subroutine zlayer)
c taerst optical depth array of stratospheric aerosol scattering layers
c jaer array of stratospheric aerosol types
c
c             0 = no stratospheric aerosols
c             1 = background        (between 10 and 30 km altitude)
c             2 = aged volcanic     (between 10 and 30 km)
c             3 = fresh volcanic    (between 10 and 30 km)
c             4 = meteor dust       (above 30 km)
c
c output:
c   waer    single scatter albedo due to aerosols at each atmospheric layer
c   gaer    depends on the value of imoma
c           imoma=0 asymmetry factor due to aerosols at each atmospheric layer
c           imoma=1 optical depth of boundary layer aerosol. this output
c                   is used to give the proper weight to the boundary
c                   layer phase function in routine depthscl

c   taua   aerosol optical depth increment at each atmospheric layer
c   tauab  boundary layer aerosol optical depth increment
c
c NOTE:     visibility is defined as 3.912/extinction_coefficient(km-1)
c           for a horizontal path 
c           (exp(-3.912) = 0.02 = visible contrast threshold)
c
c exp(-3.912)=.02 
c
c revisions:
c  971028: corrected expression for net asymmetry factor including both 
c          stratospheric and boundary layer aerosols (suggested by Xiang Li)
c
      parameter (visfac=3.912)
      parameter (ndbug=1)
      dimension z(*),taerst(*),laer(*),jaer(*),waer(*),gaer(*)
      dimension taua(*),tauab(*)

      data init,sigma/1, 0./
      save init, sigma 
      ! sigma is a wavelength independent cross-section for
      ! scattering by boundary layer aerosols (bla)
c - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

c integrate vertical profile of boundary layer aerosol density

      call aervint(v55,nz,z,taua) ! taua = n(i) dz 

c initialize value of sigma on first call of tauaero
c the value of sigma (which independent of wavelenth)
c is saved for later calls to tauaero
      
      if(init.eq.1) then
        init=0
        sigma=0.
        call aerbwi(0.55,ext55,w55,g55)
        if(ext55.gt.0.) then 
          if(taer55.ge.0) then
            vint=total(taua,1,nz)
            if(vint.ne.0) sigma=taer55/(ext55*vint)
          else
            call aeroden(z(1),v55,aden0)
            sigma=visfac/(ext55*v55*aden0) 
          endif
        endif
      endif
        
c compute scattering parameters (extinction efficiency , single 
c scattering albedo and asymmetry factor) for boundary layer 
c aerosols at a given wavelength. Note that extinction efficiency
c is normalized to 1 at 550nm.

      call aerbwi(wl,extinc,wa,ga)

      ! write(*,'(a5,9a11)')
      !&     'init','wl','sigma','extinc','taer55','ext55','vint'
      ! write(*,'(i5,1p9e11.3)')init,wl,sigma,extinc,taer55,ext55,vint

      do 30 i=1,nz
        taua(i)=extinc*sigma*taua(i)
        tauab(i)=taua(i)
        waer(i)=wa
        gaer(i)=ga
        if(imoma.eq.1) gaer(i)=0.
 30   continue

c
c add in stratospheric aerosols at specified scattering layers
c

      do 40 i=1,naerz
        if(jaer(i).ne.0 .and. taerst(i).gt.0.) then
          nl=laer(i)
          ja=jaer(i)

c find scattering parameters for stratospheric
c aerosols at a given wavelength

          call aerswi(ja,wl,extinc,wa,ga)
          dt=taerst(i)*extinc
          if(sigma.ne.0) then
            ga=(dt*ga*wa+taua(nl)*gaer(nl)*waer(nl))/
     &           (dt*wa+taua(nl)*waer(nl))
            wa=(dt*wa+taua(nl)*waer(nl))/(dt+taua(nl))
            dt=dt+taua(nl)
          endif
          waer(nl)=wa
          gaer(nl)=ga
          taua(nl)=dt
        endif
 40   continue

c      write(*,'(/,1p,a,/(10e11.3))') 'waer',(waer(j),j=1,33)
c      write(*,'(/,1p,a,/(10e11.3))') 'gaer',(gaer(j),j=1,33)
c      write(*,'(/,1p,a,/(10e11.3))') 'taua',(taua(j),j=1,33)

      return

      end
c===========================================================================
      subroutine aervint(v,nz,z,vint)
c
c purpose  
c     compute aerosol density vertical integral (actually the 
c     integral increment at each level, vint=n(i)*dz  (km-1)
c     (the aerosol density can be considered dimensionless since
c     any constant factors  are normalized away in tauaero)
c
c input
c     v        visibility (km) (used to select vertical profile model)
c     z        altitude array (km)
c     nz       number of altitudes
c output
c     vint     = n(i) dz, where n(i) is the aerosol density at level i
c                averaged over the interval z(i) to z(i+1)
c                i.e., the column depth increment of aerosol density

      dimension z(*),vint(*)

      call aeroden(z(nz),v,aden2)

      vint(1)=aden2*5.  ! (aerosol density at nz) * (5 km scale height)

      do 30 i=2,nz
        im=nz-i+1
        call aeroden(z(im),v,aden)
        dz=z(im+1)-z(im)
        vint(i)=dz*aden
 30   continue
      return
      end
c===========================================================================
      function relhum(t,h2o)
c
c purpose:
c     return relative humidity for a give temperature and water vapor 
c     density
c
c input:
c   t          temperature (kelvin)
c   h2o        water vapor density (g/m3)
c output:
c   relhum     relative humidity 
c
      parameter (tzero=273.15)
      a=tzero/t
c
c h2osat is the mass density (g/m3) of water vapor at 100% saturation 
c (source: handbook of chemistry and physics, h2o vapor pressure table d-112,
c assuming density related to pressure by ideal gas law)
c
      h2osat=a*exp(18.916758-a*(14.845878+a*2.4918766))
      relhum=h2o/h2osat
      return
      end
c=======================================================================
      subroutine stdaer(iaer,humid)
c
c purpose 
c   Replaces data in wlaer,aerext,aerabs,aerasm with standard
c   extinction, absorption, and asymmetry parameters for boundary
c   layer aerosols.  The rural, urban, oceanic or tropospheric
c   aerosols models are interpolated on relative humidity.  
c
c   A similar function is performed by entry USRAER, which fills the
c   same variables with spectral properties of user defined aerosol model

c
c input:
c   iaer      aerosol type 0 = no boundary layer aerosol, causes STDAER
c                              to set wlaer(1)=0.
c                          1 = rural
c                          2 = urban
c                          3 = oceanic
c                          4 = troposheric
c
c   humid    relative humidity at the surface (0.0 - 1.0)
c
      parameter (naerw=47)  ! 47 no. of wavelength
      common /extd/ awl(naerw),
     1  rural(naerw,3,4),urban(naerw,3,4),   ! 3=optical parameters
     2  ocean(naerw,3,4),tropo(naerw,3,4),   ! 4=four RH
     1  bstext(naerw),bstabs(naerw),bstsym(naerw),
     2  avoext(naerw),avoabs(naerw),avosym(naerw),
     3  fvoext(naerw),fvoabs(naerw),fvosym(naerw),
     4  dmeext(naerw),dmeabs(naerw),dmesym(naerw)
      common /aerblk/
     &    wlaer(naerw),aerext(naerw),aerabs(naerw),aerasm(naerw),beta
      dimension rhzone(4)
c
c relative humidity bins:
c 
      data rhzone/0.,.7,.8,.99/ 
      data tiny/.00000001/
c
      if(iaer.eq.0) then
        wlaer(1)=0         ! no boundary layer aerosols
        return
      endif

      beta=0.                       ! angstrom exponent      

      rh=max(0.,min(1.,humid))
      if(rh.lt.rhzone(2)) then    ! 70%
        j=1
      elseif(rh.lt.rhzone(3)) then ! 80%
        j=2
      else
        j=3
      endif
      
      wt=(rh-rhzone(j))/(rhzone(j+1)-rhzone(j))      
      
      do 20 i=1,naerw
        wlaer(i)=awl(i)
        if(abs(iaer).eq.1) then
          ex1=max(rural(i,1,j),tiny)
          ex2=max(rural(i,1,j+1),tiny)
          ab1=max(rural(i,2,j),tiny)
          ab2=max(rural(i,2,j+1),tiny)
          g1=max(rural(i,3,j),tiny)
          g2=max(rural(i,3,j+1),tiny)
        elseif(abs(iaer).eq.2) then
          ex1=max(urban(i,1,j),tiny)
          ex2=max(urban(i,1,j+1),tiny)
          ab1=max(urban(i,2,j),tiny)
          ab2=max(urban(i,2,j+1),tiny)
          g1=max(urban(i,3,j),tiny)
          g2=max(urban(i,3,j+1),tiny)
        elseif(abs(iaer).eq.3) then
          ex1=max(ocean(i,1,j),tiny)
          ex2=max(ocean(i,1,j+1),tiny)
          ab1=max(ocean(i,2,j),tiny)
          ab2=max(ocean(i,2,j+1),tiny)
          g1=max(ocean(i,3,j),tiny)
          g2=max(ocean(i,3,j+1),tiny)
        elseif(abs(iaer).eq.4) then
          ex1=max(tropo(i,1,j),tiny)
          ex2=max(tropo(i,1,j+1),tiny)
          ab1=max(tropo(i,2,j),tiny)
          ab2=max(tropo(i,2,j+1),tiny)
          g1=max(tropo(i,3,j),tiny)
          g2=max(tropo(i,3,j+1),tiny)
        endif
        if(abs(iaer).ge.1.and.abs(iaer).le.4) then
          aerext(i)=ex1*(ex2/ex1)**wt
          aerabs(i)=ab1*(ab2/ab1)**wt
          aerasm(i)=g1*(g2/g1)**wt
        endif
 20   continue

c        write(*,1000) 'wlaer:',wlaer
c        write(*,1000) 'aerext:',aerext
c        write(*,1000) 'aerabs:',aerabs
c        write(*,1000) 'aerasm:',aerasm
 1000 format(a/1p,5(10e11.3,/))
      return
      end
c
c======================================================================
      block data extdta
ccc
ccc   altitude regions for aerosol extinction coefficients
ccc
ccc         aerosol extinction normalized to one at 0.55 microns
ccc
ccc         0-2km
ccc           rurext=rural extinction   rurabs=rural absorption
ccc           rursym=rural asymmetry factors
ccc           urbext=urban extinction   urbabs=urban absorption
ccc           urbsym=urban asymmetry factors
ccc           ocnext=maritime extinction  ocnabs=maritime absorption
ccc           ocnsym=maritime asymmetry factors
ccc           troext=tropspher extinction  troabs=tropospher absorption
ccc           trosym=tropspheric asymmetry factors
ccc           fg1ext=fog1 .2km vis extinction  fg1abs=fog1 absorption
ccc           fg1sym=fog1 asymmetry factors
ccc           fg2ext=fog2 .5km vis extinction  fg2abs=fog2 absorption
ccc           fg2sym=fog2 asymmetry factors
ccc         >2-10km
ccc           troext=tropospher extinction  troabs=tropospher absorption
ccc           trosym=tropospheric asymmetry factors
ccc         >10-30km
ccc           bstext=background stratospheric extinction
ccc           bstabs=background stratospheric absorption
ccc           bstsym=background stratospheric asymmetry factors
ccc           avoext=aged volcanic extinction
ccc           avoabs=aged volcanic absorption
ccc           avosym=aged volcanic asymmetry factors
ccc           fvoext=fresh volcanic extinction
ccc           fvoabs=fresh volcanic absorption
ccc           fvosym=fresh volcanic asymmetry factors
ccc         >30-100km
ccc           dmeext=meteoric dust extinction
ccc           dmeabs=meteoric dust absorption
ccc           dmesym=meteoric dust asymmetry factors
c
c     aerosol extinction and absorption data
c
c     modified to include asymmetry data - jan 1986 (a.e.r. inc.)
c
      common /extd/ awl(47),
     1  rure1(47),rura1(47),rurg1(47),rure2(47),rura2(47),rurg2(47),
     2  rure3(47),rura3(47),rurg3(47),rure4(47),rura4(47),rurg4(47),
     3  urbe1(47),urba1(47),urbg1(47),urbe2(47),urba2(47),urbg2(47),
     4  urbe3(47),urba3(47),urbg3(47),urbe4(47),urba4(47),urbg4(47),
     5  ocne1(47),ocna1(47),ocng1(47),ocne2(47),ocna2(47),ocng2(47),
     6  ocne3(47),ocna3(47),ocng3(47),ocne4(47),ocna4(47),ocng4(47),
     7  troe1(47),troa1(47),trog1(47),troe2(47),troa2(47),trog2(47),
     8  troe3(47),troa3(47),trog3(47),troe4(47),troa4(47),trog4(47),
     1  bstext(47),bstabs(47),bstsym(47),
     2  avoext(47),avoabs(47),avosym(47),
     3  fvoext(47),fvoabs(47),fvosym(47),
     4  dmeext(47),dmeabs(47),dmesym(47)
c
      data awl /
     *   .2000,   .3000,   .3371,   .5500,   .6943,  1.0600,  1.5360,
     *  2.0000,  2.2500,  2.5000,  2.7000,  3.0000,  3.3923,  3.7500,
     *  4.5000,  5.0000,  5.5000,  6.0000,  6.2000,  6.5000,  7.2000,
     *  7.9000,  8.2000,  8.7000,  9.0000,  9.2000, 10.0000, 10.5910,
     * 11.0000, 11.5000, 12.5000, 14.8000, 15.0000, 16.4000, 17.2000,
     * 18.5000, 21.3000, 25.0000, 30.0000, 40.0000, 50.0000, 60.0000,
     * 80.0000, 100.000, 150.000, 200.000, 300.000/
      data rure1 /
     1 2.09291, 1.74582, 1.60500, 1.00000,  .75203,  .41943,  .24070,
     2  .14709,  .13304,  .12234,  .13247,  .11196,  .10437,  .09956,
     3  .09190,  .08449,  .07861,  .07025,  .07089,  .07196,  .07791,
     4  .04481,  .04399,  .12184,  .12658,  .12829,  .09152,  .08076,
     5  .07456,  .06880,  .06032,  .04949,  .05854,  .06000,  .06962,
     6  .05722,  .06051,  .05177,  .04589,  .04304,
     7  .03582,  .03155,  .02018,  .01469,  .00798,  .00551, 0./
      data rure2 /
     1 2.09544, 1.74165, 1.59981, 1.00000,  .75316,  .42171,  .24323,
     2  .15108,  .13608,  .12430,  .13222,  .13823,  .11076,  .10323,
     3  .09475,  .08728,  .08076,  .07639,  .07797,  .07576,  .07943,
     4  .04899,  .04525,  .12165,  .12741,  .12778,  .09032,  .07962,
     5  .07380,  .06880,  .06329,  .05791,  .06646,  .06639,  .07443,
     6  .06304,  .06443,  .05538,  .04867,  .04519,
     7  .03821,  .03374,  .02173,  .01587,  .00862,  .00594, 0./
      data rure3 /
     1 2.07082, 1.71456, 1.57962, 1.00000,  .76095,  .43228,  .25348,
     2  .16456,  .14677,  .13234,  .13405,  .20316,  .12873,  .11506,
     3  .10481,  .09709,  .08918,  .09380,  .09709,  .08791,  .08601,
     4  .06247,  .05601,  .11905,  .12595,  .12348,  .08741,  .07703,
     5  .07266,  .07044,  .07443,  .08146,  .08810,  .08563,  .08962,
     6  .08051,  .07677,  .06658,  .05747,  .05184,
     7  .04572,  .04074,  .02689,  .01981,  .01084,  .00714, 0./
      data rure4 /
     1 1.66076, 1.47886, 1.40139, 1.00000,  .80652,  .50595,  .32259,
     2  .23468,  .20772,  .18532,  .17348,  .35114,  .20006,  .17386,
     3  .16139,  .15424,  .14557,  .16215,  .16766,  .14994,  .14032,
     4  .12968,  .12601,  .13551,  .13582,  .13228,  .11070,  .09994,
     5  .09873,  .10418,  .13241,  .15924,  .16139,  .15949,  .15778,
     6  .15184,  .13848,  .12563,  .11076,  .09601,
     7  .09312,  .08720,  .06644,  .05264,  .03181,  .02196, 0.0/
      data rura1 /
     1  .67196,  .11937,  .08506,  .05930,  .05152,  .05816,  .05006,
     2  .01968,  .02070,  .02101,  .05652,  .02785,  .01316,  .00867,
     3  .01462,  .01310,  .01627,  .02013,  .02165,  .02367,  .03538,
     4  .02823,  .03962,  .06778,  .07285,  .08120,  .04032,  .03177,
     5  .02557,  .02342,  .02177,  .02627,  .03943,  .03114,  .03696,
     6  .02956,  .03500,  .03241,  .03297,  .03380,
     7  .03170,  .02794,  .01769,  .01305,  .00730,  .00518, 0.0/
      data rura2 /
     1  .62968,  .10816,  .07671,  .05380,  .04684,  .05335,  .04614,
     2  .01829,  .01899,  .01962,  .05525,  .06816,  .01652,  .00867,
     3  .01544,  .01373,  .01627,  .02892,  .02829,  .02532,  .03487,
     4  .02835,  .03854,  .06684,  .07272,  .08038,  .03987,  .03247,
     5  .02816,  .02816,  .03101,  .03741,  .04829,  .04032,  .04399,
     6  .03734,  .03956,  .03601,  .03525,  .03563,
     7 .03357,  .02965,  .01887,  .01395,  .00782,  .00555, 0.0/
      data rura3 /
     1  .51899,  .08278,  .05816,  .04082,  .03570,  .04158,  .03620,
     2  .01513,  .01481,  .01633,  .05278,  .13690,  .02494,  .00886,
     3  .01804,  .01582,  .01677,  .04816,  .04367,  .03013,  .03443,
     4  .02930,  .03677,  .06209,  .06911,  .07475,  .03892,  .03494,
     5  .03513,  .03968,  .05152,  .06241,  .06937,  .06203,  .06215,
     6  .05614,  .05209,  .04608,  .04196,  .04095,
     7  .03916,  .03486,  .02262,  .01686,  .00951,  .00674, 0.0/
      data rura4 /
     1  .21943,  .02848,  .01943,  .01342,  .01171,  .01437,  .01323,
     2  .01152,  .00696,  .01329,  .06108,  .24690,  .05323,  .01430,
     3  .03361,  .02949,  .02652,  .09437,  .08506,  .05348,  .04627,
     4  .04380,  .04557,  .05380,  .05715,  .05899,  .04861,  .05253,
     5  .06171,  .07437,  .10152,  .12019,  .12190,  .11734,  .11411,
     6  .10766,  .09487,  .08430,  .07348,  .06861,
     7  .06936,  .06458,  .04735,  .03761,  .02313,  .01668, 0.0/
      data rurg1 /
     1  .7581,   .6785,   .6712,   .6479,   .6342,   .6176,   .6334,
     2  .7063,   .7271,   .7463,   .7788,   .7707,   .7424,   .7312,
     3  .7442,   .7516,   .7662,   .7940,   .7886,   .7797,   .7664,
     4  .8525,   .8700,   .5846,   .5570,   .5992,   .6159,   .6271,
     5  .6257,   .6374,   .6546,   .6861,   .6859,   .6120,   .5570,
     6  .5813,   .5341,   .5284,   .5137,   .4348,   .4223,   .3775,
     7  .3435,   .3182,   .2791,   .2494,   .0000/
      data rurg2 /
     1  .7632,   .6928,   .6865,   .6638,   .6498,   .6314,   .6440,
     2  .7098,   .7303,   .7522,   .7903,   .7804,   .7380,   .7319,
     3  .7508,   .7584,   .7738,   .8071,   .7929,   .7843,   .7747,
     4  .8507,   .8750,   .6112,   .5851,   .6272,   .6466,   .6616,
     5  .6653,   .6798,   .6965,   .7026,   .6960,   .6360,   .5848,
     6  .6033,   .5547,   .5445,   .5274,   .4518,   .4318,   .3863,
     7  .3516,   .3257,   .2853,   .2548,   .0000/
      data rurg3 /
     1  .7725,   .7240,   .7197,   .6997,   .6858,   .6650,   .6702,
     2  .7181,   .7378,   .7653,   .8168,   .7661,   .7286,   .7336,
     3  .7654,   .7735,   .7910,   .8303,   .8025,   .7957,   .7946,
     4  .8468,   .8734,   .6831,   .6619,   .6994,   .7250,   .7449,
     5  .7547,   .7665,   .7644,   .7265,   .7170,   .6769,   .6409,
     6  .6442,   .6031,   .5854,   .5646,   .4977,   .4602,   .4127,
     7  .3751,   .3476,   .3048,   .2721,   .0000/
      data rurg4 /
     1  .7778,   .7793,   .7786,   .7717,   .7628,   .7444,   .7365,
     2  .7491,   .7609,   .7921,   .8688,   .7537,   .7294,   .7413,
     3  .7928,   .8016,   .8225,   .8761,   .8359,   .8285,   .8385,
     4  .8559,   .8654,   .8414,   .8415,   .8527,   .8740,   .8903,
     5  .8952,   .8923,   .8611,   .8033,   .7989,   .7758,   .7632,
     6  .7508,   .7314,   .7091,   .6867,   .6419,   .5790,   .5259,
     7  .4749,   .4415,   .3886,   .3489,   .0000/
      data urbe1 /
     1 1.88816, 1.63316, 1.51867, 1.00000,  .77785,  .47095,  .30006,
     2  .21392,  .19405,  .17886,  .18127,  .16133,  .14785,  .14000,
     3  .12715,  .11880,  .11234,  .10601,  .10500,  .10361,  .10342,
     4  .08766,  .08652,  .11937,  .12139,  .12297,  .09797,  .09057,
     5  .08595,  .08196,  .07563,  .06696,  .07209,  .06842,  .07177,
     6  .06354,  .06177,  .05373,  .04728,  .04051,
     7  .03154,  .02771,  .01759,  .01278,  .00693,  .00480, 0.0/
      data urbe2 /
     1 1.95582, 1.64994, 1.53070, 1.00000,  .77614,  .46639,  .29487,
     2  .21051,  .18943,  .17285,  .17209,  .21418,  .15354,  .14051,
     3  .12728,  .11861,  .11089,  .11329,  .11323,  .10563,  .10247,
     4  .08696,  .08361,  .12013,  .12418,  .12304,  .09614,  .08842,
     5  .08487,  .08285,  .08361,  .08430,  .08880,  .08449,  .08601,
     6  .07835,  .07323,  .06367,  .05500,  .04747,
     7  .03901,  .03454,  .02240,  .01638,  .00891,  .00612, 0.0/
      data urbe3 /
     1 1.96430, 1.64032, 1.52392, 1.00000,  .77709,  .46253,  .28690,
     2  .20310,  .17981,  .16101,  .15614,  .26475,  .15456,  .13563,
     3  .12215,  .11361,  .10500,  .11715,  .11753,  .10392,  .09766,
     4  .08443,  .08057,  .10943,  .11342,  .11063,  .08703,  .08025,
     5  .07886,  .08032,  .09101,  .10070,  .10386,  .09943,  .09886,
     6  .09152,  .08247,  .07152,  .06089,  .05253,
     7  .04582,  .04091,  .02717,  .02008,  .01103,  .00754, 0.0/
      data urbe4 /
     1 1.41266, 1.33816, 1.29114, 1.00000,  .83646,  .55025,  .35342,
     2  .25285,  .21576,  .18310,  .16215,  .37854,  .20494,  .16665,
     3  .14778,  .13892,  .12943,  .15525,  .15709,  .13513,  .12481,
     4  .11759,  .11494,  .11487,  .11329,  .11108,  .09911,  .09209,
     5  .09342,  .10120,  .13177,  .15696,  .15766,  .15513,  .15203,
     6  .14532,  .13038,  .11785,  .10411,  .09101,
     7  .08907,  .08399,  .06579,  .05337,  .03372,  .02379, 0.0/
      data urba1 /
     1  .78437,  .58975,  .54285,  .36184,  .29222,  .20886,  .15658,
     2  .12329,  .11462,  .10747,  .11797,  .10025,  .08759,  .08184,
     3  .07506,  .07006,  .06741,  .06601,  .06544,  .06449,  .06665,
     4  .06278,  .06949,  .07316,  .07462,  .08101,  .05753,  .05272,
     5  .04899,  .04734,  .04494,  .04443,  .05133,  .04348,  .04443,
     6  .03994,  .03981,  .03633,  .03468,  .03146,
     7  .02809,  .02471,  .01556,  .01145,  .00639,  .00454, 0.0/
      data urba2 /
     1  .69032,  .49367,  .45165,  .29741,  .24070,  .17399,  .13146,
     2  .10354,  .09589,  .09025,  .10411,  .15101,  .07880,  .06949,
     3  .06570,  .06095,  .05829,  .07171,  .06797,  .05975,  .06013,
     4  .05589,  .06051,  .07139,  .07494,  .07956,  .05525,  .05184,
     5  .05089,  .05291,  .05886,  .06380,  .06880,  .06127,  .06019,
     6  .05525,  .05070,  .04500,  .04076,  .03741,
     7  .03400,  .03010,  .01926,  .01427,  .00800,  .00567, 0.0/
      data urba3 /
     1  .54848,  .37101,  .33734,  .21949,  .17785,  .12968,  .09854,
     2  .07804,  .07165,  .06791,  .08563,  .19639,  .06722,  .05316,
     3  .05316,  .04886,  .04620,  .07570,  .06899,  .05291,  .05101,
     4  .04734,  .05025,  .06171,  .06570,  .06854,  .04892,  .04797,
     5  .05057,  .05665,  .07127,  .08095,  .08411,  .07728,  .07475,
     6  .06886,  .06019,  .05222,  .04538,  .04171,
     7  .03911,  .03486,  .02271,  .01697,  .00961,  .00681, 0.0/
      data urba4 /
     1  .15975,  .10000,  .09013,  .05785,  .04671,  .03424,  .02633,
     2  .02525,  .01975,  .02354,  .06241,  .26690,  .05810,  .02285,
     3  .03810,  .03386,  .03044,  .09627,  .08557,  .05405,  .04576,
     4  .04392,  .04424,  .04671,  .04791,  .04861,  .04684,  .05177,
     5  .06158,  .07475,  .10342,  .12146,  .12177,  .11734,  .11335,
     6  .10608,  .09171,  .08063,  .06968,  .06475,
     7  .06559,  .06131,  .04591,  .03714,  .02365,  .01734, 0.0/
      data urbg1 /
     1  .7785,   .7182,   .7067,   .6617,   .6413,   .6166,   .6287,
     2  .6883,   .7070,   .7243,   .7370,   .7446,   .7391,   .7371,
     3  .7414,   .7435,   .7466,   .7543,   .7498,   .7424,   .7270,
     4  .7674,   .7850,   .5880,   .5616,   .5901,   .6159,   .6238,
     5  .6240,   .6281,   .6306,   .6298,   .6252,   .5785,   .5378,
     6  .5512,   .5072,   .4930,   .4709,   .4009,   .4110,   .3672,
     7  .3344,   .3093,   .2717,   .2426,   .0000/
      data urbg2 /
     1  .7906,   .7476,   .7385,   .6998,   .6803,   .6536,   .6590,
     2  .7066,   .7258,   .7484,   .7769,   .7405,   .7351,   .7459,
     3  .7625,   .7673,   .7759,   .7910,   .7732,   .7703,   .7644,
     4  .7966,   .8142,   .6635,   .6428,   .6700,   .6935,   .7050,
     5  .7092,   .7145,   .7094,   .6762,   .6684,   .6316,   .5997,
     6  .6013,   .5625,   .5433,   .5198,   .4552,   .4387,   .3928,
     7  .3575,   .3310,   .2899,   .2588,   .0000/
      data urbg3 /
     1  .7949,   .7713,   .7650,   .7342,   .7162,   .6873,   .6820,
     2  .7131,   .7312,   .7583,   .8030,   .7171,   .7185,   .7400,
     3  .7698,   .7778,   .7923,   .8142,   .7864,   .7867,   .7891,
     4  .8147,   .8298,   .7276,   .7136,   .7361,   .7590,   .7729,
     5  .7783,   .7808,   .7624,   .7094,   .7022,   .6714,   .6480,
     6  .6417,   .6104,   .5887,   .5651,   .5058,   .4692,   .4212,
     7  .3825,   .3549,   .3112,   .2778,   .0000/
      data urbg4 /
     1  .7814,   .7993,   .7995,   .7948,   .7870,   .7682,   .7751,
     2  .7501,   .7565,   .7809,   .8516,   .7137,   .7039,   .7241,
     3  .7728,   .7846,   .8093,   .8576,   .8125,   .8140,   .8304,
     4  .8472,   .8549,   .8525,   .8569,   .8640,   .8853,   .9017,
     5  .9061,   .9021,   .8685,   .8126,   .8091,   .7897,   .7802,
     6  .7691,   .7550,   .7353,   .7146,   .6754,   .6134,   .5601,
     7  .5056,   .4701,   .4134,   .3714,   .0000/
      data ocne1 /
     1 1.47576, 1.32614, 1.26171, 1.00000,  .88133,  .70297,  .56487,
     2  .46006,  .42044,  .38310,  .35076,  .42266,  .32278,  .28810,
     3  .24905,  .21184,  .16734,  .14791,  .21532,  .15076,  .12057,
     4  .10038,  .10703,  .15070,  .15665,  .14639,  .10228,  .08367,
     5  .07373,  .06829,  .05044,  .04373,  .04962,  .06158,  .07703,
     6  .07234,  .06297,  .05481,  .05329,  .08741,
     7  .04608,  .03959,  .02382,  .01712,  .00936,  .00665, 0.0/
      data ocne2 /
     1 1.36924, 1.25443, 1.20835, 1.00000,  .91367,  .77089,  .64987,
     2  .54886,  .50247,  .45038,  .38209,  .50589,  .43766,  .38076,
     3  .31658,  .27475,  .22215,  .21019,  .27570,  .21057,  .16949,
     4  .14209,  .14215,  .16956,  .17082,  .16025,  .11665,  .09759,
     5  .09215,  .09373,  .10532,  .12570,  .13000,  .13633,  .14291,
     6  .13506,  .11475,  .09658,  .08291,  .10348,
     7  .06693,  .05786,  .03522,  .02519,  .01358,  .00954, 0.0/
      data ocne3 /
     1 1.22259, 1.14627, 1.11842, 1.00000,  .94766,  .87538,  .80418,
     2  .72930,  .68582,  .62165,  .49962,  .67949,  .66468,  .59253,
     3  .49551,  .44671,  .37886,  .35924,  .43367,  .37019,  .30842,
     4  .26437,  .25228,  .24905,  .23975,  .22766,  .17804,  .15316,
     5  .15373,  .16791,  .22361,  .28348,  .28677,  .29082,  .29038,
     6  .27810,  .23867,  .20209,  .16430,  .14943,
     7  .12693,  .11177,  .07095,  .05084,  .02690,  .01838, 0.0/
      data ocne4 /
     1 1.09133, 1.06601, 1.05620, 1.00000,  .97506,  .94791,  .94203,
     2  .93671,  .92867,  .90411,  .80253,  .89222,  .94462,  .92146,
     3  .85797,  .82595,  .76747,  .68646,  .78209,  .75266,  .68658,
     4  .62722,  .60228,  .56335,  .53728,  .51861,  .43449,  .37196,
     5  .35899,  .37316,  .46854,  .58234,  .58690,  .60348,  .60563,
     6  .60000,  .55392,  .50367,  .43576,  .35949,
     7  .34729,  .32254,  .23600,  .17953,  .10071,  .06714, 0.0/
      data ocna1 /
     1  .30987,  .04354,  .02880,  .01797,  .01468,  .01766,  .01582,
     2  .00816,  .01146,  .01677,  .03310,  .03380,  .00715,  .00443,
     3  .00500,  .00601,  .00753,  .01595,  .02943,  .00994,  .01367,
     4  .01671,  .02538,  .03481,  .03405,  .03601,  .01608,  .01310,
     5  .01152,  .01082,  .01070,  .01563,  .02063,  .03171,  .03810,
     6  .03741,  .03804,  .03759,  .04209,  .07892,
     7  .04347,  .03754,  .02269,  .01649,  .00917,  .00657, 0.0/
      data ocna2 /
     1  .23367,  .03127,  .02070,  .01297,  .01063,  .01285,  .01190,
     2  .00937,  .00911,  .01576,  .05576,  .23487,  .03949,  .00905,
     3  .02057,  .01816,  .01665,  .08025,  .08044,  .03677,  .03139,
     4  .03190,  .03766,  .04532,  .04544,  .04715,  .03405,  .03614,
     5  .04329,  .05424,  .07823,  .09728,  .10057,  .10247,  .10222,
     6  .09551,  .08241,  .07158,  .06506,  .09203,
     7  .06133,  .05332,  .03258,  .02366,  .01308,  .00932, 0.0/
      data ocna3 /
     1  .13025,  .01557,  .01013,  .00646,  .00532,  .00665,  .00722,
     2  .01335,  .00728,  .01810,  .09835,  .37329,  .09703,  .01968,
     3  .05114,  .04342,  .03709,  .17456,  .16468,  .08785,  .06880,
     4  .06589,  .06791,  .07247,  .07329,  .07449,  .07025,  .07962,
     5  .09899,  .12481,  .17867,  .22019,  .22228,  .22051,  .21595,
     6  .20335,  .17278,  .14677,  .12171,  .12430,
     7  .10890,  .09644,  .06106,  .04465,  .02457,  .01732, 0.0/
      data ocna4 /
     1  .03506,  .00323,  .00215,  .00139,  .00114,  .00171,  .00532,
     2  .03082,  .01101,  .03741,  .20101,  .47608,  .21165,  .05234,
     3  .12886,  .11215,  .09684,  .32810,  .31778,  .20513,  .16658,
     4  .15956,  .15842,  .15905,  .15968,  .16051,  .16506,  .18323,
     5  .21709,  .25652,  .33222,  .39639,  .39854,  .40297,  .40025,
     6  .39025,  .35468,  .32006,  .27715,  .25348,
     7  .25632,  .23876,  .17092,  .13198,  .07692,  .05407, 0.0/
      data ocng1 /
     1  .7516,   .6960,   .6920,   .6756,   .6767,   .6844,   .6936,
     2  .7055,   .7110,   .7177,   .7367,   .6287,   .6779,   .6784,
     3  .6599,   .6659,   .6859,   .6887,   .6095,   .6558,   .6665,
     4  .6697,   .6594,   .5851,   .5644,   .5760,   .5903,   .5991,
     5  .6024,   .5979,   .6087,   .5837,   .5763,   .5348,   .4955,
     6  .4821,   .4635,   .4373,   .3944,   .2344,   .2754,   .2447,
     7  .2266,   .2088,   .1766,   .1481,   .0000/
      data ocng2 /
     1  .7708,   .7288,   .7243,   .7214,   .7211,   .7330,   .7445,
     2  .7579,   .7649,   .7790,   .8182,   .7673,   .7171,   .7205,
     3  .7235,   .7251,   .7397,   .7537,   .6934,   .7137,   .7193,
     4  .7206,   .7151,   .6732,   .6620,   .6696,   .6821,   .6895,
     5  .6898,   .6819,   .6556,   .5925,   .5869,   .5511,   .5284,
     6  .5124,   .4912,   .4646,   .4302,   .3124,   .3101,   .2752,
     7  .2529,   .2335,   .2021,   .1738,   .0000/
      data ocng3 /
     1  .7954,   .7782,   .7752,   .7717,   .7721,   .7777,   .7872,
     2  .8013,   .8089,   .8301,   .8844,   .8332,   .7557,   .7597,
     3  .7823,   .7822,   .7944,   .8157,   .7712,   .7738,   .7784,
     4  .7807,   .7800,   .7682,   .7659,   .7692,   .7780,   .7828,
     5  .7776,   .7621,   .7115,   .6342,   .6294,   .5999,   .5854,
     6  .5700,   .5512,   .5265,   .4996,   .4236,   .3765,   .3357,
     7  .3066,   .2830,   .2466,   .2184,   .0000/
      data ocng4 /
     1  .8208,   .8270,   .8260,   .8196,   .8176,   .8096,   .8096,
     2  .8202,   .8255,   .8520,   .9228,   .8950,   .7965,   .7847,
     3  .8242,   .8244,   .8376,   .8857,   .8463,   .8332,   .8379,
     4  .8441,   .8467,   .8502,   .8534,   .8562,   .8688,   .8789,
     5  .8785,   .8683,   .8252,   .7562,   .7519,   .7261,   .7141,
     6  .6980,   .6789,   .6540,   .6294,   .5783,   .5100,   .4595,
     7  .4164,   .3868,   .3404,   .3042,   .0000/
      data troe1 /
     1 2.21222, 1.82753, 1.67032, 1.00000,  .72424,  .35272,  .15234,
     2  .05165,  .03861,  .02994,  .04671,  .02462,  .01538,  .01146,
     3  .01032,  .00816,  .00861,  .00994,  .01057,  .01139,  .01747,
     4  .01494,  .02418,  .03165,  .03386,  .04247,  .01601,  .01215,
     5  .00937,  .00861,  .00823,  .01139,  .01924,  .01234,  .01348,
     6  .01114,  .01297,  .01266,  .01418,  .01487,
     7  .01543,  .01321,  .00793,  .00582,  .00330,  .00239, 0.0/
      data troe2 /
     1 2.21519, 1.82266, 1.66557, 1.00000,  .72525,  .35481,  .15449,
     2  .05475,  .04044,  .03082,  .04620,  .05272,  .01867,  .01266,
     3  .01127,  .00886,  .00886,  .01449,  .01399,  .01228,  .01728,
     4  .01475,  .02285,  .03215,  .03494,  .04285,  .01652,  .01304,
     5  .01101,  .01120,  .01297,  .01753,  .02468,  .01741,  .01766,
     6  .01513,  .01557,  .01456,  .01532,  .01582,
     7  .01619,  .01386,  .00832,  .00610,  .00346,  .00251, 0.0/
      data troe3 /
     1 2.19082, 1.79462, 1.64456, 1.00000,  .73297,  .36443,  .16278,
     2  .06468,  .04658,  .03399,  .04538,  .11892,  .02835,  .01646,
     3  .01386,  .01076,  .00968,  .02551,  .02222,  .01468,  .01690,
     4  .01437,  .01994,  .03127,  .03513,  .04076,  .01722,  .01513,
     5  .01519,  .01791,  .02538,  .03272,  .03816,  .03038,  .02886,
     6  .02551,  .02228,  .01937,  .01804,  .01791,
     7  .01798,  .01539,  .00924,  .00678,  .00384,  .00278, 0.0/
      data troe4 /
     1 1.75696, 1.54829, 1.45962, 1.00000,  .77816,  .43139,  .21778,
     2  .11329,  .08101,  .05506,  .04943,  .25291,  .06816,  .03703,
     3  .02601,  .01968,  .01468,  .04962,  .04247,  .02234,  .01797,
     4  .01532,  .01633,  .02259,  .02487,  .02595,  .01728,  .01892,
     5  .02399,  .03247,  .05285,  .06462,  .06608,  .05930,  .05525,
     6  .04861,  .03753,  .02968,  .02348,  .02165,
     7  .02152,  .01841,  .01104,  .00809,  .00458,  .00332, 0.0/
      data troa1 /
     1  .69671,  .09905,  .06563,  .04101,  .03354,  .03627,  .02810,
     2  .00873,  .00918,  .00930,  .03215,  .01285,  .00513,  .00316,
     3  .00557,  .00494,  .00646,  .00867,  .00937,  .01025,  .01646,
     4  .01481,  .02418,  .02886,  .03070,  .04032,  .01494,  .01139,
     5  .00873,  .00816,  .00797,  .01133,  .01911,  .01215,  .01329,
     6  .01101,  .01291,  .01266,  .01418,  .01487,
     7  .01543,  .01321,  .00793,  .00582,  .00330,  .00239, 0.0/
      data troa2 /
     1  .65000,  .08791,  .05816,  .03652,  .02994,  .03278,  .02557,
     2  .00810,  .00842,  .00867,  .03139,  .03949,  .00646,  .00316,
     3  .00595,  .00519,  .00646,  .01304,  .01247,  .01095,  .01620,
     4  .01449,  .02278,  .02930,  .03184,  .04063,  .01544,  .01234,
     5  .01044,  .01076,  .01272,  .01741,  .02462,  .01722,  .01747,
     6  .01506,  .01551,  .01456,  .01532,  .01582,
     7  .01619,  .01386,  .00832,  .00610,  .00346,  .00251, 0.0/
      data troa3 /
     1  .52804,  .06367,  .04158,  .02633,  .02184,  .02443,  .01937,
     2  .00658,  .00646,  .00709,  .02949,  .10013,  .00968,  .00310,
     3  .00677,  .00582,  .00646,  .02361,  .01994,  .01266,  .01544,
     4  .01386,  .01968,  .02848,  .03203,  .03854,  .01620,  .01449,
     5  .01462,  .01747,  .02513,  .03253,  .03797,  .03019,  .02861,
     6  .02538,  .02215,  .01930,  .01797,  .01791,
     7  .01797,  .01539,  .00924,  .00677,  .00384,  .00278, 0.0/
      data troa4 /
     1  .19829,  .01842,  .01215,  .00791,  .00665,  .00778,  .00652,
     2  .00361,  .00253,  .00399,  .02570,  .20690,  .01715,  .00316,
     3  .00873,  .00728,  .00658,  .04481,  .03525,  .01646,  .01405,
     4  .01310,  .01468,  .01956,  .02184,  .02367,  .01608,  .01816,
     5  .02342,  .03203,  .05234,  .06399,  .06538,  .05867,  .05456,
     6  .04810,  .03715,  .02949,  .02335,  .02158,
     7  .02149,  .01840,  .01104,  .00809,  .00458,  .00332, 0.0/
      data trog1 /
     1  .7518,   .6710,   .6638,   .6345,   .6152,   .5736,   .5280,
     2  .4949,   .4700,   .4467,   .4204,   .4028,   .3777,   .3563,
     3  .3150,   .2919,   .2695,   .2465,   .2402,   .2313,   .2101,
     4  .1760,   .1532,   .2091,   .2079,   .1843,   .1811,   .1687,
     5  .1626,   .1526,   .1356,   .1030,   .0962,   .1024,   .1086,
     6  .0928,   .0836,   .0643,   .0451,   .0290,   .0156,   .0118,
     7  .0076,   .0050,   .0024,   .0015,   .0000/
      data trog2 /
     1  .7571,   .6858,   .6790,   .6510,   .6315,   .5887,   .5418,
     2  .5075,   .4829,   .4598,   .4338,   .4043,   .3890,   .3680,
     3  .3259,   .3026,   .2800,   .2541,   .2494,   .2414,   .2196,
     4  .1873,   .1657,   .2123,   .2110,   .1890,   .1836,   .1709,
     5  .1640,   .1534,   .1354,   .1044,   .0984,   .1026,   .1073,
     6  .0935,   .0842,   .0661,   .0477,   .0309,   .0171,   .0129,
     7  .0084,   .0056,   .0027,   .0017,   .0000/
      data trog3 /
     1  .7667,   .7176,   .7128,   .6879,   .6690,   .6255,   .5769,
     2  .5403,   .5167,   .4947,   .4703,   .4143,   .4190,   .3993,
     3  .3563,   .3325,   .3095,   .2767,   .2751,   .2693,   .2464,
     4  .2175,   .1992,   .2247,   .2215,   .2042,   .1952,   .1814,
     5  .1726,   .1604,   .1398,   .1111,   .1065,   .1068,   .1086,
     6  .0984,   .0888,   .0724,   .0549,   .0358,   .0216,   .0166,
     7  .0109,   .0073,   .0036,   .0023,   .0000/
      data trog4 /
     1  .7696,   .7719,   .7710,   .7606,   .7478,   .7142,   .6727,
     2  .6381,   .6201,   .6050,   .5912,   .4849,   .5137,   .5019,
     3  .4625,   .4389,   .4169,   .3696,   .3707,   .3708,   .3473,
     4  .3232,   .3112,   .3022,   .2938,   .2850,   .2675,   .2494,
     5  .2347,   .2165,   .1857,   .1536,   .1509,   .1441,   .1416,
     6  .1354,   .1245,   .1088,   .0905,   .0614,   .0440,   .0354,
     7  .0257,   .0179,   .0089,   .0059,   .0000/
      data bstext /
     e 2.0752e0,  1.8656e0,  1.7246e0,  1.0000e0,  7.0156e-1, 3.0170e-1,
     e 1.1440e-1, 5.1225e-2, 3.4285e-2, 2.3475e-2, 1.6878e-2, 6.6506e-2,
     e 1.0943e-1, 8.9653e-2, 6.7609e-2, 5.2855e-2, 6.7496e-2, 5.7975e-2,
     e 4.2471e-2, 2.4176e-2, 4.6102e-2, 1.2339e-1, 1.7699e-1, 1.2389e-1,
     e 9.0220e-2, 8.5793e-2, 3.2838e-2, 2.6528e-2, 5.0703e-2, 1.9471e-2,
     e 1.1710e-2, 1.6106e-2, 1.7716e-2, 3.9533e-2, 3.7954e-2, 5.4871e-3,
     e 8.8409e-3, 1.2289e-3, 1.0647e-3, 3.3151e-3, 4.5164e-3, 4.1496e-3,
     e 3.2801e-3, 2.4481e-3, 1.0714e-3, 5.0381e-4, 1.2101e-4/
      data bstabs /
     a 2.4347e-7, 1.4949e-7, 1.3020e-7, 6.8716e-8, 1.0053e-7, 4.2384e-6,
     a 2.3075e-4, 1.4889e-3, 1.8377e-3, 3.3645e-3, 4.6858e-3, 5.9424e-2,
     a 1.0129e-1, 8.2396e-2, 6.3621e-2, 5.0327e-2, 6.5798e-2, 5.6149e-2,
     a 4.0939e-2, 2.3226e-2, 4.5800e-2, 1.2276e-1, 1.7568e-1, 1.2216e-1,
     a 8.9058e-2, 8.4861e-2, 3.1979e-2, 2.6097e-2, 5.0244e-2, 1.9042e-2,
     a 1.1497e-2, 1.6024e-2, 1.7639e-2, 3.9452e-2, 3.7847e-2, 5.4251e-3,
     a 8.8160e-3, 1.2118e-3, 1.0579e-3, 3.3122e-3, 4.5150e-3, 4.1489e-3,
     a 3.2799e-3, 2.4481e-3, 1.0713e-3, 5.0381e-4, 1.2101e-4/
      data bstsym /
     g 0.6749, 0.6943, 0.6991, 0.6846, 0.6572, 0.5861, 0.4965, 0.4164,
     g 0.3772, 0.3385, 0.3069, 0.2599, 0.2234, 0.2028, 0.1554, 0.1291,
     g 0.1057, 0.0962, 0.0909, 0.0802, 0.0595, 0.0458, 0.0413, 0.0479,
     g 0.0483, 0.0451, 0.0504, 0.0379, 0.0346, 0.0365, 0.0273, 0.0180,
     g 0.0174, 0.0144, 0.0151, 0.0141, 0.0094, 0.0075, 0.0049, 0.0031,
     g 0.0020, 0.0014, 0.0008, 0.0005, 0.0002, 0.0001, 0.0001/
      data avoext /
     1 1.14880, 1.19171, 1.18013, 1.00000,  .84873,  .53019,  .27968,
     2  .14551,  .11070,  .08633,  .07184,  .06076,  .04506,  .03399,
     3  .02095,  .01538,  .01266,  .01019,  .00994,  .01044,  .01361,
     4  .01791,  .02278,  .02918,  .03108,  .03234,  .03456,  .03184,
     5  .02772,  .02475,  .01715,  .01563,  .01665,  .01646,  .01734,
     6  .01772,  .01076,  .01051,  .01133,  .01329,
     7  .01492,  .01277,  .00766,  .00562,  .00318,  .00231, 0.0/
      data avoabs /
     1  .44816,  .11259,  .08500,  .05272,  .04082,  .02449,  .01487,
     2  .01019,  .00867,  .00842,  .00842,  .00949,  .00741,  .00487,
     3  .00316,  .00335,  .00399,  .00449,  .00525,  .00665,  .01114,
     4  .01652,  .02177,  .02437,  .02506,  .02658,  .03006,  .02861,
     5  .02513,  .02285,  .01620,  .01532,  .01633,  .01620,  .01709,
     6  .01741,  .01057,  .01038,  .01127,  .01329,
     7  .01492,  .01277,  .00766,  .00562,  .00318,  .00231, 0.0/
      data avosym /
     1  .8272,   .7148,   .7076,   .6978,   .6886,   .6559,   .6062,
     2  .5561,   .5255,   .4958,   .4729,   .4401,   .4015,   .3699,
     3  .3125,   .2773,   .2472,   .2173,   .2054,   .1908,   .1623,
     4  .1348,   .1233,   .1615,   .1757,   .1712,   .1521,   .1326,
     5  .1230,   .1081,   .0801,   .0528,   .0514,   .0461,   .0446,
     6  .0449,   .0415,   .0330,   .0198,   .0097,   .0044,   .0032,
     7  .0020,   .0013,   .0006,   .0004,   .0000/
      data fvoext /
     1  .88715,  .92532,  .94013, 1.00000, 1.03013, 1.05975, 1.01171,
     2  .88677,  .82538,  .76361,  .71563,  .67424,  .60589,  .55057,
     3  .45222,  .37646,  .32316,  .25519,  .22728,  .20525,  .17810,
     4  .14481,  .14152,  .37639,  .44551,  .44405,  .42222,  .36462,
     5  .32551,  .27519,  .16728,  .10627,  .10861,  .10886,  .11665,
     6  .13127,  .10108,  .08557,  .06411,  .05741,
     7  .05531,  .04707,  .02792,  .02028,  .01136,  .00820, 0.0/
      data fvoabs /
     1  .41582,  .22892,  .19108,  .14468,  .12475,  .09158,  .06601,
     2  .04943,  .04367,  .04342,  .04399,  .05076,  .04133,  .02829,
     3  .01924,  .01981,  .02297,  .02475,  .02778,  .03411,  .05335,
     4  .07133,  .08816,  .15342,  .18506,  .19354,  .20791,  .18449,
     5  .16101,  .13759,  .08456,  .06886,  .07278,  .07367,  .07956,
     6  .08785,  .06032,  .05747,  .05133,  .05323,
     7  .05453,  .04657,  .02773,  .02020,  .01135,  .00820, 0.0/
      data fvosym /
     1  .9295,   .8115,   .7897,   .7473,   .7314,   .7132,   .7113,
     2  .7238,   .7199,   .7165,   .7134,   .6989,   .6840,   .6687,
     3  .6409,   .6325,   .6199,   .6148,   .6142,   .6072,   .5853,
     4  .5632,   .5486,   .4753,   .4398,   .4329,   .4091,   .4105,
     5  .4120,   .4136,   .4140,   .3637,   .3577,   .3344,   .3220,
     6  .3052,   .2957,   .2564,   .2055,   .1229,   .0632,   .0483,
     7  .0321,   .0216,   .0103,   .0059,   .0000/
      data dmeext /
     1 1.05019, 1.05880, 1.05259, 1.00000,  .94949,  .81456,  .66051,
     2  .54380,  .49133,  .44677,  .41671,  .38063,  .34778,  .32804,
     3  .29722,  .27506,  .25082,  .22620,  .21652,  .20253,  .17266,
     4  .14905,  .14234,  .14082,  .15057,  .16399,  .23608,  .24481,
     5  .27791,  .25076,  .15272,  .09601,  .09456,  .14576,  .12373,
     6  .18348,  .12190,  .12924,  .08538,  .04108,
     7  .04714,  .04069,  .02480,  .01789,  .00980,  .00693, 0.0/
      data dmeabs /
     1  .00063,  .00152,  .00184,  .00506,  .00791,  .01829,  .03728,
     2  .06158,  .07538,  .08943,  .10051,  .11614,  .13310,  .14348,
     3  .14633,  .13728,  .12462,  .11184,  .10709,  .10076,  .09006,
     4  .08734,  .09000,  .10304,  .11905,  .13437,  .19551,  .20095,
     5  .22494,  .18418,  .09285,  .06665,  .06823,  .12329,  .10551,
     6  .16184,  .09835,  .10582,  .06759,  .03247,
     7  .04405,  .03816,  .02327,  .01696,  .00946,  .00677, 0.0/
      data dmesym /
     1  .7173,   .7039,   .7020,   .6908,   .6872,   .6848,   .6891,
     2  .6989,   .7046,   .7099,   .7133,   .7159,   .7134,   .7058,
     3  .6827,   .6687,   .6583,   .6513,   .6494,   .6475,   .6467,
     4  .6496,   .6506,   .6461,   .6334,   .6177,   .5327,   .5065,
     5  .4632,   .4518,   .5121,   .5450,   .5467,   .4712,   .4853,
     6  .3984,   .4070,   .3319,   .3427,   .3766,   .3288,   .2969,
     7  .2808,   .2661,   .2409,   .2098,   .0000/
      end
c file:                  taugas.f
c
c external routines:     kdistr,absint,taugas,rayleigh,gasabs
c
c internal routines:     slf296,slf260,frn296,sint,c4dta,c6dta,hno3,
c                        hertda,o2cont,o2int,o3hht0,o3hht1,o3hht2,
c                        o3int,o3uv,c8dta,cxdta,abcdta,schrun,volmix
c
c internal common        aabbcc,abc,atm,c4c8,esfblk,fh2o,h2o,o2c,o3,
c                        o3hh0,o3hh1,o3hh2,o3uvf,s260,sh2o,shur,traceg,
c                        ufmix1,ufmix2,wnlohi,absgas
c
c=======================================================================
      subroutine kdistr(nz,mxly,mxq,uu,dtauk,tauk,wtk,twgp)

c   PURPOSE: compute 3 component k-distribution optical depths
c            and weights.  The common block parameters in /aabbcc/
c            are set up by subroutine TAUGAS, which should be called
c            before KDISTR at each new wavelength.
c
c   input parameters:
c   ----------------
c     nz       number of active layers
c     mxly     dimensioned size of first subscript of dtauk,tauk,wtk,twgp
c     mxq      dimensioned size of first subscript of uu
c     uu       absorption integrals from ABSINT 
c
c   output parameters:
c   -----------------
c   dtauk(nz,3)   molecular optical thickness of layer n, term k 
c   tauk(nz,3)    cumulative optical depth upto layer n, term k
c   wtk(nz,3)     layer by layer weighting for k-distribution fit
c     
c
c   internal working array (dimensioned in calling routine)
c   -------------------------------------------------------
c   twgp(nz,3)  - sum of optical depth * probability by molecule
c
c***********************************************************************
c
c   new varables          11 molecules  by joseph h pierluissi
c   dpwj  probability for each molecule  fit double exponential
c   gkwj  band dependent  scaling of densitys to get k  amount
c   cps is the stored values of Pierluissi band model coefficients
c   cp1s = 10**cps
c   ibnd maps bands to molecules
c   wtk  is the  effective probability by layer
c   dtaum is defined as the sum of the optical depths by molecule
c
c************************************************************************

      parameter (nk=3)

      common /aabbcc/ aa(11),bb(11),cc(11),a(11),cps(11),ibnd(11)

      dimension dtauk(mxly,nk),tauk(mxly,nk),wtk(mxly,nk),twgp(mxly,nk)
      dimension fac(nk),gkwj(nk,11),dpwj(nk,11),cp1s(11)
      dimension taudb(11)
      dimension uu(mxq,mxly)

      data fac /1.0,0.09,0.015/

c************************************************************************

      dpc = 1./3.
      
      do 20 m = 1,11
        cp1s(m)= 10.**cps(m)
        taudb(m)=0.
 20   continue

      do  40   k = 1,nk
        do  30  mol = 1,11
          iw = ibnd(mol)
          gkwj(k,mol) = 0.
          dpwj(k,mol) = 0.
          if(iw. gt. 0) then
            gkwj(k,mol) = fac(k) * cc(mol)
            if(k .eq. 1) dpwj(k,mol)=aa(mol)
            if(k .eq. 2) dpwj(k,mol)=bb(mol)
            if(k .eq. 3) dpwj(k,mol)=1.-aa(mol)-bb(mol)
          endif
 30     continue
 40   continue
      
c   evaluate the weighted k distribution quantities for
c   water vapor, ozone and uniformly mixed gases

      taukk=0.
      do 80 k=1, nk
        do 70 n=1,nz
          tauk(n,k)=0.
          dtauk(n,k)= 0.
          nm=nz-n+1

          twgp(n,k)=0.
          do 60 mol=1,11
            ib = ibnd(mol)
            if(ib.lt.0) go to 60
            if(nm.eq.nz) then
              duu=uu(ib,nm)
            else
              duu=uu(ib,nm)-uu(ib,nm+1)
            endif
            wpth = duu*gkwj(k,mol)
            dtauk(n,k)=dtauk(n,k)+wpth*cp1s(mol)
            twgp(n,k)=twgp(n,k)+wpth*cp1s(mol)*dpwj(k,mol)
 60       continue
          
          wtk(n,k) = dpc
          if(dtauk(n,k).ne.0) wtk(n,k)=twgp(n,k)/dtauk(n,k)
          
c     effective probability by layer, wtk is based on 
c     molecular probability weighted by optical depth
          
 70     continue
 80   continue
      
      do 100 n=1,nz
        smwtk = wtk(n,1) + wtk(n,2) + wtk(n,3)
        if(smwtk .eq. .0) write(8, *) 'smwtk == 0'
        do 90 k=1, nk
          wtk(n,k) = wtk(n,k)/smwtk
          if(n.eq.1) then
            tauk(n,k) = dtauk(n,k)
          else
            tauk(n,k) = dtauk(n,k)+tauk(n-1,k)
          endif
 90     continue
 100  continue
      
      return
      end

c=======================================================================

      subroutine absint(uu,nz,z,p,t,wh,wo,lun)
c
c     calculates absorber integrals from top to bottom of atmosphere
c
c    input:  nz         number of atmospheric layers
c            z          layer altitudes
c            p          pressure in mb
c            t          temperature in kelvin 
c            wh         water vapor mass density in g/m3
c            wo         o3 mass density in g/m3
c            lun        if non-zero, write diagnostic print out to LUN
c
c    output: uu         absorption integrals
c
c
c     k      absorption process
c    ----    --------------------------------------
c     1-2    temp dep o2  1395 to 1760
c     3      o2*o2 and o2*n2 continuum (solomon et al 1998) 
c     4      n2 continuum
c     5      h2o self broadened continuum at 296 k
c     6      molecular (rayliegh) scattering
c     7      not used
c     8      ultraviolet ozone
c     9      h2o self continuum 296-260  (tx(9) total trans)
c    10      h2o foriegn continuum
c    11      hno3 (nitric acid)
c    12-16   not used
c    17-30   h2o (line absorption) (double exponential models)
c    31-35   o3  (line absorption) (double exponential models)
c    36-43   co2 (line absorption) (double exponential models)
c    44-45   co  (line absorption) (double exponential models)
c    46      ch4 (line absorption) (double exponential models)
c    47      n2o (line absorption) (double exponential models)
c    50-51   o2  (line absorption) (double exponential models)
c    52-53   nh3 (line absorption) (double exponential models)
c    54      no  (line absorption) (double exponential models)
c    55      no2 (line absorption) (double exponential models)
c    56-57   so2 (line absorption) (double exponential models)
c    58      o2  hertzberg continuum (uv)
c    59-60   temp dep o3
c    61-62   not used
c    63      o2  1395 to 1760
c
c***********************************************************************
      parameter (mxly=50)
      parameter (mxq=63)
      parameter (alosch=2.6868e19)
      parameter (xlosch=alosch*1.e5)
      parameter (pmo=2.6568e-23)
      parameter (conjoe=0.1/alosch)
      parameter (pzero=1013.25, tzero=273.15)
      parameter (con=3.3429e21)
      parameter (rhzero=273.15/296.0)
c
c conjoe = 1.e5(cm/km) * 1.e-6(ppmv) / alosch
c con    = 0.1/molecular_mass_of_h2o 
c          con/xlosch = conversion from g/m3 => density in loschmidts
c pmo    = mass of oxygen atom (g)
c
      dimension z(mxly),p(mxly),t(mxly),wh(mxly),wo(mxly)
      dimension uu(mxq,mxly),dd(mxq,mxly)
      logical ozn

c
c**********************************************************************
c
      do 100 i=1,nz
        call volmix(z(i),
     &  vfn2,vfo2,vfco2,vfch4,vfn2o,vfco,vfno2,vfso2,vfnh3,vfno,vfhno3)
        tt=t(i)
        pp=p(i)
        pss=pp/pzero
        tss=tzero/tt
        f1=(pp/pzero)/(tt/tzero)
        f2=(pp/pzero)*sqrt(tzero/tt)
        wair=alosch*f1

        rhoair=f1
        rhoh2o=con*wh(i)/xlosch     
        rhofrn=rhoair-rhoh2o
        wo2d=conjoe*wair*vfo2*pss
        vfo3=wo(i)/(3*pmo*wair)
c
c                             rhoair - air density in loschmidts
c                             rhoh2o - water vapor density in loschmidts
c                             
c
c vfo3 = o3 volume fraction in parts per million
c
        dd(1,i)=wo2d*tt
        dd(2,i)=wo2d*(tt-220.)**2
        dd(3,i)=f1**2
        dd(4,i)=1.e-6*vfn2*f1*f2
        dd(5,i)=xlosch*rhoh2o**2/rhzero
        dd(6,i)=f1
        dd(8,i)=conjoe*wair*vfo3
        dd(10,i)=xlosch*rhoh2o*rhofrn/rhzero
        dd(11,i)=f1*vfhno3*(1.e-6*1.e5)
        dd(63,i)=wo2d
c
c for h2o
c    wh(i) is in g/m3,  conh2o is in g/cm2/km
c
        conh2o=wh(i)*.1
        dd(17,i)=conh2o*pss**0.9810*tss**( 0.3324) !     0-  345 cm-1 
        dd(18,i)=conh2o*pss**1.1406*tss**(-2.6343) !   350- 1000 cm-1 
        dd(19,i)=conh2o*pss**0.9834*tss**(-2.5294) !  1005- 1640 cm-1 
        dd(20,i)=conh2o*pss**1.0443*tss**(-2.4359) !  1645- 2530 cm-1 
        dd(21,i)=conh2o*pss**0.9681*tss**(-1.9537) !  2535- 3420 cm-1 
        dd(22,i)=conh2o*pss**0.9555*tss**(-1.5378) !  3425- 4310 cm-1 
        dd(23,i)=conh2o*pss**0.9362*tss**(-1.6338) !  4315- 6150 cm-1 
        dd(24,i)=conh2o*pss**0.9233*tss**(-0.9398) !  6155- 8000 cm-1 
        dd(25,i)=conh2o*pss**0.8658*tss**(-0.1034) !  8005- 9615 cm-1 
        dd(26,i)=conh2o*pss**0.8874*tss**(-0.2576) !  9620-11540 cm-1 
        dd(27,i)=conh2o*pss**0.7982*tss**( 0.0588) ! 11545-13070 cm-1 
        dd(28,i)=conh2o*pss**0.8088*tss**( 0.2816) ! 13075-14860 cm-1 
        dd(29,i)=conh2o*pss**0.6642*tss**( 0.2764) ! 14865-16045 cm-1 
        dd(30,i)=conh2o*pss**0.6656*tss**( 0.5061) ! 16340-17860 cm-1 
c
c for o3
c    cono3 in units of (1.e5 loschmidts)=(1 atm cm/km)=(2.6868e24 cm-3)
c
        cono3 = conjoe*wair*vfo3
        dd(31,i)=cono3 *pss**0.4200*tss**( 1.3909) !     0-  200 cm-1
        dd(32,i)=cono3 *pss**0.4221*tss**( 0.7678) !   515- 1275 cm-1
        dd(33,i)=cono3 *pss**0.3739*tss**( 0.1225) !  1630- 2295 cm-1
        dd(34,i)=cono3 *pss**0.1770*tss**( 0.9827) !  2670- 2845 cm-1
        dd(35,i)=cono3 *pss**0.3921*tss**( 0.1942) !  2850- 3260 cm-1
c
c for co2
c
        conco2= conjoe*wair*vfco2
        dd(36,i)=conco2*pss**0.6705*tss**(-2.2560)
        dd(37,i)=conco2*pss**0.7038*tss**(-5.0768)
        dd(38,i)=conco2*pss**0.7258*tss**(-1.6740)
        dd(39,i)=conco2*pss**0.6982*tss**(-1.8107)
        dd(40,i)=conco2*pss**0.8867*tss**(-0.5327)
        dd(41,i)=conco2*pss**0.7883*tss**(-1.3244)
        dd(42,i)=conco2*pss**0.6899*tss**(-0.8152)
        dd(43,i)=conco2*pss**0.6035*tss**( 0.6026)
c
c for co
c
        conco = conjoe*wair*vfco
        dd(44,i)=conco *pss**0.7589*tss**( 0.6911)
        dd(45,i)=conco *pss**0.9267*tss**( 0.1716)
c
c for ch4
c
        conch4= conjoe*wair*vfch4
        dd(46,i)=conch4*pss**0.7139*tss**(-0.4185)
c
c for n2o
c
        conn2o= conjoe*wair*vfn2o
        dd(47,i)=conn2o*pss**0.3783*tss**( 0.9399)
        dd(48,i)=conn2o*pss**0.7203*tss**(-0.1836)
        dd(49,i)=conn2o*pss**0.7764*tss**( 1.1931)
c
c for o2
c
        cono2 = conjoe*wair*vfo2
        dd(50,i)=cono2 *pss**1.1879*tss**( 2.9738) !     0-  265 cm-1
        dd(51,i)=cono2 *pss**0.9353*tss**( 0.1936) !  7650-52710 cm-1
c
c for nh3
c
        connh3= conjoe*wair*vfnh3
        dd(52,i)=connh3*pss**0.8023*tss**(-0.9111)
        dd(53,i)=connh3*pss**0.6968*tss**( 0.3377)
c
c for no
c
        conno = conjoe*wair*vfno
        dd(54,i)=conno *pss**0.5265*tss**(-0.4702)
c
c for no2
c
        conno2= conjoe*wair*vfno2
        dd(55,i)=conno2*pss**0.3956*tss**(-0.0545)
c
c for so2
c
        conso2= conjoe*wair*vfso2
        dd(56,i)=conso2*pss**0.2943*tss**( 1.2316)
        dd(57,i)=conso2*pss**0.2135*tss**( 0.0733)
c
c   herzberg continuum pressure dependence calculation, shardanand 1977
c      and   yoshino et al 1988
c
        dd(58,i)=(1.+.83*f1)*cono2
c
        if(lun.ne.0) then
          if(i.eq.1) write(lun,800)
          write(lun,'(i4,0pf9.2,f9.3,f7.1,1x,1p11e9.2)')
     &       i,z(i),p(i),t(i), dd(17,i),dd(31,i),
     &       dd(36,i),dd(44,i),dd(46,i),dd(47,i),
     &       dd(50,i),dd(52,i),dd(54,i),dd(55,i),dd(56,i)
        endif

 100  continue
c
c absorption integrals
c
      do 120 j=1,nz
        do 110 k=1,mxq
          uu(k,j)=0.
 110    continue
 120  continue
c
c use scale height to get first step of integration
c
      scfac=exp(-1.)
      airwt=(2.66e-23*(vfo2+1.e6-vfn2)+2.24e-23*vfn2)*1.e-6
      sclht=1.e-5*1.38e-16*t(nz)/(airwt*980.67)
c     
      do 200 i=nz,1,-1
        if(i.eq.nz) then
          ztop=2*z(i)-z(i-1)
          ptop=p(i)**2/p(i-1)
          ttop=t(i)
        else
          ztop=z(i+1)
          ptop=p(i+1)
          ttop=t(i+1)
        endif
        dz=ztop-z(i)
        if(p(i).eq.ptop) then 
          tbar=.5*(ttop+t(i))
        else 
          dp=(p(i)-ptop)/log(p(i)/ptop)
          drho=(p(i)/t(i)-ptop/ttop)/log(p(i)*ttop/(ptop*t(i)))
          tbar=dp/drho
        endif
        do 150 k=1,mxq
          den1=dd(k,i)
          if(i.eq.nz) then
            uutop=0.
            den2=dd(k,i)*scfac
          else
            uutop=uu(k,i+1)
            den2=dd(k,i+1)
          endif
          ozn=.false.
          if(k.eq.8) ozn=.true.
          if(k.ge.31.and.k.le.35) ozn=.true.
          if(k.ge.59.and.k.le.60) ozn=.true.
          denmin=min(den1,den2)
          denave=.5*(den1+den2)
          if(denmin.gt.0..and.denmin.lt.0.999*denave.and..not.ozn) then
            du=dz*(den1-den2)/log(den1/den2)
          else
            du=dz*denave
          endif
          if(k.eq.5) du5=du
          if(k.eq.8) du8=du
          if(k.eq.9) then
            tfac=(296.-tbar)/(296.-260.)
            tfac=max(0.,min(1.,tfac))
            uu(9,i)=uutop+du5*tfac
          elseif(k.eq.59) then
            uu(59,i)=uutop+.269*du8*(tbar-273.15)
          elseif(k.eq.60) then
            uu(60,i)=uutop+.269*du8*(tbar-273.15)**2
          else
            uu(k,i)=uutop+du
          endif
 150    continue
        if(lun.ne.0) then
          if(i.eq.nz) write(lun,900)
          write(lun,'(i4,0pf9.2,f9.3,f7.1,1x,1p11e9.2)')
     &       i,z(i),p(i),t(i), uu(17,i),uu(31,i),
     &       uu(36,i),uu(44,i),uu(46,i),uu(47,i),
     &       uu(50,i),uu(52,i),uu(54,i),uu(55,i),uu(56,i)
        endif

 200  continue
c
 800  format('1',/,'  atmospheric profiles',//,
     + '  (if a molecule has more than one band, then the data for the',
     + ' first band are shown.)'//
     1 '   i      z       p       t      h2o      o3       co2',
     2 '      co       ch4      n2o      o2       nh3      no ',
     3 '      no2      so2'/
     4 '         (km)    (mb)    (k) g/cm**2/km  (            ',
     5 '          atm cm/km                                   ',
     6 '                  )')
 900  format('1',/,'  absorption integrals',//,
     + '  (if a molecule has more than one band, then the data for the',
     + ' first band are shown.)'//
     1 '   i      z       p       t      h2o      o3       co2',
     2 '      co       ch4      n2o      o2       nh3      no ',
     3 '      no2      so2'/
     4 '         (km)    (mb)    (k) g/cm**2     (            ',
     5 '          atm cm                                      ',
     6 '                  )')

      return
      end
c=======================================================================

      subroutine taugas(wl,uu,amu0,nz,z,dtauc,dtaul,lun)
c
c     calculates optical depth due to atmospheric gases and aerosols
c
c  input:  wl        wavelength in microns
c          uu        path integral uu(mxq,nxlayr) computed by ABSINT
c          amu0      cosine of solar zenith angle (at surface)
c          nz        number of atmospheric layers
c                    nz=1  => integration to bottom level only
c          z         heights of atmospheric layers
c          lun       if non-zero print optical depth profiles to LUN
c
c  output: 
c          dtauc(k)  the optical depth of a single layer, k, due to 
c                    continuum processes (follows Beer's law).
c
c          dtaul(k)  the negative log of the mean transmission through
c                    a single layer k, due to line absorption (no
c                    continuum processes).  BE AWARE OF THIS: the
c                    negative log of the transmission through a given
c                    layer depends on the column density of absorbers 
c                    above that layer.
c
c          NOTE: the order of the depth layers are reversed in this routine,
c                uu(k,1) will be used to compute the optical depth dtauc(nz)
c                    
c
c                    continuum and line absorption due to 
c
c                    1. uniformly mixed atmospheric gases (co2,n2,o2...), 
c                    2. h2o
c                    3. ozone
c                    4. trace gases.
c
c          gasabs    gas absorption diagnostics at surface, gasabs(9),
c                    due to both line and continuum processes
c                   1    2    3   4    5   6     7      8      9   
c                  h2o  co2  o3  n2o  co  ch4  o2+n2  trace  total 
c     
cc***********************************************************************
c     
      parameter (bigexp=87.)
      parameter (mxq=63)
      parameter (grav=9.80665)                ! gravitation acc. (m s-2)
      parameter (airrho=1.273)                ! air density at stp (kg m-3)
      parameter (pzero=1013.25)               ! standard pressure (mb)
      parameter (amfac=10.*grav*airrho/pzero) ! convert scale height to airmass

      dimension uu(mxq,nz),w(mxq)
      dimension dtauc(*),dtaul(*)

      parameter (mxly=50)
      parameter (re=6371.2)

      dimension tauc(mxly),taul(mxly)

      dimension z(*)

      parameter (nta=9)

      common /gasblk/ airmass(mxly),gasabs(nta,mxly)

      common /h2o/    cph2o(3515)
      common /o3/     cpo3 ( 447)
      common /ufmix1/ cpco2(1219)
      common /ufmix2/ cpco ( 173),cpch4( 493),cpn2o( 704),cpo2 ( 382)
      common /traceg/ cpnh3( 431), cpno(  62),cpno2( 142),cpso2( 226)
      common /wnlohi/
     l     iwlh2o(15),iwlo3 ( 6),iwlco2(11),iwlco ( 4),iwlch4( 5),
     l     iwln2o(12),iwlo2 ( 7),iwlnh3( 3),iwlno ( 2),iwlno2( 4),
     l     iwlso2( 5),
     h     iwhh2o(15),iwho3 ( 6),iwhco2(11),iwhco ( 4),iwhch4( 5),
     h     iwhn2o(12),iwho2 ( 7),iwhnh3( 3),iwhno ( 2),iwhno2( 4),
     h     iwhso2( 5)
      common /aabbcc/ aa(11),bb(11),cc(11),a(11),cps(11),ibnd(11)

      dimension tau(11)
      data indh2o,indo3,indco2,indco,indch4/5*1./
      data indn2o,indo2,indnh3,indno,indno2,indso2/6*1./
      
c***********************************************************************
c non-spherical earth correction to the cosine of the solar zenith angle
c Draw a line extending from a point on the earths surface out to space
c if amu0 is the solar zenith angle at the surface then amuz(zzz) is the
c angle between the line and the local zenith direction at altitude zzz. 

c statement function:

      amuz(zzz)=sqrt(1.-(1.-amu0**2)*(re/(re+zzz))**2)

      do 10 i=1,nz
        tauc(i)=0.
        taul(i)=0.
 10   continue

c convert from wavelength in microns to wavenumber in cm-1

      iv=5*(int(10000.0/wl)/5)
      v=float(iv)
      v=10000./wl

c water continuum (v < 10000 cm-1)
c slf296 loads self-broadened water vapor continuum at 296k
c slf260 loads self-broadened water vapor continuum at 296k
c frn296 loads foreign-broadened water vapor continuum at 296k

      call slf296(v,sh2ot0)
      call slf260(v,sh2ot1)
      call frn296(v,fh2o)
      t0=296.
      t1=260.
      if(sh2ot0.gt.0.) then
        alpha2=200.**2
        xh2o=(1.-0.2333*(alpha2/((v-1050.)**2+alpha2)) )
        sh2ot0=sh2ot0*xh2o
        sh2ot1=sh2ot1*xh2o
      endif

c protect against exponential underflow at high frequency

      vtemp=v/0.6952
      if(vtemp/t1.le.bigexp) then
        xd=exp(-v/(t0*0.6952))
        radfn0=v*(1.-xd)/(1.+xd)
        xd=exp(-v/(t1*0.6952))
        radfn1=v*(1.-xd)/(1.+xd)
      else
        radfn0=v
        radfn1=v
      endif

      wfac=1.e-20
      ya=exp(-log(1.025*3.159e-8)+(2.75e-4)*v)
      yb=exp(-log(8.97e-6)+(1.300e-3)*v)
      fdg=1./(ya+yb)

c  n2 continuum absorption coefficient (2080 < v < 2740)

      call c4dta(abn2,v)

c hno3 absorption calculation (850 < v < 1735)

      call hno3(v,abno3)

c hertda computes hertzburg uv o2 absorption ( v > 36000 )  
c o2cont computes o2 continuum ( 1395 < v < 1760 )

      call hertda(abo2,v)
      call o2cont(v,sigo20,sigo2a,sigo2b)

c o2 * o2 collision-radiative process 

      call o4cont(wl,sigo4)

c diffuse ozone

c o3uv computes uv ozone for 40800-54054cm-1 (185-245nm)

c o3hht# ozone hartley band for 24370-40800 cm-1 (245-410 nm)
c   temperature dependent coefficient
c   o3hht0 (contant term), o3hht1 (linear term), o3hht2 (quadratic term)

c c8dta ozone chappius band for 13000-24200 cm-1 (413-769nm)


      doz1=0.
      doz2=0.
      doz3=0.
      if(v.gt.40800) then 
        call o3uv(v,c0)
        doz1=.269*c0
      elseif(v.gt.24370) then        
        call o3hht0(v,c0)
        call o3hht1(v,ct1)
        call o3hht2(v,ct2)
        doz1=.269*c0
        doz2=c0*ct1
        doz3=c0*ct2
      elseif(v.ge.13000. .and. v.le.24200) then
        call c8dta(abo3a,v)
        doz1=abo3a
      endif

c rayleigh scattering (included here for print out only)

      call c6dta(rayla,v)

c cxdta locates coefficient for double exponential

      call cxdta(cps(1),v,iwlh2o,iwhh2o,cph2o,indh2o)
      call cxdta(cps(2),v,iwlco2,iwhco2,cpco2,indco2)
      call cxdta(cps(3),v,iwlo3, iwho3, cpo3, indo3 )
      call cxdta(cps(4),v,iwln2o,iwhn2o,cpn2o,indn2o)
      call cxdta(cps(5),v,iwlco, iwhco, cpco, indco )
      call cxdta(cps(6),v,iwlch4,iwhch4,cpch4,indch4)
      call cxdta(cps(7),v,iwlo2, iwho2, cpo2, indo2 )
      call cxdta(cps(8),v,iwlno, iwhno, cpno, indno )
      call cxdta(cps(9),v,iwlso2,iwhso2,cpso2,indso2)
      call cxdta(cps(10),v,iwlno2,iwhno2,cpno2,indno2)
      call cxdta(cps(11),v,iwlnh3,iwhnh3,cpnh3,indnh3)

c  abcdta moves double exponential coefficients to new arrays

      call abcdta(iv)

c schrun computes uv o2 schumann-runge band model parameters

      if(v.gt.49600) call schrun(v,cps(7))

      zim=z(nz)
      do 40 i=nz,1,-1
        im=nz-i+1
        zi=z(i)
        zbar=0.5*(zi+zim)
        zim=zi
        do 20 k=1,mxq
          if (i .eq. nz) then
            w(k)=uu(k,i)/amuz(zi)
          else
            w(k)=w(k)+(uu(k,i)-uu(k,i+1))/amuz(zbar)
          endif
 20     continue

c        if(i.eq.nz) write(*,'(2x,5a11)') 'zi','zbar','w(6)','uu','amu'
c        write(*,'(i2,1p5e11.3)') i,zi,zbar,w(6),uu(6,i),amuz(zbar)

        tcunif=+sigo4*w(3)
     &         +abn2*w(4)
     &         +sigo20*(w(63)
     &         +sigo2a*(w(1)-220*w(63))
     &         +sigo2b*w(2))
     &         +abo2*w(58)
        tch2o=sh2ot0*radfn0*(wfac*w(5))
     &        +((sh2ot1*radfn1)-(sh2ot0*radfn0))*(wfac*w(9))
     &        +(fh2o+fdg)*radfn0*(wfac*w(10))
        tco3=doz1*w(8)+doz2*w(59)+doz3*w(60)
        tctrc=abno3*w(11)

c  compute transmitance from double exponential band model for
c       1    2    3    4    5    6    7    8    9   10   11
c      h2o, co2,  o3, n2o,  co, ch4,  o2,  no, so2, no2, nh3

        tauc(im)=tcunif+tch2o+tco3+tctrc

c        write(*,'(a,/,1p(10i11))') 'ibnd:',(ibnd(k),k=1,11)
c        write(*,'(a,/,1p(10e11.3))') 'cps:',(cps(k),k=1,11)
c        write(*,'(a,/,1p(10e11.3))') 'w:',(w(ibnd(k)),k=1,11)

        do 30 k=1,11
          ib=ibnd(k)
          cp=cps(k)
          if(cp.gt.-20. .and. w(ib).gt.1.e-20) then
            awl=a(k)*(cp+log10(w(ib)))
            awl=min(awl,20.)              
            tau(k)=10.**awl
          else
            tau(k)=0.
          endif
          taul(im)=taul(im)+tau(k)
 30     continue

c  gas absorption diagnostics in gasabs(9)
c    1    2    3   4    5   6     7      8      9   
c   h2o  co2  o3  n2o  co  ch4  o2+n2  trace  total 

        gasabs(1,i)=tch2o+tau(1)
        gasabs(2,i)=tau(2)
        gasabs(3,i)=tau(3)+tco3
        gasabs(4,i)=tau(4)            
        gasabs(5,i)=tau(5)         
        gasabs(6,i)=tau(6)
        gasabs(7,i)=tau(7)+tcunif
        gasabs(8,i)=tau(8)+tau(9)+tau(10)+tau(11)
        gasabs(9,i)=tauc(im)+taul(im)

        airmass(i)=amfac*w(6)

        if(lun.gt.0) then

          tauray=rayla*w(6)          
          if(i.eq.nz) write(lun,'(3x,11a11)') 
     &             'air mass','h2o','co2','o3','n2o','co',
     &             'ch4','o2+n2','trace','total','molec'

          airmass(i)=0.

          write(lun,'(i3,1p11e11.3)') i,airmass(i),
     &         tch2o+tau(1),  tau(2),  tau(3)+tco3,
     &         tau(4),  tau(5),  tau(6),  tau(7)+tcunif,
     &         tau(8)+tau(9)+tau(10)+tau(11),  tauc(im)+taul(im),
     &         tauray

        endif
 40   continue
      
      dtauc(1)=tauc(1)
      dtaul(1)=taul(1)
 9876 format(/a,1p,4(/10e11.3))
c      write(*,*) 'taugasx    amu0=',amu0
c      write(*,9876) 'tauc+taul',(tauc(i)+taul(i),i=1,nz)

      do 50 i=2,nz
        dtauc(i)=tauc(i)-tauc(i-1)
        dtaul(i)=taul(i)-taul(i-1)
 50   continue
c      write(*,9876) 'dtauc+dtaul',(dtauc(i)+dtaul(i),i=1,nz)
      return
      end
c=======================================================================
      subroutine o4cont(wl,sigo4)
c
c radiative cross-sections of o2 * o2 and o2 * n2 molecular complex
c
c input:
c  wl      wavelength in microns
c 
c output
c
c  sigo4   cross-section in km-1 
c          the optical depth across a layer due to o2*o2 and o2*n2
c          process is given by tau= sigo4*ff(z)*dz 
c
c          where ff(z)  = ((p(z)/pzero)*(tzero/t(z)))**2
c
c
c where the volume fractions of o2 and n2 have already been included in
c the sigo4 parameter.  The O2*N2 contribution is only included in the
c 1.26um band.  In this band (1.2-1.35um) a collisional efficiency of
c 0.2 of N2 * O2 comparaed to O2 * O2 is used.  Solomon et al. (1998)
c use a collisional efficiency of .1 to .3 compared to O2 this is the
c colored region in the figure).

c
c collisional efficiency of 0.1 is from Cho et al., 1963
c collisional efficiency of 0.3 is from Badger et al., 1965
c

      parameter (fraco2=.209)   ! volume fraction of o2
      parameter (fracn2=.781)   ! volume fraction of n2
      parameter (effn2=.2)      ! efficiency factor for n2 * o2
                                ! compared to o2 * o2 collisions
      dimension sig(1016)

c the strength of o2*o2 (and o2*n2) continuum absorption can be
c modified by calling o4cfac with a correction factor other than 1.0
c o4cfac is an entry point contained within this subroutine.

      save xfac

      data xfac/1.0/

c o2*o2 cross-section for wavelength 335 to 1350 nm by 1 nm increments
c in units of km-1 loschmidt-2

      data (sig(i),i=1,100)/
     &   1.629e-03, 1.514e-03, 1.778e-03, 1.968e-03, 2.328e-03,
     &   3.308e-03, 5.013e-03, 7.222e-03, 8.699e-03, 7.791e-03,
     &   4.242e-03, 2.248e-03, 1.465e-03, 1.254e-03, 1.440e-03,
     &   1.658e-03, 2.137e-03, 2.743e-03, 3.510e-03, 4.703e-03,
     &   6.922e-03, 1.021e-02, 1.577e-02, 2.231e-02, 2.757e-02,
     &   2.889e-02, 2.148e-02, 1.135e-02, 5.251e-03, 2.520e-03,
     &   1.262e-03, 6.393e-04, 5.156e-04, 4.372e-04, 3.836e-04,
     &   4.187e-04, 4.413e-04, 4.661e-04, 5.012e-04, 8.247e-04,
     &   1.538e-03, 3.139e-03, 6.278e-03, 1.135e-02, 1.561e-02,
     &   1.658e-02, 1.277e-02, 7.392e-03, 3.853e-03, 1.906e-03,
     &   9.322e-04, 5.259e-04, 3.630e-04, 3.300e-04, 2.867e-04,
     &   2.268e-04, 2.145e-04, 1.670e-04, 1.073e-04, 6.600e-05,
     &   6.601e-05, 4.132e-06, 2.063e-05, 4.743e-05, 6.600e-05,
     &   2.142e-04, 2.331e-04, 2.310e-04, 2.226e-04, 2.142e-04,
     &   2.561e-04, 2.435e-04, 2.057e-04, 1.637e-04, 1.428e-04,
     &   1.344e-04, 1.469e-04, 1.973e-04, 1.763e-04, 2.015e-04,
     &   1.931e-04, 2.687e-04, 3.485e-04, 3.947e-04, 4.808e-04,
     &   5.647e-04, 5.857e-04, 5.500e-04, 4.829e-04, 4.115e-04,
     &   4.492e-04, 4.955e-04, 5.332e-04, 5.500e-04, 5.542e-04,
     &   5.962e-04, 6.046e-04, 6.298e-04, 6.550e-04, 6.634e-04/
      data (sig(i),i=101,200)/
     &   6.760e-04, 7.136e-04, 7.727e-04, 8.610e-04, 9.237e-04,
     &   1.092e-03, 1.306e-03, 1.610e-03, 1.999e-03, 2.479e-03,
     &   3.120e-03, 4.001e-03, 4.295e-03, 3.604e-03, 2.606e-03,
     &   1.772e-03, 1.222e-03, 9.066e-04, 7.435e-04, 6.970e-04,
     &   6.508e-04, 7.136e-04, 6.550e-04, 6.298e-04, 7.222e-04,
     &   7.852e-04, 8.482e-04, 9.992e-04, 1.209e-03, 1.469e-03,
     &   1.818e-03, 2.288e-03, 2.945e-03, 3.846e-03, 5.248e-03,
     &   7.243e-03, 9.928e-03, 1.310e-02, 1.686e-02, 2.128e-02,
     &   2.820e-02, 3.765e-02, 4.482e-02, 4.162e-02, 3.307e-02,
     &   2.325e-02, 1.544e-02, 9.686e-03, 5.672e-03, 3.271e-03,
     &   1.881e-03, 1.092e-03, 7.054e-04, 5.668e-04, 5.290e-04,
     &   5.248e-04, 5.165e-04, 5.878e-04, 6.172e-04, 7.642e-04,
     &   8.379e-04, 7.873e-04, 6.319e-04, 4.618e-04, 4.031e-04,
     &   3.312e-04, 3.525e-04, 3.142e-04, 2.506e-04, 2.505e-04,
     &   3.312e-04, 4.161e-04, 4.798e-04, 4.883e-04, 5.138e-04,
     &   6.242e-04, 7.385e-04, 8.368e-04, 9.088e-04, 9.935e-04,
     &   1.070e-03, 1.155e-03, 1.299e-03, 1.465e-03, 1.630e-03,
     &   1.770e-03, 2.046e-03, 2.526e-03, 3.407e-03, 4.204e-03,
     &   5.209e-03, 5.790e-03, 6.583e-03, 7.392e-03, 8.176e-03,
     &   8.867e-03, 9.486e-03, 9.793e-03, 9.771e-03, 8.860e-03/
      data (sig(i),i=201,300)/
     &   7.385e-03, 6.021e-03, 4.993e-03, 4.333e-03, 3.864e-03,
     &   3.562e-03, 3.312e-03, 3.155e-03, 3.062e-03, 3.057e-03,
     &   3.064e-03, 3.108e-03, 3.076e-03, 3.087e-03, 3.087e-03,
     &   3.108e-03, 3.270e-03, 3.376e-03, 3.605e-03, 3.876e-03,
     &   4.161e-03, 4.480e-03, 4.983e-03, 5.545e-03, 6.212e-03,
     &   7.165e-03, 8.375e-03, 9.835e-03, 1.157e-02, 1.371e-02,
     &   1.656e-02, 2.000e-02, 2.389e-02, 2.879e-02, 3.468e-02,
     &   4.097e-02, 4.793e-02, 5.485e-02, 6.183e-02, 6.747e-02,
     &   7.246e-02, 7.610e-02, 7.798e-02, 7.741e-02, 7.157e-02,
     &   5.942e-02, 4.494e-02, 3.408e-02, 2.577e-02, 1.958e-02,
     &   1.469e-02, 1.107e-02, 8.276e-03, 6.199e-03, 4.696e-03,
     &   3.562e-03, 2.667e-03, 2.046e-03, 1.660e-03, 1.420e-03,
     &   1.308e-03, 1.240e-03, 1.223e-03, 1.223e-03, 1.227e-03,
     &   1.355e-03, 1.470e-03, 1.559e-03, 1.708e-03, 1.810e-03,
     &   1.950e-03, 2.379e-03, 2.932e-03, 3.176e-03, 3.611e-03,
     &   4.036e-03, 4.673e-03, 5.417e-03, 6.331e-03, 7.400e-03,
     &   8.454e-03, 9.700e-03, 1.124e-02, 1.308e-02, 1.538e-02,
     &   1.794e-02, 2.098e-02, 2.450e-02, 2.885e-02, 3.305e-02,
     &   3.751e-02, 4.163e-02, 4.562e-02, 4.862e-02, 5.059e-02,
     &   5.112e-02, 5.071e-02, 4.858e-02, 4.496e-02, 4.035e-02/
      data (sig(i),i=301,400)/
     &   3.510e-02, 2.993e-02, 2.491e-02, 2.077e-02, 1.699e-02,
     &   1.368e-02, 1.059e-02, 8.098e-03, 6.182e-03, 4.686e-03,
     &   3.527e-03, 2.585e-03, 1.920e-03, 1.461e-03, 1.147e-03,
     &   9.009e-04, 7.264e-04, 5.651e-04, 4.291e-04, 3.059e-04,
     &   1.869e-04, 8.069e-05, 3.399e-04, 3.781e-04, 3.803e-04,
     &   2.740e-04, 1.487e-04, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00/
      data (sig(i),i=401,500)/100*0./
      data (sig(i),i=501,600)/100*0./
      data (sig(i),i=601,700)/
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00, 0.000e+00,
     &   0.000e+00, 3.856e-04, 4.152e-04, 4.873e-04, 6.440e-04,
     &   7.585e-04, 9.614e-04, 1.110e-03, 1.389e-03, 1.604e-03,
     &   1.915e-03, 2.169e-03, 2.366e-03, 2.680e-03, 2.904e-03,
     &   3.216e-03, 3.485e-03, 3.936e-03, 4.402e-03, 4.898e-03,
     &   5.292e-03, 5.885e-03, 6.376e-03, 7.093e-03, 7.692e-03,
     &   8.397e-03, 9.116e-03, 1.002e-02, 1.090e-02, 1.193e-02/
      data (sig(i),i=701,800)/
     &   1.298e-02, 1.394e-02, 1.513e-02, 1.620e-02, 1.746e-02,
     &   1.880e-02, 2.046e-02, 2.200e-02, 2.347e-02, 2.516e-02,
     &   2.703e-02, 2.872e-02, 3.090e-02, 3.312e-02, 3.547e-02,
     &   3.829e-02, 4.120e-02, 4.441e-02, 4.798e-02, 5.221e-02,
     &   5.628e-02, 6.090e-02, 6.519e-02, 6.978e-02, 7.357e-02,
     &   7.699e-02, 7.934e-02, 8.133e-02, 8.311e-02, 8.479e-02,
     &   8.532e-02, 8.525e-02, 8.368e-02, 8.105e-02, 7.656e-02,
     &   7.211e-02, 6.772e-02, 6.382e-02, 5.976e-02, 5.551e-02,
     &   5.163e-02, 4.797e-02, 4.445e-02, 4.119e-02, 3.795e-02,
     &   3.539e-02, 3.286e-02, 3.062e-02, 2.823e-02, 2.623e-02,
     &   2.438e-02, 2.258e-02, 2.102e-02, 1.946e-02, 1.811e-02,
     &   1.669e-02, 1.542e-02, 1.383e-02, 1.297e-02, 1.212e-02,
     &   1.135e-02, 1.078e-02, 9.703e-03, 8.981e-03, 7.984e-03,
     &   7.335e-03, 6.876e-03, 5.910e-03, 5.756e-03, 5.756e-03,
     &   5.211e-03, 4.707e-03, 4.176e-03, 3.589e-03, 3.347e-03,
     &   2.909e-03, 2.461e-03, 2.072e-03, 2.260e-03, 2.118e-03,
     &   2.042e-03, 1.796e-03, 2.025e-03, 1.483e-03, 1.550e-03,
     &   1.047e-03, 8.005e-04, 7.918e-04, 1.038e-03, 9.066e-04,
     &   6.864e-04, 8.303e-04, 3.433e-04, 7.118e-04, 3.685e-04,
     &   2.225e-04, 1.950e-04, 1.694e-04, 0.000e+00, 3.816e-05/
      data (sig(i),i=801,900)/
     &   0.000e+00, 0.000e+00, 8.448e-05, 8.314e-05, 8.179e-05,
     &   8.047e-05, 7.912e-05, 7.778e-05, 7.643e-05, 7.509e-05,
     &   7.376e-05, 7.242e-05, 7.107e-05, 6.973e-05, 6.838e-05,
     &   6.706e-05, 6.571e-05, 6.437e-05, 6.302e-05, 6.168e-05,
     &   6.033e-05, 5.901e-05, 5.767e-05, 5.632e-05, 5.498e-05,
     &   5.363e-05, 5.231e-05, 5.096e-05, 4.962e-05, 4.827e-05,
     &   4.693e-05, 4.560e-05, 4.426e-05, 4.291e-05, 4.157e-05,
     &   4.022e-05, 3.888e-05, 3.755e-05, 3.621e-05, 3.486e-05,
     &   3.352e-05, 3.217e-05, 3.085e-05, 2.951e-05, 2.816e-05,
     &   2.682e-05, 2.547e-05, 2.415e-05, 2.280e-05, 2.146e-05,
     &   2.011e-05, 1.877e-05, 1.744e-05, 1.610e-05, 1.475e-05,
     &   1.341e-05, 1.206e-05, 1.072e-05, 9.394e-06, 8.049e-06,
     &   6.704e-06, 5.359e-06, 4.014e-06, 2.690e-06, 1.345e-06,
     &   1.631e-07, 7.642e-04, 7.021e-04, 9.978e-04, 1.181e-03,
     &   1.376e-03, 1.540e-03, 1.945e-03, 2.219e-03, 2.785e-03,
     &   3.181e-03, 3.620e-03, 4.111e-03, 4.435e-03, 4.940e-03,
     &   5.498e-03, 5.845e-03, 6.406e-03, 6.792e-03, 7.535e-03,
     &   8.471e-03, 9.123e-03, 9.928e-03, 1.090e-02, 1.184e-02,
     &   1.273e-02, 1.382e-02, 1.504e-02, 1.614e-02, 1.745e-02,
     &   1.873e-02, 2.049e-02, 2.211e-02, 2.381e-02, 2.564e-02/
      data (sig(i),i=901,1000)/
     &   2.708e-02, 2.929e-02, 3.117e-02, 3.308e-02, 3.547e-02,
     &   3.795e-02, 4.085e-02, 4.368e-02, 4.584e-02, 4.911e-02,
     &   5.217e-02, 5.514e-02, 5.829e-02, 6.244e-02, 6.611e-02,
     &   7.059e-02, 7.524e-02, 8.019e-02, 8.511e-02, 9.144e-02,
     &   9.839e-02, 1.053e-01, 1.135e-01, 1.206e-01, 1.291e-01,
     &   1.364e-01, 1.437e-01, 1.502e-01, 1.553e-01, 1.592e-01,
     &   1.625e-01, 1.659e-01, 1.689e-01, 1.702e-01, 1.705e-01,
     &   1.692e-01, 1.657e-01, 1.593e-01, 1.517e-01, 1.439e-01,
     &   1.370e-01, 1.290e-01, 1.215e-01, 1.144e-01, 1.078e-01,
     &   1.006e-01, 9.426e-02, 8.862e-02, 8.332e-02, 7.684e-02,
     &   7.239e-02, 6.768e-02, 6.348e-02, 5.964e-02, 5.561e-02,
     &   5.205e-02, 4.867e-02, 4.585e-02, 4.268e-02, 4.010e-02,
     &   3.758e-02, 3.519e-02, 3.295e-02, 3.035e-02, 2.761e-02,
     &   2.599e-02, 2.470e-02, 2.290e-02, 2.144e-02, 1.951e-02,
     &   1.870e-02, 1.704e-02, 1.621e-02, 1.464e-02, 1.326e-02,
     &   1.290e-02, 1.173e-02, 1.145e-02, 1.100e-02, 9.337e-03,
     &   8.774e-03, 8.380e-03, 7.983e-03, 6.775e-03, 6.369e-03,
     &   5.582e-03, 4.838e-03, 4.415e-03, 4.322e-03, 3.789e-03,
     &   4.077e-03, 3.747e-03, 3.262e-03, 3.115e-03, 3.155e-03,
     &   2.567e-03, 2.656e-03, 1.878e-03, 1.418e-03, 1.919e-03/
      data (sig(i),i=1001,1016)/
     &   1.899e-03, 1.936e-03, 1.750e-03, 1.886e-03, 1.701e-03,
     &   7.949e-04, 4.906e-04, 4.434e-04, 1.006e-03, 5.243e-04,
     &   5.159e-04, 1.691e-04, 0.000e+00, 1.606e-04, 2.963e-05,
     &   0.000e+00/
c
      wnm=1000.*wl
      inm=wnm
      f=wnm-inm
      inm=inm-335+1
      sigo4=0.
      if(inm.ge.1.and.inm.le.1015) then 
        factor=fraco2**2
        if(wl.gt.1.2) factor=fraco2*(fraco2+effn2*fracn2)
        sigo4=xfac*factor*(sig(inm)*(1.-f)+sig(inm+1)*f)
        !write(*,*) 'wl,wnm,inm,f,sig(inm),sig(inm+1),sigo4'
        !write(*,*) wl,wnm,inm,f,sig(inm),sig(inm+1),sigo4
      endif
      return
c
      entry o4cfac(xf)
      xfac=xf
      return

      end
c=======================================================================
      subroutine absgas(amass,array)
      parameter (mxly=50)
      parameter (nta=9)
      dimension amass(*),array(nta,*)
      common /gasblk/airmass(mxly),gasabs(nta,mxly)

      do 30 j=1,mxly
        amass(j)=airmass(j)
        do 20 i=1,nta
          array(i,j)=gasabs(i,j)
 20     continue
 30   continue

      return
      end

c=======================================================================

      subroutine rayleigh(wl,uu,nz,tauray,dtaury)

c  purpose:
c    calculate molecular rayleigh scattering optical depth
c    using approximation of shettle et al., 1980 (appl. opt., 2873-4)
c    with the depolarization = 0.0279 instead of 0.035
c    for temperature = 273 k & pressure = 1 atm.
c
c  input:  
c    wl        wavelength in microns
c    uu        path integral uu(mxq,nxlayr) computed by absint
c                only uu(6,*) is used in this routine
c    nz        number of atmospheric layers
c                nz=1  => integration to bottom level only
c
c  output: 
c    tauray    mean optical depth due to rayleigh scattering
c    dtaury    increments of tauray
c

      parameter (bigexp=87.)
      parameter (mxq=63)

      dimension uu(mxq,nz)
      dimension tauray(nz),dtaury(nz)

c***********************************************************************
      do 10 i=1,nz
        tauray(i)=0.
        dtaury(i)=0.
 10   continue

c convert from wavelength in microns to wavenumber in cm-1

      v=10000./wl

c rayleigh scattering coefficient (1/km) from lowtran subroutine c6dta

      call c6dta(rayla,v)
      do 40 i=1,nz
        im=nz-i+1
        tauray(im)=uu(6,i)*rayla
 40   continue
      dtaury(1)=tauray(1)
      do 50 i=2,nz
        dtaury(i)=tauray(i)-tauray(i-1)
 50   continue
      return
      end
c=======================================================================
c
      subroutine slf296(v1c,sh2ot0)
c     loads self continuum  296k
      parameter (npt=2003)
      common /sh2o/ v1,v2,dv,s296(npt)
      call sint(v1,v1c,dv,npt,s296,sh2ot0)
      return
      end
c=======================================================================
      subroutine slf260(v1c,sh2ot1)
c     loads self continuum  260k
      parameter (npt=2003)
      common /s260/ v1,v2,dv,s260(npt)
      call sint(v1,v1c,dv,npt,s260,sh2ot1)
      return
      end
c=======================================================================
      subroutine frn296(v1c,fh2o)
c     loads foreign continuum  296k
      parameter (npt=2003)
      common /fh2o/ v1,v2,dv,f296(npt)
      call sint(v1,v1c,dv,npt,f296,fh2o)
      return
      end
c=======================================================================
      subroutine sint(v1,v1c,dv,npt,conti,conto)
c
c     interpolation  for continuum with lowtran
c
      dimension conti(*)
      conto=0.
      i=(v1c-v1)/dv+1.00001
      if(i.ge.npt)go to 10
      conto=conti(i)
      imod=mod(v1c,10.)
      if(imod.gt.0) conto=(conti(i)+conti(i+1))/2.
10    continue
      return
      end
c=======================================================================
      subroutine c4dta (c4l,v)
c **  n2 continuum
      common /c4c8/ c4(133),c8(102)
      c4l=0.
      if(v.lt.2080.) return
      if(v.gt.2740.) return
      iv=v
      l=(iv-2080)/5+1
      c4l=c4(l)
      return
      end
c=======================================================================
      subroutine c6dta(sig,v)
c **  molecular scattering

c     sig=0.
c     if(v.le.3000.) return
c     sig=v**4/(9.26799e+18-1.07123e+09*v**2)
c
c calculate molecular rayleigh scattering coefficient
c using approximation of shettle et al., 1980 (appl. opt., 2873-4)
c with the depolarization = 0.0279 instead of 0.035
c input: v = frequency in wavenumbers (cm-1)
c output: sig = molecular scattering coefficient (km-1)
c               for temperature = 273 k & pressure = 1 atm.

      data rscfac/1./
 
      sig = rscfac*v**4/(9.38076e+18 - 1.08426e+09 * v ** 2)

      return

c. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 

      entry modrsc(xrsc)

c purpose:  multiply rayleigh scattering 
c optical depth by xrsc for sensitivity studies
c
      rscfac=xrsc
      return
      end
c=======================================================================
      subroutine hno3 (v,habs)
c
c     hno3  statistical band parameters
c
      dimension h1(15), h2(16), h3(13)
c     array h1 contains hno3 abs, coef(cm-1atm-1) from  850 to 920 cm-1
      data h1/2.197,3.911,6.154,8.150,9.217,9.461,11.56,11.10,11.17,12.4
     10,10.49,7.509,6.136,4.899,2.866/
c     array h2 contains hno3 abs, coef(cm-1atm-1) from 1275 to1350 cm-1
      data h2/2.828,4.611,6.755,8.759,10.51,13.74,18.00,21.51,23.09,21.6
     18,21.32,16.82,16.42,17.87,14.86,8.716/
c     array h3 contains hno3 abs, coef(cm-1atm-1) from 1675 to1735 cm-1
      data h3/5.003,8.803,14.12,19.83,23.31,23.58,23.22,21.09,26.99,25.8
     14,24.79,17.68,9.420/
      habs=0.
      if (v.ge.850.0.and.v.le.920.0) go to 5
      if (v.ge.1275.0.and.v.le.1350.0) go to 10
      if (v.ge.1675.0.and.v.le.1735.0) go to 15
      return
    5 i=(v-845.)/5.
      habs=h1(i)
      return
   10 i=(v-1270.)/5.
      habs=h2(i)
      return
   15 i=(v-1670.)/5.
      habs=h3(i)
      return
      end
c=======================================================================
      subroutine hertda(herz,v)
c
c     herzberg o2 absorption
c     hall,1987 private communication, based on:
c
c     ref. johnston et.al, jgr,89,11661-11665,1984
c         nicolet, 1987 (recent studies in atomic & molecular processes,
c                        plemun publishing corp, ny 1987)
c     and yoshino, et.al., 1988 (preprint of "improved absorption
c         cross sections of oxygen in the wavelength region 205-240nm
c         of the herzberg continuum")
c
      herz=0.0
      if(v.le.36000.00) return
c
c     extrapolate smoothly through the herzberg band region
c     note: herzberg bands are not correctly included
c
      corr=0.
      if(v.le.40000.)corr=((40000.-v)/4000.)*7.917e-27
c
c     conversion to atm-cm /km
c
      rlosch = 2.6868 e24 * 1.0e-5
c
c     hall's new herzberg  (least sqrs fit, ln(p))
c
c     yratio=2048.7/wl(i)  ****in angstoms****
c           =.20487/wn(i)     in microns
c           =wcm(i)/48811.0   in cm-1
c
      yratio= v    /48811.0
      herz=6.884e-24*(yratio)*exp(-69.738*(log(yratio))**2)-corr
      herz = herz * rlosch
      return
      end
c=======================================================================
      subroutine o2cont(v,sigma,alpha,beta)
c
c     this routine is driven by frequency, returning only the
c     o2 coefficients, independent of temperature.
c
c  *******************************************************************
c  *  these comments apply to the colume arrays for:                 *
c  *       pbar*ubar(o2)                                             *
c  *       pbar*ubar(o2)*dt                                          *
c  *   and pbar*ubar(o2)*dt*dt    where:  dt=tbar-220.               *
c  *  that have been compiled in other parts of the lowtran code     *
c  *                                                                 *
c  *  lowtran7 compatible:                                           *
c  *  o2 continuum subroutine for 1395-1760cm-1                      *
c  *  modified by g.p. anderson, april '88                           *
c  *                                                                 *
c  *  the exponential temperature employed in the fascod2 algorithm  *
c  *  (see below) is not readily suitable for lowtran.  therefore    *
c  *  the exponentials have been linearly expanded, keeping only the *
c  *  linear and quadratic terms:                                    *
c  *                                                                 *
c  *  exp(a*dt)=1.+ a*dt + (a*dt)**2/2. + ....                       *
c  *                                                                 *
c  *     exp(b*dt*dt)=1.+ b*dt*dt + (b*dt*dt)**2/2. + ....           *
c  *                                                                 *
c  *  the product of the two terms is:                               *
c  *                                                                 *
c  *     (1. + a*dt + (a*a/2. + b)*dt*dt )                           *
c  *                                                                 *
c  *  this expansion only works well for small values of x in exp(x) *
c  *                                                                 *
c  *  since dt = t-220., the approximation is very good until        *
c  *  t.gt.260. or dt.gt.40.   at t=280, the maximum errors are still*
c  *  less than 10% but at t=300, those errors are as large as 20%   *
c  *******************************************************************
c
c     the following comments are excerpted directly from fascod2
c
c      this subroutine contains the rogers and walshaw
c      equivalent coefficients derived from the theoretical
c      values supplied by roland drayson. these values use
c      the same data as timofeyev and agree with timofeyev's results.
c      the data are in the form of strengths(o2so) and two
c      coefficients (o2a & o2b),  which are used to correct for
c      temperature. the dependency on pressure squared
c      is contained in the p*wo2 part of the constant.
c      note that since the coefficients are for air, the
c      the strengths are divided by the o2 mixing ratio for
c      dry air of 0.20946 (this is assumed constant).
c      original formulation of the coefficients was by larry gordley.
c      this version written by earl thompson, july 1984.
c
c
      common/o2c/ o2dray(74),o2c001(74),o2s0(74),o2a(74),o2b(74),
     x v1o2,v2o2,dvo2,npto2
      sigma =0
      alpha =0
      beta  =0
      if(v .lt. 1395) go to 30
      if(v .gt. 1760) go to 30
c
c
      call o2int(v,v1o2,dvo2,npto2,c,o2s0,a,o2a,b,o2b)
c
c
c
c     old 'fascod2' temperature dependence using block data arrays
c
c     c(j)=o2s0(i)* exp(o2a(i)*td+o2b(i)*td*td) /(0.20946*vj)
c
c     new coefficient definitions for lowtran formulation
c
      alpha= a
      beta=a**2/2.+b
      sigma=c/0.20946
c
c     new 'lowtran7' temperature dependence
c
c     this would be the coding for the lowtran7 formulation, but
c       because the t-dependence is included in the amounts, only
c       the coefficients (sigma, alpha & beta) are being returned
c
c     c(j)=sigma*(1.+alpha*td+beta*td*td)
c
30    return
      end
c=======================================================================
      subroutine o2int(v1c,v1,dv,npt,c,carray,a,aarray,b,barray)
c
c     interpolation for o2 pressure induced continuum, necessary for
c          lowtran7 formulation  (modeled after the lowtran uv-o3 bands)
c
      dimension carray(74),aarray(74),barray(74)
      c=0.
      a=0.
      b=0.
      i=(v1c-v1)/dv+1.00001
      if(i.lt.1  )go to 10
      if(i.gt.npt)go to 10
      c=carray(i)
      a=aarray(i)
      b=barray(i)
10    continue
      return
      end
c=======================================================================
      subroutine o3hht0(v,c)
      parameter (npts=2687)
      common /o3hh0/ v1s,v2s,dvs,s(npts)
c
      call o3int(v ,v1s,dvs,npts,s,c)
      return
      end
c=======================================================================
      subroutine o3hht1(v,c)
c     subroutine o3hht1(v1c,v2c,dvc,nptc,c)
      parameter (npts=2690)
      common /o3hh1/ v1s,v2s,dvs,s(npts)
c
      call o3int(v ,v1s,dvs,npts,s,c)
c
      return
      end
c=======================================================================
      subroutine o3hht2(v,c)
      parameter (npts=2690)
      common /o3hh2/ v1s,v2s,dvs,s(npts)
c
      call o3int(v ,v1s,dvs,npts,s,c)
c
      return
      end
c=======================================================================
      subroutine o3int(v1c,v1,dv,npt,conti,conto)
c
c     interpolation  for  o3 continuum with lowtran
c
      dimension conti(*)
      conto=0.
      i=(v1c-v1)/dv+1.00001
      if(i.lt.1  )go to 10
      if(i.gt.npt)go to 10
      conto=conti(i)
10    continue
      return
      end
c=======================================================================
      subroutine o3uv(v,c)
      parameter (npt=133)
      common /o3uvf/ v1 ,v2 ,dv ,s(npt)
c
c     interpolation  for  o3 continuum with lowtran
c
      c    =0.
      i=(v  -v1)/dv+1.00001
      if(i.lt.1   )go to 10
      if(i.gt.npt )go to 10
      vr = i*dv + v1
      if(vr. le. (v+.1) .and .vr.ge. (v-.1)) go to 5
      if(i .eq. npt ) i=npt-1
      am = (s(i+1) -s(i))/dv
      c0 = s(i) - am * vr
      c  = am * v + c0
      go to 10
5     c    =    s(i)
10    continue
c
      return
      end
c=======================================================================
      subroutine c8dta (c8l,v)
c **  ozone u.v + visible
      common /c4c8/ c4(133),c8(102)
      c8l=0.
      if(v.lt.13000.) return
      if(v.gt.50000.) return
      iv=v
      if(iv.gt.24200.and.iv.lt.27500) return
      xi=(v-13000.0)/200.0+1.
      if(iv.ge.27500) xi=(v-27500.0)/500.+57.
      n=xi+1.001
      xd=xi-float(n)
      c8l=c8(n)+xd*(c8(n)-c8(n-1))
      return
      end
c=======================================================================
      subroutine cxdta (cprime,v,iwl,iwh,cp,ind)
c     this subroutine finds the cprime for the wavenumber v.
c     input:         v --- wavenumber
c            (iwl,iwh) --- wavenumber pair specifies the absorption
c                          region. both are arrays and terminated
c                          with the value -999
c                   cp --- array contains the cprimes
c     output:   cprime --- the cprime corresponding to v
c     i/o:         ind --- indicator indicates the absorption region
c                          where the wavenumber is expected to be in
c                          or nearby (it serves for the purpose
c                          to speed up the searching process)
      dimension iwl(*),iwh(*),cp(*)
      iv=v
      cprime=-20.0
      if (iwl(ind+1) .eq. -999 .and. iv .gt. iwh(ind)) return
      if (iv .lt. iwl(1)) return
      ic=0
  100 if (iv .ge. iwl(ind) .and. iv .le. iwh(ind)) go to 200
      if (iv .gt. iwh(ind) .and. iv .lt. iwl(ind+1)) return
      ind=ind+1
      if (iwl(ind) .ne. -999) go to 100
      ind=ind-1
      if (iv .gt. iwh(ind)) return
      ind=1
      go to 100
  200 if (ind .eq. 1) go to 400
      indm1=ind-1
      do 300 i=1,indm1
        ic=ic+(iwh(i)-iwl(i))/5+1
  300 continue
  400 ic=ic+(iv-iwl(ind))/5+1
      cprime=cp(ic)
      return
      end
c=======================================================================
      subroutine abcdta(iv)
c
      common /abc/ factor(3),anh3(2),aco2(10),aco(3),
     x             ach4(4),ano2(3),an2o(11),ao2(6),ao3(5),
     x             aso2(4),ah2o(14),ano,
     x             aanh3(2),bbnh3(2),ccnh3(2),
     x             aaco2(10),bbco2(10),ccco2(10),
     x             aaco(3),bbco(3),ccco(3),
     x             aach4(4),bbch4(4),ccch4(4),
     x             aano2(3),bbno2(3),ccno2(3),
     x             aan2o(11),bbn2o(11),ccn2o(11),
     x             aao2(6),bbo2(6),cco2(6),
     x             aao3(5),bbo3(5),cco3(5),
     x             aaso2(4),bbso2(4),ccso2(4),
     x             aah2o(14),bbh2o(14),cch2o(14),
     x             aano     ,bbno     ,ccno
c
      common /aabbcc/ aa(11),bb(11),cc(11),a(11),cps(11),ibnd(11)
c
c    mol
c     1    h2o (all regions) (double exponential models)
c     2    co2 (all regions) (double exponential models)
c     3    o3  (all regions) (double exponential models)
c     4    n2o (all regions) (double exponential models)
c     5    co  (all regions) (double exponential models)
c     6    ch4 (all regions) (double exponential models)
c     7    o2  (all regions) (double exponential models)
c     8    no  (all regions) (double exponential models)
c     9    so2 (all regions) (double exponential models)
c    10    no2 (all regions) (double exponential models)
c    11    nh3 (all regions) (double exponential models)
c
c  ---h2o
      imol = 1
      iw = -1
      if(iv.ge.     0.and.iv.le.   345) iw = 17
      if(iv.ge.   350.and.iv.le.  1000) iw = 18
      if(iv.ge.  1005.and.iv.le.  1640) iw = 19
      if(iv.ge.  1645.and.iv.le.  2530) iw = 20
      if(iv.ge.  2535.and.iv.le.  3420) iw = 21
      if(iv.ge.  3425.and.iv.le.  4310) iw = 22
      if(iv.ge.  4315.and.iv.le.  6150) iw = 23
      if(iv.ge.  6155.and.iv.le.  8000) iw = 24
      if(iv.ge.  8005.and.iv.le.  9615) iw = 25
      if(iv.ge.  9620.and.iv.le. 11540) iw = 26
      if(iv.ge. 11545.and.iv.le. 13070) iw = 27
      if(iv.ge. 13075.and.iv.le. 14860) iw = 28
      if(iv.ge. 14865.and.iv.le. 16045) iw = 29
      if(iv.ge. 16340.and.iv.le. 17860) iw = 30
      iband = iw - 16
      ibnd(imol) = iw
      if(iw .gt.  0) then
           a(imol)  =   ah2o(iband)
           aa(imol)  = aah2o(iband)
           bb(imol)  = bbh2o(iband)
           cc(imol)  = cch2o(iband)
      endif
c  ---o3
      imol = 3
      iw = -1
      if (iv .ge.     0 .and. iv .le.   200)  iw = 31
      if (iv .ge.   515 .and. iv .le.  1275)  iw = 32
      if (iv .ge.  1630 .and. iv .le.  2295)  iw = 33
      if (iv .ge.  2670 .and. iv .le.  2845)  iw = 34
      if (iv .ge.  2850 .and. iv .le.  3260)  iw = 35
      iband      = iw - 30
      ibnd(imol) = iw
      if(iw .gt.  0) then
           a(imol)  =  ao3(iband)
           aa(imol) = aao3(iband)
           bb(imol) = bbo3(iband)
           cc(imol) = cco3(iband)
      endif
c  ---co2
      imol = 2
      iw = -1
      if (iv .ge.   425 .and. iv .le.   835)  iw = 36
      if (iv .ge.   840 .and. iv .le.  1440)  iw = 37
      if (iv .ge.  1805 .and. iv .le.  2855)  iw = 38
      if (iv .ge.  3070 .and. iv .le.  3755)  iw = 39
      if (iv .ge.  3760 .and. iv .le.  4065)  iw = 40
      if (iv .ge.  4530 .and. iv .le.  5380)  iw = 41
      if (iv .ge.  5905 .and. iv .le.  7025)  iw = 42
      if((iv .ge.  7395 .and. iv .le.  7785) .or.
     *   (iv .ge.  8030 .and. iv .le.  8335) .or.
     *   (iv .ge.  9340 .and. iv .le.  9670)) iw = 43
      iband = iw - 35
      ibnd(imol) = iw
      if(iw .gt.  0) then
           a(imol)  =  aco2(iband)
           aa(imol) = aaco2(iband)
           bb(imol) = bbco2(iband)
           cc(imol) = ccco2(iband)
      endif
c  ---co
      imol = 5
      iw = -1
      if (iv .ge.     0 .and. iv .le.   175) iw = 44
      if((iv .ge.  1940 .and. iv .le.  2285) .or.
     *   (iv .ge.  4040 .and. iv .le.  4370)) iw = 45
      iband = iw - 43
      ibnd(imol) = iw
      if(iw .gt.  0) then
           a(imol)  =  aco(iband)
           aa(imol) = aaco(iband)
           bb(imol) = bbco(iband)
           cc(imol) = ccco(iband)
      endif
c  ---ch4
      imol = 6
      iw = -1
      if((iv .ge.  1065 .and. iv .le.  1775) .or.
     *   (iv .ge.  2345 .and. iv .le.  3230) .or.
     *   (iv .ge.  4110 .and. iv .le.  4690) .or.
     *   (iv .ge.  5865 .and. iv .le.  6135))iw = 46
      iband = iw - 45
      ibnd(imol) = iw
      if(iw .gt.  0) then
           a(imol)  =  ach4(iband)
           aa(imol) = aach4(iband)
           bb(imol) = bbch4(iband)
           cc(imol) = ccch4(iband)
      endif
c  ---n2o
      imol = 4
      iw = -1
      if (iv .ge.     0 .and. iv .le.   120)  iw = 47
      if((iv .ge.   490 .and. iv .le.   775) .or.
     *   (iv .ge.   865 .and. iv .le.   995) .or.
     *   (iv .ge.  1065 .and. iv .le.  1385) .or.
     *   (iv .ge.  1545 .and. iv .le.  2040) .or.
     *   (iv .ge.  2090 .and. iv .le.  2655)) iw = 48
      if((iv .ge.  2705 .and. iv .le.  2865) .or.
     *   (iv .ge.  3245 .and. iv .le.  3925) .or.
     *   (iv .ge.  4260 .and. iv .le.  4470) .or.
     *   (iv .ge.  4540 .and. iv .le.  4785) .or.
     *   (iv .ge.  4910 .and. iv .le.  5165)) iw = 49
      iband = iw - 46
      ibnd(imol) = iw
      if(iw .gt.  0) then
           a(imol)  =  an2o(iband)
           aa(imol) = aan2o(iband)
           bb(imol) = bbn2o(iband)
           cc(imol) = ccn2o(iband)
      endif
c  ---o2
      imol = 7
      iw = -1
      if (iv .ge.     0 .and. iv .le.   265)  iw = 50
      if((iv .ge.  7650 .and. iv .le.  8080) .or.
     *   (iv .ge.  9235 .and. iv .le.  9490) .or.
     *   (iv .ge. 12850 .and. iv .le. 13220) .or.
     *   (iv .ge. 14300 .and. iv .le. 14600) .or.
     *   (iv .ge. 15695 .and. iv .le. 15955)) iw = 51
       if(iv .ge. 49600 .and. iv. le. 52710)  iw = 51
      iband = iw - 49
      ibnd(imol) = iw
      if(iw .gt.  0) then
           a(imol)  =  ao2(iband)
           if(iv .ge. 49600 .and. iv. le. 52710)  a(imol)  = .4704
           aa(imol) = aao2(iband)
           bb(imol) = bbo2(iband)
           cc(imol) = cco2(iband)
      endif
c  ---nh3
      imol = 11
      iw = -1
      if (iv .ge.     0 .and. iv .le.   385)  iw = 52
      if (iv .ge.   390 .and. iv .le.  2150)  iw = 53
      iband = iw - 51
      ibnd(imol) = iw
      if(iw .gt.  0) then
           a(imol)  =  anh3(iband)
           aa(imol) = aanh3(iband)
           bb(imol) = bbnh3(iband)
           cc(imol) = ccnh3(iband)
      endif
c  ---no
      imol = 8
      iw = -1
      if (iv .ge.  1700 .and. iv .le.  2005) iw  = 54
      iband = iw - 53
      ibnd(imol) = iw
      if(iw .gt.  0) then
           a(imol)  =  ano
           aa(imol) = aano
           bb(imol) = bbno
           cc(imol) = ccno
      endif
c  ---no2
      iw = -1
      imol = 10
      if((iv .ge.   580 .and. iv .le.   925) .or.
     *   (iv .ge.  1515 .and. iv .le.  1695) .or.
     *   (iv .ge.  2800 .and. iv .le.  2970)) iw = 55
      iband = iw - 54
      ibnd(imol) = iw
      if(iw .gt.  0) then
           a(imol)  =  ano2(iband)
           aa(imol) = aano2(iband)
           bb(imol) = bbno2(iband)
           cc(imol) = ccno2(iband)
      endif
c  ---so2
      imol = 9
      iw = -1
      if (iv .ge.     0 .and. iv .le.   185)  iw = 56
      if((iv .ge.   400 .and. iv .le.   650) .or.
     *   (iv .ge.   950 .and. iv .le.  1460) .or.
     *   (iv .ge.  2415 .and. iv .le.  2580)) iw = 57
      iband = iw - 55
      ibnd(imol) = iw
      if(iw .gt.  0) then
           a(imol)  =  aso2(iband)
           aa(imol) = aaso2(iband)
           bb(imol) = bbso2(iband)
           cc(imol) = ccso2(iband)
      endif
      return
      end
c=======================================================================
      subroutine schrun(v,cprun)
      common /shur/ shn(430)
      data v1,v2,dv,inum /49600.,51710.,5.,425/
      cprun = -20.
      if(v .lt. v1) go to 20
      if(v .gt. v2) go to 20
      ind = (v - v1)/dv + 1.0001
      if(ind . gt. inum) then
            print*,'  ind gt inum  v ind ',v,ind
            go to 20
      endif
      cprun = shn(ind)
20    return
      end
c=======================================================================
c=======================================================================
      block data cph2o
c>    block data
c
c     c' for water vapor (h2o)
      common /h2o/
     +        c11h2o( 70),
     +        c21h2o(126),c22h2o(  5),
     +        c31h2o(126),c32h2o(  2),
     +        c41h2o(126),c42h2o( 52),
     +        c51h2o(126),c52h2o( 52),
     +        c61h2o(126),c62h2o( 52),
     +        c71h2o(126),c72h2o(126),c73h2o(116),
     +        c81h2o(126),c82h2o(126),c83h2o(118),
     +        c91h2o(126),c92h2o(126),c93h2o( 71),
     +        ca1h2o(126),ca2h2o(126),ca3h2o(126),ca4h2o(7),
     +        cb1h2o(126),cb2h2o(126),cb3h2o( 54),
     +        cc1h2o(126),cc2h2o(126),cc3h2o(106),
     +        cd1h2o(126),cd2h2o(111),
     +        ce1h2o(126),ce2h2o(126),ce3h2o( 53)
c=h2o ====c' for   14 band models
c=h2o ====    0-  345
      data c11h2o/
     x -.59366, -.16679,  .42846,  .87819, 1.26357, 1.59247, 1.86372,
     x 2.11483, 2.31810, 2.44040, 2.55998, 2.69879, 2.79810, 2.89747,
     x 2.98118, 3.04863, 3.09568, 3.15381, 3.22984, 3.23785, 3.20991,
     x 3.14246, 3.03461, 2.98864, 3.03520, 3.08981, 3.10027, 3.11302,
     x 3.10266, 3.05765, 3.06166, 3.01593, 2.95500, 2.95328, 2.95297,
     x 2.91497, 2.83753, 2.74642, 2.70474, 2.75606, 2.84097, 2.89052,
     x 2.89886, 2.86150, 2.78032, 2.67212, 2.52752, 2.39301, 2.38109,
     8 2.43965, 2.46195, 2.39329, 2.22943, 2.15815, 2.16157, 2.29683,
     9 2.40335, 2.35569, 2.29239, 2.12968, 2.03781, 1.94313, 1.86282,
     x 1.87312, 1.88177, 1.95321, 1.94145, 1.92602, 1.92812, 1.90587/
c=h2o ====  350- 1000
      data c21h2o/
     x 2.04943, 1.95396, 1.78078, 1.60325, 1.55071, 1.49473, 1.46485,
     x 1.50231, 1.39831, 1.30664, 1.14704,  .96109,  .93139, 1.00613,
     x 1.11827, 1.13529, 1.07767,  .96652,  .90777,  .91973,  .90622,
     x  .93883,  .90861,  .81968,  .79852,  .69385,  .56997,  .49693,
     x  .40867,  .37846,  .44490,  .53554,  .59020,  .59196,  .50771,
     x  .34361,  .20796,  .15417,  .13600,  .14235,  .12700,  .08853,
     x  .06715,  .11430,  .15016,  .15016,  .13964,  .04897, -.04476,
     8 -.16953, -.30196, -.39901, -.42462, -.39340, -.35671, -.30771,
     9 -.31570, -.35021, -.47016, -.62308, -.77946, -.85086, -.82482,
     x -.83468, -.83991, -.89726, -.90918, -.84484, -.71025, -.62777,
     1 -.66324, -.76848,-1.03341,-1.27044,-1.49576,-1.61769,-1.53549,
     x-1.47958,-1.33160,-1.29625,-1.40768,-1.52411,-1.72765,-1.82510,
     x-1.76468,-1.70983,-1.59977,-1.50730,-1.46683,-1.39464,-1.43093,
     x-1.58947,-1.78778,-2.06146,-2.33634,-2.40749,-2.49065,-2.44182,
     x-2.25150,-2.19801,-2.08624,-2.10309,-2.27174,-2.36492,-2.45781,
     x-2.44508,-2.36196,-2.38101,-2.48058,-2.61957,-2.74895,-2.74245,
     x-2.63961,-2.61588,-2.61569,-2.71770,-2.92220,-3.01021,-2.99432,
     x-2.89456,-2.79847,-2.73359,-2.69055,-2.65898,-2.60837,-2.63170/
      data c22h2o/
     x-2.79096,-2.97394,-3.15934,-3.17057,-2.95258/
c=h2o ==== 1005- 1640
      data c31h2o/
     c-2.78308,-2.69196,-2.60867,-2.62239,-2.62637,-2.62950,-2.71010,
     c-2.72574,-2.71317,-2.61321,-2.51967,-2.42437,-2.38734,-2.45056,
     c-2.47843,-2.58702,-2.56472,-2.44706,-2.30814,-2.12582,-2.02697,
     c-1.99880,-2.05659,-2.05701,-2.06643,-2.04721,-1.90723,-1.90946,
     c-1.92812,-1.86522,-1.88820,-1.77270,-1.60669,-1.51740,-1.40182,
     c-1.38758,-1.38799,-1.41620,-1.43182,-1.37124,-1.28249,-1.09992,
     c -.99724, -.97950, -.99952,-1.09066,-1.09980,-1.00750, -.87259,
     8 -.70131, -.48309, -.30502, -.20407, -.13886, -.19661, -.24505,
     9 -.28415, -.34466, -.34496, -.28657, -.09485,  .16770,  .38311,
     c  .48553,  .49475,  .49074,  .52493,  .57439,  .60303,  .66919,
     1  .75656,  .90385, 1.04976, 1.13836, 1.20132, 1.21963, 1.30344,
     c 1.41212, 1.46770, 1.47630, 1.45559, 1.43315, 1.49679, 1.62749,
     c 1.68517, 1.70120, 1.66090, 1.59891, 1.64107, 1.76792, 1.93419,
     c 2.09362, 2.13280, 2.07959, 2.01987, 1.96835, 2.03073, 2.17591,
     c 2.32257, 2.49261, 2.60881, 2.66112, 2.68139, 2.70360, 2.70568,
     c 2.67997, 2.66478, 2.63655, 2.59716, 2.57555, 2.58781, 2.58940,
     c 2.50826, 2.28771, 1.95070, 1.59144, 1.31269, 1.21786, 1.22507,
     8 1.31945, 1.53875, 1.78543, 2.02655, 2.22881, 2.32061, 2.34163/
      data c32h2o/
     c 2.39432, 2.43073/
c=h2o ==== 1645- 2530
      data c41h2o/
     c 2.53438, 2.55861, 2.51156, 2.46499, 2.46254, 2.51561, 2.56373,
     c 2.62430, 2.67999, 2.68386, 2.68780, 2.68227, 2.59536, 2.42505,
     c 2.29307, 2.17816, 2.11945, 2.20521, 2.32197, 2.38083, 2.38052,
     c 2.25417, 2.11473, 2.06142, 2.02788, 2.01508, 1.97680, 1.91586,
     c 1.87253, 1.83706, 1.80766, 1.67367, 1.45528, 1.29956, 1.18809,
     c 1.20246, 1.33650, 1.45778, 1.48886, 1.40546, 1.22716, 1.01444,
     c  .91282,  .87247,  .83576,  .80170,  .71481,  .66927,  .65846,
     c  .66839,  .68503,  .66215,  .72413,  .78703,  .77831,  .71136,
     c  .51200,  .35931,  .30680,  .33365,  .36267,  .32095,  .25710,
     c  .12363, -.02266, -.18001, -.28048, -.27808, -.19047, -.08151,
     c -.09169, -.16662, -.24404, -.27238, -.27345, -.32244, -.42037,
     c -.54071, -.63500, -.69930, -.77174, -.83521, -.86639, -.82329,
     c -.78820, -.82340, -.83838, -.91387, -.96524, -.96364,-1.05757,
     c-1.12747,-1.19973,-1.27071,-1.30173,-1.34436,-1.35556,-1.35990,
     c-1.30386,-1.26726,-1.28022,-1.32843,-1.43599,-1.55929,-1.69416,
     c-1.79362,-1.86416,-1.90037,-1.91305,-1.94866,-1.95483,-1.92284,
     c-1.87535,-1.83065,-1.86043,-1.93470,-2.01410,-2.07677,-2.07980,
     c-2.01822,-1.96078,-1.95185,-1.96638,-2.05704,-2.17667,-2.24120/
      data c42h2o/
     c-2.27833,-2.33268,-2.37375,-2.43075,-2.54346,-2.60789,-2.68442,
     c-2.78402,-2.83736,-2.89622,-2.95598,-3.03170,-3.13338,-3.26736,
     c-3.41725,-3.51456,-3.61586,-3.67210,-3.67841,-3.72135,-3.74941,
     c-3.78822,-3.85868,-3.90419,-3.91592,-3.97897,-4.00562,-4.08675,
     c-4.18795,-4.15833,-4.18094,-4.18872,-4.25849,-4.42026,-4.57444,
     c-4.64021,-4.58636,-4.51788,-4.46274,-4.44165,-4.45450,-4.42101,
     c-4.35067,-4.30493,-4.23157,-4.11952,-4.01918,-3.93341,-3.81424,
     c-3.70572,-3.62484,-3.48143/
c=h2o ==== 2535- 3420
      data c51h2o/
     c-3.35886,-3.26514,-3.15517,-3.02814,-2.95147,-2.83444,-2.68908,
     c-2.62390,-2.50458,-2.39841,-2.35516,-2.24360,-2.18204,-2.16652,
     c-2.08381,-2.02597,-1.99880,-1.90122,-1.84045,-1.82575,-1.74889,
     c-1.70489,-1.66792,-1.60475,-1.59789,-1.59221,-1.60854,-1.66569,
     c-1.68527,-1.72998,-1.79886,-1.81356,-1.82715,-1.79425,-1.61106,
     c-1.40549,-1.24369,-1.15433,-1.23589,-1.44178,-1.64717,-1.78560,
     c-1.84622,-1.77824,-1.69071,-1.66066,-1.58765,-1.54222,-1.51960,
     8-1.45477,-1.39881,-1.38659,-1.37586,-1.36025,-1.39179,-1.36927,
     c-1.35455,-1.38734,-1.40292,-1.45598,-1.51545,-1.56173,-1.62478,
     c-1.69200,-1.75192,-1.81120,-1.83354,-1.87063,-1.89006,-1.88485,
     c-1.90298,-1.85403,-1.82001,-1.82495,-1.82901,-1.90076,-1.93649,
     c-1.83304,-1.70268,-1.52380,-1.41443,-1.41301,-1.39373,-1.34561,
     c-1.20932,-1.03186, -.85296, -.71145, -.59825, -.51884, -.51690,
     c -.51723, -.52224, -.50043, -.40989, -.32204, -.24881, -.18653,
     c -.17548, -.22729, -.32885, -.46183, -.47994, -.36042, -.23072,
     6 -.12160, -.06422, -.14924, -.21674, -.17913, -.15803, -.04515,
     c  .14450,  .28118,  .39718,  .49818,  .51040,  .44761,  .29666,
     8  .01147, -.32421, -.66518, -.96090,-1.13017,-1.18009,-1.08032/
      data c52h2o/
     c -.80133, -.52001, -.33748, -.22519, -.20871, -.26962, -.22592,
     c -.15919, -.07358,  .09367,  .20019,  .25965,  .27816,  .28577,
     c  .22305,  .17722,  .14469,  .06694,  .07268,  .10103,  .14554,
     c  .20352,  .25681,  .25790,  .21316,  .15965,  .08703,  .01638,
     c -.03529, -.03274, -.08812, -.12524, -.13536, -.23808, -.28262,
     c -.30082, -.29252, -.13320,  .05226,  .17657,  .21670,  .12268,
     c  .00438, -.03051, -.00359,  .02967,  .04460, -.01109, -.06041,
     c -.07485, -.02511,  .07116/
c=h2o ==== 3425- 4310
      data c61h2o/
     c  .18506,  .27668,  .32130,  .35452,  .39867,  .36470,  .34978,
     c  .36519,  .38993,  .47009,  .54349,  .60193,  .67101,  .73253,
     c  .84100,  .92974, 1.00406, 1.06301, 1.07261, 1.09629, 1.10790,
     c 1.10959, 1.11710, 1.15716, 1.24152, 1.34834, 1.45152, 1.53939,
     c 1.59331, 1.60894, 1.63833, 1.67031, 1.74144, 1.82069, 1.90463,
     c 1.98593, 2.02996, 2.10254, 2.16357, 2.16140, 2.11190, 2.06655,
     c 2.02241, 2.02978, 2.06771, 2.04985, 2.02048, 1.99566, 2.01593,
     8 2.11269, 2.22805, 2.27037, 2.23480, 2.16907, 2.09990, 2.08096,
     c 2.10710, 2.15298, 2.19061, 2.25811, 2.34221, 2.43200, 2.59765,
     c 2.72007, 2.77243, 2.71671, 2.56246, 2.33896, 2.14412, 1.97864,
     c 1.79640, 1.73371, 1.71380, 1.74950, 1.91932, 2.10063, 2.26262,
     c 2.36884, 2.42988, 2.47605, 2.51875, 2.53371, 2.51476, 2.47425,
     c 2.40051, 2.39254, 2.39540, 2.35342, 2.33460, 2.26830, 2.17169,
     c 2.09605, 2.04747, 2.01127, 1.89721, 1.74928, 1.55948, 1.38069,
     c 1.34831, 1.35751, 1.35809, 1.34286, 1.25929, 1.16743, 1.09595,
     6 1.00365,  .87965,  .76257,  .64206,  .56343,  .49943,  .40691,
     c  .29104,  .18437,  .12690,  .09157,  .13377,  .18899,  .20257,
     8  .19155,  .09384, -.01238, -.14283, -.26122, -.31851, -.45610/
      data c62h2o/
     c -.58273, -.65867, -.73100, -.66169, -.52264, -.46798, -.50258,
     c -.59104, -.72925, -.81067, -.80914, -.86943, -.92975, -.92524,
     c -.88289, -.79203, -.69250, -.68167, -.75444, -.86193, -.97556,
     c-1.10473,-1.20018,-1.24824,-1.27702,-1.22693,-1.18773,-1.13552,
     c-1.14015,-1.21589,-1.26394,-1.39464,-1.46192,-1.52629,-1.64635,
     c-1.71511,-1.78752,-1.79358,-1.77801,-1.75599,-1.77196,-1.83224,
     c-1.89985,-1.98528,-2.09408,-2.24126,-2.37607,-2.43218,-2.43830,
     c-2.38400,-2.33538,-2.43573/
c=h2o ==== 4315- 6150
      data c71h2o/
     x-2.52275,-2.67290,-2.83451,-2.93019,-3.01749,-3.02463,-2.99666,
     x-2.95414,-2.91300,-2.96493,-3.07471,-3.25693,-3.47657,-3.67222,
     x-3.88925,-3.97727,-3.94079,-3.81920,-3.66194,-3.59739,-3.64351,
     x-3.74016,-3.90037,-4.04679,-4.07663,-4.03256,-3.91836,-3.80990,
     x-3.76032,-3.77951,-3.84240,-3.90305,-3.92223,-3.82628,-3.65450,
     x-3.44339,-3.25756,-3.09919,-3.00901,-2.95747,-2.88271,-2.82108,
     x-2.72633,-2.59367,-2.46775,-2.36235,-2.28438,-2.27343,-2.30886,
     8-2.33620,-2.27813,-2.20677,-2.16170,-2.14594,-2.24245,-2.36299,
     x-2.42996,-2.50866,-2.55678,-2.50968,-2.47465,-2.42796,-2.37981,
     x-2.34092,-2.30518,-2.26753,-2.27390,-2.44156,-2.72384,-3.06108,
     x-3.38056,-3.48970,-3.41674,-3.36528,-3.27790,-3.15495,-3.01945,
     x-2.81869,-2.66003,-2.56096,-2.49017,-2.46335,-2.51454,-2.59743,
     x-2.67025,-2.78841,-2.77863,-2.63881,-2.54169,-2.40240,-2.37146,
     x-2.46253,-2.54291,-2.65346,-2.69467,-2.69130,-2.65025,-2.59152,
     x-2.56343,-2.50785,-2.44665,-2.41418,-2.34553,-2.28223,-2.25278,
     6-2.20694,-2.16892,-2.14295,-2.14341,-2.16443,-2.24853,-2.38594,
     x-2.49449,-2.58047,-2.55462,-2.41673,-2.35641,-2.32619,-2.34603,
     8-2.40102,-2.30576,-2.20532,-2.09307,-2.00782,-2.00039,-1.91252/
      data c72h2o/
     x-1.80383,-1.65749,-1.55728,-1.59262,-1.70939,-1.83569,-1.84895,
     x-1.71457,-1.53813,-1.41904,-1.37588,-1.39458,-1.39135,-1.35232,
     x-1.30470,-1.24821,-1.20394,-1.19607,-1.15995,-1.13948,-1.11024,
     x-1.03785, -.99804, -.95430, -.92707, -.93592, -.93528, -.86881,
     x -.75121, -.55836, -.35056, -.22085, -.13412, -.12673, -.13867,
     x -.11656, -.07357,  .01888,  .11050,  .20428,  .29291,  .35923,
     x  .43608,  .47266,  .49792,  .54978,  .60489,  .67778,  .71787,
     8  .73606,  .74796,  .75193,  .81728,  .87972,  .95990, 1.07451,
     x 1.13098, 1.17565, 1.19031, 1.20334, 1.27687, 1.35910, 1.41924,
     x 1.37988, 1.28213, 1.16286, 1.08658, 1.06554, 1.03702, 1.01290,
     x  .95519,  .94231,  .94216,  .95764, 1.03405, 1.11309, 1.27076,
     x 1.48131, 1.66125, 1.76502, 1.68299, 1.50126, 1.28195, 1.13724,
     x 1.09863, 1.12031, 1.23502, 1.34328, 1.39556, 1.40851, 1.40939,
     x 1.40259, 1.39505, 1.38427, 1.33724, 1.29860, 1.34354, 1.43194,
     x 1.50874, 1.54493, 1.48740, 1.37260, 1.26973, 1.21297, 1.11026,
     6  .97625,  .87238,  .76100,  .71825,  .73936,  .69604,  .64138,
     x  .59585,  .51097,  .44903,  .40524,  .29892,  .21583,  .19145,
     8  .15378,  .13759,  .09412, -.04455, -.18870, -.28538, -.37204/
      data c73h2o/
     x -.46390, -.57884, -.70647, -.78911, -.79511, -.76645, -.76146,
     x -.80163, -.83155, -.86672, -.92994, -.99971,-1.10990,-1.25701,
     x-1.32841,-1.33350,-1.35269,-1.31799,-1.35095,-1.48830,-1.57874,
     x-1.67539,-1.72874,-1.68087,-1.67518,-1.73066,-1.77654,-1.79238,
     x-1.81386,-1.77187,-1.73774,-1.78673,-1.82129,-1.86174,-1.87867,
     x-1.92986,-1.95895,-1.98042,-2.10738,-2.14350,-2.22883,-2.35165,
     x-2.30593,-2.31343,-2.23607,-2.17791,-2.29047,-2.40740,-2.60466,
     8-2.70413,-2.67647,-2.64479,-2.62274,-2.66727,-2.67591,-2.66531,
     x-2.64576,-2.69566,-2.79611,-2.90809,-2.99381,-2.94495,-2.94833,
     x-2.97002,-3.01283,-3.07907,-3.08348,-3.06412,-3.08084,-3.20105,
     x-3.32453,-3.49652,-3.63219,-3.65897,-3.69476,-3.63741,-3.54369,
     x-3.44992,-3.41310,-3.43168,-3.48306,-3.57513,-3.59385,-3.59684,
     x-3.60814,-3.50612,-3.41284,-3.34107,-3.27248,-3.26950,-3.31027,
     x-3.32205,-3.29589,-3.29768,-3.28777,-3.29950,-3.39843,-3.43784,
     x-3.47042,-3.54250,-3.55457,-3.69278,-3.82390,-3.91709,-4.02428,
     6-3.97802,-4.04945,-3.99837,-3.96096,-4.01515,-4.01286,-4.27890,
     7-4.64526,-4.92520,-5.20714,-5.02961/
c=h2o ==== 6155- 8000
      data c81h2o/
     x-4.88315,-4.85584,-4.76921,-4.54440,-4.33075,-4.16671,-4.04406,
     x-4.09564,-4.11792,-4.14522,-4.19109,-4.14906,-4.22221,-4.35301,
     x-4.47867,-4.50537,-4.41913,-4.24856,-4.05892,-3.91396,-3.73977,
     x-3.60042,-3.52610,-3.50040,-3.55218,-3.66025,-3.77097,-3.87835,
     x-3.96454,-3.93046,-3.92926,-3.96805,-3.99038,-4.10179,-4.21981,
     x-4.24013,-4.26190,-4.27753,-4.25594,-4.28500,-4.29071,-4.26155,
     x-4.16114,-4.04160,-3.91756,-3.82524,-3.76258,-3.74207,-3.77017,
     8-3.80666,-3.92858,-4.01356,-4.10145,-4.16708,-4.09123,-4.00345,
     x-3.88032,-3.81171,-3.80771,-3.83212,-3.88507,-3.81399,-3.70048,
     x-3.58376,-3.46350,-3.42785,-3.41629,-3.40329,-3.36172,-3.26599,
     x-3.16908,-3.10954,-3.03394,-2.95828,-2.85536,-2.71469,-2.60076,
     x-2.48946,-2.38513,-2.32220,-2.30051,-2.34186,-2.37590,-2.33267,
     x-2.21087,-2.03216,-1.91013,-1.82328,-1.77996,-1.76714,-1.72488,
     x-1.71325,-1.67669,-1.62963,-1.60411,-1.54027,-1.47681,-1.37155,
     x-1.25978,-1.23494,-1.26986,-1.33751,-1.37220,-1.28322,-1.14853,
     6-1.03021, -.89832, -.84340, -.83317, -.78856, -.76905, -.69209,
     x -.53147, -.37401, -.25508, -.21755, -.22627, -.23936, -.22223,
     8 -.17345, -.11880, -.10331, -.15444, -.20353, -.25350, -.26628/
      data c82h2o/
     x -.13441,  .02358,  .13657,  .22032,  .19637,  .12621,  .07999,
     x  .04393, -.01900, -.06543, -.08129, -.14847, -.17765, -.23113,
     x -.29309, -.28723, -.27521, -.20013, -.11575, -.00428,  .10976,
     x  .16530,  .18309,  .13200,  .10610,  .10394,  .13621,  .17117,
     x  .17251,  .18671,  .16161,  .16640,  .18417,  .18573,  .24876,
     x  .26103,  .28476,  .33612,  .30642,  .30150,  .27173,  .21976,
     x  .23130,  .27376,  .30887,  .34334,  .34765,  .31180,  .30774,
     8  .31256,  .35423,  .42454,  .44493,  .43846,  .44507,  .43684,
     x  .49327,  .53868,  .51933,  .54592,  .54951,  .63201,  .74737,
     x  .80266,  .88719,  .87874,  .84412,  .84352,  .81737,  .86380,
     x  .94765,  .95553,  .93965,  .90241,  .91481, 1.00917, 1.11552,
     x 1.15202, 1.06885,  .96737,  .85164,  .80701,  .82571,  .87391,
     x  .98520, 1.07042, 1.18051, 1.29004, 1.37755, 1.48278, 1.47663,
     x 1.40851, 1.27508, 1.11986,  .98454,  .88260,  .82338,  .79509,
     x  .83355,  .91046, 1.04503, 1.21868, 1.36672, 1.46155, 1.47085,
     6 1.46520, 1.42619, 1.37940, 1.41333, 1.43128, 1.45974, 1.54526,
     x 1.53032, 1.48103, 1.39624, 1.26267, 1.17261, 1.09232, 1.05888,
     8 1.01929,  .94626,  .87615,  .73334,  .61962,  .52576,  .40124/
      data c83h2o/
     x  .32424,  .20042,  .05769, -.09325, -.27407, -.40779, -.52559,
     x -.58490, -.57916, -.54457, -.50743, -.45937, -.41861, -.41520,
     x -.39164, -.36510, -.30857, -.23157, -.18280, -.15878, -.21295,
     x -.29332, -.39457, -.54826, -.71006, -.87700, -.96819, -.98703,
     x -.93748, -.83916, -.78698, -.76209, -.80754, -.93347,-1.06076,
     x-1.15801,-1.16256,-1.09618,-1.03195,-1.05522,-1.13586,-1.23387,
     x-1.33214,-1.32682,-1.33648,-1.38038,-1.42553,-1.49769,-1.52950,
     8-1.54445,-1.56745,-1.61707,-1.69148,-1.76787,-1.82556,-1.84347,
     x-1.86221,-1.87097,-1.84614,-1.88659,-1.98535,-2.12108,-2.27740,
     x-2.39335,-2.39886,-2.33846,-2.30442,-2.27409,-2.29854,-2.39124,
     x-2.56427,-2.73609,-2.88840,-3.00443,-3.02685,-3.09379,-3.16003,
     x-3.13090,-3.06189,-3.00807,-2.95169,-3.01568,-3.11918,-3.18931,
     x-3.35446,-3.46712,-3.51002,-3.48618,-3.36603,-3.29278,-3.32935,
     x-3.47177,-3.61763,-3.68930,-3.67420,-3.62078,-3.67644,-3.76717,
     x-3.78944,-3.79818,-3.75336,-3.74321,-3.86778,-3.96899,-4.05004,
     6-4.15451,-4.17979,-4.22704,-4.28851,-4.25560,-4.21920,-4.27564,
     7-4.42921,-4.58506,-4.70967,-4.80136,-4.64650,-4.65341/
c=h2o ==== 8005- 9615
      data c91h2o/
     x-4.51995,-4.42433,-4.42137,-4.44853,-4.44819,-4.49132,-4.49176,
     x-4.52929,-4.58468,-4.60533,-4.62362,-4.60168,-4.59803,-4.45292,
     x-4.26920,-4.09891,-3.92615,-3.86016,-3.69436,-3.53699,-3.38584,
     x-3.23356,-3.19281,-3.14232,-3.11326,-3.04386,-2.90514,-2.80270,
     x-2.68808,-2.62726,-2.61349,-2.57111,-2.54465,-2.47142,-2.42795,
     x-2.40936,-2.37936,-2.41255,-2.40417,-2.41017,-2.39774,-2.33861,
     x-2.23985,-2.08388,-2.00350,-1.93767,-1.91020,-1.92815,-1.89802,
     8-1.85648,-1.84229,-1.86062,-1.89799,-1.95863,-2.01858,-2.05596,
     x-2.06508,-2.02824,-1.93392,-1.83965,-1.74890,-1.71252,-1.72275,
     x-1.71193,-1.68781,-1.66945,-1.64316,-1.63675,-1.69286,-1.70297,
     x-1.72751,-1.75100,-1.73714,-1.79804,-1.84371,-1.86235,-1.88812,
     x-1.83704,-1.77649,-1.70661,-1.60188,-1.50341,-1.43505,-1.46076,
     x-1.51651,-1.57911,-1.61619,-1.55812,-1.49706,-1.45230,-1.42832,
     x-1.44314,-1.52138,-1.60752,-1.62106,-1.64265,-1.64250,-1.64573,
     x-1.74951,-1.80667,-1.76036,-1.68790,-1.57515,-1.53228,-1.57292,
     6-1.61350,-1.65583,-1.63563,-1.58694,-1.56417,-1.53128,-1.54079,
     x-1.55014,-1.53022,-1.53190,-1.50230,-1.50260,-1.49991,-1.45992,
     8-1.41944,-1.31703,-1.21850,-1.14990,-1.08809,-1.04748,-1.01748/
      data c92h2o/
     x -.95109, -.84680, -.74538, -.60472, -.50362, -.46372, -.42447,
     x -.44838, -.44419, -.40683, -.38084, -.33053, -.32846, -.33572,
     x -.31158, -.29906, -.20305, -.13083, -.09973, -.06963, -.12740,
     x -.20199, -.29978, -.35896, -.38843, -.41730, -.45017, -.51507,
     x -.56213, -.57297, -.50844, -.42276, -.29372, -.08843,  .09240,
     x  .25840,  .28311,  .13891, -.06768, -.28207, -.39760, -.40444,
     x -.31138, -.14305, -.02128,  .04782,  .08894,  .10200,  .09648,
     8  .10814,  .09787,  .04275,  .07559,  .12150,  .14186,  .19034,
     x  .13856,  .07934,  .05903, -.00117, -.04140, -.11747, -.21938,
     x -.28241, -.37335, -.49225, -.58631, -.68229, -.75086, -.77623,
     x -.84652, -.93691,-1.00829,-1.07836,-1.10936,-1.10990,-1.10672,
     x-1.07623,-1.03447,-1.01613,-1.00369, -.99511,-1.06778,-1.12221,
     x-1.14258,-1.19379,-1.17257,-1.15262,-1.17033,-1.16389,-1.14503,
     x-1.13643,-1.12323,-1.19203,-1.33003,-1.47540,-1.65339,-1.68424,
     x-1.66968,-1.67118,-1.61782,-1.65910,-1.73337,-1.81449,-1.93135,
     6-2.03554,-2.03827,-1.99609,-2.00710,-2.03895,-2.19678,-2.30931,
     x-2.30301,-2.23226,-2.07787,-2.03277,-2.03851,-2.10514,-2.23452,
     8-2.33474,-2.44465,-2.43944,-2.37675,-2.35973,-2.37611,-2.48915/
      data c93h2o/
     x-2.59681,-2.62562,-2.61907,-2.61274,-2.73225,-2.84636,-2.91882,
     x-2.95084,-2.84617,-2.83687,-2.84531,-2.82928,-2.88406,-2.93621,
     x-3.00526,-3.09956,-3.16051,-3.18338,-3.25056,-3.38003,-3.56102,
     x-3.72396,-3.80811,-3.82369,-3.79760,-3.90921,-4.04910,-4.14132,
     x-4.22416,-4.16634,-4.21193,-4.37375,-4.54004,-4.54848,-4.34009,
     x-4.10097,-3.93945,-3.99014,-4.18155,-4.46321,-4.84035,-4.95672,
     x-4.88529,-4.92967,-5.09480,-5.27981,-5.39165,-5.32774,-5.16805,
     8-5.26308,-5.53619,-5.93153,-6.48485,-6.38350,-6.02883,-5.76237,
     x-5.65535,-5.58220,-5.58090,-5.69939,-5.87562,-6.23761,-6.45380,
     x-6.50710,-6.40861,-6.18069,-6.15034,-6.12957,-6.08168,-6.05912,
     1-6.20029/
c=h2o ==== 9620-11540
      data ca1h2o/
     x-6.35916,-6.63834,-7.22799,-6.87579,-6.38557,-6.05701,-5.77145,
     x-5.71889,-5.54063,-5.34887,-5.20440,-5.01687,-4.88229,-4.75732,
     x-4.61829,-4.47540,-4.40382,-4.22901,-4.07893,-3.91067,-3.71540,
     x-3.66982,-3.60413,-3.59635,-3.66139,-3.67630,-3.61574,-3.49060,
     x-3.33033,-3.18950,-3.19004,-3.27293,-3.43811,-3.58539,-3.69658,
     x-3.64411,-3.52966,-3.51758,-3.45900,-3.56858,-3.67516,-3.75396,
     x-3.80574,-3.77074,-3.74231,-3.63809,-3.64323,-3.59911,-3.62673,
     8-3.64385,-3.54801,-3.49160,-3.38461,-3.33358,-3.21719,-3.04173,
     x-2.89493,-2.77334,-2.79171,-2.91085,-3.04844,-3.23627,-3.31742,
     x-3.35484,-3.39756,-3.34285,-3.36017,-3.34117,-3.26031,-3.20256,
     x-3.07615,-2.98533,-3.01199,-3.13943,-3.33780,-3.54162,-3.64413,
     x-3.59251,-3.59490,-3.60162,-3.66139,-3.81236,-3.87304,-4.04749,
     x-4.11623,-4.09447,-4.12708,-3.91916,-3.77960,-3.62012,-3.44890,
     x-3.42739,-3.42156,-3.36932,-3.34675,-3.22941,-3.12258,-3.12447,
     x-3.07216,-3.06608,-3.04637,-2.99581,-3.00597,-2.94524,-2.83430,
     6-2.69244,-2.53460,-2.44553,-2.36211,-2.25128,-2.12504,-1.99329,
     x-1.94694,-1.96858,-2.02552,-2.02890,-1.95458,-1.83064,-1.68469,
     8-1.63148,-1.63055,-1.64868,-1.68433,-1.65098,-1.54445,-1.45543/
      data ca2h2o/
     x-1.39405,-1.35500,-1.38974,-1.43708,-1.49729,-1.58141,-1.63709,
     x-1.71988,-1.74834,-1.78729,-1.81439,-1.79445,-1.80727,-1.78446,
     x-1.77116,-1.69515,-1.57106,-1.41358,-1.22505,-1.11749,-1.06719,
     x-1.05722,-1.05923,-1.08022,-1.08249,-1.05940,-1.05527, -.97884,
     x -.90009, -.86984, -.84202, -.84891, -.86571, -.87771, -.86436,
     x -.89675, -.95811, -.95681, -.98685, -.91920, -.79481, -.73405,
     x -.63486, -.61580, -.66083, -.69059, -.75323, -.74477, -.65052,
     8 -.58475, -.56151, -.61494, -.70313, -.70147, -.64776, -.57626,
     x -.52669, -.56405, -.57813, -.57452, -.57656, -.52371, -.48121,
     x -.47066, -.44204, -.42321, -.43939, -.40019, -.34592, -.36666,
     x -.36117, -.41494, -.53334, -.63311, -.73668, -.83196, -.91543,
     x -.92801, -.91893, -.82619, -.64369, -.45814, -.28838, -.20295,
     x -.12845, -.12789, -.14668, -.10804, -.12206, -.08664, -.05495,
     x -.09929, -.16477, -.24481, -.32305, -.39276, -.44000, -.52873,
     x -.60139, -.69141, -.79857, -.89923,-1.00968,-1.08832,-1.14958,
     6-1.21303,-1.28067,-1.38492,-1.47822,-1.51729,-1.55518,-1.53633,
     x-1.51062,-1.50327,-1.51801,-1.57645,-1.65941,-1.73134,-1.75165,
     8-1.72655,-1.71606,-1.73263,-1.74728,-1.79286,-1.73848,-1.66180/
      data ca3h2o/
     x-1.56283,-1.40366,-1.32738,-1.25309,-1.25065,-1.26987,-1.24009,
     x-1.22822,-1.19404,-1.20867,-1.23645,-1.19332,-1.13591,-1.08205,
     x-1.04976,-1.14128,-1.23489,-1.27858,-1.33065,-1.28360,-1.22682,
     x-1.18706,-1.15823,-1.14067,-1.16633,-1.17506,-1.15970,-1.19126,
     x-1.19843,-1.30385,-1.42862,-1.58004,-1.72327,-1.78743,-1.86895,
     x-1.85190,-1.80529,-1.69422,-1.49103,-1.32529,-1.20009,-1.13762,
     x-1.11678,-1.13199,-1.16550,-1.16402,-1.17932,-1.17405,-1.15184,
     8-1.20924,-1.29157,-1.34831,-1.38571,-1.42632,-1.43812,-1.50800,
     x-1.62119,-1.70590,-1.86161,-2.00714,-2.11745,-2.25960,-2.34777,
     x-2.44254,-2.64264,-2.83979,-3.04320,-3.29364,-3.41153,-3.49359,
     x-3.60572,-3.67873,-3.78090,-3.85398,-3.88200,-3.83753,-3.77740,
     x-3.85401,-3.79646,-3.72746,-3.70451,-3.59083,-3.70223,-3.88363,
     x-4.03077,-4.20725,-4.19594,-4.16725,-4.13410,-4.16791,-4.12138,
     x-4.08875,-4.14355,-4.10163,-4.19018,-4.25695,-4.31184,-4.47906,
     x-4.51148,-4.57929,-4.59458,-4.62081,-4.83031,-5.02522,-5.15710,
     6-5.27403,-5.22837,-5.32058,-5.55260,-5.72630,-5.86735,-5.86402,
     x-5.84419,-5.89720,-6.15533,-6.51283,-6.98011,-7.28495,-7.08784,
     8-6.77605,-6.49215,-6.43947,-6.42083,-6.59354,-6.78419,-6.98883/
      data ca4h2o/
     x-7.11018,-6.93420,-6.83581,-6.87136,-6.96133,-7.28561,-8.27079/
c=h2o ====11545-13070
      data cb1h2o/
     x-8.59451,-9.45197,-8.33631,-8.21424,-6.89777,-6.27923,-5.89945,
     x-5.66364,-5.69459,-5.87082,-5.81185,-5.70141,-5.45890,-5.24048,
     x-5.30703,-5.32430,-5.18694,-5.03410,-4.82279,-4.72208,-4.55097,
     x-4.36284,-4.20326,-4.04534,-4.05883,-4.01183,-3.93857,-3.83212,
     x-3.66113,-3.56021,-3.45969,-3.38518,-3.33373,-3.32721,-3.34771,
     x-3.35412,-3.34584,-3.22701,-3.14293,-3.09481,-3.05706,-3.13587,
     x-3.18156,-3.26336,-3.34559,-3.38498,-3.39054,-3.33695,-3.34959,
     8-3.36191,-3.53258,-3.66238,-3.68946,-3.69155,-3.52990,-3.48606,
     x-3.41160,-3.34144,-3.31933,-3.26341,-3.22609,-3.18298,-3.12800,
     x-3.02166,-2.93903,-2.84135,-2.69864,-2.63582,-2.60853,-2.59699,
     x-2.64799,-2.71846,-2.70856,-2.67797,-2.67978,-2.58432,-2.57052,
     x-2.57883,-2.48977,-2.47541,-2.43446,-2.39253,-2.42823,-2.44830,
     x-2.49704,-2.54904,-2.54865,-2.51223,-2.39407,-2.28582,-2.22341,
     x-2.18280,-2.17308,-2.15234,-2.10486,-2.08564,-2.08578,-2.09615,
     x-2.11136,-2.10200,-2.06832,-2.04134,-2.00194,-1.95185,-1.92025,
     6-1.85931,-1.85988,-1.91696,-2.01129,-2.15097,-2.20539,-2.21302,
     x-2.22309,-2.24412,-2.30471,-2.33847,-2.25445,-2.08096,-1.85098,
     8-1.61538,-1.45841,-1.42089,-1.54484,-1.74234,-1.96839,-2.18038/
      data cb2h2o/
     x-2.28394,-2.31701,-2.24125,-2.05966,-1.88694,-1.78105,-1.69960,
     x-1.64107,-1.62909,-1.58168,-1.56599,-1.59412,-1.56739,-1.56346,
     x-1.54456,-1.55619,-1.61000,-1.67072,-1.75312,-1.82511,-1.87588,
     x-1.89436,-1.94377,-1.96038,-2.02291,-2.14131,-2.19637,-2.27114,
     x-2.33418,-2.36152,-2.44688,-2.53819,-2.61011,-2.69105,-2.73774,
     x-2.76700,-2.82031,-2.85910,-2.88525,-2.95422,-2.99210,-3.06247,
     x-3.12280,-3.12274,-3.13972,-3.09998,-3.11771,-3.10670,-3.00116,
     8-2.91302,-2.75838,-2.66379,-2.65726,-2.62212,-2.59431,-2.55351,
     x-2.49874,-2.47486,-2.52563,-2.54608,-2.54311,-2.54938,-2.49038,
     x-2.49664,-2.52688,-2.58688,-2.67000,-2.71830,-2.77113,-2.80244,
     x-2.84845,-2.87062,-2.83368,-2.69338,-2.52225,-2.40864,-2.34429,
     x-2.40612,-2.55941,-2.73915,-2.94409,-3.12344,-3.27308,-3.32104,
     x-3.27077,-3.13129,-2.92504,-2.78515,-2.71007,-2.66733,-2.62518,
     x-2.62279,-2.59906,-2.56745,-2.59548,-2.53657,-2.50849,-2.47640,
     x-2.46021,-2.53747,-2.62220,-2.76449,-2.88041,-2.96357,-3.02153,
     6-3.06178,-3.14581,-3.25318,-3.44687,-3.69634,-3.90497,-4.09399,
     x-4.22346,-4.29749,-4.51957,-4.79572,-5.03708,-5.27140,-5.34657,
     8-5.44757,-5.52207,-5.57087,-5.64385,-5.80294,-5.90763,-5.94797/
      data cb3h2o/
     x-5.85439,-5.62721,-5.45121,-5.40324,-5.38540,-5.39409,-5.59404,
     x-5.69955,-5.76877,-5.86764,-5.78129,-5.88887,-6.12206,-6.37505,
     x-6.85575,-7.13884,-6.98622,-6.96112,-6.84830,-6.72456,-6.67530,
     x-6.65251,-6.66033,-6.88151,-7.11199,-7.33922,-7.61766,-7.66585,
     x-7.87464,-8.59519,-9.04047,-9.30602,-9.51273,-8.93688,-9.43151,
     x-8.84005,-10.0000,-9.65151,-8.98420,-10.0000,-9.43151,-9.68331,
     x-10.0000,-9.43067,-9.90527,-10.0000,-9.98810,-9.65151,-9.74384,
     8-9.20004,-10.0000,-9.20004,-10.0000,-10.0000/
c=h2o ====13075-14860
      data cc1h2o/
     x-9.85239,-8.09585,-7.66916,-7.89183,-8.46587,-8.79342,-8.93440,
     x-8.68356,-8.83423,-8.01626,-7.91911,-8.27604,-9.44864,-9.69462,
     x-10.0000,-9.69462,-8.31857,-7.91867,-7.86404,-8.32240,-8.68705,
     x-9.61515,-9.25284,-8.68705,-8.28789,-7.63730,-8.25919,-10.0000,
     x-9.51758,-10.0000,-10.0000,-9.51758,-8.05261,-7.76848,-8.24255,
     x-9.34171,-9.19941,-8.56505,-7.78955,-7.23750,-6.64136,-6.41854,
     x-6.14335,-5.86704,-5.70840,-5.48179,-5.23814,-5.00650,-4.80407,
     8-4.69986,-4.70404,-4.80846,-4.99355,-5.19947,-5.33300,-5.30550,
     x-5.17017,-5.05309,-4.95685,-4.79959,-4.65496,-4.54077,-4.44407,
     x-4.43768,-4.47167,-4.40429,-4.30236,-4.22549,-4.15283,-4.06900,
     x-3.99244,-3.87562,-3.76949,-3.78198,-3.77003,-3.67364,-3.52061,
     x-3.34459,-3.20426,-3.15993,-3.13851,-3.09692,-3.07747,-3.02936,
     x-3.02192,-2.96720,-2.90584,-2.79069,-2.65042,-2.62072,-2.53133,
     x-2.50554,-2.48745,-2.41611,-2.43532,-2.40913,-2.38723,-2.33337,
     x-2.21812,-2.15072,-2.08313,-2.06151,-2.10585,-2.13670,-2.18757,
     6-2.23995,-2.26992,-2.34229,-2.38059,-2.38087,-2.33246,-2.21618,
     x-2.14795,-2.12707,-2.09130,-2.05043,-1.95550,-1.77077,-1.66044,
     8-1.58224,-1.51702,-1.54004,-1.54074,-1.53712,-1.54938,-1.52352/
      data cc2h2o/
     x-1.49404,-1.51985,-1.57774,-1.64393,-1.65332,-1.56238,-1.45105,
     x-1.39264,-1.40635,-1.46167,-1.50365,-1.47751,-1.47268,-1.45992,
     x-1.46654,-1.50223,-1.47576,-1.47730,-1.46977,-1.45630,-1.44490,
     x-1.43097,-1.43664,-1.49313,-1.63372,-1.81848,-1.97938,-2.06009,
     x-2.10124,-2.02376,-1.95095,-1.86835,-1.70161,-1.54835,-1.37614,
     x-1.25130,-1.17408,-1.17670,-1.19790,-1.21344,-1.27252,-1.28030,
     x-1.31031,-1.34321,-1.34056,-1.35264,-1.38137,-1.44648,-1.56735,
     8-1.72096,-1.88960,-2.06793,-2.19583,-2.29229,-2.34400,-2.34120,
     x-2.36407,-2.39688,-2.45450,-2.53132,-2.58327,-2.60585,-2.60773,
     x-2.60606,-2.64243,-2.71853,-2.78182,-2.84459,-2.83665,-2.78522,
     x-2.71157,-2.61628,-2.53314,-2.45692,-2.41679,-2.41535,-2.45500,
     x-2.51120,-2.57918,-2.62854,-2.63617,-2.61204,-2.53833,-2.43992,
     x-2.37490,-2.34880,-2.34476,-2.36650,-2.36553,-2.34094,-2.33633,
     x-2.30483,-2.26933,-2.25141,-2.22841,-2.27610,-2.33673,-2.37913,
     x-2.44271,-2.48571,-2.57146,-2.64200,-2.61103,-2.47198,-2.27897,
     6-2.15874,-2.06557,-2.05371,-2.06333,-2.04641,-2.04429,-2.01040,
     x-2.00804,-1.99416,-2.05499,-2.09948,-2.09706,-2.10517,-2.01267,
     8-1.99934,-2.03719,-2.12114,-2.29537,-2.44295,-2.55926,-2.66007/
      data cc3h2o/
     x-2.73808,-2.75972,-2.78032,-2.67031,-2.44995,-2.27133,-2.11654,
     x-2.02598,-2.01402,-2.04264,-2.04511,-2.02975,-2.00687,-1.94840,
     x-1.93975,-1.97104,-2.01554,-2.09336,-2.15829,-2.26705,-2.40356,
     x-2.55216,-2.78858,-3.00697,-3.22778,-3.44413,-3.55439,-3.66412,
     x-3.73884,-3.92224,-4.18922,-4.41150,-4.55122,-4.48637,-4.29339,
     x-4.19248,-4.28419,-4.41178,-4.60369,-4.81645,-4.83716,-4.93818,
     x-4.87772,-4.65255,-4.40133,-4.14378,-4.05431,-4.02425,-4.04257,
     8-4.11794,-4.12153,-4.16374,-4.17459,-4.10274,-4.04733,-4.00176,
     x-4.01760,-4.13393,-4.29085,-4.38409,-4.39975,-4.33916,-4.31515,
     x-4.35426,-4.44628,-4.51842,-4.52596,-4.53399,-4.54590,-4.63864,
     x-4.75657,-4.86504,-4.95580,-5.03365,-5.14879,-5.33868,-5.62972,
     x-5.92584,-6.30299,-6.62922,-6.70773,-6.97810,-7.35919,-7.64909,
     x-8.62765,-8.55378,-7.76305,-7.47054,-7.07789,-7.11538,-7.34052,
     x-7.75694,-9.17126,-10.0000,-9.86547,-8.71424,-8.66552,-8.31602,
     x-8.41339,-7.92192,-8.66385,-8.99856,-9.65437,-9.36822,-9.46517,
     6-9.43986/
c=h2o ====14865-16045
      data cd1h2o/
     x-8.65941,-10.0000,-10.0000,-8.82641,-8.56244,-7.93689,-7.68823,
     x-7.55818,-7.05113,-6.76446,-6.49313,-6.24749,-6.12617,-6.05220,
     x-6.13798,-6.07909,-5.86845,-5.69141,-5.50496,-5.48376,-5.56108,
     x-5.42768,-5.29615,-5.10664,-4.88111,-4.78669,-4.62385,-4.52174,
     x-4.49073,-4.45792,-4.54129,-4.54480,-4.51341,-4.47258,-4.27643,
     x-4.18091,-4.09557,-4.04222,-4.11247,-4.14851,-4.16970,-4.11065,
     x-4.04809,-4.00745,-3.99879,-4.07978,-4.12451,-4.19723,-4.17393,
     8-4.09022,-4.02101,-3.87998,-3.79109,-3.66411,-3.50066,-3.40580,
     x-3.32713,-3.30194,-3.35131,-3.35137,-3.29933,-3.20658,-3.06263,
     x-2.97995,-2.98759,-2.99176,-3.00756,-2.97359,-2.85849,-2.81640,
     x-2.77094,-2.75469,-2.77297,-2.71165,-2.69187,-2.64524,-2.60542,
     x-2.60059,-2.57842,-2.59991,-2.58577,-2.60792,-2.66006,-2.70803,
     x-2.79094,-2.81048,-2.79532,-2.79499,-2.84578,-2.90638,-2.96270,
     x-2.90633,-2.71535,-2.54313,-2.37822,-2.31125,-2.35246,-2.49011,
     x-2.68215,-2.83136,-2.96357,-2.95873,-2.90544,-2.84387,-2.70352,
     6-2.58329,-2.49207,-2.41735,-2.35522,-2.30279,-2.25786,-2.22067,
     x-2.20741,-2.19735,-2.20181,-2.22358,-2.27247,-2.33737,-2.39631,
     8-2.45029,-2.49867,-2.56939,-2.64313,-2.77129,-2.92580,-3.05513/
      data cd2h2o/
     x-3.23728,-3.31415,-3.33588,-3.39544,-3.43947,-3.57455,-3.69955,
     x-3.77227,-3.76260,-3.70753,-3.70942,-3.73899,-3.82827,-3.93052,
     x-4.10437,-4.24931,-4.35000,-4.42069,-4.25644,-4.21454,-4.17061,
     x-4.11168,-4.16038,-4.16686,-4.19465,-4.23251,-4.27305,-4.21672,
     x-4.13963,-4.07622,-3.97332,-3.96263,-3.95541,-3.97392,-4.03776,
     x-4.07778,-4.01771,-3.87070,-3.70710,-3.59495,-3.62243,-3.69528,
     x-3.76171,-3.76582,-3.65793,-3.61555,-3.59708,-3.63113,-3.63691,
     8-3.57465,-3.55435,-3.47507,-3.49075,-3.53253,-3.57495,-3.68837,
     x-3.68628,-3.68771,-3.64979,-3.60831,-3.56633,-3.48250,-3.37856,
     x-3.22908,-3.14286,-3.11346,-3.13691,-3.26625,-3.44333,-3.64611,
     x-3.86925,-4.08285,-4.22794,-4.25115,-4.14282,-3.85944,-3.59027,
     x-3.43514,-3.31856,-3.24442,-3.22555,-3.18795,-3.20363,-3.30589,
     x-3.41248,-3.60718,-3.70563,-3.65431,-3.57332,-3.47347,-3.47521,
     x-3.53388,-3.72003,-3.97569,-4.31048,-4.87330,-5.39648,-6.27322,
     x-8.18185,-8.07588,-8.20933,-8.60643,-8.83713,-9.01727,-9.15690,
     6-9.41970,-9.51520,-9.63843,-9.87539,-9.94314,-10.0000/
c=h2o ====16340-17860
      data ce1h2o/
     x-10.0000,-9.99542,-9.97748,-9.94374,-9.93287,-9.90450,-9.85082,
     x-9.82140,-9.73549,-9.64536,-9.59412,-9.54635,-9.26735,-9.23243,
     x-9.05763,-8.93240,-8.74549,-8.52992,-8.25637,-8.13836,-7.66071,
     x-7.35897,-7.37375,-7.09925,-6.98326,-6.89298,-6.79545,-6.97172,
     x-6.67558,-6.37369,-6.21189,-5.94606,-5.84975,-5.83536,-5.82878,
     x-5.78456,-5.68334,-5.44809,-5.28421,-5.06970,-4.89514,-4.80192,
     x-4.73588,-4.78558,-4.78127,-4.73462,-4.54889,-4.33093,-4.18543,
     8-4.09190,-4.11204,-4.13402,-4.13401,-3.97210,-3.79621,-3.65860,
     x-3.55511,-3.57549,-3.57633,-3.53833,-3.46143,-3.34082,-3.23729,
     x-3.17300,-3.14437,-3.10547,-3.05061,-2.96941,-2.86694,-2.79500,
     x-2.75350,-2.75307,-2.77146,-2.79530,-2.76451,-2.68758,-2.63931,
     x-2.57797,-2.58894,-2.59717,-2.52817,-2.47282,-2.42360,-2.45382,
     x-2.56145,-2.61304,-2.59963,-2.52689,-2.46472,-2.46461,-2.45407,
     x-2.39432,-2.25523,-2.14408,-2.05525,-2.01888,-2.07413,-2.12889,
     x-2.25990,-2.39692,-2.48925,-2.54855,-2.53415,-2.54460,-2.50455,
     6-2.46921,-2.42259,-2.28066,-2.22625,-2.17393,-2.13289,-2.19687,
     x-2.21326,-2.23949,-2.27620,-2.26819,-2.29009,-2.29281,-2.25201,
     8-2.17355,-2.07947,-2.03121,-2.01967,-2.04954,-2.08143,-2.06833/
      data ce2h2o/
     x-2.05240,-2.05599,-2.06967,-2.12334,-2.21510,-2.29897,-2.40035,
     x-2.52428,-2.62702,-2.73003,-2.87671,-2.99894,-3.10548,-3.25316,
     x-3.32982,-3.39709,-3.53992,-3.63406,-3.74020,-3.92706,-3.96893,
     x-3.93910,-3.93559,-3.82934,-3.82006,-3.87551,-3.89939,-3.94509,
     x-3.95617,-3.96332,-3.96114,-3.99122,-4.01273,-4.01717,-4.02888,
     x-4.04697,-4.10112,-4.14864,-4.27169,-4.32135,-4.33175,-4.41165,
     x-4.36331,-4.39914,-4.42505,-4.40381,-4.48901,-4.44885,-4.38473,
     8-4.32458,-4.19760,-4.16511,-4.15683,-4.14102,-4.11365,-4.10673,
     x-4.13026,-4.13652,-4.19636,-4.19684,-4.14832,-4.05676,-3.96205,
     x-3.90165,-3.84404,-3.86524,-3.83773,-3.69609,-3.55481,-3.42043,
     x-3.33841,-3.37637,-3.44611,-3.49193,-3.52932,-3.44601,-3.36757,
     x-3.31227,-3.23777,-3.21254,-3.19842,-3.22310,-3.28352,-3.27914,
     x-3.23481,-3.12437,-3.04729,-3.06777,-3.09818,-3.19530,-3.24569,
     x-3.24974,-3.30729,-3.27728,-3.25317,-3.22055,-3.15996,-3.17334,
     x-3.17694,-3.12288,-3.04593,-2.99049,-2.98361,-3.06492,-3.19818,
     6-3.31628,-3.42190,-3.47775,-3.55095,-3.56669,-3.53409,-3.38883,
     x-3.17115,-3.00955,-2.89158,-2.83770,-2.86055,-2.86096,-2.83436,
     8-2.82886,-2.78602,-2.80289,-2.85454,-2.89629,-2.99573,-3.11206/
      data ce3h2o/
     x-3.27394,-3.47183,-3.64849,-3.79741,-3.91130,-4.08705,-4.24317,
     x-4.41275,-4.55729,-4.55082,-4.66958,-4.82149,-4.94204,-5.13772,
     x-5.22105,-5.20710,-5.18691,-5.09729,-5.03217,-4.96344,-4.97810,
     x-5.03506,-5.05380,-5.08007,-5.10835,-5.13285,-5.24491,-5.44530,
     x-5.65236,-5.80563,-5.75192,-5.58691,-5.38023,-5.31721,-5.30923,
     x-5.34087,-5.39044,-5.38089,-5.43438,-5.52124,-5.79590,-6.25048,
     x-6.78272,-8.29899,-8.50913,-8.77871,-8.91512,-9.13453,-9.37455,
     8-9.56578,-9.71290,-9.89385,-10.0000/
      end
c=======================================================================
      block data cpo3
c>    block data
c
c     c' for o3
      common /o3/  c11o3(  41),
     +             c21o3( 126),c22o3(  27),
     +             c31o3( 126),c32o3(   8),
     +             c41o3(  36),
     +             c51o3(  83)
c=o3  ====c' for    5 band models
c=o3  ====    0-  200
      data c11o3/
     1 -2.0427, -1.8966, -1.6263, -1.3896, -1.2170, -1.0996, -1.0214,
     2 -0.9673, -0.9249, -0.8896, -0.8612, -0.8417, -0.8360, -0.8483,
     3 -0.8785, -0.9273, -0.9932, -1.0720, -1.1639, -1.2662, -1.3771,
     4 -1.4976, -1.6274, -1.7712, -1.9289, -2.1027, -2.2948, -2.4987,
     5 -2.7321, -2.9992, -3.3045, -3.6994, -4.1022, -4.6467, -5.1328,
     6 -5.6481, -6.1634, -6.6787, -7.1940, -7.7093, -8.0000/
c=o3  ====  515- 1275
      data c21o3/
     1 -7.9274, -7.6418, -7.3562, -7.0706, -6.7850, -6.4994, -6.2138,
     2 -5.9282, -5.6426, -5.3570, -5.0714, -4.7858, -4.5002, -4.2146,
     3 -3.9290, -3.6213, -3.3407, -3.0722, -2.8226, -2.5914, -2.3778,
     4 -2.1823, -2.0057, -1.8456, -1.6991, -1.5659, -1.4436, -1.3323,
     5 -1.2319, -1.1407, -1.0550, -0.9733, -0.9033, -0.8584, -0.8527,
     6 -0.8838, -0.9219, -0.9360, -0.9025, -0.8402, -0.7913, -0.7794,
     7 -0.8123, -0.8750, -0.9484, -1.0206, -1.0864, -1.1520, -1.2202,
     8 -1.2928, -1.3745, -1.4641, -1.5611, -1.6669, -1.7816, -1.9051,
     9 -2.0383, -2.1796, -2.3312, -2.4906, -2.6569, -2.8354, -3.0179,
     $ -3.2121, -3.4106, -3.6208, -3.8332, -4.0584, -4.2854, -4.4979,
     1 -4.7175, -4.9109, -5.1246, -5.3344, -5.5442, -5.7540, -5.9638,
     2 -6.1736, -6.3834, -6.5932, -6.8030, -7.0128, -6.9011, -6.2590,
     3 -5.8119, -5.1603, -4.3327, -3.6849, -3.1253, -2.6304, -2.1903,
     4 -1.8019, -1.4585, -1.1533, -0.8770, -0.6166, -0.3630, -0.1102,
     5  0.1336,  0.3525,  0.5326,  0.6678,  0.7510,  0.7752,  0.7826,
     6  0.7874,  0.8006,  0.8241,  0.7614,  0.5662,  0.1949, -0.2770,
     7 -0.6199, -0.8347, -0.9586, -1.0168, -1.0501, -1.0816, -1.0980,
     8 -1.0833, -1.0424, -0.9972, -0.9724, -0.9855, -1.0365, -1.1187/
      data c22o3/
     1 -1.2150, -1.3142, -1.4103, -1.4998, -1.5933, -1.6938, -1.8061,
     2 -1.9332, -2.0737, -2.2279, -2.3966, -2.5787, -2.7755, -2.9855,
     3 -3.2090, -3.4465, -3.6967, -3.9633, -4.2461, -4.5502, -4.8912,
     4 -5.2845, -5.7654, -6.4194, -6.9288, -7.4382, -7.9476/
c=o3  ==== 1630- 2295
      data c31o3/
     1 -8.0000, -7.5432, -6.9273, -6.3115, -5.5431, -4.9563, -4.4640,
     2 -4.0371, -3.6533, -3.3069, -2.9877, -2.7042, -2.4507, -2.2355,
     3 -2.0651, -1.9477, -1.8705, -1.8422, -1.8235, -1.7782, -1.7367,
     4 -1.7012, -1.7208, -1.8353, -2.0331, -2.3077, -2.5996, -2.7517,
     5 -2.7263, -2.6671, -2.6415, -2.6449, -2.6613, -2.6589, -2.6083,
     6 -2.5250, -2.4529, -2.4157, -2.4298, -2.4906, -2.5823, -2.6873,
     7 -2.7808, -2.8612, -2.9303, -3.0022, -3.0873, -3.1844, -3.2929,
     8 -3.4158, -3.5361, -3.6710, -3.8062, -3.9520, -4.1140, -4.2635,
     9 -4.4395, -4.6138, -4.8372, -5.0837, -5.3302, -5.3665, -5.4358,
     $ -5.0651, -4.8416, -4.5293, -4.2547, -4.0039, -3.7818, -3.5850,
     1 -3.4091, -3.2509, -3.0934, -2.9485, -2.8055, -2.6705, -2.5482,
     2 -2.4362, -2.3380, -2.2486, -2.1645, -2.0834, -2.0035, -1.9081,
     3 -1.7681, -1.5768, -1.3615, -1.1463, -0.9482, -0.7800, -0.6336,
     4 -0.5092, -0.4105, -0.3495, -0.3274, -0.3133, -0.3023, -0.2859,
     5 -0.3055, -0.4374, -0.6972, -1.1064, -1.4904, -1.9687, -2.4498,
     7 -2.5971, -2.5220, -2.4301, -2.3467, -2.2901, -2.2746, -2.3021,
     7 -2.3635, -2.4420, -2.5088, -2.5485, -2.5617, -2.5656, -2.5771,
     8 -2.6134, -2.6822, -2.7885, -2.9379, -3.1200, -3.3260, -3.5464/
      data c32o3/
     1 -3.7736, -4.0311, -4.3651, -4.7794, -5.5152, -6.1240, -7.2193,
     2 -8.0000/
c=o3  ==== 2670- 2845
      data c41o3/
     1 -7.9721, -7.6118, -7.2515, -6.8913, -6.5310, -6.1707, -5.8105,
     2 -5.4502, -5.0899, -4.7297, -4.3694, -3.9462, -3.6022, -3.2886,
     3 -3.0234, -2.7863, -2.5797, -2.4073, -2.2760, -2.1894, -2.1359,
     4 -2.1160, -2.0808, -2.0151, -1.9666, -1.9409, -1.9868, -2.1450,
     5 -2.3965, -2.8042, -3.5500, -4.8275, -5.6378, -6.4482, -7.2585,
     6 -8.0000/
c=o3  ==== 2850- 3260
      data c51o3/
     1 -8.0000, -7.6278, -7.2556, -6.8834, -6.5111, -6.1389, -5.7667,
     2 -5.3945, -5.0223, -4.6501, -4.2779, -3.9056, -3.5334, -3.3828,
     3 -3.2452, -3.1411, -3.0403, -2.9428, -2.8436, -2.7573, -2.6853,
     4 -2.6040, -2.5218, -2.4121, -2.3547, -2.1970, -2.0668, -1.9121,
     5 -1.7617, -1.6153, -1.4688, -1.4022, -1.3447, -1.2669, -1.1902,
     6 -1.1805, -1.1707, -1.1609, -1.1609, -1.1805, -1.1999, -1.4214,
     7 -1.6348, -1.7519, -1.9730, -2.2078, -2.4608, -2.5337, -2.5923,
     8 -2.6616, -2.6384, -2.6271, -2.6154, -2.5570, -2.4983, -2.4480,
     9 -2.3890, -2.3663, -2.3431, -2.3314, -2.3200, -2.3200, -2.3314,
     $ -2.3431, -2.3547, -2.3777, -2.4004, -2.5218, -2.6499, -2.7694,
     1 -2.9057, -3.0286, -3.1543, -3.3696, -3.6053, -4.1977, -4.7811,
     2 -5.2933, -5.7554, -6.4542, -7.0239, -7.5937, -8.0000/
      end
c=======================================================================
      block data cpumix
c>    block data
c
c     c' for uniformly mixed gases (co2, co, ch4, n2o, o2)
      common /ufmix1/
     +        c11co2( 83),
     +        c21co2(121),
     +        c31co2(126),c32co2( 85),
     +        c41co2(126),c42co2( 12),
     +        c51co2( 62),
     +        c61co2(126),c62co2( 45),
     +        c71co2(126),c72co2( 99),
     +        c81co2(126),c82co2( 82)
      common /ufmix2/
     +        c11co(  36),
     +        c21co( 126),c22co(  11),
     +        c11ch4(126),c12ch4(126),c13ch4(126),c14ch4(115),
     +        c11n2o( 25),
     +        c21n2o(126),c22n2o(126),c23n2o(112),
     +        c31n2o(126),c32n2o(126),c33n2o( 63),
     +        c11o2(  54),
     +        c21o2( 126),c22o2( 126),c23o2(  76)
c=co2 ====c' for    8 band models
c=co2 ====  425-  835
      data c11co2/
     1 -9.8495, -9.6484, -9.4472, -9.2461, -9.0449, -8.9544, -8.6127,
     2 -8.4076, -8.2710, -8.0391, -7.9485, -7.9638, -7.7849, -7.6278,
     3 -7.1418, -6.7823, -6.3826, -6.0323, -5.7501, -5.5249, -5.3304,
     4 -5.0105, -4.7703, -4.5714, -4.3919, -4.2974, -4.1370, -3.8761,
     5 -3.5936, -3.2852, -3.0016, -2.7303, -2.4868, -2.2741, -2.0936,
     6 -1.9424, -1.8092, -1.6843, -1.5372, -1.3803, -1.2043, -0.9930,
     7 -0.7724, -0.5509, -0.3465, -0.1785, -0.0470,  0.0449,  0.1114,
     8  0.1367,  0.0910,  0.0066, -0.1269, -0.2994, -0.4934, -0.7101,
     9 -0.9087, -1.1004, -1.2694, -1.4064, -1.5622, -1.6810, -1.7841,
     $ -1.8973, -2.0274, -2.2079, -2.4264, -2.6763, -2.9312, -3.1896,
     1 -3.4262, -3.5979, -3.7051, -3.7372, -3.7983, -3.9154, -4.0520,
     2 -4.2567, -4.4661, -4.6670, -4.9226, -5.2203, -5.5597/
c=co2 ====  840- 1440
      data c21co2/
     1 -5.6403, -5.7039, -5.7674, -5.8310, -5.8948, -5.9503, -6.0217,
     2 -6.0392, -5.9855, -5.8620, -5.6834, -5.5083, -5.3473, -5.2028,
     3 -5.0799, -4.9628, -4.8379, -4.7032, -4.5584, -4.4213, -4.3198,
     4 -4.2786, -4.2843, -4.3099, -4.3210, -4.2769, -4.2229, -4.2179,
     5 -4.2950, -4.4789, -4.7550, -5.0902, -5.4329, -5.6689, -5.6608,
     6 -5.4582, -5.1969, -4.9419, -4.7106, -4.5084, -4.3409, -4.2211,
     7 -4.1563, -4.1259, -4.1108, -4.0803, -4.0211, -3.9824, -4.0053,
     8 -4.1221, -4.3504, -4.6741, -5.0826, -5.5857, -6.2301, -7.0829,
     9 -8.1344, -8.8601, -9.0457, -9.1231, -9.0728, -9.1413, -9.1221,
     $ -9.1882, -9.2752, -9.2237, -9.3604, -9.3058, -9.5455, -9.5567,
     1 -9.3754, -8.7756, -8.0904, -7.4827, -6.9585, -6.5095, -6.1194,
     2 -5.7824, -5.4910, -5.2532, -5.0840, -4.9920, -4.9577, -4.9638,
     3 -4.9741, -4.9555, -4.9466, -4.9774, -5.0719, -5.2558, -5.5213,
     4 -5.8633, -6.2877, -6.7878, -7.2602, -7.2940, -6.8524, -6.3372,
     5 -5.8854, -5.5065, -5.2011, -4.9776, -4.8471, -4.7885, -4.7783,
     6 -4.7815, -4.7538, -4.7228, -4.7259, -4.7860, -4.9231, -5.1270,
     7 -5.3831, -5.6849, -6.0351, -6.4437, -6.9160, -7.4815, -8.1437,
     8 -8.9449, -9.8564/
c=co2 ==== 1805- 2855
      data c31co2/
     1 -9.8903, -9.4365, -8.9826, -8.5288, -8.1184, -7.6555, -7.1673,
     2 -6.7226, -6.3423, -6.0410, -5.8154, -5.6519, -5.5186, -5.3859,
     3 -5.2279, -5.0238, -4.7865, -4.5343, -4.2846, -4.0560, -3.8717,
     4 -3.7624, -3.7231, -3.7335, -3.8312, -3.9854, -4.1930, -4.4895,
     5 -4.7394, -4.8892, -4.9499, -4.9392, -4.9787, -5.1129, -5.3330,
     6 -5.6093, -5.8862, -6.0581, -6.0274, -5.8356, -5.5989, -5.3738,
     7 -5.1661, -4.9472, -4.7020, -4.4354, -4.1439, -3.8561, -3.5944,
     8 -3.3694, -3.2100, -3.1041, -3.0411, -3.0471, -3.1077, -3.2305,
     9 -3.4274, -3.6115, -3.7542, -3.8666, -3.9338, -4.0079, -4.0962,
     $ -4.2142, -4.1433, -4.2870, -4.4796, -4.6618, -4.8204, -4.9499,
     1 -4.9862, -5.0171, -5.0282, -5.0580, -5.0398, -4.9465, -4.7816,
     2 -4.5538, -4.2975, -4.0286, -3.7528, -3.4715, -3.1899, -2.9041,
     3 -2.6127, -2.3212, -2.0435, -1.7894, -1.5531, -1.3382, -1.1515,
     4 -0.9990, -0.8833, -0.8006, -0.7227, -0.6288, -0.4977, -0.3249,
     5 -0.1349,  0.0576,  0.2487,  0.4386,  0.6260,  0.8081,  0.9681,
     6  1.0859,  1.1522,  1.1861,  1.2039,  1.2255,  1.2587,  1.2473,
     7  1.1457,  0.9139,  0.5250,  0.0173, -0.5796, -1.3944, -2.3841,
     8 -2.7244, -2.9264, -3.0689, -3.2120, -3.3353, -3.4510, -3.5566/
      data c32co2/
     1 -3.6518, -3.7460, -3.8500, -3.9680, -4.0981, -4.2259, -4.3369,
     2 -4.4329, -4.5305, -4.6264, -4.7438, -4.8842, -5.0248, -5.1448,
     3 -5.2371, -5.2781, -5.3299, -5.3766, -5.4233, -5.4699, -5.5166,
     4 -5.5633, -5.6646, -5.7593, -5.8461, -5.9229, -5.9818, -6.0065,
     5 -5.9747, -5.8741, -5.7230, -5.5620, -5.4389, -5.3788, -5.3679,
     6 -5.3827, -5.3837, -5.3460, -5.3186, -5.3394, -5.4320, -5.6095,
     7 -5.8446, -6.0992, -6.3399, -6.5499, -6.7434, -6.9359, -7.1219,
     8 -7.2818, -7.3984, -7.4881, -7.5452, -7.5994, -7.6445, -7.6734,
     9 -7.6422, -7.5057, -7.2650, -6.9975, -6.7749, -6.6398, -6.5875,
     $ -6.5912, -6.6192, -6.6155, -6.5866, -6.5851, -6.6382, -6.7736,
     1 -7.0009, -7.2896, -7.6327, -7.9767, -8.2633, -8.4744, -8.5455,
     2 -8.5813, -8.6025, -8.6459, -8.8948, -9.1436, -9.3925, -9.6413,
     3 -9.8902/
c=co2 ==== 3070- 3755
      data c41co2/
     1 -9.8006, -9.5049, -9.1947, -8.7254, -8.4410, -8.1781, -8.0182,
     2 -7.9381, -7.8793, -7.7636, -7.5549, -7.2962, -7.0244, -6.7556,
     3 -6.4888, -6.2443, -6.0422, -5.9088, -5.8590, -5.8890, -5.9850,
     4 -6.0949, -6.1164, -6.0207, -5.8592, -5.7110, -5.6328, -5.6369,
     5 -5.7274, -5.9069, -6.1720, -6.5203, -6.9586, -7.4776, -8.0607,
     6 -8.5514, -8.7011, -8.4232, -7.9274, -7.6159, -7.3836, -7.1969,
     7 -7.0523, -6.7685, -6.4022, -6.0354, -5.7125, -5.4659, -5.3088,
     8 -5.2546, -5.2991, -5.3819, -5.4615, -5.4117, -5.2107, -5.0103,
     9 -4.8232, -4.7071, -4.6850, -4.7385, -4.8797, -5.1024, -5.4015,
     $ -5.7758, -6.2225, -6.6681, -6.9127, -6.8919, -6.6972, -6.5012,
     1 -6.3123, -6.1091, -5.8641, -5.5889, -5.3057, -5.0340, -4.7826,
     2 -4.5476, -4.3277, -4.1224, -3.9333, -3.7675, -3.6324, -3.5163,
     3 -3.4043, -3.2744, -3.1180, -2.9557, -2.8254, -2.7359, -2.6721,
     4 -2.6084, -2.5105, -2.3772, -2.2317, -2.0866, -1.9521, -1.8292,
     5 -1.7110, -1.5992, -1.4873, -1.3646, -1.2260, -1.0721, -0.9281,
     6 -0.8379, -0.8123, -0.8261, -0.8483, -0.8305, -0.7792, -0.7626,
     7 -0.8228, -0.9908, -1.2503, -1.5347, -1.7934, -1.9837, -2.0715,
     8 -2.0375, -1.8975, -1.6906, -1.4497, -1.2048, -0.9831, -0.8125/
      data c42co2/
     1 -0.7157, -0.6707, -0.6532, -0.6297, -0.5706, -0.5263, -0.5489,
     2 -0.6857, -0.9793, -1.3962, -1.8673, -2.3655/
c=co2 ==== 3760- 4065
      data c51co2/
     1 -3.5436, -4.0424, -4.4084, -4.6848, -4.8663, -4.9516, -4.9790,
     2 -4.9923, -5.0207, -5.0596, -5.0958, -5.1018, -5.0636, -5.0354,
     3 -5.0546, -5.1454, -5.3274, -5.5863, -5.8889, -6.1770, -6.3555,
     4 -6.4096, -6.4371, -6.5112, -6.6680, -6.9183, -7.2418, -7.5827,
     5 -7.8704, -8.0551, -8.1705, -8.2500, -8.3554, -8.3961, -8.4354,
     6 -8.3920, -8.2785, -8.0499, -7.7437, -7.4130, -7.1153, -6.8861,
     7 -6.7422, -6.6786, -6.6774, -6.7053, -6.7090, -6.6794, -6.6055,
     8 -6.4827, -6.3454, -6.2401, -6.1992, -6.2676, -6.4833, -6.8490,
     9 -7.4310, -8.4606, -9.7364, -9.8771, -9.8840, -9.9559/
c=co2 ==== 4530- 5380
      data c61co2/
     1 -9.9489, -9.6003, -9.0910, -8.5793, -8.2059, -7.9099, -7.7157,
     2 -7.6145, -7.5964, -7.5942, -7.5256, -7.3190, -6.9986, -6.6884,
     3 -6.4102, -6.1769, -5.9882, -5.8421, -5.7499, -5.7201, -5.7189,
     4 -5.7108, -5.6669, -5.5955, -5.5686, -5.6287, -5.8000, -6.0855,
     5 -6.4398, -6.7793, -6.9427, -6.9205, -6.8363, -6.7059, -6.5272,
     6 -6.2903, -6.0085, -5.7224, -5.4722, -5.2772, -5.1501, -5.0768,
     7 -5.0219, -4.9579, -4.8555, -4.7213, -4.5868, -4.4594, -4.3387,
     8 -4.2219, -4.1002, -3.9812, -3.8876, -3.8207, -3.7673, -3.7120,
     9 -3.6223, -3.4912, -3.3444, -3.1983, -3.0732, -3.0262, -3.0078,
     $ -3.0123, -3.0213, -2.9957, -2.9261, -2.8770, -2.8887, -2.9853,
     1 -3.1609, -3.3643, -3.5468, -3.6759, -3.7488, -3.7704, -3.7535,
     2 -3.7113, -3.6368, -3.5277, -3.3812, -3.2020, -3.0043, -2.8020,
     3 -2.6122, -2.4524, -2.3405, -2.2838, -2.2521, -2.2319, -2.1960,
     4 -2.1562, -2.1732, -2.2913, -2.5476, -2.9382, -3.3966, -3.8525,
     5 -4.2541, -4.5682, -4.7376, -4.7524, -4.6733, -4.5170, -4.3123,
     6 -4.0891, -3.8565, -3.6218, -3.3909, -3.1785, -3.0100, -2.9105,
     7 -2.8588, -2.8286, -2.7912, -2.7207, -2.6729, -2.6858, -2.7745,
     8 -2.9414, -3.1445, -3.3617, -3.5954, -3.8508, -4.1739, -4.5122/
      data c62co2/
     1 -4.8985, -5.3426, -5.8737, -6.4734, -7.0715, -7.5042, -7.6034,
     2 -7.5143, -7.4358, -7.4089, -7.3969, -7.3813, -7.3018, -7.1858,
     3 -7.0633, -6.9962, -6.9905, -7.0319, -7.1331, -7.2054, -7.1856,
     4 -7.0561, -6.7966, -6.4771, -6.1996, -5.9593, -5.7560, -5.5370,
     5 -5.2836, -5.0966, -4.9583, -4.9126, -5.0022, -5.1370, -5.3465,
     6 -5.6279, -5.9364, -6.3695, -6.9602, -7.6823, -8.2701, -8.6427,
     7 -9.0728, -9.5366, -9.9588/
c=co2 ==== 5905- 7025
      data c71co2/
     1 -9.9871, -9.6762, -9.3358, -8.9954, -8.5140, -8.2066, -7.9742,
     2 -7.8579, -7.8073, -7.7894, -7.7466, -7.7009, -7.6393, -7.5889,
     3 -7.5697, -7.5200, -7.3908, -7.1796, -6.9610, -6.7869, -6.6972,
     4 -6.6735, -6.6775, -6.6495, -6.5292, -6.3435, -6.1371, -5.9268,
     5 -5.7254, -5.5433, -5.4023, -5.3292, -5.3090, -5.3171, -5.3193,
     6 -5.2705, -5.2085, -5.1835, -5.2186, -5.3367, -5.5305, -5.7725,
     7 -6.0228, -6.2150, -6.2857, -6.2634, -6.2250, -6.2234, -6.2616,
     8 -6.2931, -6.2508, -6.0971, -5.8679, -5.6195, -5.3906, -5.1944,
     9 -5.0216, -4.8566, -4.6919, -4.5255, -4.3785, -4.2879, -4.2583,
     $ -4.2636, -4.2768, -4.2484, -4.1853, -4.1586, -4.2079, -4.3651,
     1 -4.6407, -5.0141, -5.4719, -6.0015, -6.5173, -6.7829, -6.6805,
     2 -6.4180, -6.0793, -5.7404, -5.4204, -5.1265, -4.8634, -4.6378,
     3 -4.4559, -4.3360, -4.2752, -4.2461, -4.2257, -4.1768, -4.1068,
     4 -4.0743, -4.1193, -4.2732, -4.5464, -4.9256, -5.4090, -6.0184,
     5 -6.7985, -7.7078, -8.3457, -8.5160, -8.6106, -8.8175, -9.1922,
     6 -9.6775, -9.7423, -9.1980, -8.4120, -7.7499, -7.1685, -6.6817,
     7 -6.2701, -5.9301, -5.6567, -5.4521, -5.3289, -5.2776, -5.2630,
     8 -5.2547, -5.2083, -5.1296, -5.0823, -5.0914, -5.1806, -5.3503/
      data c72co2/
     1 -5.5600, -5.7877, -5.9936, -6.1720, -6.3801, -6.6371, -6.9964,
     2 -7.5010, -8.1628, -8.9951, -9.8931,-10.0000,-10.0000,-10.0000,
     3-10.0000,-10.0000,-10.0000,-10.0000,-10.0000, -9.4967, -8.9198,
     4 -8.5081, -8.1255, -7.8286, -7.5478, -7.1487, -6.7853, -6.5537,
     5 -6.3931, -6.4107, -6.5087, -6.6607, -6.9026, -7.2104, -7.4445,
     6 -7.6303, -7.6346, -7.4521, -7.2211, -7.0043, -6.7903, -6.5666,
     7 -6.3499, -6.1534, -5.9988, -5.9033, -5.8760, -5.8693, -5.8277,
     8 -5.7282, -5.6262, -5.5865, -5.6665, -5.9228, -6.3399, -7.0180,
     9 -8.4230,-10.0000,-10.0000,-10.0000, -9.4090, -8.8272, -8.3057,
     $ -7.8885, -7.5044, -7.1560, -6.8292, -6.5250, -6.2461, -5.9904,
     1 -5.7533, -5.5295, -5.3135, -5.1058, -4.9152, -4.7463, -4.6054,
     2 -4.4937, -4.3928, -4.2838, -4.1626, -4.0387, -3.9295, -3.8612,
     3 -3.8501, -3.8647, -3.8625, -3.8099, -3.7351, -3.7179, -3.8549,
     4 -4.2312, -4.7632, -5.4270, -6.4200, -8.1414, -9.0451, -9.5326,
     5 -9.8301/
c=co2 ==== 7395- 7785, 8030- 8335, 9340- 9670
      data c81co2/
     1 -9.9472, -9.8274, -8.9797, -8.4298, -7.8906, -7.4477, -7.0750,
     2 -6.7698, -6.5338, -6.3739, -6.2980, -6.2739, -6.2726, -6.2555,
     3 -6.1989, -6.1529, -6.1654, -6.2584, -6.4610, -6.7805, -7.2235,
     4 -7.8191, -8.5850, -9.6084,-10.0000,-10.0000, -9.9199, -9.1093,
     5 -8.4490, -7.9158, -7.4364, -7.0400, -6.6958, -6.4131, -6.1855,
     6 -6.0158, -5.9123, -5.8700, -5.8530, -5.8340, -5.7866, -5.7224,
     7 -5.7048, -5.7653, -5.9281, -6.2234, -6.6646, -7.2957, -8.2799,
     8 -9.9457,-10.0000,-10.0000,-10.0000,-10.0000,-10.0000,-10.0000,
     9-10.0000, -9.2766, -8.6201, -8.0764, -7.6374, -7.2752, -6.9802,
     $ -6.7578, -6.6163, -6.5546, -6.5392, -6.5397, -6.5132, -6.4531,
     1 -6.4161, -6.4482, -6.5683, -6.8086, -7.1762, -7.6772, -8.3574,
     2 -9.2188,-10.0000,-10.0000, -9.5350, -8.9686, -8.5329, -8.1920,
     3 -7.9237, -7.6797, -7.5039, -7.3667, -7.2856, -7.1969, -7.0745,
     4 -6.9330, -6.7926, -6.6818, -6.6144, -6.5643, -6.5183, -6.4910,
     5 -6.4481, -6.3567, -6.2177, -6.0566, -5.9096, -5.7975, -5.7093,
     6 -5.6165, -5.5127, -5.4124, -5.3426, -5.3061, -5.2648, -5.1864,
     7 -5.0876, -5.0226, -5.0397, -5.1905, -5.4858, -5.9101, -6.4851,
     8 -6.7862, -6.5368, -6.2765, -6.0398, -5.8260, -5.6397, -5.4799/
      data c82co2/
     1 -5.3438, -5.2274, -5.1411, -5.0917, -5.0473, -4.9820, -4.9114,
     2 -4.8634, -4.8844, -5.0363, -5.3351, -5.7802, -6.5387, -8.3735,
     3 -9.9977, -9.7506, -9.1887, -8.6824, -8.3488, -8.0533, -7.8664,
     4 -7.7346, -7.6934, -7.6674, -7.6268, -7.5451, -7.4677, -7.4520,
     5 -7.5471, -7.7913, -8.1917, -8.8835,-10.0000,-10.0000,-10.0000,
     6-10.0000,-10.0000, -9.7234, -8.9969, -8.5776, -8.1737, -7.8640,
     7 -7.5729, -7.3186, -7.0973, -6.9131, -6.7782, -6.7073, -6.6768,
     8 -6.6303, -6.5406, -6.4509, -6.3950, -6.4345, -6.6270, -6.9507,
     9 -7.5028, -8.6428,-10.0000,-10.0000,-10.0000,-10.0000, -9.5303,
     $ -8.9369, -8.4952, -8.1465, -7.8567, -7.6177, -7.4249, -7.2876,
     1 -7.2206, -7.1948, -7.1552, -7.0773, -6.9884, -6.9402, -6.9839,
     2 -7.1773, -7.4999, -8.0643, -9.1480,-10.0000/
c=co  ====c' for    2 band model
c=co  ====    0-  175
      data c11co/
     1 -4.6868, -4.4127, -3.9461, -3.5662, -3.2921, -3.1081, -2.9807,
     2 -2.8977, -2.8580, -2.8461, -2.8587, -2.9029, -2.9646, -3.0480,
     3 -3.1589, -3.2836, -3.4277, -3.5993, -3.7963, -4.0164, -4.2799,
     4 -4.5750, -4.8722, -5.2741, -5.6819, -6.0799, -6.4828, -6.8857,
     5 -7.2886, -7.6915, -8.0944, -8.4973, -8.9002, -9.3031, -9.7060,
     6-10.0000/
c=co  ==== 1940- 2285, 4040- 4370
      data c21co/
     1-10.0000, -9.5312, -8.8977, -8.2642, -7.5767, -6.9972, -6.5408,
     2 -6.1219, -5.6734, -5.2658, -4.8686, -4.4918, -4.1423, -3.8133,
     3 -3.4998, -3.2104, -2.9443, -2.7138, -2.5084, -2.3109, -2.1245,
     4 -1.9387, -1.7608, -1.6054, -1.4733, -1.3594, -1.2540, -1.1480,
     5 -1.0341, -0.9216, -0.8189, -0.7235, -0.6362, -0.5549, -0.4856,
     6 -0.4401, -0.4268, -0.4657, -0.5571, -0.6573, -0.7404, -0.7523,
     7 -0.6601, -0.5380, -0.4211, -0.3367, -0.3167, -0.3320, -0.3753,
     8 -0.4489, -0.5438, -0.6653, -0.8052, -0.9690, -1.1506, -1.3522,
     9 -1.5791, -1.8248, -2.1073, -2.4246, -2.7877, -3.2152, -3.7089,
     $ -4.2832, -4.9518, -5.7251, -6.5319, -7.4879, -9.0885,-10.0000,
     1-10.0000, -9.5611, -9.0875, -8.6139, -7.9747, -7.5250, -7.1931,
     2 -6.8596, -6.5741, -6.2922, -6.0098, -5.7669, -5.5345, -5.3229,
     3 -5.1461, -4.9882, -4.8493, -4.7239, -4.6064, -4.5009, -4.4071,
     4 -4.3322, -4.2661, -4.1926, -4.0956, -3.9611, -3.7984, -3.6314,
     5 -3.4757, -3.3408, -3.2237, -3.1219, -3.0325, -2.9494, -2.8765,
     6 -2.8117, -2.7531, -2.7023, -2.6635, -2.6440, -2.6550, -2.7225,
     7 -2.8161, -2.9015, -2.9241, -2.8228, -2.6726, -2.5320, -2.4291,
     8 -2.3772, -2.3732, -2.3995, -2.4574, -2.5486, -2.6664, -2.8209/
      data c22co/
     1 -3.0129, -3.2516, -3.5482, -3.9165, -4.3714, -4.9326, -5.6394,
     2 -6.5163, -7.6063, -9.3575,-10.0000/
c=ch4 ====c' for    1 band model
c=ch4 ==== 1065- 1775, 2345- 3230, 4110- 4690, 5865- 6135
      data c11ch4/
     1-10.0000, -9.4577, -8.8866, -8.2246, -7.7940, -7.1734, -6.7965,
     2 -6.5695, -6.1929, -5.9169, -5.7452, -5.4731, -5.3001, -5.1872,
     3 -4.9672, -4.8474, -4.6939, -4.5210, -4.3377, -4.1346, -3.9322,
     4 -3.7339, -3.5077, -3.2719, -3.0296, -2.8124, -2.6199, -2.4479,
     5 -2.2502, -2.0541, -1.8800, -1.7092, -1.5791, -1.4379, -1.2992,
     6 -1.1735, -1.0510, -0.9646, -0.8779, -0.8002, -0.7574, -0.7356,
     7 -0.7478, -0.7512, -0.6906, -0.5594, -0.4417, -0.4019, -0.5027,
     8 -0.7628, -0.9625, -1.0431, -1.0068, -0.8781, -0.7559, -0.6628,
     9 -0.6128, -0.6118, -0.6575, -0.7620, -0.9217, -1.1264, -1.3660,
     $ -1.6352, -1.9264, -2.2266, -2.5123, -2.7472, -2.8820, -2.9129,
     1 -2.9145, -2.8854, -2.8508, -2.8512, -2.8202, -2.8023, -2.8004,
     2 -2.7800, -2.8175, -2.8413, -2.8943, -2.9876, -3.0688, -3.2424,
     3 -3.4064, -3.5759, -3.7630, -3.8925, -4.0774, -4.3243, -4.5964,
     4 -3.8654, -3.0974, -2.5967, -2.2482, -2.1016, -2.1488, -2.3261,
     5 -2.6448, -3.0446, -3.3958, -3.6510, -3.7049, -3.7240, -3.5992,
     6 -3.4937, -3.3676, -3.2230, -3.1630, -3.0691, -3.0776, -3.0872,
     7 -3.0974, -3.1223, -3.1285, -3.1212, -3.1333, -3.1674, -3.1668,
     8 -3.2433, -3.2398, -3.3135, -3.3975, -3.4427, -3.6434, -3.7528/
      data c12ch4/
     1 -3.9466, -4.1940, -4.3362, -4.5539, -4.7410, -4.9155, -5.1345,
     2 -5.3908, -5.5592, -5.8270, -6.0289, -6.2365, -6.6730, -7.0538,
     3 -7.6216, -8.5697, -9.8483,-10.0000, -9.3577, -8.5950, -7.8323,
     4 -7.0696, -6.3069, -5.5442, -5.1501, -4.8853, -4.6900, -4.5262,
     5 -4.3957, -4.2823, -4.2736, -4.2054, -4.1168, -3.9986, -3.8712,
     6 -3.8692, -3.8777, -3.8965, -3.9092, -3.8788, -3.7661, -3.6900,
     7 -3.6239, -3.5597, -3.5193, -3.4906, -3.4415, -3.3730, -3.3579,
     8 -3.3427, -3.3208, -3.3048, -3.3136, -3.2904, -3.2545, -3.2241,
     9 -3.1453, -3.0187, -2.9427, -2.8630, -2.8146, -2.8604, -2.8922,
     $ -2.9650, -2.9959, -2.8920, -2.7989, -2.7028, -2.6506, -2.7285,
     1 -2.8420, -2.9304, -2.9622, -2.8726, -2.7566, -2.6745, -2.6337,
     2 -2.6533, -2.6800, -2.7098, -2.7479, -2.6859, -2.6216, -2.5701,
     3 -2.4683, -2.4426, -2.4463, -2.4194, -2.4578, -2.4894, -2.4639,
     4 -2.4825, -2.4998, -2.4381, -2.4123, -2.3654, -2.2698, -2.2387,
     5 -2.2364, -2.2029, -2.1780, -2.1433, -2.0355, -1.9458, -1.8723,
     6 -1.7936, -1.7639, -1.7782, -1.8022, -1.8115, -1.7818, -1.6986,
     7 -1.6169, -1.5975, -1.6545, -1.7742, -1.8937, -1.9544, -1.8942,
     8 -1.7761, -1.6392, -1.5236, -1.4551, -1.4221, -1.4245, -1.4174/
      data c13ch4/
     1 -1.4177, -1.3776, -1.3349, -1.2909, -1.2470, -1.2162, -1.1850,
     2 -1.1677, -1.1449, -1.1229, -1.1031, -1.0795, -1.0687, -1.0692,
     3 -1.0904, -1.1166, -1.1511, -1.1951, -1.2321, -1.2831, -1.2716,
     4 -1.1902, -0.9715, -0.6654, -0.4103, -0.3011, -0.5049, -0.8659,
     5 -1.1777, -1.3847, -1.4359, -1.3908, -1.2992, -1.1923, -1.0951,
     6 -1.0213, -0.9578, -0.9299, -0.9207, -0.9292, -0.9725, -1.0126,
     7 -1.0750, -1.1149, -1.1636, -1.2059, -1.2638, -1.3327, -1.4079,
     8 -1.4983, -1.5711, -1.6872, -1.7870, -1.9266, -2.0774, -2.2119,
     9 -2.3875, -2.5155, -2.6822, -2.8372, -3.0032, -3.2413, -3.5058,
     $ -3.9508, -4.5133, -5.3536, -8.0815, -8.9081, -9.8155,-10.0000,
     1 -7.4757, -5.1602, -4.2454, -3.7640, -3.3256, -3.0103, -2.7726,
     2 -2.5510, -2.3849, -2.2318, -2.1080, -2.0086, -1.9290, -1.8902,
     3 -1.8750, -1.8700, -1.8476, -1.7390, -1.5724, -1.4284, -1.3425,
     4 -1.3791, -1.5132, -1.6508, -1.7283, -1.6684, -1.5432, -1.4447,
     5 -1.3773, -1.3490, -1.3642, -1.4016, -1.4713, -1.5836, -1.6984,
     6 -1.8085, -1.8486, -1.7464, -1.6338, -1.5555, -1.5552, -1.6935,
     7 -1.8165, -1.8417, -1.7697, -1.6346, -1.5589, -1.5466, -1.5604,
     8 -1.6307, -1.6867, -1.7593, -1.8051, -1.8167, -1.8518, -1.8559/
      data c14ch4/
     1 -1.8547, -1.8907, -1.8851, -1.8933, -1.9081, -1.9025, -1.9451,
     2 -1.9924, -2.0321, -2.0816, -2.1026, -2.1137, -2.1351, -2.1629,
     3 -2.1876, -2.2340, -2.2960, -2.3747, -2.4970, -2.6244, -2.7641,
     4 -2.8912, -3.0328, -3.1944, -3.3877, -3.4566, -3.1662, -2.7253,
     5 -2.3992, -2.2214, -2.2022, -2.3978, -2.7449, -3.2639, -3.9311,
     6 -4.1470, -3.9351, -3.7471, -3.6245, -3.4791, -3.4710, -3.4210,
     7 -3.4125, -3.4475, -3.4140, -3.4908, -3.5164, -3.5944, -3.7403,
     8 -3.8192, -4.0177, -4.1833, -4.3518, -4.6486, -4.8778, -5.2542,
     9 -5.7834, -6.3451, -7.7212,-10.0000, -9.9134, -7.9181, -6.0815,
     $ -5.4397, -4.9875, -4.6154, -4.4846, -4.3541, -4.3037, -4.3073,
     1 -4.2471, -4.2593, -4.1984, -4.1895, -4.1697, -4.1578, -4.1950,
     2 -4.1878, -4.2299, -4.2209, -4.2646, -4.3123, -4.3911, -4.4588,
     3 -4.1873, -3.8353, -3.5282, -3.3055, -3.3351, -3.5671, -3.8750,
     4 -4.2645, -4.4786, -4.4293, -4.3183, -4.1996, -4.0879, -4.0169,
     5 -3.9787, -3.9536, -3.9454, -3.9283, -3.9166, -3.9152, -3.9336,
     6 -3.9561, -3.9932, -4.0934, -4.2317, -4.5084, -4.9460, -5.4958,
     7 -6.5492, -8.5604, -9.6202/
c=n2o ====c' for    3 band model
c=n2o ====    0-  120
      data c11n2o/
     1 -2.8003, -2.6628, -2.4313, -2.2579, -2.1700, -2.1702, -2.2490,
     2 -2.4003, -2.6264, -2.9219, -3.2954, -3.7684, -4.2621, -4.7558,
     3 -5.2495, -5.7432, -6.2369, -6.7306, -7.2243, -7.7180, -8.2117,
     4 -8.7054, -9.1991, -9.6928,-10.0000/
c=n2o ====  490-  775,  865-  995, 1065- 1385, 1545- 2040, 2090- 2655
      data c21n2o/
     1 -9.7185, -8.8926, -8.0667, -7.2307, -6.4149, -5.4872, -4.7083,
     2 -4.0319, -3.4752, -3.0155, -2.6046, -2.2057, -1.8137, -1.4741,
     3 -1.1914, -0.9603, -0.7923, -0.6629, -0.5849, -0.5402, -0.4975,
     4 -0.5148, -0.5592, -0.6521, -0.8148, -1.0186, -1.2764, -1.5873,
     5 -1.9638, -2.3881, -2.8083, -3.2392, -3.6934, -4.0682, -4.1366,
     6 -3.9423, -3.7143, -3.4975, -3.2602, -3.0976, -2.9815, -2.9153,
     7 -2.9596, -3.0281, -3.1264, -3.2650, -3.3906, -3.5717, -3.8312,
     8 -4.1706, -4.6077, -5.1839, -5.9224, -6.9862, -7.6901, -8.3940,
     9 -9.0979, -9.8018, -9.9154, -9.2271, -8.5388, -7.8504, -7.1621,
     $ -6.2428, -5.6051, -5.0971, -4.7237, -4.4104, -4.2050, -4.0681,
     1 -4.0278, -4.0307, -4.0492, -4.0333, -3.9710, -3.9249, -3.9360,
     2 -4.0316, -4.2317, -4.5414, -4.9787, -5.5623, -6.3335, -7.9968,
     3 -9.6601, -9.5486, -8.8517, -8.1548, -7.4579, -6.7610, -6.0641,
     4 -5.3672, -4.6703, -3.6918, -3.0656, -2.5796, -2.1876, -1.8646,
     5 -1.5919, -1.3587, -1.1684, -1.0286, -0.9470, -0.9271, -0.9442,
     6 -0.9695, -0.9753, -0.9573, -0.9550, -1.0000, -1.1070, -1.2791,
     7 -1.4976, -1.7281, -1.9277, -2.0227, -1.9577, -1.7625, -1.5020,
     8 -1.2186, -0.9270, -0.6326, -0.3429, -0.0768,  0.1500,  0.3215/
      data c22n2o/
     1  0.4104,  0.4385,  0.4288,  0.4185,  0.4570,  0.4972,  0.4987,
     2  0.4216,  0.2360, -0.0319, -0.3714, -0.7539, -1.1534, -1.5855,
     3 -2.0610, -2.6068, -3.2635, -4.1038, -5.2761, -6.1437, -7.0079,
     4 -7.9440, -8.8801, -9.8162,-10.0000, -9.5951, -9.1305, -8.6659,
     5 -8.2013, -7.7367, -7.2721, -6.8075, -6.1598, -5.8695, -5.3510,
     6 -4.9491, -4.6310, -4.3846, -4.0784, -3.7763, -3.5901, -3.4607,
     7 -3.4386, -3.5481, -3.7014, -3.9310, -4.2251, -4.4593, -4.8210,
     8 -5.3494, -6.1286, -7.5981,-10.0000,-10.0000,-10.0000,-10.0000,
     9 -6.3743, -5.5592, -5.0129, -4.6075, -4.3171, -4.0928, -3.7537,
     $ -3.5406, -3.3869, -3.2913, -3.3633, -3.4932, -3.6924, -4.0074,
     1 -4.2504, -4.5389, -4.9425, -5.4741, -6.2069, -7.5981,-10.0000,
     2-10.0000,-10.0000, -6.9215, -6.0798, -5.1934, -4.6288, -4.1316,
     3 -3.7322, -3.4089, -3.1573, -2.9573, -2.7298, -2.5615, -2.4382,
     4 -2.3523, -2.3774, -2.4508, -2.5755, -2.7757, -2.9904, -3.2733,
     5 -3.6524, -4.1599, -4.7952, -5.7004, -6.8762, -6.9822, -6.2484,
     6 -5.7613, -5.2586, -4.8674, -4.6633, -4.5332, -4.5158, -4.6593,
     7 -4.8427, -5.0917, -5.5781, -6.0645, -6.5509, -7.0373, -7.5237,
     8 -8.0101, -8.4965, -8.9829, -9.4693, -9.9557, -9.7130, -8.6609/
      data c23n2o/
     1 -7.6089, -6.5568, -5.0880, -4.4527, -3.9302, -3.4438, -2.9701,
     2 -2.5423, -2.1616, -1.8076, -1.4763, -1.1580, -0.8445, -0.5455,
     3 -0.2506,  0.0234,  0.2775,  0.5113,  0.7154,  0.8929,  1.0359,
     4  1.1306,  1.1697,  1.1807,  1.1803,  1.1974,  1.2466,  1.2629,
     5  1.2068,  1.0472,  0.7695,  0.4083, -0.0244, -0.5477, -1.2202,
     6 -2.1067, -2.9508, -3.2107, -3.1587, -2.9600, -2.7641, -2.6324,
     7 -2.5671, -2.5664, -2.6088, -2.6425, -2.6606, -2.6895, -2.7551,
     8 -2.8837, -3.0884, -3.3746, -3.7078, -4.0975, -4.6272, -5.2484,
     9-10.0000,-10.0000,-10.0000, -7.3571, -5.0287, -4.3047, -3.6431,
     $ -3.1026, -2.6122, -2.1941, -1.8454, -1.5726, -1.3829, -1.2818,
     1 -1.2505, -1.2579, -1.2731, -1.2502, -1.2092, -1.2044, -1.2577,
     2 -1.3942, -1.6262, -1.9347, -2.2830, -2.5386, -2.4801, -2.1671,
     3 -1.8061, -1.4726, -1.1797, -0.9377, -0.7542, -0.6392, -0.5899,
     4 -0.5743, -0.5669, -0.5339, -0.4745, -0.4471, -0.4779, -0.5877,
     5 -0.7964, -1.0942, -1.4812, -1.9593, -2.5140, -3.1350, -3.8102,
     6 -4.5825, -5.5982, -6.4193, -7.2403, -8.0614, -8.8825, -9.7035/
c=n2o ==== 2705- 2865, 3245- 3925, 4260- 4470, 4540- 4785, 4910- 5165
      data c31n2o/
     1 -9.8910, -8.9876, -8.0843, -7.1809, -6.1501, -5.3742, -4.7352,
     2 -4.2051, -3.7525, -3.3562, -2.9916, -2.6649, -2.3872, -2.1499,
     3 -1.9747, -1.7982, -1.6518, -1.5582, -1.4838, -1.5004, -1.5821,
     4 -1.6912, -1.8673, -2.0756, -2.3351, -2.7020, -3.1921, -3.8409,
     5 -4.7085, -5.9588, -6.5829, -8.5585, -9.8584, -9.9723, -9.4215,
     6 -8.8707, -8.3199, -7.7691, -7.2183, -6.5567, -6.4345, -5.6448,
     7 -5.0529, -4.4643, -3.9624, -3.5231, -3.1395, -2.8067, -2.5232,
     8 -2.2858, -2.0820, -1.9049, -1.7554, -1.6485, -1.5959, -1.5838,
     9 -1.5961, -1.5997, -1.5734, -1.5615, -1.5974, -1.7059, -1.9034,
     $ -2.1631, -2.4181, -2.5427, -2.4592, -2.2513, -2.0187, -1.7879,
     1 -1.5612, -1.3399, -1.1265, -0.9226, -0.7379, -0.5790, -0.4573,
     2 -0.3952, -0.3683, -0.3511, -0.3216, -0.2556, -0.2126, -0.2593,
     3 -0.4361, -0.7702, -1.2089, -1.7060, -2.2937, -3.1133, -4.4419,
     4 -6.0119, -6.9457,-10.0000,-10.0000,-10.0000,-10.0000, -7.0394,
     5 -5.9637, -5.2317, -4.6419, -4.1663, -3.7874, -3.5000, -3.3086,
     6 -3.2143, -3.1926, -3.2105, -3.2308, -3.1971, -3.1510, -3.1402,
     7 -3.1969, -3.3477, -3.6005, -3.9534, -4.4117, -4.9729, -5.6009,
     8 -6.2179, -5.9845, -5.5502, -4.9010, -4.3401, -3.8232, -3.3802/
      data c32n2o/
     1 -2.9972, -2.6747, -2.4143, -2.2209, -2.1080, -2.0682, -2.0687,
     2 -2.0775, -2.0485, -1.9847, -1.9531, -1.9870, -2.1110, -2.3366,
     3 -2.6293, -2.8922, -2.9474, -2.7627, -2.4999, -2.2554, -2.0537,
     4 -1.9062, -1.8268, -1.7941, -1.7766, -1.7468, -1.6767, -1.6130,
     5 -1.6085, -1.6849, -1.8599, -2.1258, -2.4538, -2.8205, -3.2028,
     6 -3.5988, -4.0691, -4.7117, -5.6320, -6.4806, -7.3731, -8.2602,
     7 -9.1474,-10.0000,-10.0000, -9.5340, -9.0282, -8.5224, -8.0166,
     8 -7.5109, -7.0051, -6.4117, -6.0148, -5.4878, -5.1742, -4.8859,
     9 -4.4873, -4.2249, -4.0285, -3.8669, -3.8247, -3.7652, -3.6521,
     $ -3.4906, -3.2613, -3.0307, -2.8156, -2.6172, -2.4264, -2.2442,
     1 -2.0775, -1.9432, -1.8703, -1.8523, -1.8552, -1.8443, -1.7814,
     2 -1.7104, -1.7043, -1.7952, -2.0205, -2.3968, -2.9374, -3.7689,
     3 -5.3159, -7.4139, -9.5119, -9.7965, -9.1511, -8.5057, -7.8603,
     4 -7.2149, -6.5695, -6.2415, -5.5829, -5.0296, -4.5660, -4.1722,
     5 -3.8364, -3.5551, -3.3398, -3.1970, -3.1363, -3.1232, -3.1257,
     6 -3.0999, -3.0288, -2.9746, -2.9875, -3.0925, -3.3137, -3.6496,
     7 -4.0276, -4.1958, -3.9760, -3.6179, -3.2725, -2.9653, -2.6962,
     8 -2.4677, -2.2828, -2.1547, -2.0949, -2.0763, -2.0606, -2.0142/
      data c33n2o/
     1 -1.9239, -1.8618, -1.8813, -2.0099, -2.2825, -2.7071, -3.3277,
     2 -4.3300, -6.2151, -8.3543,-10.0000, -9.7275, -9.1257, -8.5239,
     3 -7.9221, -7.3203, -6.7185, -6.6089, -5.8877, -5.4527, -5.0879,
     4 -4.6598, -4.3806, -4.1830, -4.0426, -4.0175, -4.0178, -3.9811,
     5 -3.9244, -3.8056, -3.6968, -3.6435, -3.6326, -3.6339, -3.6157,
     6 -3.5478, -3.4826, -3.4807, -3.5665, -3.7650, -4.0718, -4.3980,
     7 -4.5075, -4.3358, -4.0765, -3.8674, -3.7221, -3.6588, -3.6429,
     8 -3.6371, -3.6014, -3.5209, -3.4616, -3.4774, -3.5957, -3.8481,
     9 -4.2598, -4.8784, -5.8266, -6.7468, -8.1352, -9.2208,-10.0000/
c=o2  ====c' for    2 band model
c=o2  ====    0-  265
      data c11o2/
     1 -6.1363, -6.1794, -6.2538, -6.3705, -6.5110, -6.6162, -6.7505,
     2 -6.7896, -6.8305, -6.8471, -6.8282, -6.8772, -6.8680, -6.9332,
     3 -6.9511, -7.0048, -7.0662, -7.1043, -7.2055, -7.2443, -7.3520,
     4 -7.4079, -7.4998, -7.5924, -7.6682, -7.7993, -7.8712, -8.0161,
     5 -8.1102, -8.2485, -8.3758, -8.4942, -8.6532, -8.7554, -8.9453,
     6 -9.0665, -9.2631, -9.4387, -9.6325, -9.8757,-10.0628,-10.3761,
     7-10.5478,-10.9147,-11.2052,-11.5129,-11.8206,-12.1283,-12.4360,
     8-12.7437,-13.0514,-13.3591,-13.6668,-13.9745/
c=o2  ==== 7650- 8080, 9235- 9490,12850-13220,14300-14600,15695-15955
      data c21o2/
     1-13.9458,-13.7692,-13.5048,-13.1422,-13.0242,-12.6684,-12.3571,
     2-12.2428,-11.8492,-11.6427,-11.5173,-11.2108,-11.1584,-11.0196,
     3-10.8040,-10.8059,-10.5828,-10.4580,-10.4170,-10.1823,-10.1435,
     4-10.0030, -9.8136, -9.7772, -9.5680, -9.4595, -9.3502, -9.1411,
     5 -9.0476, -8.8628, -8.7051, -8.5838, -8.4282, -8.3271, -8.1958,
     6 -8.0838, -7.9652, -7.8371, -7.7476, -7.6431, -7.5736, -7.5149,
     7 -7.4194, -7.2688, -7.0722, -6.8815, -6.7627, -6.8055, -6.9114,
     8 -6.9936, -7.0519, -7.0597, -7.0680, -7.1242, -7.2088, -7.3265,
     9 -7.4673, -7.6326, -7.8110, -8.0096, -8.2104, -8.4036, -8.5853,
     $ -8.7252, -8.8511, -8.9427, -9.0375, -9.1228, -9.2246, -9.3291,
     1 -9.4436, -9.5716, -9.6951, -9.8408, -9.9759,-10.1489,-10.3027,
     2-10.5178,-10.7265,-10.9787,-11.2939,-11.5552,-11.9595,-12.2436,
     3-12.6942,-13.2011,-13.8191,-13.9216,-13.7293,-13.5370,-13.3447,
     4-13.1523,-12.9600,-12.7677,-12.5754,-12.3830,-12.1907,-11.9948,
     5-11.7759,-11.5926,-11.4214,-11.2493,-11.1094,-10.9477,-10.8332,
     6-10.7323,-10.6380,-10.5725,-10.4409,-10.2013, -9.8839, -9.6546,
     7 -9.5053, -9.4638, -9.5526, -9.6558, -9.7430, -9.7958, -9.7896,
     8 -9.8320, -9.9447,-10.1221,-10.3707,-10.6623,-10.9761,-11.2271/
      data c22o2/
     1-11.4091,-11.4921,-11.6015,-11.6945,-11.8333,-11.9985,-12.1788,
     2-12.3822,-12.6605,-13.0796,-13.3528,-13.6463,-13.9398,-13.7034,
     3-13.3150,-13.1177,-12.6462,-12.4868,-12.2205,-11.9650,-11.6941,
     4-11.4377,-11.2136,-10.9567,-10.7980,-10.5546,-10.3952,-10.2403,
     5-10.0491, -9.9226, -9.7871, -9.6557, -9.6106, -9.5142, -9.4763,
     6 -9.4163, -9.2348, -9.1088, -8.7946, -8.5876, -8.3128, -8.0945,
     7 -7.9127, -7.7229, -7.5860, -7.4215, -7.2726, -7.1179, -6.9516,
     8 -6.8075, -6.6413, -6.5043, -6.3519, -6.2112, -6.0839, -5.9337,
     9 -5.8321, -5.6969, -5.5923, -5.5076, -5.4002, -5.3413, -5.2826,
     $ -5.2458, -5.2877, -5.3743, -5.4654, -5.5262, -5.4429, -5.2430,
     1 -5.0284, -4.8464, -4.7534, -4.7825, -4.9462, -5.2290, -5.6440,
     2 -6.1889, -6.8427, -7.7731, -9.1688, -9.6893,-10.1853,-10.7670,
     3-11.4611,-12.3081,-13.1476,-13.8192,-13.5871,-13.2189,-12.9705,
     4-12.4825,-12.1301,-11.9430,-11.6636,-11.3197,-11.1678,-10.8967,
     5-10.6002,-10.4857,-10.1986, -9.9731, -9.8547, -9.5817, -9.4382,
     6 -9.3042, -9.0755, -8.9944, -8.8060, -8.6543, -8.5441, -8.3556,
     7 -8.2557, -8.0959, -7.9717, -7.8453, -7.7076, -7.5910, -7.4567,
     8 -7.3439, -7.2248, -7.1236, -7.0209, -6.9345, -6.8404, -6.7560/
      data c23o2/
     1 -6.6744, -6.5870, -6.5278, -6.4809, -6.5042, -6.5797, -6.6564,
     2 -6.6939, -6.5912, -6.3776, -6.1438, -6.0062, -6.0469, -6.3081,
     3 -6.8199, -7.4307, -8.1345, -9.1190,-10.4203,-11.4698,-12.5942,
     4-13.5316,-13.8693,-13.9392,-13.6885,-13.4377,-13.1869,-12.9362,
     5-12.6854,-12.3720,-12.2852,-11.9331,-11.7575,-11.6297,-11.3290,
     6-11.1205,-11.0084,-10.7243,-10.5543,-10.4485,-10.1764,-10.0759,
     7 -9.9304, -9.7196, -9.6630, -9.4774, -9.3638, -9.2675, -9.1121,
     8 -9.0368, -8.9025, -8.8028, -8.7012, -8.5909, -8.5121, -8.4141,
     9 -8.3444, -8.2687, -8.2003, -8.1571, -8.1141, -8.1261, -8.1848,
     $ -8.2395, -8.2478, -8.0877, -7.7880, -7.5611, -7.4487, -7.4880,
     1 -7.7644, -8.2142, -8.8765,-10.1091,-12.4483,-13.7228/
      end
c=======================================================================
      block data cptrcg
c>    block data
c
c     c' for trace gases (nh3, no, no2, so2)
      common /traceg/  c11nh3( 78),
     +                 c21nh3(126),c22nh3(126),c23nh3(101),
     +                 c11no ( 62),
     +                 c11no2(126),c12no2( 16),
     +                 c11so2( 38),
     +                 c21so2(126),c22so2( 62)
c=nh3 ====c' for    2 band model
c=nh3 ====    0-  385
      data c11nh3/
     1 -5.7142, -5.2854, -4.5163, -3.9795, -3.4393, -2.8735, -2.4947,
     2 -2.2290, -2.0624, -1.9616, -1.8707, -1.7712, -1.6473, -1.5376,
     3 -1.4315, -1.3328, -1.2391, -1.1768, -1.1302, -1.0755, -1.0272,
     4 -0.9884, -0.9501, -0.9287, -0.9101, -0.8982, -0.8888, -0.8709,
     5 -0.8620, -0.8645, -0.8676, -0.8910, -0.9084, -0.9328, -0.9546,
     6 -0.9743, -0.9983, -1.0202, -1.0569, -1.0824, -1.1086, -1.1475,
     7 -1.1790, -1.2059, -1.2668, -1.3237, -1.3801, -1.4271, -1.4920,
     8 -1.5403, -1.5848, -1.6498, -1.7382, -1.8294, -1.9203, -2.0694,
     9 -2.2134, -2.3622, -2.5516, -2.7633, -2.9344, -3.1172, -3.3543,
     $ -3.5671, -3.7504, -3.9884, -4.2633, -4.5505, -4.7837, -5.0350,
     1 -5.3733, -5.6478, -5.8856, -6.1041, -6.3375, -6.5709, -6.8043,
     2 -7.0377/
c=nh3 ====  390- 2150
      data c21nh3/
     1 -7.2620, -7.0950, -6.9279, -6.7608, -6.5938, -6.4267, -6.2597,
     2 -6.0926, -5.8842, -5.7560, -5.5844, -5.4248, -5.2573, -5.0771,
     3 -4.9244, -4.7903, -4.6512, -4.5169, -4.3961, -4.2607, -4.1705,
     4 -4.1294, -4.0611, -3.9538, -3.8821, -3.7592, -3.6754, -3.6830,
     5 -3.6977, -3.6925, -3.6632, -3.5899, -3.5218, -3.5265, -3.6535,
     6 -3.8068, -3.9818, -4.0574, -3.9789, -3.8858, -3.8120, -3.8927,
     7 -3.8799, -3.8623, -3.3984, -2.8857, -2.5814, -2.4066, -2.3850,
     8 -2.5415, -2.8161, -3.2265, -3.7177, -3.9932, -4.0683, -4.0785,
     9 -3.9912, -3.7418, -3.4742, -3.2651, -3.0715, -2.9500, -2.8669,
     $ -2.7723, -2.6614, -2.5613, -2.4372, -2.3085, -2.1696, -2.0302,
     1 -1.9166, -1.8071, -1.7221, -1.6370, -1.5453, -1.4487, -1.3539,
     2 -1.2570, -1.1618, -1.1131, -1.0824, -1.0559, -1.0190, -0.9721,
     3 -0.9218, -0.8680, -0.8556, -0.8568, -0.8713, -0.8984, -0.9076,
     4 -0.9024, -0.8882, -0.8968, -0.9492, -1.0089, -1.0846, -1.1556,
     5 -1.1792, -1.1946, -1.1964, -1.2173, -1.2424, -1.1744, -0.9743,
     6 -0.6350, -0.2975, -0.0705,  0.0144, -0.0978, -0.3536, -0.5630,
     7 -0.5479, -0.3784, -0.1797, -0.1151, -0.3085, -0.6180, -0.9718,
     8 -1.2926, -1.2748, -1.1217, -1.0197, -0.9300, -0.8817, -0.8723/
      data c22nh3/
     1 -0.8309, -0.7804, -0.7075, -0.6431, -0.6176, -0.6012, -0.6079,
     2 -0.6272, -0.6304, -0.6193, -0.6026, -0.5882, -0.6029, -0.6317,
     3 -0.6862, -0.7447, -0.7921, -0.8275, -0.8595, -0.8856, -0.9236,
     4 -0.9934, -1.0693, -1.1460, -1.2100, -1.2863, -1.3593, -1.4292,
     5 -1.5029, -1.6054, -1.7067, -1.8110, -1.9350, -2.0346, -2.1305,
     6 -2.2294, -2.3724, -2.4917, -2.6218, -2.8056, -2.9693, -3.1101,
     7 -3.2790, -3.5315, -3.7011, -3.8952, -4.1527, -4.4121, -4.5244,
     8 -4.8599, -5.1940, -5.5589, -5.8170, -6.1402, -6.4633, -6.7865,
     9 -7.1096, -7.4328, -7.7559, -8.0000, -7.8199, -7.5988, -7.3778,
     $ -7.1567, -6.9357, -6.7146, -6.4936, -6.2725, -6.0515, -5.8304,
     1 -5.5963, -5.3883, -5.2319, -5.0536, -4.9029, -4.7789, -4.5867,
     2 -4.3414, -4.1399, -3.9784, -3.7553, -3.5773, -3.4123, -3.2254,
     3 -3.0384, -2.9243, -2.7755, -2.5809, -2.4726, -2.3206, -2.1209,
     4 -2.0331, -1.9016, -1.7458, -1.6927, -1.5958, -1.4863, -1.4492,
     5 -1.3730, -1.2859, -1.2554, -1.2129, -1.1689, -1.1802, -1.1948,
     6 -1.1882, -1.2185, -1.2464, -1.2522, -1.2946, -1.3587, -1.3971,
     7 -1.4488, -1.5261, -1.5495, -1.5478, -1.4926, -1.3115, -1.0455,
     8 -0.7987, -0.5972, -0.4664, -0.4244, -0.4426, -0.4952, -0.5772/
      data c23nh3/
     1 -0.6845, -0.8097, -0.9443, -1.0904, -1.2232, -1.2853, -1.2949,
     2 -1.2708, -1.1896, -1.1467, -1.1187, -1.0700, -1.0392, -1.0227,
     3 -1.0178, -1.0089, -1.0021, -0.9706, -0.9569, -0.9928, -1.0310,
     4 -1.0767, -1.1053, -1.1241, -1.1717, -1.2203, -1.2772, -1.3356,
     5 -1.3855, -1.4734, -1.5701, -1.6572, -1.7638, -1.8652, -1.9918,
     6 -2.1449, -2.2388, -2.3251, -2.3936, -2.4525, -2.5998, -2.7147,
     7 -2.7704, -2.7852, -2.7524, -2.7646, -2.8507, -3.0422, -3.2642,
     8 -3.5201, -3.6328, -3.7624, -3.9505, -4.1399, -4.3087, -4.3859,
     9 -4.4295, -4.4493, -4.3317, -4.1892, -4.0545, -3.9356, -3.9117,
     $ -4.0001, -4.0627, -4.0833, -4.0997, -4.0659, -4.0264, -4.0893,
     1 -4.1832, -4.2522, -4.3182, -4.3949, -4.4191, -4.4580, -4.5997,
     2 -4.7282, -4.8370, -5.0041, -5.1644, -5.2101, -5.4145, -5.5114,
     3 -5.6986, -5.8057, -5.9529, -6.1000, -6.2472, -6.3943, -6.5415,
     4 -6.6886, -6.8358, -6.9829, -7.1301, -7.2772, -7.4244, -7.5715,
     5 -7.7187, -7.8658, -8.0000/
c=no  ====c' for    1 band model
c=no  ==== 1700- 2005
      data c11no/
     1 -7.9265, -7.5649, -7.2033, -6.8418, -6.4802, -6.0647, -5.7193,
     2 -5.3955, -5.1475, -4.8233, -4.5194, -4.3184, -3.9664, -3.7045,
     3 -3.3398, -3.0368, -2.7282, -2.4448, -2.1791, -1.9315, -1.7046,
     4 -1.4984, -1.3133, -1.1486, -1.0036, -0.8776, -0.7699, -0.6811,
     5 -0.6124, -0.5663, -0.5488, -0.5673, -0.6076, -0.6791, -0.7553,
     6 -0.7811, -0.7711, -0.6840, -0.5704, -0.4791, -0.4138, -0.3950,
     7 -0.4189, -0.4794, -0.5751, -0.7062, -0.8751, -1.0852, -1.3406,
     8 -1.6473, -2.0068, -2.4335, -2.9068, -3.4595, -4.0370, -4.6795,
     9 -5.2704, -5.8613, -6.4522, -7.0431, -7.6340, -8.0000/
c=no2 ====c' for    1 band model
c=no2 ====  580-  925, 1515- 1695, 2800- 2970
      data c11no2/
     1 -6.0000, -5.8419, -5.5313, -5.1048, -4.9512, -4.5830, -4.2676,
     2 -3.9783, -3.7150, -3.4782, -3.2541, -3.0597, -2.8625, -2.6989,
     3 -2.5323, -2.3904, -2.2561, -2.1346, -2.0320, -1.9284, -1.8584,
     4 -1.7778, -1.7222, -1.6776, -1.6024, -1.5658, -1.4917, -1.4117,
     5 -1.3706, -1.3045, -1.2914, -1.3292, -1.3666, -1.4268, -1.4564,
     6 -1.4076, -1.3284, -1.2804, -1.2497, -1.2519, -1.3123, -1.3704,
     7 -1.4192, -1.4878, -1.5301, -1.5575, -1.5912, -1.6250, -1.6544,
     8 -1.6849, -1.7340, -1.7748, -1.8171, -1.8679, -1.9256, -1.9809,
     9 -2.0386, -2.1112, -2.1769, -2.2462, -2.3199, -2.4129, -2.5156,
     $ -2.6575, -2.8825, -3.1831, -3.6209, -4.2271, -5.5290, -6.0000,
     1 -6.0000, -5.5415, -4.8964, -4.2513, -3.6063, -2.9612, -2.1733,
     2 -1.5514, -1.0260, -0.5817, -0.2030,  0.1231,  0.4098,  0.6653,
     3  0.8885,  1.0716,  1.2025,  1.2697,  1.2926,  1.3006,  1.3128,
     4  1.3449,  1.3656,  1.3245,  1.1868,  0.9310,  0.5907,  0.2056,
     5 -0.2337, -0.7633, -1.4541, -2.4451, -3.1822, -3.9193, -4.6565,
     6 -5.3936, -6.0000, -6.0000, -5.7606, -5.3422, -4.9238, -4.5055,
     7 -4.0871, -3.6687, -3.2504, -2.8320, -2.3736, -1.9565, -1.5769,
     8 -1.2400, -0.9384, -0.6781, -0.4630, -0.2944, -0.1783, -0.1213/
      data c12no2/
     1 -0.1033, -0.0934, -0.0723, -0.0267,  0.0016, -0.0394, -0.1700,
     2 -0.4141, -0.7861, -1.2951, -2.0379, -3.0984, -3.8692, -4.6399,
     3 -5.4107, -6.0000/
c=so2 ====c' for    2 band model
c=so2 ====    0-  185
      data c11so2/
     1 -0.9312, -0.8101, -0.5729, -0.3590, -0.2016, -0.0971, -0.0333,
     2  0.0048,  0.0228,  0.0214, -0.0044, -0.0567, -0.1334, -0.2315,
     3 -0.3451, -0.4741, -0.6198, -0.7854, -0.9764, -1.1922, -1.4326,
     4 -1.6951, -1.9687, -2.2788, -2.6034, -2.9398, -3.3551, -3.7704,
     5 -4.1857, -4.6010, -5.0163, -5.4316, -5.8469, -6.2622, -6.6775,
     6 -7.0928, -7.5081, -7.9234/
c=so2 ====  400-  650,  950- 1460, 2415- 2580
      data c21so2/
     1 -8.0000, -7.4209, -6.6994, -5.9778, -5.2563, -4.4248, -3.7369,
     2 -3.0917, -2.5200, -2.0303, -1.6307, -1.3056, -1.0373, -0.8189,
     3 -0.6395, -0.4880, -0.3574, -0.2369, -0.1237, -0.0261,  0.0250,
     4  0.0186, -0.0194, -0.0659, -0.0638, -0.0065,  0.0468,  0.0682,
     5  0.0355, -0.0431, -0.1334, -0.2175, -0.2954, -0.3738, -0.4588,
     6 -0.5571, -0.6729, -0.8131, -0.9805, -1.1831, -1.4334, -1.7354,
     7 -2.1065, -2.5705, -3.1238, -3.7691, -4.5793, -5.7012, -6.5603,
     8 -7.4195, -8.0000, -7.9302, -7.6563, -7.3824, -7.1085, -6.8346,
     9 -6.5607, -6.2868, -6.0129, -5.7390, -5.4651, -5.1912, -4.9173,
     $ -4.6434, -4.3695, -4.0956, -3.8217, -3.5478, -3.2739, -3.0000,
     1 -2.7261, -2.4522, -2.1783, -1.9317, -1.7073, -1.5004, -1.3136,
     2 -1.1444, -0.9901, -0.8505, -0.7238, -0.6083, -0.5025, -0.4016,
     3 -0.3047, -0.2112, -0.1263, -0.0656, -0.0414, -0.0509, -0.0731,
     4 -0.0802, -0.0483,  0.0032,  0.0339,  0.0249, -0.0296, -0.1170,
     5 -0.2141, -0.3069, -0.3968, -0.4881, -0.5881, -0.7019, -0.8299,
     6 -0.9729, -1.1305, -1.3036, -1.4924, -1.7000, -1.9306, -2.1906,
     7 -2.4959, -2.8613, -3.3176, -3.9236, -4.6847, -5.2561, -4.7082,
     8 -4.1110, -3.6582, -3.1963, -2.7063, -1.9643, -1.3089, -0.6856/
      data c22so2/
     1 -0.0412,  0.3678,  0.6712,  0.9031,  1.0577,  1.1145,  1.1272,
     2  1.1300,  1.1237,  1.1459,  1.1047,  0.9617,  0.7107,  0.3254,
     3 -0.2322, -1.0612, -1.7715, -2.6089, -3.0225, -3.3542, -3.7339,
     4 -4.1986, -4.7852, -5.6390, -6.2740, -6.9091, -7.5441, -8.0000,
     5 -8.0000, -7.5698, -6.8815, -6.1933, -5.3530, -4.8602, -4.1286,
     6 -2.9922, -2.3525, -1.8905, -1.5178, -1.2295, -1.0082, -0.8484,
     7 -0.7634, -0.7340, -0.7203, -0.7167, -0.7097, -0.7297, -0.8391,
     8 -1.0472, -1.3607, -1.7720, -2.2957, -3.0566, -4.1073, -4.5337,
     9 -4.9481, -5.4542, -6.2445, -6.8148, -7.3850, -7.9553/
      end
c=======================================================================
      block data wvbnrg
c>    block data
c     wavenumber-low and wavenumber-high specify a band region
c     for a molecular absorber.
c     the unit for wavenumber is 1/cm.
c     -999 is an indicator to indicate the end of absorption bands
c     for any specific absorber.
      common /wnlohi/
     l   iwlh2o(15),iwlo3 ( 6),iwlco2(11),iwlco ( 4),iwlch4( 5),
     l   iwln2o(12),iwlo2 ( 7),iwlnh3( 3),iwlno ( 2),iwlno2( 4),
     l   iwlso2( 5),
     h   iwhh2o(15),iwho3 ( 6),iwhco2(11),iwhco ( 4),iwhch4( 5),
     h   iwhn2o(12),iwho2 ( 7),iwhnh3( 3),iwhno ( 2),iwhno2( 4),
     h   iwhso2( 5)
c
      data iwlh2o/   0,    350,   1005,   1645,   2535,   3425,   4315,
     l    6155,   8005,   9620,  11545,  13075,  14865,  16340,   -999/
      data iwhh2o/ 345,   1000,   1640,   2530,   3420,   4310,   6150,
     h    8000,   9615,  11540,  13070,  14860,  16045,  17860,   -999/
c
      data iwlo3 /   0,    515,   1630,   2670,   2850,   -999/
      data iwho3 / 200,   1275,   2295,   2845,   3260,   -999/
c
      data iwlco2/ 425,    840,   1805,   3070,   3760,   4530,   5905,
     l    7395,   8030,   9340,   -999/
      data iwhco2/ 835,   1440,   2855,   3755,   4065,   5380,   7025,
     h    7785,   8335,   9670,   -999/
c
      data iwlco /   0,   1940,   4040,   -999/
      data iwhco / 175,   2285,   4370,   -999/
c
      data iwlch4/1065,   2345,   4110,   5865,   -999/
      data iwhch4/1775,   3230,   4690,   6135,   -999/
c
      data iwln2o/   0,    490,    865,   1065,   1545,   2090,   2705,
     l    3245,   4260,   4540,   4910,   -999/
      data iwhn2o/ 120,    775,    995,   1385,   2040,   2655,   2865,
     h    3925,   4470,   4785,   5165,   -999/
c
      data iwlo2 /   0,   7650,   9235,  12850,  14300,  15695,   -999/
      data iwho2 / 265,   8080,   9490,  13220,  14600,  15955,   -999/
c
      data iwlnh3/   0,    390,   -999/
      data iwhnh3/ 385,   2150,   -999/
c
      data iwlno /1700,   -999/
      data iwhno /2005,   -999/
c
      data iwlno2/ 580,   1515,   2800,   -999/
      data iwhno2/ 925,   1695,   2970,   -999/
c
      data iwlso2/   0,    400,    950,   2415,   -999/
      data iwhso2/ 185,    650,   1460,   2580,   -999/
      end
c=======================================================================
      block data abcd
c>    block data
      common /abc/ factor(3),anh3(2),aco2(10),aco(3),
     x             ach4(4),ano2(3),an2o(11),ao2(6),ao3(5),
     x             aso2(4),ah2o(14),ano,
     x             aanh3(2),bbnh3(2),ccnh3(2),
     x             aaco2(10),bbco2(10),ccco2(10),
     x             aaco(3),bbco(3),ccco(3),
     x             aach4(4),bbch4(4),ccch4(4),
     x             aano2(3),bbno2(3),ccno2(3),
     x             aan2o(11),bbn2o(11),ccn2o(11),
     x             aao2(6),bbo2(6),cco2(6),
     x             aao3(5),bbo3(5),cco3(5),
     x             aaso2(4),bbso2(4),ccso2(4),
     x             aah2o(14),bbh2o(14),cch2o(14),
     x             aano     ,bbno     ,ccno
      data factor/1.0,0.09,0.015/
      data anh3/.4704,.6035/
      data aco2/.6176,.6810,.6033,.6146,.6513,.6050,
     1 .6160,.7070,.7070,.7070/
      data aco/.6397,.6133,.6133/
      data ach4/.5844,.5844,.5844,.5844/
      data ano/.6613/
      data ano2/.7249,.7249,.7249/
      data an2o/.8997,.7201,.7201,.7201,.7201,.7201,
     1 .6933,.6933,.6933,.6933,.6933/
      data ao2/.6011,.5641,.5641,.5641,.5641,.5641/
      data ao3/.8559,.7593,.7819,.9175,.7703/
      data aso2/.8907,.8466,.8466,.8466/
      data ah2o/.5274,.5299,.5416,.5479,.5495,.5464,.5454,
     1 .5474,.5579,.5621,.5847,.6076,.6508,.6570/
      data aanh3/.285772,.134244/
      data bbnh3/.269839,.353937/
      data ccnh3/19.9507,27.8458/
      data aaco2/.120300,.069728,.134448,.123189,.090948,
     1 .132717,.121835,.054348,.054348,.054348/
      data bbco2/.348172,.303510,.354002,.349583,.327160,
     1 .353435,.348936,.280674,.280674,.280674/
      data ccco2/29.4277,37.0842,27.8241,29.0834,33.4608,
     1 28.0093,29.2436,40.1951,40.1951,40.1951/
      data aaco/.100401,.124454,.124454/
      data bbco/.335296,.350165,.350165/
      data ccco/32.0496,28.9354,28.9354/
      data aach4/.154447,.154447,.154447,.154447/
      data bbch4/.357657,.357657,.357657,.357657/
      data ccch4/25.8920,25.8920,25.8920,25.8920/
      data aano/.083336/
      data bbno/.319585/
      data ccno/34.6834/
      data aano2/.045281,.045281,.045281/
      data bbno2/.264248,.264248,.264248/
      data ccno2/42.2784,42.2784,42.2784/
      data aan2o/.001679,.047599,.047599,.047599,.047599,
     1 .047599,.062106,.062106,.062106,.062106,.062106/
      data bbn2o/.095621,.268696,.268696,.268696,.268696,
     1 .268696,.292891,.292891,.292891,.292891,.292891/
      data ccn2o/59.3660,41.7251,41.7251,41.7251,41.7251,
     1 41.7251,38.5667,38.5667,38.5667,38.5667,38.5667/
      data aao2/.136706,.177087,.177087,.177087,.177087,.177087/
      data bbo2/.354683,.355447,.355447,.355447,.355447,.355447/
      data cco2/27.5869,24.1314,24.1314,24.1314,24.1314,24.1314/
      data aao3/.006712,.030870,.023278,.000458,.027004/
      data bbo3/.138026,.231722,.209952,.078492,.221153/
      data cco3/55.6442,46.1189,48.5155,60.7802,47.2982/
      data aaso2/.002468,.008192,.008192,.008192/
      data bbso2/.104307,.147065,.147065,.147065/
      data ccso2/58.6298,54.8078,54.8078,54.8078/
      data aah2o/.219312,.216415,.206349,.196196,.194540,.198500,
     1 .198500,.196196,.184148,.179360,.154120,.130095,.091341,.086549/
      data bbh2o/.334884,.336904,.343272,.348610,.349810,.347498,
     1 .347498,.348610,.353429,.354864,.357640,.352497,.327526,.322898/
      data cch2o/21.8352,21.9588,22.4234,22.9517,23.0750,22.8262,
     1 22.8262,22.9517,23.6654,23.9774,25.9207,28.2957,33.3998,34.1575/
      end
c=======================================================================
      block data sf296
c>    block data
c               06/28/82
c               units of (cm**3/mol) * 1.e-20
      common /sh2o/ v1,v2,dv,s0000(2),
     1      s0001(50),s0051(50),s0101(50),s0151(50),s0201(50),s0251(50),
     2      s0301(50),s0351(50),s0401(50),s0451(50),s0501(50),s0551(50),
     3      s0601(50),s0651(50),s0701(50),s0751(50),s0801(50),s0851(50),
     4      s0901(50),s0951(50),s1001(50),s1051(50),s1101(50),s1151(50),
     5      s1201(50),s1251(50),s1301(50),s1351(50),s1401(50),s1451(50),
     6      s1501(50),s1551(50),s1601(50),s1651(50),s1701(50),s1751(50),
     7      s1801(50),s1851(50),s1901(50),s1951(50),s2001(1)
c
c
       data v1,v2,dv/ -20.0, 20000.0, 10.0/
c
      data s0000/ 1.1109e-01 ,1.0573e-01/
      data s0001/
     c 1.0162e-01, 1.0573e-01, 1.1109e-01, 1.2574e-01, 1.3499e-01,
     c 1.4327e-01, 1.5065e-01, 1.5164e-01, 1.5022e-01, 1.3677e-01,
     c 1.3115e-01, 1.2253e-01, 1.1271e-01, 1.0070e-01, 8.7495e-02,
     c 8.0118e-02, 6.9940e-02, 6.2034e-02, 5.6051e-02, 4.7663e-02,
     c 4.2450e-02, 3.6690e-02, 3.3441e-02, 3.0711e-02, 2.5205e-02,
     c 2.2113e-02, 1.8880e-02, 1.6653e-02, 1.4626e-02, 1.2065e-02,
     c 1.0709e-02, 9.1783e-03, 7.7274e-03, 6.7302e-03, 5.6164e-03,
     c 4.9089e-03, 4.1497e-03, 3.5823e-03, 3.1124e-03, 2.6414e-03,
     c 2.3167e-03, 2.0156e-03, 1.7829e-03, 1.5666e-03, 1.3928e-03,
     c 1.2338e-03, 1.0932e-03, 9.7939e-04, 8.8241e-04, 7.9173e-04/
      data s0051/
     c 7.1296e-04, 6.4179e-04, 5.8031e-04, 5.2647e-04, 4.7762e-04,
     c 4.3349e-04, 3.9355e-04, 3.5887e-04, 3.2723e-04, 2.9919e-04,
     c 2.7363e-04, 2.5013e-04, 2.2876e-04, 2.0924e-04, 1.9193e-04,
     c 1.7618e-04, 1.6188e-04, 1.4891e-04, 1.3717e-04, 1.2647e-04,
     c 1.1671e-04, 1.0786e-04, 9.9785e-05, 9.2350e-05, 8.5539e-05,
     c 7.9377e-05, 7.3781e-05, 6.8677e-05, 6.3993e-05, 5.9705e-05,
     c 5.5788e-05, 5.2196e-05, 4.8899e-05, 4.5865e-05, 4.3079e-05,
     c 4.0526e-05, 3.8182e-05, 3.6025e-05, 3.4038e-05, 3.2203e-05,
     c 3.0511e-05, 2.8949e-05, 2.7505e-05, 2.6170e-05, 2.4933e-05,
     c 2.3786e-05, 2.2722e-05, 2.1736e-05, 2.0819e-05, 1.9968e-05/
      data s0101/
     c 1.9178e-05, 1.8442e-05, 1.7760e-05, 1.7127e-05, 1.6541e-05,
     c 1.5997e-05, 1.5495e-05, 1.5034e-05, 1.4614e-05, 1.4230e-05,
     c 1.3883e-05, 1.3578e-05, 1.3304e-05, 1.3069e-05, 1.2876e-05,
     c 1.2732e-05, 1.2626e-05, 1.2556e-05, 1.2544e-05, 1.2604e-05,
     c 1.2719e-05, 1.2883e-05, 1.3164e-05, 1.3581e-05, 1.4187e-05,
     c 1.4866e-05, 1.5669e-05, 1.6717e-05, 1.8148e-05, 2.0268e-05,
     c 2.2456e-05, 2.5582e-05, 2.9183e-05, 3.3612e-05, 3.9996e-05,
     c 4.6829e-05, 5.5055e-05, 6.5897e-05, 7.5360e-05, 8.7213e-05,
     c 1.0046e-04, 1.1496e-04, 1.2943e-04, 1.5049e-04, 1.6973e-04,
     c 1.8711e-04, 2.0286e-04, 2.2823e-04, 2.6780e-04, 2.8766e-04/
      data s0151/
     c 3.1164e-04, 3.3640e-04, 3.6884e-04, 3.9159e-04, 3.8712e-04,
     c 3.7433e-04, 3.4503e-04, 3.1003e-04, 2.8027e-04, 2.5253e-04,
     c 2.3408e-04, 2.2836e-04, 2.4442e-04, 2.7521e-04, 2.9048e-04,
     c 3.0489e-04, 3.2646e-04, 3.3880e-04, 3.3492e-04, 3.0987e-04,
     c 2.9482e-04, 2.8711e-04, 2.6068e-04, 2.2683e-04, 1.9996e-04,
     c 1.7788e-04, 1.6101e-04, 1.3911e-04, 1.2013e-04, 1.0544e-04,
     c 9.4224e-05, 8.1256e-05, 7.3667e-05, 6.2233e-05, 5.5906e-05,
     c 5.1619e-05, 4.5140e-05, 4.0273e-05, 3.3268e-05, 3.0258e-05,
     c 2.6440e-05, 2.3103e-05, 2.0749e-05, 1.8258e-05, 1.6459e-05,
     c 1.4097e-05, 1.2052e-05, 1.0759e-05, 9.1400e-06, 8.1432e-06/
      data s0201/
     c 7.1460e-06, 6.4006e-06, 5.6995e-06, 4.9372e-06, 4.4455e-06,
     c 3.9033e-06, 3.4740e-06, 3.1269e-06, 2.8059e-06, 2.5558e-06,
     c 2.2919e-06, 2.0846e-06, 1.8983e-06, 1.7329e-06, 1.5929e-06,
     c 1.4631e-06, 1.3513e-06, 1.2461e-06, 1.1519e-06, 1.0682e-06,
     c 9.9256e-07, 9.2505e-07, 8.6367e-07, 8.0857e-07, 7.5674e-07,
     c 7.0934e-07, 6.6580e-07, 6.2580e-07, 5.8853e-07, 5.5333e-07,
     c 5.2143e-07, 4.9169e-07, 4.6431e-07, 4.3898e-07, 4.1564e-07,
     c 3.9405e-07, 3.7403e-07, 3.5544e-07, 3.3819e-07, 3.2212e-07,
     c 3.0714e-07, 2.9313e-07, 2.8003e-07, 2.6777e-07, 2.5628e-07,
     c 2.4551e-07, 2.3540e-07, 2.2591e-07, 2.1701e-07, 2.0866e-07/
      data s0251/
     c 2.0082e-07, 1.9349e-07, 1.8665e-07, 1.8027e-07, 1.7439e-07,
     c 1.6894e-07, 1.6400e-07, 1.5953e-07, 1.5557e-07, 1.5195e-07,
     c 1.4888e-07, 1.4603e-07, 1.4337e-07, 1.4093e-07, 1.3828e-07,
     c 1.3569e-07, 1.3270e-07, 1.2984e-07, 1.2714e-07, 1.2541e-07,
     c 1.2399e-07, 1.2102e-07, 1.1878e-07, 1.1728e-07, 1.1644e-07,
     c 1.1491e-07, 1.1305e-07, 1.1235e-07, 1.1228e-07, 1.1224e-07,
     c 1.1191e-07, 1.1151e-07, 1.1098e-07, 1.1068e-07, 1.1109e-07,
     c 1.1213e-07, 1.1431e-07, 1.1826e-07, 1.2322e-07, 1.3025e-07,
     c 1.4066e-07, 1.5657e-07, 1.7214e-07, 1.9449e-07, 2.2662e-07,
     c 2.6953e-07, 3.1723e-07, 3.7028e-07, 4.4482e-07, 5.3852e-07/
      data s0301/
     c 6.2639e-07, 7.2175e-07, 7.7626e-07, 8.7248e-07, 9.6759e-07,
     c 1.0102e-06, 1.0620e-06, 1.1201e-06, 1.2107e-06, 1.2998e-06,
     c 1.3130e-06, 1.2856e-06, 1.2350e-06, 1.1489e-06, 1.0819e-06,
     c 1.0120e-06, 9.4795e-07, 9.2858e-07, 9.8060e-07, 1.0999e-06,
     c 1.1967e-06, 1.2672e-06, 1.3418e-06, 1.3864e-06, 1.4330e-06,
     c 1.4592e-06, 1.4598e-06, 1.4774e-06, 1.4726e-06, 1.4820e-06,
     c 1.5050e-06, 1.4984e-06, 1.5181e-06, 1.5888e-06, 1.6850e-06,
     c 1.7690e-06, 1.9277e-06, 2.1107e-06, 2.3068e-06, 2.5347e-06,
     c 2.8069e-06, 3.1345e-06, 3.5822e-06, 3.9051e-06, 4.3422e-06,
     c 4.8704e-06, 5.5351e-06, 6.3454e-06, 7.2690e-06, 8.2974e-06/
      data s0351/
     c 9.7609e-06, 1.1237e-05, 1.3187e-05, 1.5548e-05, 1.8784e-05,
     c 2.1694e-05, 2.5487e-05, 3.0092e-05, 3.5385e-05, 4.2764e-05,
     c 4.9313e-05, 5.5800e-05, 6.2968e-05, 7.1060e-05, 7.7699e-05,
     c 8.7216e-05, 8.9335e-05, 9.2151e-05, 9.2779e-05, 9.4643e-05,
     c 9.7978e-05, 1.0008e-04, 1.0702e-04, 1.1026e-04, 1.0828e-04,
     c 1.0550e-04, 1.0432e-04, 1.0428e-04, 9.8980e-05, 9.4992e-05,
     c 9.5159e-05, 1.0058e-04, 1.0738e-04, 1.1550e-04, 1.1229e-04,
     c 1.0596e-04, 1.0062e-04, 9.1742e-05, 8.4492e-05, 6.8099e-05,
     c 5.6295e-05, 4.6502e-05, 3.8071e-05, 3.0721e-05, 2.3297e-05,
     c 1.8688e-05, 1.4830e-05, 1.2049e-05, 9.6754e-06, 7.9192e-06/
      data s0401/
     c 6.6673e-06, 5.6468e-06, 4.8904e-06, 4.2289e-06, 3.6880e-06,
     c 3.2396e-06, 2.8525e-06, 2.5363e-06, 2.2431e-06, 1.9949e-06,
     c 1.7931e-06, 1.6164e-06, 1.4431e-06, 1.2997e-06, 1.1559e-06,
     c 1.0404e-06, 9.4300e-07, 8.4597e-07, 7.6133e-07, 6.8623e-07,
     c 6.2137e-07, 5.6345e-07, 5.1076e-07, 4.6246e-07, 4.1906e-07,
     c 3.8063e-07, 3.4610e-07, 3.1554e-07, 2.8795e-07, 2.6252e-07,
     c 2.3967e-07, 2.1901e-07, 2.0052e-07, 1.8384e-07, 1.6847e-07,
     c 1.5459e-07, 1.4204e-07, 1.3068e-07, 1.2036e-07, 1.1095e-07,
     c 1.0237e-07, 9.4592e-08, 8.7530e-08, 8.1121e-08, 7.5282e-08,
     c 6.9985e-08, 6.5189e-08, 6.0874e-08, 5.6989e-08, 5.3530e-08/
      data s0451/
     c 5.0418e-08, 4.7745e-08, 4.5367e-08, 4.3253e-08, 4.1309e-08,
     c 3.9695e-08, 3.8094e-08, 3.6482e-08, 3.4897e-08, 3.3500e-08,
     c 3.2302e-08, 3.0854e-08, 2.9698e-08, 2.8567e-08, 2.7600e-08,
     c 2.6746e-08, 2.5982e-08, 2.5510e-08, 2.5121e-08, 2.4922e-08,
     c 2.4909e-08, 2.5013e-08, 2.5216e-08, 2.5589e-08, 2.6049e-08,
     c 2.6451e-08, 2.6978e-08, 2.7687e-08, 2.8600e-08, 2.9643e-08,
     c 3.0701e-08, 3.2058e-08, 3.3695e-08, 3.5558e-08, 3.7634e-08,
     c 3.9875e-08, 4.2458e-08, 4.5480e-08, 4.8858e-08, 5.2599e-08,
     c 5.7030e-08, 6.2067e-08, 6.7911e-08, 7.4579e-08, 8.1902e-08,
     c 8.9978e-08, 9.9870e-08, 1.1102e-07, 1.2343e-07, 1.3732e-07/
      data s0501/
     c 1.5394e-07, 1.7318e-07, 1.9383e-07, 2.1819e-07, 2.4666e-07,
     c 2.8109e-07, 3.2236e-07, 3.7760e-07, 4.4417e-07, 5.2422e-07,
     c 6.1941e-07, 7.4897e-07, 9.2041e-07, 1.1574e-06, 1.4126e-06,
     c 1.7197e-06, 2.1399e-06, 2.6266e-06, 3.3424e-06, 3.8418e-06,
     c 4.5140e-06, 5.0653e-06, 5.8485e-06, 6.5856e-06, 6.8937e-06,
     c 6.9121e-06, 6.9005e-06, 6.9861e-06, 6.8200e-06, 6.6089e-06,
     c 6.5809e-06, 7.3496e-06, 8.0311e-06, 8.3186e-06, 8.4260e-06,
     c 9.0644e-06, 9.4965e-06, 9.4909e-06, 9.0160e-06, 9.1494e-06,
     c 9.3629e-06, 9.5944e-06, 9.5459e-06, 8.9919e-06, 8.6040e-06,
     c 7.8613e-06, 7.1567e-06, 6.2677e-06, 5.1899e-06, 4.4188e-06/
      data s0551/
     c 3.7167e-06, 3.0636e-06, 2.5573e-06, 2.0317e-06, 1.6371e-06,
     c 1.3257e-06, 1.0928e-06, 8.9986e-07, 7.4653e-07, 6.1111e-07,
     c 5.1395e-07, 4.3500e-07, 3.7584e-07, 3.2633e-07, 2.8413e-07,
     c 2.4723e-07, 2.1709e-07, 1.9294e-07, 1.7258e-07, 1.5492e-07,
     c 1.3820e-07, 1.2389e-07, 1.1189e-07, 1.0046e-07, 9.0832e-08,
     c 8.2764e-08, 7.4191e-08, 6.7085e-08, 6.0708e-08, 5.4963e-08,
     c 4.9851e-08, 4.5044e-08, 4.0916e-08, 3.7220e-08, 3.3678e-08,
     c 3.0663e-08, 2.7979e-08, 2.5495e-08, 2.3286e-08, 2.1233e-08,
     c 1.9409e-08, 1.7770e-08, 1.6260e-08, 1.4885e-08, 1.3674e-08,
     c 1.2543e-08, 1.1551e-08, 1.0655e-08, 9.8585e-09, 9.1398e-09/
      data s0601/
     c 8.4806e-09, 7.8899e-09, 7.3547e-09, 6.8670e-09, 6.4131e-09,
     c 5.9930e-09, 5.6096e-09, 5.2592e-09, 4.9352e-09, 4.6354e-09,
     c 4.3722e-09, 4.1250e-09, 3.9081e-09, 3.7118e-09, 3.5372e-09,
     c 3.3862e-09, 3.2499e-09, 3.1324e-09, 3.0313e-09, 2.9438e-09,
     c 2.8686e-09, 2.8050e-09, 2.7545e-09, 2.7149e-09, 2.6907e-09,
     c 2.6724e-09, 2.6649e-09, 2.6642e-09, 2.6725e-09, 2.6871e-09,
     c 2.7056e-09, 2.7357e-09, 2.7781e-09, 2.8358e-09, 2.9067e-09,
     c 2.9952e-09, 3.1020e-09, 3.2253e-09, 3.3647e-09, 3.5232e-09,
     c 3.7037e-09, 3.9076e-09, 4.1385e-09, 4.3927e-09, 4.6861e-09,
     c 5.0238e-09, 5.4027e-09, 5.8303e-09, 6.3208e-09, 6.8878e-09/
      data s0651/
     c 7.5419e-09, 8.3130e-09, 9.1952e-09, 1.0228e-08, 1.1386e-08,
     c 1.2792e-08, 1.4521e-08, 1.6437e-08, 1.8674e-08, 2.1160e-08,
     c 2.4506e-08, 2.8113e-08, 3.2636e-08, 3.7355e-08, 4.2234e-08,
     c 4.9282e-08, 5.7358e-08, 6.6743e-08, 7.8821e-08, 9.4264e-08,
     c 1.1542e-07, 1.3684e-07, 1.6337e-07, 2.0056e-07, 2.3252e-07,
     c 2.6127e-07, 2.9211e-07, 3.3804e-07, 3.7397e-07, 3.8205e-07,
     c 3.8810e-07, 3.9499e-07, 3.9508e-07, 3.7652e-07, 3.5859e-07,
     c 3.6198e-07, 3.7871e-07, 4.0925e-07, 4.2717e-07, 4.8241e-07,
     c 5.2008e-07, 5.6530e-07, 5.9531e-07, 6.1994e-07, 6.5080e-07,
     c 6.6355e-07, 6.9193e-07, 6.9930e-07, 7.3058e-07, 7.4678e-07/
      data s0701/
     c 7.9193e-07, 8.3627e-07, 9.1267e-07, 1.0021e-06, 1.1218e-06,
     c 1.2899e-06, 1.4447e-06, 1.7268e-06, 2.0025e-06, 2.3139e-06,
     c 2.5599e-06, 2.8920e-06, 3.3059e-06, 3.5425e-06, 3.9522e-06,
     c 4.0551e-06, 4.2818e-06, 4.2892e-06, 4.4210e-06, 4.5614e-06,
     c 4.6739e-06, 4.9482e-06, 5.1118e-06, 5.0986e-06, 4.9417e-06,
     c 4.9022e-06, 4.8449e-06, 4.8694e-06, 4.8111e-06, 4.9378e-06,
     c 5.3231e-06, 5.7362e-06, 6.2350e-06, 6.0951e-06, 5.7281e-06,
     c 5.4585e-06, 4.9032e-06, 4.3009e-06, 3.4776e-06, 2.8108e-06,
     c 2.2993e-06, 1.7999e-06, 1.3870e-06, 1.0750e-06, 8.5191e-07,
     c 6.7951e-07, 5.5336e-07, 4.6439e-07, 4.0243e-07, 3.5368e-07/
      data s0751/
     c 3.1427e-07, 2.7775e-07, 2.4486e-07, 2.1788e-07, 1.9249e-07,
     c 1.7162e-07, 1.5115e-07, 1.3478e-07, 1.2236e-07, 1.1139e-07,
     c 1.0092e-07, 9.0795e-08, 8.2214e-08, 7.4691e-08, 6.7486e-08,
     c 6.0414e-08, 5.4584e-08, 4.8754e-08, 4.3501e-08, 3.8767e-08,
     c 3.4363e-08, 3.0703e-08, 2.7562e-08, 2.4831e-08, 2.2241e-08,
     c 1.9939e-08, 1.8049e-08, 1.6368e-08, 1.4863e-08, 1.3460e-08,
     c 1.2212e-08, 1.1155e-08, 1.0185e-08, 9.3417e-09, 8.5671e-09,
     c 7.8292e-09, 7.1749e-09, 6.5856e-09, 6.0588e-09, 5.5835e-09,
     c 5.1350e-09, 4.7395e-09, 4.3771e-09, 4.0476e-09, 3.7560e-09,
     c 3.4861e-09, 3.2427e-09, 3.0240e-09, 2.8278e-09, 2.6531e-09/
      data s0801/
     c 2.4937e-09, 2.3511e-09, 2.2245e-09, 2.1133e-09, 2.0159e-09,
     c 1.9330e-09, 1.8669e-09, 1.8152e-09, 1.7852e-09, 1.7752e-09,
     c 1.7823e-09, 1.8194e-09, 1.8866e-09, 1.9759e-09, 2.0736e-09,
     c 2.2083e-09, 2.3587e-09, 2.4984e-09, 2.6333e-09, 2.8160e-09,
     c 3.0759e-09, 3.3720e-09, 3.6457e-09, 4.0668e-09, 4.4541e-09,
     c 4.7976e-09, 5.0908e-09, 5.4811e-09, 6.1394e-09, 6.3669e-09,
     c 6.5714e-09, 6.8384e-09, 7.1918e-09, 7.3741e-09, 7.2079e-09,
     c 7.2172e-09, 7.2572e-09, 7.3912e-09, 7.6188e-09, 8.3291e-09,
     c 8.7885e-09, 9.2412e-09, 1.0021e-08, 1.0752e-08, 1.1546e-08,
     c 1.1607e-08, 1.1949e-08, 1.2346e-08, 1.2516e-08, 1.2826e-08/
      data s0851/
     c 1.3053e-08, 1.3556e-08, 1.4221e-08, 1.5201e-08, 1.6661e-08,
     c 1.8385e-08, 2.0585e-08, 2.3674e-08, 2.7928e-08, 3.3901e-08,
     c 4.1017e-08, 4.9595e-08, 6.0432e-08, 7.6304e-08, 9.0764e-08,
     c 1.0798e-07, 1.2442e-07, 1.4404e-07, 1.6331e-07, 1.8339e-07,
     c 2.0445e-07, 2.2288e-07, 2.3083e-07, 2.3196e-07, 2.3919e-07,
     c 2.3339e-07, 2.3502e-07, 2.3444e-07, 2.6395e-07, 2.9928e-07,
     c 3.0025e-07, 3.0496e-07, 3.1777e-07, 3.4198e-07, 3.4739e-07,
     c 3.2696e-07, 3.4100e-07, 3.5405e-07, 3.7774e-07, 3.8285e-07,
     c 3.6797e-07, 3.5800e-07, 3.2283e-07, 2.9361e-07, 2.4881e-07,
     c 2.0599e-07, 1.7121e-07, 1.3641e-07, 1.1111e-07, 8.9413e-08/
      data s0901/
     c 7.3455e-08, 6.2078e-08, 5.2538e-08, 4.5325e-08, 3.9005e-08,
     c 3.4772e-08, 3.1203e-08, 2.8132e-08, 2.5250e-08, 2.2371e-08,
     c 2.0131e-08, 1.7992e-08, 1.6076e-08, 1.4222e-08, 1.2490e-08,
     c 1.1401e-08, 1.0249e-08, 9.2279e-09, 8.5654e-09, 7.6227e-09,
     c 6.9648e-09, 6.2466e-09, 5.7252e-09, 5.3800e-09, 4.6960e-09,
     c 4.2194e-09, 3.7746e-09, 3.3813e-09, 3.0656e-09, 2.6885e-09,
     c 2.4311e-09, 2.1572e-09, 1.8892e-09, 1.7038e-09, 1.4914e-09,
     c 1.3277e-09, 1.1694e-09, 1.0391e-09, 9.2779e-10, 8.3123e-10,
     c 7.4968e-10, 6.8385e-10, 6.2915e-10, 5.7784e-10, 5.2838e-10,
     c 4.8382e-10, 4.4543e-10, 4.1155e-10, 3.7158e-10, 3.3731e-10/
      data s0951/
     c 3.0969e-10, 2.8535e-10, 2.6416e-10, 2.4583e-10, 2.2878e-10,
     c 2.1379e-10, 2.0073e-10, 1.8907e-10, 1.7866e-10, 1.6936e-10,
     c 1.6119e-10, 1.5424e-10, 1.4847e-10, 1.4401e-10, 1.4068e-10,
     c 1.3937e-10, 1.3943e-10, 1.4281e-10, 1.4766e-10, 1.5701e-10,
     c 1.7079e-10, 1.8691e-10, 2.0081e-10, 2.1740e-10, 2.4847e-10,
     c 2.6463e-10, 2.7087e-10, 2.7313e-10, 2.8352e-10, 2.9511e-10,
     c 2.8058e-10, 2.7227e-10, 2.7356e-10, 2.8012e-10, 2.8034e-10,
     c 2.9031e-10, 3.1030e-10, 3.3745e-10, 3.8152e-10, 4.0622e-10,
     c 4.2673e-10, 4.3879e-10, 4.5488e-10, 4.7179e-10, 4.6140e-10,
     c 4.6339e-10, 4.6716e-10, 4.7024e-10, 4.7931e-10, 4.8503e-10/
      data s1001/
     c 4.9589e-10, 4.9499e-10, 5.0363e-10, 5.3184e-10, 5.6451e-10,
     c 6.0932e-10, 6.6469e-10, 7.4076e-10, 8.3605e-10, 9.4898e-10,
     c 1.0935e-09, 1.2593e-09, 1.4913e-09, 1.8099e-09, 2.1842e-09,
     c 2.7284e-09, 3.2159e-09, 3.7426e-09, 4.5226e-09, 5.3512e-09,
     c 6.1787e-09, 6.8237e-09, 7.9421e-09, 9.0002e-09, 9.6841e-09,
     c 9.9558e-09, 1.0232e-08, 1.0591e-08, 1.0657e-08, 1.0441e-08,
     c 1.0719e-08, 1.1526e-08, 1.2962e-08, 1.4336e-08, 1.6150e-08,
     c 1.8417e-08, 2.0725e-08, 2.3426e-08, 2.5619e-08, 2.7828e-08,
     c 3.0563e-08, 3.3438e-08, 3.6317e-08, 4.0400e-08, 4.4556e-08,
     c 5.0397e-08, 5.3315e-08, 5.9185e-08, 6.5311e-08, 6.9188e-08/
      data s1051/
     c 7.7728e-08, 7.9789e-08, 8.6598e-08, 8.7768e-08, 9.1773e-08,
     c 9.7533e-08, 1.0007e-07, 1.0650e-07, 1.0992e-07, 1.0864e-07,
     c 1.0494e-07, 1.0303e-07, 1.0031e-07, 1.0436e-07, 1.0537e-07,
     c 1.1184e-07, 1.2364e-07, 1.3651e-07, 1.4881e-07, 1.4723e-07,
     c 1.4118e-07, 1.3371e-07, 1.1902e-07, 1.0007e-07, 7.9628e-08,
     c 6.4362e-08, 5.0243e-08, 3.8133e-08, 2.9400e-08, 2.3443e-08,
     c 1.9319e-08, 1.6196e-08, 1.4221e-08, 1.2817e-08, 1.1863e-08,
     c 1.1383e-08, 1.1221e-08, 1.1574e-08, 1.1661e-08, 1.2157e-08,
     c 1.2883e-08, 1.3295e-08, 1.4243e-08, 1.4240e-08, 1.4614e-08,
     c 1.4529e-08, 1.4685e-08, 1.4974e-08, 1.4790e-08, 1.4890e-08/
      data s1101/
     c 1.4704e-08, 1.4142e-08, 1.3374e-08, 1.2746e-08, 1.2172e-08,
     c 1.2336e-08, 1.2546e-08, 1.3065e-08, 1.4090e-08, 1.5215e-08,
     c 1.6540e-08, 1.6144e-08, 1.5282e-08, 1.4358e-08, 1.2849e-08,
     c 1.0998e-08, 8.6956e-09, 7.0881e-09, 5.5767e-09, 4.2792e-09,
     c 3.2233e-09, 2.5020e-09, 1.9985e-09, 1.5834e-09, 1.3015e-09,
     c 1.0948e-09, 9.4141e-10, 8.1465e-10, 7.1517e-10, 6.2906e-10,
     c 5.5756e-10, 4.9805e-10, 4.3961e-10, 3.9181e-10, 3.5227e-10,
     c 3.1670e-10, 2.8667e-10, 2.5745e-10, 2.3212e-10, 2.0948e-10,
     c 1.8970e-10, 1.7239e-10, 1.5659e-10, 1.4301e-10, 1.3104e-10,
     c 1.2031e-10, 1.1095e-10, 1.0262e-10, 9.5130e-11, 8.8595e-11/
      data s1151/
     c 8.2842e-11, 7.7727e-11, 7.3199e-11, 6.9286e-11, 6.5994e-11,
     c 6.3316e-11, 6.1244e-11, 5.9669e-11, 5.8843e-11, 5.8832e-11,
     c 5.9547e-11, 6.1635e-11, 6.4926e-11, 7.0745e-11, 7.8802e-11,
     c 8.6724e-11, 1.0052e-10, 1.1575e-10, 1.3626e-10, 1.5126e-10,
     c 1.6751e-10, 1.9239e-10, 2.1748e-10, 2.2654e-10, 2.2902e-10,
     c 2.3240e-10, 2.4081e-10, 2.3930e-10, 2.2378e-10, 2.2476e-10,
     c 2.2791e-10, 2.4047e-10, 2.5305e-10, 2.8073e-10, 3.1741e-10,
     c 3.6592e-10, 4.1495e-10, 4.6565e-10, 5.0990e-10, 5.5607e-10,
     c 6.1928e-10, 6.6779e-10, 7.3350e-10, 8.1434e-10, 8.9635e-10,
     c 9.9678e-10, 1.1256e-09, 1.2999e-09, 1.4888e-09, 1.7642e-09/
      data s1201/
     c 1.9606e-09, 2.2066e-09, 2.4601e-09, 2.7218e-09, 3.0375e-09,
     c 3.1591e-09, 3.2852e-09, 3.2464e-09, 3.3046e-09, 3.2710e-09,
     c 3.2601e-09, 3.3398e-09, 3.7446e-09, 4.0795e-09, 4.0284e-09,
     c 4.0584e-09, 4.1677e-09, 4.5358e-09, 4.4097e-09, 4.2744e-09,
     c 4.5449e-09, 4.8147e-09, 5.2656e-09, 5.2476e-09, 5.0275e-09,
     c 4.7968e-09, 4.3654e-09, 3.9530e-09, 3.2447e-09, 2.6489e-09,
     c 2.1795e-09, 1.7880e-09, 1.4309e-09, 1.1256e-09, 9.1903e-10,
     c 7.6533e-10, 6.3989e-10, 5.5496e-10, 4.9581e-10, 4.5722e-10,
     c 4.3898e-10, 4.3505e-10, 4.3671e-10, 4.5329e-10, 4.6827e-10,
     c 4.9394e-10, 5.1122e-10, 5.1649e-10, 5.0965e-10, 4.9551e-10/
      data s1251/
     c 4.8928e-10, 4.7947e-10, 4.7989e-10, 4.9071e-10, 4.8867e-10,
     c 4.7260e-10, 4.5756e-10, 4.5400e-10, 4.5993e-10, 4.4042e-10,
     c 4.3309e-10, 4.4182e-10, 4.6735e-10, 5.0378e-10, 5.2204e-10,
     c 5.0166e-10, 4.6799e-10, 4.3119e-10, 3.8803e-10, 3.3291e-10,
     c 2.6289e-10, 2.1029e-10, 1.7011e-10, 1.3345e-10, 1.0224e-10,
     c 7.8207e-11, 6.2451e-11, 5.0481e-11, 4.1507e-11, 3.5419e-11,
     c 3.0582e-11, 2.6900e-11, 2.3778e-11, 2.1343e-11, 1.9182e-11,
     c 1.7162e-11, 1.5391e-11, 1.3877e-11, 1.2619e-11, 1.1450e-11,
     c 1.0461e-11, 9.6578e-12, 8.9579e-12, 8.3463e-12, 7.8127e-12,
     c 7.3322e-12, 6.9414e-12, 6.6037e-12, 6.3285e-12, 6.1095e-12/
      data s1301/
     c 5.9387e-12, 5.8118e-12, 5.7260e-12, 5.6794e-12, 5.6711e-12,
     c 5.7003e-12, 5.7670e-12, 5.8717e-12, 6.0151e-12, 6.1984e-12,
     c 6.4232e-12, 6.6918e-12, 7.0065e-12, 7.3705e-12, 7.7873e-12,
     c 8.2612e-12, 8.7972e-12, 9.4009e-12, 1.0079e-11, 1.0840e-11,
     c 1.1692e-11, 1.2648e-11, 1.3723e-11, 1.4935e-11, 1.6313e-11,
     c 1.7905e-11, 1.9740e-11, 2.1898e-11, 2.4419e-11, 2.7426e-11,
     c 3.0869e-11, 3.4235e-11, 3.7841e-11, 4.1929e-11, 4.6776e-11,
     c 5.2123e-11, 5.8497e-11, 6.5294e-11, 7.4038e-11, 8.4793e-11,
     c 9.6453e-11, 1.1223e-10, 1.2786e-10, 1.4882e-10, 1.7799e-10,
     c 2.0766e-10, 2.4523e-10, 2.8591e-10, 3.3386e-10, 4.0531e-10/
      data s1351/
     c 4.7663e-10, 5.4858e-10, 6.3377e-10, 7.1688e-10, 8.4184e-10,
     c 9.5144e-10, 1.0481e-09, 1.1356e-09, 1.2339e-09, 1.3396e-09,
     c 1.4375e-09, 1.5831e-09, 1.7323e-09, 1.9671e-09, 2.2976e-09,
     c 2.6679e-09, 3.0777e-09, 3.4321e-09, 3.8192e-09, 4.2711e-09,
     c 4.4903e-09, 4.8931e-09, 5.2253e-09, 5.4040e-09, 5.6387e-09,
     c 5.6704e-09, 6.0345e-09, 6.1079e-09, 6.2576e-09, 6.4039e-09,
     c 6.3776e-09, 6.1878e-09, 5.8616e-09, 5.7036e-09, 5.5840e-09,
     c 5.6905e-09, 5.8931e-09, 6.2478e-09, 6.8291e-09, 7.4528e-09,
     c 7.6078e-09, 7.3898e-09, 6.7573e-09, 5.9827e-09, 5.0927e-09,
     c 4.0099e-09, 3.1933e-09, 2.4296e-09, 1.8485e-09, 1.4595e-09/
      data s1401/
     c 1.2017e-09, 1.0164e-09, 8.7433e-10, 7.7108e-10, 7.0049e-10,
     c 6.5291e-10, 6.1477e-10, 5.9254e-10, 5.8150e-10, 5.7591e-10,
     c 5.8490e-10, 5.8587e-10, 5.9636e-10, 6.2408e-10, 6.5479e-10,
     c 7.0480e-10, 7.2313e-10, 7.5524e-10, 8.0863e-10, 8.3386e-10,
     c 9.2342e-10, 9.6754e-10, 1.0293e-09, 1.0895e-09, 1.1330e-09,
     c 1.2210e-09, 1.2413e-09, 1.2613e-09, 1.2671e-09, 1.2225e-09,
     c 1.1609e-09, 1.0991e-09, 1.0600e-09, 1.0570e-09, 1.0818e-09,
     c 1.1421e-09, 1.2270e-09, 1.3370e-09, 1.4742e-09, 1.4946e-09,
     c 1.4322e-09, 1.3210e-09, 1.1749e-09, 1.0051e-09, 7.8387e-10,
     c 6.1844e-10, 4.6288e-10, 3.4164e-10, 2.5412e-10, 1.9857e-10/
      data s1451/
     c 1.5876e-10, 1.2966e-10, 1.0920e-10, 9.4811e-11, 8.3733e-11,
     c 7.3906e-11, 6.7259e-11, 6.1146e-11, 5.7119e-11, 5.3546e-11,
     c 4.8625e-11, 4.4749e-11, 4.1089e-11, 3.7825e-11, 3.4465e-11,
     c 3.1018e-11, 2.8109e-11, 2.5610e-11, 2.2859e-11, 2.0490e-11,
     c 1.8133e-11, 1.5835e-11, 1.3949e-11, 1.2295e-11, 1.0799e-11,
     c 9.6544e-12, 8.7597e-12, 7.9990e-12, 7.3973e-12, 6.9035e-12,
     c 6.4935e-12, 6.1195e-12, 5.8235e-12, 5.5928e-12, 5.4191e-12,
     c 5.2993e-12, 5.2338e-12, 5.2272e-12, 5.2923e-12, 5.4252e-12,
     c 5.6523e-12, 5.9433e-12, 6.3197e-12, 6.9016e-12, 7.5016e-12,
     c 8.2885e-12, 9.4050e-12, 1.0605e-11, 1.2257e-11, 1.3622e-11/
      data s1501/
     c 1.5353e-11, 1.7543e-11, 1.9809e-11, 2.2197e-11, 2.4065e-11,
     c 2.6777e-11, 2.9751e-11, 3.2543e-11, 3.5536e-11, 3.9942e-11,
     c 4.6283e-11, 5.4556e-11, 6.5490e-11, 7.6803e-11, 9.0053e-11,
     c 1.0852e-10, 1.2946e-10, 1.4916e-10, 1.7748e-10, 2.0073e-10,
     c 2.2485e-10, 2.5114e-10, 2.7715e-10, 3.1319e-10, 3.3305e-10,
     c 3.5059e-10, 3.5746e-10, 3.6311e-10, 3.7344e-10, 3.6574e-10,
     c 3.7539e-10, 3.9434e-10, 4.3510e-10, 4.3340e-10, 4.2588e-10,
     c 4.3977e-10, 4.6062e-10, 4.7687e-10, 4.6457e-10, 4.8578e-10,
     c 5.2344e-10, 5.6752e-10, 5.8702e-10, 5.6603e-10, 5.3784e-10,
     c 4.9181e-10, 4.3272e-10, 3.5681e-10, 2.8814e-10, 2.3320e-10/
      data s1551/
     c 1.8631e-10, 1.4587e-10, 1.1782e-10, 9.8132e-11, 8.2528e-11,
     c 6.9174e-11, 6.1056e-11, 5.3459e-11, 4.7116e-11, 4.1878e-11,
     c 3.8125e-11, 3.6347e-11, 3.5071e-11, 3.3897e-11, 3.3541e-11,
     c 3.3563e-11, 3.5469e-11, 3.8111e-11, 3.8675e-11, 4.1333e-11,
     c 4.3475e-11, 4.6476e-11, 4.9761e-11, 5.1380e-11, 5.4135e-11,
     c 5.3802e-11, 5.5158e-11, 5.6864e-11, 5.9311e-11, 6.3827e-11,
     c 6.7893e-11, 6.8230e-11, 6.6694e-11, 6.6018e-11, 6.4863e-11,
     c 6.5893e-11, 6.3813e-11, 6.4741e-11, 6.8630e-11, 7.0255e-11,
     c 7.0667e-11, 6.8810e-11, 6.4104e-11, 5.8136e-11, 4.7242e-11,
     c 3.7625e-11, 3.1742e-11, 2.5581e-11, 1.8824e-11, 1.3303e-11/
      data s1601/
     c 9.6919e-12, 7.5353e-12, 6.0986e-12, 5.0742e-12, 4.3094e-12,
     c 3.7190e-12, 3.2520e-12, 2.8756e-12, 2.5680e-12, 2.3139e-12,
     c 2.1025e-12, 1.9257e-12, 1.7777e-12, 1.6539e-12, 1.5508e-12,
     c 1.4657e-12, 1.3966e-12, 1.3417e-12, 1.2998e-12, 1.2700e-12,
     c 1.2514e-12, 1.2437e-12, 1.2463e-12, 1.2592e-12, 1.2823e-12,
     c 1.3157e-12, 1.3596e-12, 1.4144e-12, 1.4806e-12, 1.5588e-12,
     c 1.6497e-12, 1.7544e-12, 1.8738e-12, 2.0094e-12, 2.1626e-12,
     c 2.3354e-12, 2.5297e-12, 2.7483e-12, 2.9941e-12, 3.2708e-12,
     c 3.5833e-12, 3.9374e-12, 4.3415e-12, 4.8079e-12, 5.3602e-12,
     c 5.9816e-12, 6.7436e-12, 7.6368e-12, 8.6812e-12, 9.8747e-12/
      data s1651/
     c 1.1350e-11, 1.3181e-11, 1.5406e-11, 1.7868e-11, 2.0651e-11,
     c 2.4504e-11, 2.9184e-11, 3.4159e-11, 3.9979e-11, 4.8704e-11,
     c 5.7856e-11, 6.7576e-11, 7.9103e-11, 9.4370e-11, 1.1224e-10,
     c 1.3112e-10, 1.5674e-10, 1.8206e-10, 2.0576e-10, 2.3187e-10,
     c 2.7005e-10, 3.0055e-10, 3.3423e-10, 3.6956e-10, 3.8737e-10,
     c 4.2630e-10, 4.5154e-10, 4.8383e-10, 5.3582e-10, 5.8109e-10,
     c 6.3741e-10, 6.3874e-10, 6.3870e-10, 6.5818e-10, 6.5056e-10,
     c 6.5291e-10, 6.3159e-10, 6.3984e-10, 6.4549e-10, 6.5444e-10,
     c 6.7035e-10, 6.7665e-10, 6.9124e-10, 6.8451e-10, 6.9255e-10,
     c 6.9923e-10, 7.0396e-10, 6.7715e-10, 6.0371e-10, 5.3774e-10/
      data s1701/
     c 4.6043e-10, 3.7635e-10, 2.9484e-10, 2.2968e-10, 1.8185e-10,
     c 1.4191e-10, 1.1471e-10, 9.4790e-11, 7.9613e-11, 6.7989e-11,
     c 5.9391e-11, 5.2810e-11, 4.7136e-11, 4.2618e-11, 3.8313e-11,
     c 3.4686e-11, 3.1669e-11, 2.9110e-11, 2.6871e-11, 2.5074e-11,
     c 2.4368e-11, 2.3925e-11, 2.4067e-11, 2.4336e-11, 2.4704e-11,
     c 2.5823e-11, 2.7177e-11, 2.9227e-11, 3.1593e-11, 3.5730e-11,
     c 4.0221e-11, 4.3994e-11, 4.8448e-11, 5.3191e-11, 5.8552e-11,
     c 6.3458e-11, 6.6335e-11, 7.2457e-11, 7.9091e-11, 8.2234e-11,
     c 8.7668e-11, 8.7951e-11, 9.2952e-11, 9.6157e-11, 9.5926e-11,
     c 1.0120e-10, 1.0115e-10, 9.9577e-11, 9.6633e-11, 9.2891e-11/
      data s1751/
     c 9.3315e-11, 9.5584e-11, 1.0064e-10, 1.0509e-10, 1.1455e-10,
     c 1.2443e-10, 1.2963e-10, 1.2632e-10, 1.1308e-10, 1.0186e-10,
     c 8.5880e-11, 6.7863e-11, 5.1521e-11, 3.7780e-11, 2.8842e-11,
     c 2.2052e-11, 1.7402e-11, 1.4406e-11, 1.1934e-11, 1.0223e-11,
     c 8.9544e-12, 7.9088e-12, 7.0675e-12, 6.2222e-12, 5.6051e-12,
     c 5.0502e-12, 4.5578e-12, 4.2636e-12, 3.9461e-12, 3.7599e-12,
     c 3.5215e-12, 3.2467e-12, 3.0018e-12, 2.6558e-12, 2.3928e-12,
     c 2.0707e-12, 1.7575e-12, 1.5114e-12, 1.2941e-12, 1.1004e-12,
     c 9.5175e-13, 8.2894e-13, 7.3253e-13, 6.5551e-13, 5.9098e-13,
     c 5.3548e-13, 4.8697e-13, 4.4413e-13, 4.0600e-13, 3.7188e-13/
      data s1801/
     c 3.4121e-13, 3.1356e-13, 2.8856e-13, 2.6590e-13, 2.4533e-13,
     c 2.2663e-13, 2.0960e-13, 1.9407e-13, 1.7990e-13, 1.6695e-13,
     c 1.5512e-13, 1.4429e-13, 1.3437e-13, 1.2527e-13, 1.1693e-13,
     c 1.0927e-13, 1.0224e-13, 9.5767e-14, 8.9816e-14, 8.4335e-14,
     c 7.9285e-14, 7.4626e-14, 7.0325e-14, 6.6352e-14, 6.2676e-14,
     c 5.9274e-14, 5.6121e-14, 5.3195e-14, 5.0479e-14, 4.7953e-14,
     c 4.5602e-14, 4.3411e-14, 4.1367e-14, 3.9456e-14, 3.7670e-14,
     c 3.5996e-14, 3.4427e-14, 3.2952e-14, 3.1566e-14, 3.0261e-14,
     c 2.9030e-14, 2.7868e-14, 2.6770e-14, 2.5730e-14, 2.4745e-14,
     c 2.3809e-14, 2.2921e-14, 2.2076e-14, 2.1271e-14, 2.0504e-14/
      data s1851/
     c 1.9772e-14, 1.9073e-14, 1.8404e-14, 1.7764e-14, 1.7151e-14,
     c 1.6564e-14, 1.6000e-14, 1.5459e-14, 1.4939e-14, 1.4439e-14,
     c 1.3958e-14, 1.3495e-14, 1.3049e-14, 1.2620e-14, 1.2206e-14,
     c 1.1807e-14, 1.1422e-14, 1.1050e-14, 1.0691e-14, 1.0345e-14,
     c 1.0010e-14, 9.6870e-15, 9.3747e-15, 9.0727e-15, 8.7808e-15,
     c 8.4986e-15, 8.2257e-15, 7.9617e-15, 7.7064e-15, 7.4594e-15,
     c 7.2204e-15, 6.9891e-15, 6.7653e-15, 6.5488e-15, 6.3392e-15,
     c 6.1363e-15, 5.9399e-15, 5.7499e-15, 5.5659e-15, 5.3878e-15,
     c 5.2153e-15, 5.0484e-15, 4.8868e-15, 4.7303e-15, 4.5788e-15,
     c 4.4322e-15, 4.2902e-15, 4.1527e-15, 4.0196e-15, 3.8907e-15/
      data s1901/
     c 3.7659e-15, 3.6451e-15, 3.5281e-15, 3.4149e-15, 3.3052e-15,
     c 3.1991e-15, 3.0963e-15, 2.9967e-15, 2.9004e-15, 2.8071e-15,
     c 2.7167e-15, 2.6293e-15, 2.5446e-15, 2.4626e-15, 2.3833e-15,
     c 2.3064e-15, 2.2320e-15, 2.1600e-15, 2.0903e-15, 2.0228e-15,
     c 1.9574e-15, 1.8942e-15, 1.8329e-15, 1.7736e-15, 1.7163e-15,
     c 1.6607e-15, 1.6069e-15, 1.5548e-15, 1.5044e-15, 1.4557e-15,
     c 1.4084e-15, 1.3627e-15, 1.3185e-15, 1.2757e-15, 1.2342e-15,
     c 1.1941e-15, 1.1552e-15, 1.1177e-15, 1.0813e-15, 1.0461e-15,
     c 1.0120e-15, 9.7900e-16, 9.4707e-16, 9.1618e-16, 8.8628e-16,
     c 8.5734e-16, 8.2933e-16, 8.0223e-16, 7.7600e-16, 7.5062e-16/
      data s1951/
     c 7.2606e-16, 7.0229e-16, 6.7929e-16, 6.5703e-16, 6.3550e-16,
     c 6.1466e-16, 5.9449e-16, 5.7498e-16, 5.5610e-16, 5.3783e-16,
     c 5.2015e-16, 5.0305e-16, 4.8650e-16, 4.7049e-16, 4.5500e-16,
     c 4.4002e-16, 4.2552e-16, 4.1149e-16, 3.9792e-16, 3.8479e-16,
     c 3.7209e-16, 3.5981e-16, 3.4792e-16, 3.3642e-16, 3.2530e-16,
     c 3.1454e-16, 3.0413e-16, 2.9406e-16, 2.8432e-16, 2.7490e-16,
     c 2.6579e-16, 2.5697e-16, 2.4845e-16, 2.4020e-16, 2.3223e-16,
     c 2.2451e-16, 2.1705e-16, 2.0984e-16, 2.0286e-16, 1.9611e-16,
     c 1.8958e-16, 1.8327e-16, 1.7716e-16, 1.7126e-16, 1.6555e-16,
     c 1.6003e-16, 1.5469e-16, 1.4952e-16, 1.4453e-16, 1.3970e-16/
      data s2001/
     c 1.3503e-16/
c
      end
c=======================================================================
      block data sf260
c>    block data
c               06/28/82
c               units of (cm**3/mol) * 1.e-20
c
      common /s260/ v1,v2,dv,s0000(2),
     1      s0001(50),s0051(50),s0101(50),s0151(50),s0201(50),s0251(50),
     2      s0301(50),s0351(50),s0401(50),s0451(50),s0501(50),s0551(50),
     3      s0601(50),s0651(50),s0701(50),s0751(50),s0801(50),s0851(50),
     4      s0901(50),s0951(50),s1001(50),s1051(50),s1101(50),s1151(50),
     5      s1201(50),s1251(50),s1301(50),s1351(50),s1401(50),s1451(50),
     6      s1501(50),s1551(50),s1601(50),s1651(50),s1701(50),s1751(50),
     7      s1801(50),s1851(50),s1901(50),s1951(50),s2001(1)
c
       data v1,v2,dv/ -20.0, 20000.0, 10.0/
c
      data s0000/ 1.7750e-01, 1.7045e-01/
      data s0001/
     c 1.6457e-01, 1.7045e-01, 1.7750e-01, 2.0036e-01, 2.1347e-01,
     c 2.2454e-01, 2.3428e-01, 2.3399e-01, 2.3022e-01, 2.0724e-01,
     c 1.9712e-01, 1.8317e-01, 1.6724e-01, 1.4780e-01, 1.2757e-01,
     c 1.1626e-01, 1.0098e-01, 8.9033e-02, 7.9770e-02, 6.7416e-02,
     c 5.9588e-02, 5.1117e-02, 4.6218e-02, 4.2179e-02, 3.4372e-02,
     c 2.9863e-02, 2.5252e-02, 2.2075e-02, 1.9209e-02, 1.5816e-02,
     c 1.3932e-02, 1.1943e-02, 1.0079e-02, 8.7667e-03, 7.4094e-03,
     c 6.4967e-03, 5.5711e-03, 4.8444e-03, 4.2552e-03, 3.6953e-03,
     c 3.2824e-03, 2.9124e-03, 2.6102e-03, 2.3370e-03, 2.1100e-03,
     c 1.9008e-03, 1.7145e-03, 1.5573e-03, 1.4206e-03, 1.2931e-03/
      data s0051/
     c 1.1803e-03, 1.0774e-03, 9.8616e-04, 9.0496e-04, 8.3071e-04,
     c 7.6319e-04, 7.0149e-04, 6.4637e-04, 5.9566e-04, 5.4987e-04,
     c 5.0768e-04, 4.6880e-04, 4.3317e-04, 4.0037e-04, 3.7064e-04,
     c 3.4325e-04, 3.1809e-04, 2.9501e-04, 2.7382e-04, 2.5430e-04,
     c 2.3630e-04, 2.1977e-04, 2.0452e-04, 1.9042e-04, 1.7740e-04,
     c 1.6544e-04, 1.5442e-04, 1.4425e-04, 1.3486e-04, 1.2618e-04,
     c 1.1817e-04, 1.1076e-04, 1.0391e-04, 9.7563e-05, 9.1696e-05,
     c 8.6272e-05, 8.1253e-05, 7.6607e-05, 7.2302e-05, 6.8311e-05,
     c 6.4613e-05, 6.1183e-05, 5.8001e-05, 5.5048e-05, 5.2307e-05,
     c 4.9761e-05, 4.7395e-05, 4.5197e-05, 4.3155e-05, 4.1256e-05/
      data s0101/
     c 3.9491e-05, 3.7849e-05, 3.6324e-05, 3.4908e-05, 3.3594e-05,
     c 3.2374e-05, 3.1244e-05, 3.0201e-05, 2.9240e-05, 2.8356e-05,
     c 2.7547e-05, 2.6814e-05, 2.6147e-05, 2.5551e-05, 2.5029e-05,
     c 2.4582e-05, 2.4203e-05, 2.3891e-05, 2.3663e-05, 2.3531e-05,
     c 2.3483e-05, 2.3516e-05, 2.3694e-05, 2.4032e-05, 2.4579e-05,
     c 2.5234e-05, 2.6032e-05, 2.7119e-05, 2.8631e-05, 3.0848e-05,
     c 3.3262e-05, 3.6635e-05, 4.0732e-05, 4.5923e-05, 5.3373e-05,
     c 6.1875e-05, 7.2031e-05, 8.5980e-05, 9.8642e-05, 1.1469e-04,
     c 1.3327e-04, 1.5390e-04, 1.7513e-04, 2.0665e-04, 2.3609e-04,
     c 2.6220e-04, 2.8677e-04, 3.2590e-04, 3.8624e-04, 4.1570e-04/
      data s0151/
     c 4.5207e-04, 4.9336e-04, 5.4500e-04, 5.8258e-04, 5.8086e-04,
     c 5.6977e-04, 5.3085e-04, 4.8020e-04, 4.3915e-04, 4.0343e-04,
     c 3.7853e-04, 3.7025e-04, 3.9637e-04, 4.4675e-04, 4.7072e-04,
     c 4.9022e-04, 5.2076e-04, 5.3676e-04, 5.2755e-04, 4.8244e-04,
     c 4.5473e-04, 4.3952e-04, 3.9614e-04, 3.4086e-04, 2.9733e-04,
     c 2.6367e-04, 2.3767e-04, 2.0427e-04, 1.7595e-04, 1.5493e-04,
     c 1.3851e-04, 1.1874e-04, 1.0735e-04, 9.0490e-05, 8.1149e-05,
     c 7.4788e-05, 6.5438e-05, 5.8248e-05, 4.8076e-05, 4.3488e-05,
     c 3.7856e-05, 3.3034e-05, 2.9592e-05, 2.6088e-05, 2.3497e-05,
     c 2.0279e-05, 1.7526e-05, 1.5714e-05, 1.3553e-05, 1.2145e-05/
      data s0201/
     c 1.0802e-05, 9.7681e-06, 8.8196e-06, 7.8291e-06, 7.1335e-06,
     c 6.4234e-06, 5.8391e-06, 5.3532e-06, 4.9079e-06, 4.5378e-06,
     c 4.1716e-06, 3.8649e-06, 3.5893e-06, 3.3406e-06, 3.1199e-06,
     c 2.9172e-06, 2.7348e-06, 2.5644e-06, 2.4086e-06, 2.2664e-06,
     c 2.1359e-06, 2.0159e-06, 1.9051e-06, 1.8031e-06, 1.7074e-06,
     c 1.6185e-06, 1.5356e-06, 1.4584e-06, 1.3861e-06, 1.3179e-06,
     c 1.2545e-06, 1.1951e-06, 1.1395e-06, 1.0873e-06, 1.0384e-06,
     c 9.9250e-07, 9.4935e-07, 9.0873e-07, 8.7050e-07, 8.3446e-07,
     c 8.0046e-07, 7.6834e-07, 7.3800e-07, 7.0931e-07, 6.8217e-07,
     c 6.5648e-07, 6.3214e-07, 6.0909e-07, 5.8725e-07, 5.6655e-07/
      data s0251/
     c 5.4693e-07, 5.2835e-07, 5.1077e-07, 4.9416e-07, 4.7853e-07,
     c 4.6381e-07, 4.5007e-07, 4.3728e-07, 4.2550e-07, 4.1450e-07,
     c 4.0459e-07, 3.9532e-07, 3.8662e-07, 3.7855e-07, 3.7041e-07,
     c 3.6254e-07, 3.5420e-07, 3.4617e-07, 3.3838e-07, 3.3212e-07,
     c 3.2655e-07, 3.1865e-07, 3.1203e-07, 3.0670e-07, 3.0252e-07,
     c 2.9749e-07, 2.9184e-07, 2.8795e-07, 2.8501e-07, 2.8202e-07,
     c 2.7856e-07, 2.7509e-07, 2.7152e-07, 2.6844e-07, 2.6642e-07,
     c 2.6548e-07, 2.6617e-07, 2.6916e-07, 2.7372e-07, 2.8094e-07,
     c 2.9236e-07, 3.1035e-07, 3.2854e-07, 3.5481e-07, 3.9377e-07,
     c 4.4692e-07, 5.0761e-07, 5.7715e-07, 6.7725e-07, 8.0668e-07/
      data s0301/
     c 9.3716e-07, 1.0797e-06, 1.1689e-06, 1.3217e-06, 1.4814e-06,
     c 1.5627e-06, 1.6519e-06, 1.7601e-06, 1.9060e-06, 2.0474e-06,
     c 2.0716e-06, 2.0433e-06, 1.9752e-06, 1.8466e-06, 1.7526e-06,
     c 1.6657e-06, 1.5870e-06, 1.5633e-06, 1.6520e-06, 1.8471e-06,
     c 1.9953e-06, 2.0975e-06, 2.2016e-06, 2.2542e-06, 2.3081e-06,
     c 2.3209e-06, 2.2998e-06, 2.3056e-06, 2.2757e-06, 2.2685e-06,
     c 2.2779e-06, 2.2348e-06, 2.2445e-06, 2.3174e-06, 2.4284e-06,
     c 2.5290e-06, 2.7340e-06, 2.9720e-06, 3.2332e-06, 3.5392e-06,
     c 3.9013e-06, 4.3334e-06, 4.9088e-06, 5.3428e-06, 5.9142e-06,
     c 6.6106e-06, 7.4709e-06, 8.5019e-06, 9.6835e-06, 1.0984e-05/
      data s0351/
     c 1.2831e-05, 1.4664e-05, 1.7080e-05, 2.0103e-05, 2.4148e-05,
     c 2.7948e-05, 3.2855e-05, 3.9046e-05, 4.6429e-05, 5.6633e-05,
     c 6.6305e-05, 7.6048e-05, 8.7398e-05, 1.0034e-04, 1.1169e-04,
     c 1.2813e-04, 1.3354e-04, 1.3952e-04, 1.4204e-04, 1.4615e-04,
     c 1.5144e-04, 1.5475e-04, 1.6561e-04, 1.7135e-04, 1.6831e-04,
     c 1.6429e-04, 1.6353e-04, 1.6543e-04, 1.5944e-04, 1.5404e-04,
     c 1.5458e-04, 1.6287e-04, 1.7277e-04, 1.8387e-04, 1.7622e-04,
     c 1.6360e-04, 1.5273e-04, 1.3667e-04, 1.2364e-04, 9.7576e-05,
     c 7.9140e-05, 6.4241e-05, 5.1826e-05, 4.1415e-05, 3.1347e-05,
     c 2.5125e-05, 2.0027e-05, 1.6362e-05, 1.3364e-05, 1.1117e-05/
      data s0401/
     c 9.4992e-06, 8.1581e-06, 7.1512e-06, 6.2692e-06, 5.5285e-06,
     c 4.9000e-06, 4.3447e-06, 3.8906e-06, 3.4679e-06, 3.1089e-06,
     c 2.8115e-06, 2.5496e-06, 2.2982e-06, 2.0861e-06, 1.8763e-06,
     c 1.7035e-06, 1.5548e-06, 1.4107e-06, 1.2839e-06, 1.1706e-06,
     c 1.0709e-06, 9.8099e-07, 8.9901e-07, 8.2394e-07, 7.5567e-07,
     c 6.9434e-07, 6.3867e-07, 5.8845e-07, 5.4263e-07, 5.0033e-07,
     c 4.6181e-07, 4.2652e-07, 3.9437e-07, 3.6497e-07, 3.3781e-07,
     c 3.1292e-07, 2.9011e-07, 2.6915e-07, 2.4989e-07, 2.3215e-07,
     c 2.1582e-07, 2.0081e-07, 1.8700e-07, 1.7432e-07, 1.6264e-07,
     c 1.5191e-07, 1.4207e-07, 1.3306e-07, 1.2484e-07, 1.1737e-07/
      data s0451/
     c 1.1056e-07, 1.0451e-07, 9.9060e-08, 9.4135e-08, 8.9608e-08,
     c 8.5697e-08, 8.1945e-08, 7.8308e-08, 7.4808e-08, 7.1686e-08,
     c 6.8923e-08, 6.5869e-08, 6.3308e-08, 6.0840e-08, 5.8676e-08,
     c 5.6744e-08, 5.5016e-08, 5.3813e-08, 5.2792e-08, 5.2097e-08,
     c 5.1737e-08, 5.1603e-08, 5.1656e-08, 5.1989e-08, 5.2467e-08,
     c 5.2918e-08, 5.3589e-08, 5.4560e-08, 5.5869e-08, 5.7403e-08,
     c 5.8968e-08, 6.0973e-08, 6.3432e-08, 6.6245e-08, 6.9353e-08,
     c 7.2686e-08, 7.6541e-08, 8.0991e-08, 8.5950e-08, 9.1429e-08,
     c 9.7851e-08, 1.0516e-07, 1.1349e-07, 1.2295e-07, 1.3335e-07,
     c 1.4488e-07, 1.5864e-07, 1.7412e-07, 1.9140e-07, 2.1078e-07/
      data s0501/
     c 2.3369e-07, 2.5996e-07, 2.8848e-07, 3.2169e-07, 3.5991e-07,
     c 4.0566e-07, 4.5969e-07, 5.3094e-07, 6.1458e-07, 7.1155e-07,
     c 8.3045e-07, 9.9021e-07, 1.2042e-06, 1.4914e-06, 1.8145e-06,
     c 2.2210e-06, 2.7831e-06, 3.4533e-06, 4.4446e-06, 5.1989e-06,
     c 6.2289e-06, 7.1167e-06, 8.3949e-06, 9.6417e-06, 1.0313e-05,
     c 1.0485e-05, 1.0641e-05, 1.0898e-05, 1.0763e-05, 1.0506e-05,
     c 1.0497e-05, 1.1696e-05, 1.2654e-05, 1.3029e-05, 1.3175e-05,
     c 1.4264e-05, 1.4985e-05, 1.4999e-05, 1.4317e-05, 1.4616e-05,
     c 1.4963e-05, 1.5208e-05, 1.4942e-05, 1.3879e-05, 1.3087e-05,
     c 1.1727e-05, 1.0515e-05, 9.0073e-06, 7.3133e-06, 6.1181e-06/
      data s0551/
     c 5.0623e-06, 4.1105e-06, 3.3915e-06, 2.6711e-06, 2.1464e-06,
     c 1.7335e-06, 1.4302e-06, 1.1847e-06, 9.9434e-07, 8.2689e-07,
     c 7.0589e-07, 6.0750e-07, 5.3176e-07, 4.6936e-07, 4.1541e-07,
     c 3.6625e-07, 3.2509e-07, 2.9156e-07, 2.6308e-07, 2.3819e-07,
     c 2.1421e-07, 1.9366e-07, 1.7626e-07, 1.5982e-07, 1.4567e-07,
     c 1.3354e-07, 1.2097e-07, 1.1029e-07, 1.0063e-07, 9.2003e-08,
     c 8.4245e-08, 7.7004e-08, 7.0636e-08, 6.4923e-08, 5.9503e-08,
     c 5.4742e-08, 5.0450e-08, 4.6470e-08, 4.2881e-08, 3.9550e-08,
     c 3.6541e-08, 3.3803e-08, 3.1279e-08, 2.8955e-08, 2.6858e-08,
     c 2.4905e-08, 2.3146e-08, 2.1539e-08, 2.0079e-08, 1.8746e-08/
      data s0601/
     c 1.7517e-08, 1.6396e-08, 1.5369e-08, 1.4426e-08, 1.3543e-08,
     c 1.2724e-08, 1.1965e-08, 1.1267e-08, 1.0617e-08, 1.0010e-08,
     c 9.4662e-09, 8.9553e-09, 8.4988e-09, 8.0807e-09, 7.7043e-09,
     c 7.3721e-09, 7.0707e-09, 6.8047e-09, 6.5702e-09, 6.3634e-09,
     c 6.1817e-09, 6.0239e-09, 5.8922e-09, 5.7824e-09, 5.7019e-09,
     c 5.6368e-09, 5.5940e-09, 5.5669e-09, 5.5583e-09, 5.5653e-09,
     c 5.5837e-09, 5.6243e-09, 5.6883e-09, 5.7800e-09, 5.8964e-09,
     c 6.0429e-09, 6.2211e-09, 6.4282e-09, 6.6634e-09, 6.9306e-09,
     c 7.2336e-09, 7.5739e-09, 7.9562e-09, 8.3779e-09, 8.8575e-09,
     c 9.3992e-09, 1.0004e-08, 1.0684e-08, 1.1450e-08, 1.2320e-08/
      data s0651/
     c 1.3311e-08, 1.4455e-08, 1.5758e-08, 1.7254e-08, 1.8927e-08,
     c 2.0930e-08, 2.3348e-08, 2.6074e-08, 2.9221e-08, 3.2770e-08,
     c 3.7485e-08, 4.2569e-08, 4.8981e-08, 5.5606e-08, 6.2393e-08,
     c 7.1901e-08, 8.2921e-08, 9.5513e-08, 1.1111e-07, 1.3143e-07,
     c 1.5971e-07, 1.8927e-07, 2.2643e-07, 2.7860e-07, 3.2591e-07,
     c 3.7024e-07, 4.2059e-07, 4.9432e-07, 5.5543e-07, 5.7498e-07,
     c 5.9210e-07, 6.1005e-07, 6.1577e-07, 5.9193e-07, 5.6602e-07,
     c 5.7403e-07, 6.0050e-07, 6.4723e-07, 6.7073e-07, 7.5415e-07,
     c 8.0982e-07, 8.7658e-07, 9.1430e-07, 9.4459e-07, 9.8347e-07,
     c 9.8768e-07, 1.0153e-06, 1.0066e-06, 1.0353e-06, 1.0353e-06/
      data s0701/
     c 1.0722e-06, 1.1138e-06, 1.1923e-06, 1.2947e-06, 1.4431e-06,
     c 1.6537e-06, 1.8662e-06, 2.2473e-06, 2.6464e-06, 3.1041e-06,
     c 3.4858e-06, 4.0167e-06, 4.6675e-06, 5.0983e-06, 5.7997e-06,
     c 6.0503e-06, 6.4687e-06, 6.5396e-06, 6.7986e-06, 7.0244e-06,
     c 7.2305e-06, 7.6732e-06, 7.9783e-06, 7.9846e-06, 7.7617e-06,
     c 7.7657e-06, 7.7411e-06, 7.8816e-06, 7.8136e-06, 8.0051e-06,
     c 8.5799e-06, 9.1659e-06, 9.8646e-06, 9.4920e-06, 8.7670e-06,
     c 8.2034e-06, 7.2297e-06, 6.2324e-06, 4.9315e-06, 3.9128e-06,
     c 3.1517e-06, 2.4469e-06, 1.8815e-06, 1.4627e-06, 1.1698e-06,
     c 9.4686e-07, 7.8486e-07, 6.6970e-07, 5.8811e-07, 5.2198e-07/
      data s0751/
     c 4.6809e-07, 4.1671e-07, 3.7006e-07, 3.3066e-07, 2.9387e-07,
     c 2.6415e-07, 2.3409e-07, 2.0991e-07, 1.9132e-07, 1.7519e-07,
     c 1.5939e-07, 1.4368e-07, 1.3050e-07, 1.1883e-07, 1.0772e-07,
     c 9.6884e-08, 8.7888e-08, 7.8956e-08, 7.1024e-08, 6.3824e-08,
     c 5.7256e-08, 5.1769e-08, 4.7037e-08, 4.2901e-08, 3.8970e-08,
     c 3.5467e-08, 3.2502e-08, 2.9827e-08, 2.7389e-08, 2.5111e-08,
     c 2.3056e-08, 2.1267e-08, 1.9610e-08, 1.8133e-08, 1.6775e-08,
     c 1.5491e-08, 1.4329e-08, 1.3265e-08, 1.2300e-08, 1.1420e-08,
     c 1.0593e-08, 9.8475e-09, 9.1585e-09, 8.5256e-09, 7.9525e-09,
     c 7.4226e-09, 6.9379e-09, 6.4950e-09, 6.0911e-09, 5.7242e-09/
      data s0801/
     c 5.3877e-09, 5.0821e-09, 4.8051e-09, 4.5554e-09, 4.3315e-09,
     c 4.1336e-09, 3.9632e-09, 3.8185e-09, 3.7080e-09, 3.6296e-09,
     c 3.5804e-09, 3.5776e-09, 3.6253e-09, 3.7115e-09, 3.8151e-09,
     c 3.9804e-09, 4.1742e-09, 4.3581e-09, 4.5306e-09, 4.7736e-09,
     c 5.1297e-09, 5.5291e-09, 5.9125e-09, 6.4956e-09, 7.0362e-09,
     c 7.5318e-09, 7.9947e-09, 8.6438e-09, 9.7227e-09, 1.0130e-08,
     c 1.0549e-08, 1.1064e-08, 1.1702e-08, 1.2043e-08, 1.1781e-08,
     c 1.1838e-08, 1.1917e-08, 1.2131e-08, 1.2476e-08, 1.3611e-08,
     c 1.4360e-08, 1.5057e-08, 1.6247e-08, 1.7284e-08, 1.8420e-08,
     c 1.8352e-08, 1.8722e-08, 1.9112e-08, 1.9092e-08, 1.9311e-08/
      data s0851/
     c 1.9411e-08, 1.9884e-08, 2.0508e-08, 2.1510e-08, 2.3143e-08,
     c 2.5050e-08, 2.7596e-08, 3.1231e-08, 3.6260e-08, 4.3410e-08,
     c 5.2240e-08, 6.3236e-08, 7.7522e-08, 9.8688e-08, 1.1859e-07,
     c 1.4341e-07, 1.6798e-07, 1.9825e-07, 2.2898e-07, 2.6257e-07,
     c 2.9884e-07, 3.3247e-07, 3.4936e-07, 3.5583e-07, 3.7150e-07,
     c 3.6580e-07, 3.7124e-07, 3.7030e-07, 4.1536e-07, 4.6656e-07,
     c 4.6677e-07, 4.7507e-07, 4.9653e-07, 5.3795e-07, 5.4957e-07,
     c 5.2238e-07, 5.4690e-07, 5.6569e-07, 5.9844e-07, 5.9835e-07,
     c 5.6522e-07, 5.4123e-07, 4.7904e-07, 4.2851e-07, 3.5603e-07,
     c 2.8932e-07, 2.3655e-07, 1.8592e-07, 1.4943e-07, 1.1971e-07/
      data s0901/
     c 9.8482e-08, 8.3675e-08, 7.1270e-08, 6.2496e-08, 5.4999e-08,
     c 4.9821e-08, 4.5387e-08, 4.1340e-08, 3.7453e-08, 3.3298e-08,
     c 3.0120e-08, 2.7032e-08, 2.4236e-08, 2.1500e-08, 1.8988e-08,
     c 1.7414e-08, 1.5706e-08, 1.4192e-08, 1.3204e-08, 1.1759e-08,
     c 1.0737e-08, 9.6309e-09, 8.8179e-09, 8.2619e-09, 7.2264e-09,
     c 6.4856e-09, 5.8037e-09, 5.2093e-09, 4.7205e-09, 4.1749e-09,
     c 3.7852e-09, 3.3915e-09, 3.0089e-09, 2.7335e-09, 2.4398e-09,
     c 2.2031e-09, 1.9786e-09, 1.7890e-09, 1.6266e-09, 1.4830e-09,
     c 1.3576e-09, 1.2518e-09, 1.1587e-09, 1.0726e-09, 9.9106e-10,
     c 9.1673e-10, 8.5084e-10, 7.9147e-10, 7.2882e-10, 6.7342e-10/
      data s0951/
     c 6.2593e-10, 5.8294e-10, 5.4435e-10, 5.0997e-10, 4.7806e-10,
     c 4.4931e-10, 4.2357e-10, 4.0023e-10, 3.7909e-10, 3.5999e-10,
     c 3.4285e-10, 3.2776e-10, 3.1468e-10, 3.0377e-10, 2.9479e-10,
     c 2.8877e-10, 2.8512e-10, 2.8617e-10, 2.8976e-10, 3.0001e-10,
     c 3.1718e-10, 3.3898e-10, 3.5857e-10, 3.8358e-10, 4.3131e-10,
     c 4.5741e-10, 4.6948e-10, 4.7594e-10, 4.9529e-10, 5.1563e-10,
     c 4.9475e-10, 4.8369e-10, 4.8829e-10, 5.0047e-10, 5.0203e-10,
     c 5.1954e-10, 5.5352e-10, 5.9928e-10, 6.7148e-10, 7.1121e-10,
     c 7.4317e-10, 7.6039e-10, 7.8313e-10, 8.0684e-10, 7.8553e-10,
     c 7.8312e-10, 7.8537e-10, 7.8872e-10, 8.0185e-10, 8.1004e-10/
      data s1001/
     c 8.2608e-10, 8.2525e-10, 8.3857e-10, 8.7920e-10, 9.2451e-10,
     c 9.8661e-10, 1.0629e-09, 1.1659e-09, 1.2922e-09, 1.4387e-09,
     c 1.6254e-09, 1.8425e-09, 2.1428e-09, 2.5477e-09, 3.0379e-09,
     c 3.7570e-09, 4.4354e-09, 5.1802e-09, 6.2769e-09, 7.4894e-09,
     c 8.7474e-09, 9.8037e-09, 1.1582e-08, 1.3293e-08, 1.4471e-08,
     c 1.5025e-08, 1.5580e-08, 1.6228e-08, 1.6413e-08, 1.6020e-08,
     c 1.6393e-08, 1.7545e-08, 1.9590e-08, 2.1449e-08, 2.3856e-08,
     c 2.7050e-08, 3.0214e-08, 3.3733e-08, 3.6487e-08, 3.9353e-08,
     c 4.2660e-08, 4.6385e-08, 4.9955e-08, 5.5313e-08, 6.0923e-08,
     c 6.8948e-08, 7.3649e-08, 8.2602e-08, 9.2212e-08, 9.9080e-08/
      data s1051/
     c 1.1319e-07, 1.1790e-07, 1.2941e-07, 1.3199e-07, 1.3914e-07,
     c 1.4843e-07, 1.5300e-07, 1.6419e-07, 1.7095e-07, 1.6988e-07,
     c 1.6494e-07, 1.6327e-07, 1.6067e-07, 1.6909e-07, 1.7118e-07,
     c 1.8106e-07, 1.9857e-07, 2.1696e-07, 2.3385e-07, 2.2776e-07,
     c 2.1402e-07, 1.9882e-07, 1.7362e-07, 1.4308e-07, 1.1158e-07,
     c 8.8781e-08, 6.8689e-08, 5.2062e-08, 4.0427e-08, 3.2669e-08,
     c 2.7354e-08, 2.3200e-08, 2.0580e-08, 1.8676e-08, 1.7329e-08,
     c 1.6621e-08, 1.6433e-08, 1.6953e-08, 1.7134e-08, 1.7948e-08,
     c 1.9107e-08, 1.9875e-08, 2.1416e-08, 2.1556e-08, 2.2265e-08,
     c 2.2171e-08, 2.2534e-08, 2.3029e-08, 2.2828e-08, 2.3143e-08/
      data s1101/
     c 2.2965e-08, 2.2223e-08, 2.1108e-08, 2.0265e-08, 1.9516e-08,
     c 1.9941e-08, 2.0312e-08, 2.1080e-08, 2.2611e-08, 2.4210e-08,
     c 2.6069e-08, 2.5097e-08, 2.3318e-08, 2.1543e-08, 1.8942e-08,
     c 1.5960e-08, 1.2386e-08, 9.9340e-09, 7.7502e-09, 5.9462e-09,
     c 4.5113e-09, 3.5523e-09, 2.8844e-09, 2.3394e-09, 1.9584e-09,
     c 1.6749e-09, 1.4624e-09, 1.2809e-09, 1.1359e-09, 1.0087e-09,
     c 9.0166e-10, 8.1079e-10, 7.2219e-10, 6.4922e-10, 5.8803e-10,
     c 5.3290e-10, 4.8590e-10, 4.4111e-10, 4.0184e-10, 3.6644e-10,
     c 3.3529e-10, 3.0789e-10, 2.8286e-10, 2.6089e-10, 2.4125e-10,
     c 2.2355e-10, 2.0783e-10, 1.9370e-10, 1.8088e-10, 1.6948e-10/
      data s1151/
     c 1.5929e-10, 1.5013e-10, 1.4193e-10, 1.3470e-10, 1.2841e-10,
     c 1.2307e-10, 1.1865e-10, 1.1502e-10, 1.1243e-10, 1.1099e-10,
     c 1.1066e-10, 1.1216e-10, 1.1529e-10, 1.2171e-10, 1.3128e-10,
     c 1.4153e-10, 1.5962e-10, 1.8048e-10, 2.0936e-10, 2.3165e-10,
     c 2.5746e-10, 2.9600e-10, 3.3707e-10, 3.5267e-10, 3.5953e-10,
     c 3.6822e-10, 3.8363e-10, 3.8286e-10, 3.5883e-10, 3.6154e-10,
     c 3.6653e-10, 3.8507e-10, 4.0250e-10, 4.4435e-10, 4.9889e-10,
     c 5.6932e-10, 6.3599e-10, 7.0281e-10, 7.5777e-10, 8.1279e-10,
     c 8.8910e-10, 9.3400e-10, 1.0076e-09, 1.0945e-09, 1.1898e-09,
     c 1.3108e-09, 1.4725e-09, 1.7028e-09, 1.9619e-09, 2.3527e-09/
      data s1201/
     c 2.6488e-09, 3.0327e-09, 3.4396e-09, 3.8797e-09, 4.4115e-09,
     c 4.6853e-09, 4.9553e-09, 4.9551e-09, 5.1062e-09, 5.0996e-09,
     c 5.1119e-09, 5.2283e-09, 5.8297e-09, 6.3439e-09, 6.2675e-09,
     c 6.3296e-09, 6.5173e-09, 7.1685e-09, 7.0528e-09, 6.8856e-09,
     c 7.3182e-09, 7.6990e-09, 8.3461e-09, 8.1946e-09, 7.7153e-09,
     c 7.2411e-09, 6.4511e-09, 5.7336e-09, 4.6105e-09, 3.6962e-09,
     c 2.9944e-09, 2.4317e-09, 1.9399e-09, 1.5331e-09, 1.2633e-09,
     c 1.0613e-09, 9.0136e-10, 7.9313e-10, 7.1543e-10, 6.6485e-10,
     c 6.4225e-10, 6.3980e-10, 6.4598e-10, 6.7428e-10, 7.0270e-10,
     c 7.4694e-10, 7.7946e-10, 7.9395e-10, 7.8716e-10, 7.6933e-10/
      data s1251/
     c 7.6220e-10, 7.4825e-10, 7.4805e-10, 7.6511e-10, 7.6492e-10,
     c 7.4103e-10, 7.1979e-10, 7.1686e-10, 7.3403e-10, 7.1142e-10,
     c 7.0212e-10, 7.1548e-10, 7.5253e-10, 8.0444e-10, 8.2378e-10,
     c 7.8004e-10, 7.1712e-10, 6.4978e-10, 5.7573e-10, 4.8675e-10,
     c 3.7945e-10, 3.0118e-10, 2.4241e-10, 1.9100e-10, 1.4816e-10,
     c 1.1567e-10, 9.4183e-11, 7.7660e-11, 6.5270e-11, 5.6616e-11,
     c 4.9576e-11, 4.4137e-11, 3.9459e-11, 3.5759e-11, 3.2478e-11,
     c 2.9419e-11, 2.6703e-11, 2.4365e-11, 2.2412e-11, 2.0606e-11,
     c 1.9067e-11, 1.7800e-11, 1.6695e-11, 1.5729e-11, 1.4887e-11,
     c 1.4135e-11, 1.3519e-11, 1.2992e-11, 1.2563e-11, 1.2223e-11/
      data s1301/
     c 1.1962e-11, 1.1775e-11, 1.1657e-11, 1.1605e-11, 1.1619e-11,
     c 1.1697e-11, 1.1839e-11, 1.2046e-11, 1.2319e-11, 1.2659e-11,
     c 1.3070e-11, 1.3553e-11, 1.4113e-11, 1.4754e-11, 1.5480e-11,
     c 1.6298e-11, 1.7214e-11, 1.8236e-11, 1.9372e-11, 2.0635e-11,
     c 2.2036e-11, 2.3590e-11, 2.5317e-11, 2.7242e-11, 2.9400e-11,
     c 3.1849e-11, 3.4654e-11, 3.7923e-11, 4.1695e-11, 4.6055e-11,
     c 5.0940e-11, 5.5624e-11, 6.0667e-11, 6.6261e-11, 7.2692e-11,
     c 7.9711e-11, 8.7976e-11, 9.6884e-11, 1.0775e-10, 1.2093e-10,
     c 1.3531e-10, 1.5404e-10, 1.7315e-10, 1.9862e-10, 2.3341e-10,
     c 2.7014e-10, 3.1716e-10, 3.6957e-10, 4.3233e-10, 5.2566e-10/
      data s1351/
     c 6.2251e-10, 7.2149e-10, 8.3958e-10, 9.5931e-10, 1.1388e-09,
     c 1.2973e-09, 1.4442e-09, 1.5638e-09, 1.6974e-09, 1.8489e-09,
     c 1.9830e-09, 2.1720e-09, 2.3662e-09, 2.6987e-09, 3.1697e-09,
     c 3.6907e-09, 4.2625e-09, 4.7946e-09, 5.3848e-09, 6.0897e-09,
     c 6.4730e-09, 7.1483e-09, 7.7432e-09, 8.0851e-09, 8.5013e-09,
     c 8.5909e-09, 9.1890e-09, 9.3124e-09, 9.5936e-09, 9.8787e-09,
     c 9.9036e-09, 9.6712e-09, 9.2036e-09, 9.0466e-09, 8.9380e-09,
     c 9.1815e-09, 9.5092e-09, 1.0027e-08, 1.0876e-08, 1.1744e-08,
     c 1.1853e-08, 1.1296e-08, 1.0134e-08, 8.8245e-09, 7.3930e-09,
     c 5.7150e-09, 4.4884e-09, 3.4027e-09, 2.6054e-09, 2.0790e-09/
      data s1401/
     c 1.7267e-09, 1.4724e-09, 1.2722e-09, 1.1234e-09, 1.0186e-09,
     c 9.4680e-10, 8.8854e-10, 8.5127e-10, 8.3157e-10, 8.2226e-10,
     c 8.3395e-10, 8.3294e-10, 8.4725e-10, 8.8814e-10, 9.3697e-10,
     c 1.0112e-09, 1.0412e-09, 1.0948e-09, 1.1810e-09, 1.2267e-09,
     c 1.3690e-09, 1.4512e-09, 1.5568e-09, 1.6552e-09, 1.7321e-09,
     c 1.8797e-09, 1.9210e-09, 1.9686e-09, 1.9917e-09, 1.9357e-09,
     c 1.8486e-09, 1.7575e-09, 1.7113e-09, 1.7163e-09, 1.7623e-09,
     c 1.8536e-09, 1.9765e-09, 2.1334e-09, 2.3237e-09, 2.3259e-09,
     c 2.1833e-09, 1.9785e-09, 1.7308e-09, 1.4596e-09, 1.1198e-09,
     c 8.7375e-10, 6.5381e-10, 4.8677e-10, 3.6756e-10, 2.9155e-10/
      data s1451/
     c 2.3735e-10, 1.9590e-10, 1.6638e-10, 1.4549e-10, 1.2947e-10,
     c 1.1511e-10, 1.0548e-10, 9.6511e-11, 9.0469e-11, 8.5170e-11,
     c 7.7804e-11, 7.1971e-11, 6.6213e-11, 6.1063e-11, 5.5881e-11,
     c 5.0508e-11, 4.5932e-11, 4.1997e-11, 3.7672e-11, 3.3972e-11,
     c 3.0318e-11, 2.6769e-11, 2.3874e-11, 2.1336e-11, 1.9073e-11,
     c 1.7313e-11, 1.5904e-11, 1.4684e-11, 1.3698e-11, 1.2873e-11,
     c 1.2175e-11, 1.1542e-11, 1.1024e-11, 1.0602e-11, 1.0267e-11,
     c 1.0012e-11, 9.8379e-12, 9.7482e-12, 9.7564e-12, 9.8613e-12,
     c 1.0092e-11, 1.0418e-11, 1.0868e-11, 1.1585e-11, 1.2351e-11,
     c 1.3372e-11, 1.4841e-11, 1.6457e-11, 1.8681e-11, 2.0550e-11/
      data s1501/
     c 2.2912e-11, 2.5958e-11, 2.9137e-11, 3.2368e-11, 3.4848e-11,
     c 3.8462e-11, 4.2190e-11, 4.5629e-11, 4.9022e-11, 5.4232e-11,
     c 6.1900e-11, 7.1953e-11, 8.5368e-11, 9.9699e-11, 1.1734e-10,
     c 1.4185e-10, 1.7017e-10, 1.9813e-10, 2.3859e-10, 2.7304e-10,
     c 3.0971e-10, 3.5129e-10, 3.9405e-10, 4.5194e-10, 4.8932e-10,
     c 5.2436e-10, 5.4098e-10, 5.5542e-10, 5.7794e-10, 5.6992e-10,
     c 5.8790e-10, 6.1526e-10, 6.8034e-10, 6.7956e-10, 6.6864e-10,
     c 6.9329e-10, 7.2971e-10, 7.6546e-10, 7.5078e-10, 7.8406e-10,
     c 8.3896e-10, 9.0111e-10, 9.1994e-10, 8.7189e-10, 8.1426e-10,
     c 7.3097e-10, 6.3357e-10, 5.1371e-10, 4.0936e-10, 3.2918e-10/
      data s1551/
     c 2.6255e-10, 2.0724e-10, 1.6879e-10, 1.4165e-10, 1.1989e-10,
     c 1.0125e-10, 8.9629e-11, 7.8458e-11, 6.8826e-11, 6.0935e-11,
     c 5.5208e-11, 5.2262e-11, 5.0260e-11, 4.8457e-11, 4.7888e-11,
     c 4.8032e-11, 5.0838e-11, 5.4668e-11, 5.5790e-11, 6.0056e-11,
     c 6.3811e-11, 6.8848e-11, 7.4590e-11, 7.8249e-11, 8.3371e-11,
     c 8.3641e-11, 8.6591e-11, 8.9599e-11, 9.3487e-11, 1.0066e-10,
     c 1.0765e-10, 1.0851e-10, 1.0619e-10, 1.0557e-10, 1.0460e-10,
     c 1.0796e-10, 1.0523e-10, 1.0674e-10, 1.1261e-10, 1.1431e-10,
     c 1.1408e-10, 1.0901e-10, 9.9105e-11, 8.8077e-11, 6.9928e-11,
     c 5.4595e-11, 4.5401e-11, 3.6313e-11, 2.6986e-11, 1.9463e-11/
      data s1601/
     c 1.4577e-11, 1.1583e-11, 9.5492e-12, 8.0770e-12, 6.9642e-12,
     c 6.0966e-12, 5.4046e-12, 4.8431e-12, 4.3815e-12, 3.9987e-12,
     c 3.6790e-12, 3.4113e-12, 3.1868e-12, 2.9992e-12, 2.8434e-12,
     c 2.7153e-12, 2.6120e-12, 2.5311e-12, 2.4705e-12, 2.4290e-12,
     c 2.4053e-12, 2.3988e-12, 2.4087e-12, 2.4349e-12, 2.4771e-12,
     c 2.5355e-12, 2.6103e-12, 2.7019e-12, 2.8110e-12, 2.9383e-12,
     c 3.0848e-12, 3.2518e-12, 3.4405e-12, 3.6527e-12, 3.8902e-12,
     c 4.1555e-12, 4.4510e-12, 4.7801e-12, 5.1462e-12, 5.5539e-12,
     c 6.0086e-12, 6.5171e-12, 7.0884e-12, 7.7357e-12, 8.4831e-12,
     c 9.3096e-12, 1.0282e-11, 1.1407e-11, 1.2690e-11, 1.4148e-11/
      data s1651/
     c 1.5888e-11, 1.7992e-11, 2.0523e-11, 2.3342e-11, 2.6578e-11,
     c 3.0909e-11, 3.6228e-11, 4.2053e-11, 4.9059e-11, 5.9273e-11,
     c 7.0166e-11, 8.2298e-11, 9.7071e-11, 1.1673e-10, 1.4010e-10,
     c 1.6621e-10, 2.0127e-10, 2.3586e-10, 2.7050e-10, 3.0950e-10,
     c 3.6584e-10, 4.1278e-10, 4.6591e-10, 5.2220e-10, 5.5246e-10,
     c 6.1500e-10, 6.5878e-10, 7.1167e-10, 7.9372e-10, 8.6975e-10,
     c 9.6459e-10, 9.7368e-10, 9.8142e-10, 1.0202e-09, 1.0200e-09,
     c 1.0356e-09, 1.0092e-09, 1.0269e-09, 1.0366e-09, 1.0490e-09,
     c 1.0717e-09, 1.0792e-09, 1.1016e-09, 1.0849e-09, 1.0929e-09,
     c 1.0971e-09, 1.0969e-09, 1.0460e-09, 9.2026e-10, 8.1113e-10/
      data s1701/
     c 6.8635e-10, 5.5369e-10, 4.2908e-10, 3.3384e-10, 2.6480e-10,
     c 2.0810e-10, 1.6915e-10, 1.4051e-10, 1.1867e-10, 1.0158e-10,
     c 8.8990e-11, 7.9175e-11, 7.0440e-11, 6.3453e-11, 5.7009e-11,
     c 5.1662e-11, 4.7219e-11, 4.3454e-11, 4.0229e-11, 3.7689e-11,
     c 3.6567e-11, 3.5865e-11, 3.5955e-11, 3.5928e-11, 3.6298e-11,
     c 3.7629e-11, 3.9300e-11, 4.1829e-11, 4.4806e-11, 5.0534e-11,
     c 5.6672e-11, 6.2138e-11, 6.8678e-11, 7.6111e-11, 8.4591e-11,
     c 9.2634e-11, 9.8085e-11, 1.0830e-10, 1.1949e-10, 1.2511e-10,
     c 1.3394e-10, 1.3505e-10, 1.4342e-10, 1.4874e-10, 1.4920e-10,
     c 1.5872e-10, 1.5972e-10, 1.5821e-10, 1.5425e-10, 1.4937e-10/
      data s1751/
     c 1.5089e-10, 1.5521e-10, 1.6325e-10, 1.6924e-10, 1.8265e-10,
     c 1.9612e-10, 2.0176e-10, 1.9359e-10, 1.7085e-10, 1.5197e-10,
     c 1.2646e-10, 9.8552e-11, 7.4530e-11, 5.5052e-11, 4.2315e-11,
     c 3.2736e-11, 2.6171e-11, 2.1909e-11, 1.8286e-11, 1.5752e-11,
     c 1.3859e-11, 1.2288e-11, 1.1002e-11, 9.7534e-12, 8.8412e-12,
     c 8.0169e-12, 7.2855e-12, 6.8734e-12, 6.4121e-12, 6.1471e-12,
     c 5.7780e-12, 5.3478e-12, 4.9652e-12, 4.4043e-12, 3.9862e-12,
     c 3.4684e-12, 2.9681e-12, 2.5791e-12, 2.2339e-12, 1.9247e-12,
     c 1.6849e-12, 1.4863e-12, 1.3291e-12, 1.2021e-12, 1.0947e-12,
     c 1.0015e-12, 9.1935e-13, 8.4612e-13, 7.8036e-13, 7.2100e-13/
      data s1801/
     c 6.6718e-13, 6.1821e-13, 5.7353e-13, 5.3269e-13, 4.9526e-13,
     c 4.6093e-13, 4.2937e-13, 4.0034e-13, 3.7361e-13, 3.4895e-13,
     c 3.2621e-13, 3.0520e-13, 2.8578e-13, 2.6782e-13, 2.5120e-13,
     c 2.3581e-13, 2.2154e-13, 2.0832e-13, 1.9605e-13, 1.8466e-13,
     c 1.7408e-13, 1.6425e-13, 1.5511e-13, 1.4661e-13, 1.3869e-13,
     c 1.3131e-13, 1.2444e-13, 1.1803e-13, 1.1205e-13, 1.0646e-13,
     c 1.0124e-13, 9.6358e-14, 9.1789e-14, 8.7509e-14, 8.3498e-14,
     c 7.9735e-14, 7.6202e-14, 7.2882e-14, 6.9760e-14, 6.6822e-14,
     c 6.4053e-14, 6.1442e-14, 5.8978e-14, 5.6650e-14, 5.4448e-14,
     c 5.2364e-14, 5.0389e-14, 4.8516e-14, 4.6738e-14, 4.5048e-14/
      data s1851/
     c 4.3441e-14, 4.1911e-14, 4.0453e-14, 3.9063e-14, 3.7735e-14,
     c 3.6467e-14, 3.5254e-14, 3.4093e-14, 3.2980e-14, 3.1914e-14,
     c 3.0891e-14, 2.9909e-14, 2.8965e-14, 2.8058e-14, 2.7185e-14,
     c 2.6344e-14, 2.5535e-14, 2.4755e-14, 2.4002e-14, 2.3276e-14,
     c 2.2576e-14, 2.1899e-14, 2.1245e-14, 2.0613e-14, 2.0002e-14,
     c 1.9411e-14, 1.8839e-14, 1.8285e-14, 1.7749e-14, 1.7230e-14,
     c 1.6727e-14, 1.6240e-14, 1.5768e-14, 1.5310e-14, 1.4867e-14,
     c 1.4436e-14, 1.4019e-14, 1.3614e-14, 1.3221e-14, 1.2840e-14,
     c 1.2471e-14, 1.2112e-14, 1.1764e-14, 1.1425e-14, 1.1097e-14,
     c 1.0779e-14, 1.0469e-14, 1.0169e-14, 9.8775e-15, 9.5943e-15/
      data s1901/
     c 9.3193e-15, 9.0522e-15, 8.7928e-15, 8.5409e-15, 8.2962e-15,
     c 8.0586e-15, 7.8278e-15, 7.6036e-15, 7.3858e-15, 7.1742e-15,
     c 6.9687e-15, 6.7691e-15, 6.5752e-15, 6.3868e-15, 6.2038e-15,
     c 6.0260e-15, 5.8533e-15, 5.6856e-15, 5.5226e-15, 5.3642e-15,
     c 5.2104e-15, 5.0610e-15, 4.9158e-15, 4.7748e-15, 4.6378e-15,
     c 4.5047e-15, 4.3753e-15, 4.2497e-15, 4.1277e-15, 4.0091e-15,
     c 3.8939e-15, 3.7820e-15, 3.6733e-15, 3.5677e-15, 3.4651e-15,
     c 3.3655e-15, 3.2686e-15, 3.1746e-15, 3.0832e-15, 2.9944e-15,
     c 2.9082e-15, 2.8244e-15, 2.7431e-15, 2.6640e-15, 2.5872e-15,
     c 2.5126e-15, 2.4401e-15, 2.3697e-15, 2.3014e-15, 2.2349e-15/
      data s1951/
     c 2.1704e-15, 2.1077e-15, 2.0468e-15, 1.9877e-15, 1.9302e-15,
     c 1.8744e-15, 1.8202e-15, 1.7675e-15, 1.7164e-15, 1.6667e-15,
     c 1.6184e-15, 1.5716e-15, 1.5260e-15, 1.4818e-15, 1.4389e-15,
     c 1.3971e-15, 1.3566e-15, 1.3172e-15, 1.2790e-15, 1.2419e-15,
     c 1.2058e-15, 1.1708e-15, 1.1368e-15, 1.1037e-15, 1.0716e-15,
     c 1.0405e-15, 1.0102e-15, 9.8079e-16, 9.5224e-16, 9.2451e-16,
     c 8.9758e-16, 8.7142e-16, 8.4602e-16, 8.2136e-16, 7.9740e-16,
     c 7.7414e-16, 7.5154e-16, 7.2961e-16, 7.0830e-16, 6.8761e-16,
     c 6.6752e-16, 6.4801e-16, 6.2906e-16, 6.1066e-16, 5.9280e-16,
     c 5.7545e-16, 5.5860e-16, 5.4224e-16, 5.2636e-16, 5.1094e-16/
      data s2001/
     c 4.9596e-16/
c
      end
c=======================================================================
      block data bfh2o
c>    block data
c               06/28/82
c               units of (cm**3/mol)*1.e-20
      common /fh2o/ v1,v2,dv,f0000(2),
     1      f0001(50),f0051(50),f0101(50),f0151(50),f0201(50),f0251(50),
     2      f0301(50),f0351(50),f0401(50),f0451(50),f0501(50),f0551(50),
     3      f0601(50),f0651(50),f0701(50),f0751(50),f0801(50),f0851(50),
     4      f0901(50),f0951(50),f1001(50),f1051(50),f1101(50),f1151(50),
     5      f1201(50),f1251(50),f1301(50),f1351(50),f1401(50),f1451(50),
     6      f1501(50),f1551(50),f1601(50),f1651(50),f1701(50),f1751(50),
     7      f1801(50),f1851(50),f1901(50),f1951(50),f2001(1)
c
c
       data v1,v2,dv/-20.0, 20000.0, 10.0/
c
c
      data f0000/ 1.2859e-02, 1.1715e-02/
      data f0001/
     x 1.1038e-02, 1.1715e-02, 1.2859e-02, 1.5326e-02, 1.6999e-02,
     x 1.8321e-02, 1.9402e-02, 1.9570e-02, 1.9432e-02, 1.7572e-02,
     x 1.6760e-02, 1.5480e-02, 1.3984e-02, 1.2266e-02, 1.0467e-02,
     x 9.4526e-03, 8.0485e-03, 6.9484e-03, 6.1416e-03, 5.0941e-03,
     x 4.4836e-03, 3.8133e-03, 3.4608e-03, 3.1487e-03, 2.4555e-03,
     x 2.0977e-03, 1.7266e-03, 1.4920e-03, 1.2709e-03, 9.8081e-04,
     x 8.5063e-04, 6.8822e-04, 5.3809e-04, 4.4679e-04, 3.3774e-04,
     x 2.7979e-04, 2.1047e-04, 1.6511e-04, 1.2993e-04, 9.3033e-05,
     x 7.4360e-05, 5.6428e-05, 4.5442e-05, 3.4575e-05, 2.7903e-05,
     x 2.1374e-05, 1.6075e-05, 1.3022e-05, 1.0962e-05, 8.5959e-06/
      data f0051/
     x 6.9125e-06, 5.3808e-06, 4.3586e-06, 3.6394e-06, 2.9552e-06,
     x 2.3547e-06, 1.8463e-06, 1.6036e-06, 1.3483e-06, 1.1968e-06,
     x 1.0333e-06, 8.4484e-07, 6.7195e-07, 5.0947e-07, 4.2343e-07,
     x 3.4453e-07, 2.7830e-07, 2.3063e-07, 1.9951e-07, 1.7087e-07,
     x 1.4393e-07, 1.2575e-07, 1.0750e-07, 8.2325e-08, 5.7524e-08,
     x 4.4482e-08, 3.8106e-08, 3.4315e-08, 2.9422e-08, 2.5069e-08,
     x 2.2402e-08, 1.9349e-08, 1.6152e-08, 1.2208e-08, 8.9660e-09,
     x 7.1322e-09, 6.1028e-09, 5.2938e-09, 4.5350e-09, 3.4977e-09,
     x 2.9511e-09, 2.4734e-09, 2.0508e-09, 1.8507e-09, 1.6373e-09,
     x 1.5171e-09, 1.3071e-09, 1.2462e-09, 1.2148e-09, 1.2590e-09/
      data f0101/
     x 1.3153e-09, 1.3301e-09, 1.4483e-09, 1.6944e-09, 2.0559e-09,
     x 2.2954e-09, 2.6221e-09, 3.2606e-09, 4.2392e-09, 5.2171e-09,
     x 6.2553e-09, 8.2548e-09, 9.5842e-09, 1.1280e-08, 1.3628e-08,
     x 1.7635e-08, 2.1576e-08, 2.4835e-08, 3.0014e-08, 3.8485e-08,
     x 4.7440e-08, 5.5202e-08, 7.0897e-08, 9.6578e-08, 1.3976e-07,
     x 1.8391e-07, 2.3207e-07, 2.9960e-07, 4.0408e-07, 5.9260e-07,
     x 7.8487e-07, 1.0947e-06, 1.4676e-06, 1.9325e-06, 2.6587e-06,
     x 3.4534e-06, 4.4376e-06, 5.8061e-06, 7.0141e-06, 8.4937e-06,
     x 1.0186e-05, 1.2034e-05, 1.3837e-05, 1.6595e-05, 1.9259e-05,
     x 2.1620e-05, 2.3681e-05, 2.7064e-05, 3.2510e-05, 3.5460e-05/
      data f0151/
     x 3.9109e-05, 4.2891e-05, 4.7757e-05, 5.0981e-05, 5.0527e-05,
     x 4.8618e-05, 4.4001e-05, 3.7982e-05, 3.2667e-05, 2.7794e-05,
     x 2.4910e-05, 2.4375e-05, 2.7316e-05, 3.2579e-05, 3.5499e-05,
     x 3.8010e-05, 4.1353e-05, 4.3323e-05, 4.3004e-05, 3.9790e-05,
     x 3.7718e-05, 3.6360e-05, 3.2386e-05, 2.7409e-05, 2.3626e-05,
     x 2.0631e-05, 1.8371e-05, 1.5445e-05, 1.2989e-05, 1.1098e-05,
     x 9.6552e-06, 8.0649e-06, 7.2365e-06, 5.9137e-06, 5.2759e-06,
     x 4.8860e-06, 4.1321e-06, 3.5918e-06, 2.7640e-06, 2.4892e-06,
     x 2.1018e-06, 1.7848e-06, 1.5855e-06, 1.3569e-06, 1.1986e-06,
     x 9.4693e-07, 7.4097e-07, 6.3443e-07, 4.8131e-07, 4.0942e-07/
      data f0201/
     x 3.3316e-07, 2.8488e-07, 2.3461e-07, 1.7397e-07, 1.4684e-07,
     x 1.0953e-07, 8.5396e-08, 6.9261e-08, 5.4001e-08, 4.5430e-08,
     x 3.2791e-08, 2.5995e-08, 2.0225e-08, 1.5710e-08, 1.3027e-08,
     x 1.0229e-08, 8.5277e-09, 6.5249e-09, 5.0117e-09, 3.9906e-09,
     x 3.2332e-09, 2.7847e-09, 2.4570e-09, 2.3359e-09, 2.0599e-09,
     x 1.8436e-09, 1.6559e-09, 1.4910e-09, 1.2794e-09, 9.8229e-10,
     x 8.0054e-10, 6.0769e-10, 4.5646e-10, 3.3111e-10, 2.4428e-10,
     x 1.8007e-10, 1.3291e-10, 9.7974e-11, 7.8271e-11, 6.3833e-11,
     x 5.4425e-11, 4.6471e-11, 4.0209e-11, 3.5227e-11, 3.1212e-11,
     x 2.8840e-11, 2.7762e-11, 2.7935e-11, 3.2012e-11, 3.9525e-11/
      data f0251/
     x 5.0303e-11, 6.8027e-11, 9.3954e-11, 1.2986e-10, 1.8478e-10,
     x 2.5331e-10, 3.4827e-10, 4.6968e-10, 6.2380e-10, 7.9106e-10,
     x 1.0026e-09, 1.2102e-09, 1.4146e-09, 1.6154e-09, 1.7510e-09,
     x 1.8575e-09, 1.8742e-09, 1.8700e-09, 1.8582e-09, 1.9657e-09,
     x 2.1204e-09, 2.0381e-09, 2.0122e-09, 2.0436e-09, 2.1213e-09,
     x 2.0742e-09, 1.9870e-09, 2.0465e-09, 2.1556e-09, 2.2222e-09,
     x 2.1977e-09, 2.1047e-09, 1.9334e-09, 1.7357e-09, 1.5754e-09,
     x 1.4398e-09, 1.4018e-09, 1.5459e-09, 1.7576e-09, 2.1645e-09,
     x 2.9480e-09, 4.4439e-09, 5.8341e-09, 8.0757e-09, 1.1658e-08,
     x 1.6793e-08, 2.2694e-08, 2.9468e-08, 3.9278e-08, 5.2145e-08/
      data f0301/
     x 6.4378e-08, 7.7947e-08, 8.5321e-08, 9.7848e-08, 1.0999e-07,
     x 1.1489e-07, 1.2082e-07, 1.2822e-07, 1.4053e-07, 1.5238e-07,
     x 1.5454e-07, 1.5018e-07, 1.4048e-07, 1.2359e-07, 1.0858e-07,
     x 9.3486e-08, 8.1638e-08, 7.7690e-08, 8.4625e-08, 1.0114e-07,
     x 1.1430e-07, 1.2263e-07, 1.3084e-07, 1.3380e-07, 1.3573e-07,
     x 1.3441e-07, 1.2962e-07, 1.2638e-07, 1.1934e-07, 1.1371e-07,
     x 1.0871e-07, 9.8843e-08, 9.1877e-08, 9.1050e-08, 9.3213e-08,
     x 9.2929e-08, 1.0155e-07, 1.1263e-07, 1.2370e-07, 1.3636e-07,
     x 1.5400e-07, 1.7656e-07, 2.1329e-07, 2.3045e-07, 2.5811e-07,
     x 2.9261e-07, 3.4259e-07, 4.0770e-07, 4.8771e-07, 5.8081e-07/
      data f0351/
     x 7.2895e-07, 8.7482e-07, 1.0795e-06, 1.3384e-06, 1.7208e-06,
     x 2.0677e-06, 2.5294e-06, 3.1123e-06, 3.7900e-06, 4.7752e-06,
     x 5.6891e-06, 6.6261e-06, 7.6246e-06, 8.7730e-06, 9.6672e-06,
     x 1.0980e-05, 1.1287e-05, 1.1670e-05, 1.1635e-05, 1.1768e-05,
     x 1.2039e-05, 1.2253e-05, 1.3294e-05, 1.4005e-05, 1.3854e-05,
     x 1.3420e-05, 1.3003e-05, 1.2645e-05, 1.1715e-05, 1.1258e-05,
     x 1.1516e-05, 1.2494e-05, 1.3655e-05, 1.4931e-05, 1.4649e-05,
     x 1.3857e-05, 1.3120e-05, 1.1791e-05, 1.0637e-05, 8.2760e-06,
     x 6.5821e-06, 5.1959e-06, 4.0158e-06, 3.0131e-06, 2.0462e-06,
     x 1.4853e-06, 1.0365e-06, 7.3938e-07, 4.9752e-07, 3.4148e-07/
      data f0401/
     x 2.4992e-07, 1.8363e-07, 1.4591e-07, 1.1380e-07, 9.0588e-08,
     x 7.3697e-08, 6.0252e-08, 5.1868e-08, 4.2660e-08, 3.6163e-08,
     x 3.2512e-08, 2.9258e-08, 2.4238e-08, 2.1209e-08, 1.6362e-08,
     x 1.3871e-08, 1.2355e-08, 9.6940e-09, 7.7735e-09, 6.2278e-09,
     x 5.2282e-09, 4.3799e-09, 3.5545e-09, 2.7527e-09, 2.0950e-09,
     x 1.6344e-09, 1.2689e-09, 1.0403e-09, 8.4880e-10, 6.3461e-10,
     x 4.7657e-10, 3.5220e-10, 2.7879e-10, 2.3021e-10, 1.6167e-10,
     x 1.1732e-10, 8.9206e-11, 7.0596e-11, 5.8310e-11, 4.4084e-11,
     x 3.1534e-11, 2.5068e-11, 2.2088e-11, 2.2579e-11, 2.2637e-11,
     x 2.5705e-11, 3.2415e-11, 4.6116e-11, 6.5346e-11, 9.4842e-11/
      data f0451/
     x 1.2809e-10, 1.8211e-10, 2.4052e-10, 3.0270e-10, 3.5531e-10,
     x 4.2402e-10, 4.6730e-10, 4.7942e-10, 4.6813e-10, 4.5997e-10,
     x 4.5788e-10, 4.0311e-10, 3.7367e-10, 3.3149e-10, 2.9281e-10,
     x 2.5231e-10, 2.1152e-10, 1.9799e-10, 1.8636e-10, 1.9085e-10,
     x 2.0786e-10, 2.2464e-10, 2.3785e-10, 2.5684e-10, 2.7499e-10,
     x 2.6962e-10, 2.6378e-10, 2.6297e-10, 2.6903e-10, 2.7035e-10,
     x 2.5394e-10, 2.5655e-10, 2.7184e-10, 2.9013e-10, 3.0585e-10,
     x 3.0791e-10, 3.1667e-10, 3.4343e-10, 3.7365e-10, 4.0269e-10,
     x 4.7260e-10, 5.6584e-10, 6.9791e-10, 8.6569e-10, 1.0393e-09,
     x 1.2067e-09, 1.5047e-09, 1.8583e-09, 2.2357e-09, 2.6498e-09/
      data f0501/
     x 3.2483e-09, 3.9927e-09, 4.6618e-09, 5.5555e-09, 6.6609e-09,
     x 8.2139e-09, 1.0285e-08, 1.3919e-08, 1.8786e-08, 2.5150e-08,
     x 3.3130e-08, 4.5442e-08, 6.3370e-08, 9.0628e-08, 1.2118e-07,
     x 1.5927e-07, 2.1358e-07, 2.7825e-07, 3.7671e-07, 4.4894e-07,
     x 5.4442e-07, 6.2240e-07, 7.3004e-07, 8.3384e-07, 8.7933e-07,
     x 8.8080e-07, 8.6939e-07, 8.6541e-07, 8.2055e-07, 7.7278e-07,
     x 7.5989e-07, 8.6909e-07, 9.7945e-07, 1.0394e-06, 1.0646e-06,
     x 1.1509e-06, 1.2017e-06, 1.1915e-06, 1.1259e-06, 1.1549e-06,
     x 1.1938e-06, 1.2356e-06, 1.2404e-06, 1.1716e-06, 1.1149e-06,
     x 1.0073e-06, 8.9845e-07, 7.6639e-07, 6.1517e-07, 5.0887e-07/
      data f0551/
     x 4.1269e-07, 3.2474e-07, 2.5698e-07, 1.8893e-07, 1.4009e-07,
     x 1.0340e-07, 7.7724e-08, 5.7302e-08, 4.2178e-08, 2.9603e-08,
     x 2.1945e-08, 1.6301e-08, 1.2806e-08, 1.0048e-08, 7.8970e-09,
     x 6.1133e-09, 4.9054e-09, 4.1985e-09, 3.6944e-09, 3.2586e-09,
     x 2.7362e-09, 2.3647e-09, 2.1249e-09, 1.8172e-09, 1.6224e-09,
     x 1.5158e-09, 1.2361e-09, 1.0682e-09, 9.2312e-10, 7.9220e-10,
     x 6.8174e-10, 5.6147e-10, 4.8268e-10, 4.1534e-10, 3.3106e-10,
     x 2.8275e-10, 2.4584e-10, 2.0742e-10, 1.7840e-10, 1.4664e-10,
     x 1.2390e-10, 1.0497e-10, 8.5038e-11, 6.7008e-11, 5.6355e-11,
     x 4.3323e-11, 3.6914e-11, 3.2262e-11, 3.0749e-11, 3.0318e-11/
      data f0601/
     x 2.9447e-11, 2.9918e-11, 3.0668e-11, 3.1315e-11, 3.0329e-11,
     x 2.8259e-11, 2.6065e-11, 2.3578e-11, 2.0469e-11, 1.6908e-11,
     x 1.4912e-11, 1.1867e-11, 9.9730e-12, 8.1014e-12, 6.7528e-12,
     x 6.3133e-12, 5.8599e-12, 6.0145e-12, 6.5105e-12, 7.0537e-12,
     x 7.4973e-12, 7.8519e-12, 8.5039e-12, 9.1995e-12, 1.0694e-11,
     x 1.1659e-11, 1.2685e-11, 1.3087e-11, 1.3222e-11, 1.2634e-11,
     x 1.1077e-11, 9.6259e-12, 8.3202e-12, 7.4857e-12, 6.8069e-12,
     x 6.7496e-12, 7.3116e-12, 8.0171e-12, 8.6394e-12, 9.2659e-12,
     x 1.0048e-11, 1.0941e-11, 1.2226e-11, 1.3058e-11, 1.5193e-11,
     x 1.8923e-11, 2.3334e-11, 2.8787e-11, 3.6693e-11, 4.8295e-11/
      data f0651/
     x 6.4260e-11, 8.8269e-11, 1.1865e-10, 1.5961e-10, 2.0605e-10,
     x 2.7349e-10, 3.7193e-10, 4.8216e-10, 6.1966e-10, 7.7150e-10,
     x 1.0195e-09, 1.2859e-09, 1.6535e-09, 2.0316e-09, 2.3913e-09,
     x 3.0114e-09, 3.7495e-09, 4.6504e-09, 5.9145e-09, 7.6840e-09,
     x 1.0304e-08, 1.3010e-08, 1.6441e-08, 2.1475e-08, 2.5892e-08,
     x 2.9788e-08, 3.3820e-08, 4.0007e-08, 4.4888e-08, 4.5765e-08,
     x 4.6131e-08, 4.6239e-08, 4.4849e-08, 4.0729e-08, 3.6856e-08,
     x 3.6164e-08, 3.7606e-08, 4.1457e-08, 4.3750e-08, 5.1150e-08,
     x 5.6054e-08, 6.1586e-08, 6.4521e-08, 6.6494e-08, 6.9024e-08,
     x 6.8893e-08, 7.0901e-08, 6.9760e-08, 7.1485e-08, 7.0740e-08/
      data f0701/
     x 7.3764e-08, 7.6618e-08, 8.4182e-08, 9.3838e-08, 1.0761e-07,
     x 1.2851e-07, 1.4748e-07, 1.8407e-07, 2.2109e-07, 2.6392e-07,
     x 2.9887e-07, 3.4493e-07, 4.0336e-07, 4.3551e-07, 4.9231e-07,
     x 5.0728e-07, 5.3781e-07, 5.3285e-07, 5.4496e-07, 5.5707e-07,
     x 5.6944e-07, 6.1123e-07, 6.4317e-07, 6.4581e-07, 6.1999e-07,
     x 6.0191e-07, 5.7762e-07, 5.7241e-07, 5.7013e-07, 6.0160e-07,
     x 6.6905e-07, 7.4095e-07, 8.2121e-07, 8.0947e-07, 7.6145e-07,
     x 7.2193e-07, 6.3722e-07, 5.4316e-07, 4.2186e-07, 3.2528e-07,
     x 2.5207e-07, 1.8213e-07, 1.2658e-07, 8.6746e-08, 6.0216e-08,
     x 4.1122e-08, 2.8899e-08, 2.1740e-08, 1.7990e-08, 1.5593e-08/
      data f0751/
     x 1.3970e-08, 1.2238e-08, 1.0539e-08, 9.2386e-09, 7.8481e-09,
     x 6.8704e-09, 5.7615e-09, 5.0434e-09, 4.6886e-09, 4.3770e-09,
     x 3.9768e-09, 3.5202e-09, 3.1854e-09, 2.9009e-09, 2.5763e-09,
     x 2.2135e-09, 1.9455e-09, 1.6248e-09, 1.3368e-09, 1.0842e-09,
     x 8.4254e-10, 6.7414e-10, 5.4667e-10, 4.5005e-10, 3.4932e-10,
     x 2.6745e-10, 2.2053e-10, 1.8162e-10, 1.4935e-10, 1.1618e-10,
     x 9.1888e-11, 8.0672e-11, 6.8746e-11, 6.2668e-11, 5.5715e-11,
     x 4.5074e-11, 3.7669e-11, 3.2082e-11, 2.8085e-11, 2.4838e-11,
     x 1.9791e-11, 1.6964e-11, 1.3887e-11, 1.1179e-11, 9.7499e-12,
     x 7.8255e-12, 6.3698e-12, 5.3265e-12, 4.6588e-12, 4.4498e-12/
      data f0801/
     x 3.9984e-12, 3.7513e-12, 3.7176e-12, 3.9148e-12, 4.2702e-12,
     x 5.0090e-12, 6.5801e-12, 8.7787e-12, 1.2718e-11, 1.8375e-11,
     x 2.5304e-11, 3.5403e-11, 4.8842e-11, 6.4840e-11, 8.0911e-11,
     x 1.0136e-10, 1.2311e-10, 1.4203e-10, 1.5869e-10, 1.8093e-10,
     x 2.1370e-10, 2.5228e-10, 2.8816e-10, 3.4556e-10, 3.9860e-10,
     x 4.4350e-10, 4.7760e-10, 5.2357e-10, 6.0827e-10, 6.3635e-10,
     x 6.5886e-10, 6.8753e-10, 7.2349e-10, 7.2789e-10, 6.8232e-10,
     x 6.6081e-10, 6.4232e-10, 6.3485e-10, 6.4311e-10, 7.2235e-10,
     x 7.7263e-10, 8.1668e-10, 9.0324e-10, 9.7643e-10, 1.0535e-09,
     x 1.0195e-09, 1.0194e-09, 1.0156e-09, 9.6792e-10, 9.2725e-10/
      data f0851/
     x 8.7347e-10, 8.4484e-10, 8.2647e-10, 8.4363e-10, 9.1261e-10,
     x 1.0051e-09, 1.1511e-09, 1.4037e-09, 1.8066e-09, 2.4483e-09,
     x 3.2739e-09, 4.3194e-09, 5.6902e-09, 7.7924e-09, 9.7376e-09,
     x 1.2055e-08, 1.4303e-08, 1.6956e-08, 1.9542e-08, 2.2233e-08,
     x 2.5186e-08, 2.7777e-08, 2.8943e-08, 2.8873e-08, 2.9417e-08,
     x 2.7954e-08, 2.7524e-08, 2.7040e-08, 3.1254e-08, 3.6843e-08,
     x 3.7797e-08, 3.8713e-08, 4.0135e-08, 4.2824e-08, 4.3004e-08,
     x 4.0279e-08, 4.2781e-08, 4.5220e-08, 4.8948e-08, 5.0172e-08,
     x 4.8499e-08, 4.7182e-08, 4.2204e-08, 3.7701e-08, 3.0972e-08,
     x 2.4654e-08, 1.9543e-08, 1.4609e-08, 1.1171e-08, 8.3367e-09/
      data f0901/
     x 6.3791e-09, 5.0790e-09, 4.0655e-09, 3.3658e-09, 2.7882e-09,
     x 2.4749e-09, 2.2287e-09, 2.0217e-09, 1.8191e-09, 1.5897e-09,
     x 1.4191e-09, 1.2448e-09, 1.0884e-09, 9.3585e-10, 7.9429e-10,
     x 7.3214e-10, 6.5008e-10, 5.7549e-10, 5.4300e-10, 4.7251e-10,
     x 4.3451e-10, 3.8446e-10, 3.5589e-10, 3.4432e-10, 2.8209e-10,
     x 2.4620e-10, 2.1278e-10, 1.8406e-10, 1.6314e-10, 1.3261e-10,
     x 1.1696e-10, 9.6865e-11, 7.6814e-11, 6.6411e-11, 5.0903e-11,
     x 4.0827e-11, 3.0476e-11, 2.3230e-11, 1.7707e-11, 1.3548e-11,
     x 1.0719e-11, 9.3026e-12, 8.7967e-12, 8.3136e-12, 7.3918e-12,
     x 6.5293e-12, 5.9243e-12, 5.3595e-12, 3.5266e-12, 2.2571e-12/
      data f0951/
     x 1.6150e-12, 1.1413e-12, 8.4998e-13, 7.0803e-13, 5.1747e-13,
     x 4.0694e-13, 3.6528e-13, 3.3670e-13, 3.1341e-13, 2.9390e-13,
     x 2.8680e-13, 3.1283e-13, 3.7294e-13, 5.0194e-13, 6.7919e-13,
     x 1.0455e-12, 1.5230e-12, 2.3932e-12, 3.4231e-12, 5.0515e-12,
     x 7.3193e-12, 9.9406e-12, 1.2193e-11, 1.4742e-11, 1.9269e-11,
     x 2.1816e-11, 2.2750e-11, 2.2902e-11, 2.3888e-11, 2.4902e-11,
     x 2.2160e-11, 2.0381e-11, 1.9903e-11, 2.0086e-11, 1.9304e-11,
     x 2.0023e-11, 2.2244e-11, 2.5450e-11, 3.1228e-11, 3.4560e-11,
     x 3.6923e-11, 3.7486e-11, 3.8124e-11, 3.8317e-11, 3.4737e-11,
     x 3.3037e-11, 3.1724e-11, 2.9840e-11, 2.8301e-11, 2.5857e-11/
      data f1001/
     x 2.3708e-11, 1.9452e-11, 1.6232e-11, 1.5174e-11, 1.4206e-11,
     x 1.4408e-11, 1.5483e-11, 1.8642e-11, 2.3664e-11, 3.0181e-11,
     x 4.0160e-11, 5.2287e-11, 7.2754e-11, 1.0511e-10, 1.4531e-10,
     x 2.0998e-10, 2.6883e-10, 3.3082e-10, 4.2638e-10, 5.3132e-10,
     x 6.3617e-10, 7.1413e-10, 8.5953e-10, 9.9715e-10, 1.0796e-09,
     x 1.0978e-09, 1.1052e-09, 1.1095e-09, 1.0641e-09, 9.7881e-10,
     x 9.6590e-10, 1.0332e-09, 1.1974e-09, 1.3612e-09, 1.5829e-09,
     x 1.8655e-09, 2.1465e-09, 2.4779e-09, 2.7370e-09, 2.9915e-09,
     x 3.3037e-09, 3.6347e-09, 3.9587e-09, 4.4701e-09, 5.0122e-09,
     x 5.8044e-09, 6.1916e-09, 6.9613e-09, 7.7863e-09, 8.2820e-09/
      data f1051/
     x 9.4359e-09, 9.7387e-09, 1.0656e-08, 1.0746e-08, 1.1210e-08,
     x 1.1905e-08, 1.2194e-08, 1.3145e-08, 1.3738e-08, 1.3634e-08,
     x 1.3011e-08, 1.2511e-08, 1.1805e-08, 1.2159e-08, 1.2390e-08,
     x 1.3625e-08, 1.5678e-08, 1.7886e-08, 1.9933e-08, 1.9865e-08,
     x 1.9000e-08, 1.7812e-08, 1.5521e-08, 1.2593e-08, 9.5635e-09,
     x 7.2987e-09, 5.2489e-09, 3.5673e-09, 2.4206e-09, 1.6977e-09,
     x 1.2456e-09, 9.3744e-10, 7.8379e-10, 6.9960e-10, 6.6451e-10,
     x 6.8521e-10, 7.4234e-10, 8.6658e-10, 9.4972e-10, 1.0791e-09,
     x 1.2359e-09, 1.3363e-09, 1.5025e-09, 1.5368e-09, 1.6152e-09,
     x 1.6184e-09, 1.6557e-09, 1.7035e-09, 1.6916e-09, 1.7237e-09/
      data f1101/
     x 1.7175e-09, 1.6475e-09, 1.5335e-09, 1.4272e-09, 1.3282e-09,
     x 1.3459e-09, 1.4028e-09, 1.5192e-09, 1.7068e-09, 1.9085e-09,
     x 2.1318e-09, 2.1020e-09, 1.9942e-09, 1.8654e-09, 1.6391e-09,
     x 1.3552e-09, 1.0186e-09, 7.8540e-10, 5.7022e-10, 3.9247e-10,
     x 2.5441e-10, 1.6699e-10, 1.1132e-10, 6.8989e-11, 4.5255e-11,
     x 3.1106e-11, 2.3161e-11, 1.7618e-11, 1.4380e-11, 1.1601e-11,
     x 9.7148e-12, 8.4519e-12, 6.5392e-12, 5.4113e-12, 4.7624e-12,
     x 4.0617e-12, 3.6173e-12, 2.8608e-12, 2.2724e-12, 1.7436e-12,
     x 1.3424e-12, 1.0358e-12, 7.3064e-13, 5.4500e-13, 4.0551e-13,
     x 2.8642e-13, 2.1831e-13, 1.6860e-13, 1.2086e-13, 1.0150e-13/
      data f1151/
     x 9.3550e-14, 8.4105e-14, 7.3051e-14, 6.9796e-14, 7.9949e-14,
     x 1.0742e-13, 1.5639e-13, 2.1308e-13, 3.1226e-13, 4.6853e-13,
     x 6.6917e-13, 1.0088e-12, 1.4824e-12, 2.2763e-12, 3.3917e-12,
     x 4.4585e-12, 6.3187e-12, 8.4189e-12, 1.1302e-11, 1.3431e-11,
     x 1.5679e-11, 1.9044e-11, 2.2463e-11, 2.3605e-11, 2.3619e-11,
     x 2.3505e-11, 2.3805e-11, 2.2549e-11, 1.9304e-11, 1.8382e-11,
     x 1.7795e-11, 1.8439e-11, 1.9146e-11, 2.1966e-11, 2.6109e-11,
     x 3.1883e-11, 3.7872e-11, 4.3966e-11, 4.8789e-11, 5.3264e-11,
     x 5.9705e-11, 6.3744e-11, 7.0163e-11, 7.9114e-11, 8.8287e-11,
     x 9.9726e-11, 1.1498e-10, 1.3700e-10, 1.6145e-10, 1.9913e-10/
      data f1201/
     x 2.2778e-10, 2.6216e-10, 2.9770e-10, 3.3405e-10, 3.7821e-10,
     x 3.9552e-10, 4.1322e-10, 4.0293e-10, 4.0259e-10, 3.8853e-10,
     x 3.7842e-10, 3.8551e-10, 4.4618e-10, 5.0527e-10, 5.0695e-10,
     x 5.1216e-10, 5.1930e-10, 5.5794e-10, 5.3320e-10, 5.2008e-10,
     x 5.6888e-10, 6.1883e-10, 6.9006e-10, 6.9505e-10, 6.6768e-10,
     x 6.3290e-10, 5.6753e-10, 5.0327e-10, 3.9830e-10, 3.1147e-10,
     x 2.4416e-10, 1.8860e-10, 1.3908e-10, 9.9156e-11, 7.3779e-11,
     x 5.6048e-11, 4.2457e-11, 3.4505e-11, 2.9881e-11, 2.7865e-11,
     x 2.8471e-11, 3.1065e-11, 3.4204e-11, 3.9140e-11, 4.3606e-11,
     x 4.9075e-11, 5.3069e-11, 5.5236e-11, 5.5309e-11, 5.3832e-11/
      data f1251/
     x 5.3183e-11, 5.1783e-11, 5.2042e-11, 5.4422e-11, 5.5656e-11,
     x 5.4409e-11, 5.2659e-11, 5.1696e-11, 5.1726e-11, 4.9003e-11,
     x 4.9050e-11, 5.1700e-11, 5.6818e-11, 6.3129e-11, 6.6542e-11,
     x 6.4367e-11, 5.9908e-11, 5.4470e-11, 4.7903e-11, 3.9669e-11,
     x 2.9651e-11, 2.2286e-11, 1.6742e-11, 1.1827e-11, 7.7739e-12,
     x 4.8805e-12, 3.1747e-12, 2.0057e-12, 1.2550e-12, 8.7434e-13,
     x 6.2755e-13, 4.9752e-13, 4.0047e-13, 3.5602e-13, 3.0930e-13,
     x 2.4903e-13, 1.9316e-13, 1.4995e-13, 1.2059e-13, 8.7242e-14,
     x 6.4511e-14, 5.3300e-14, 4.3741e-14, 3.4916e-14, 2.6560e-14,
     x 1.6923e-14, 1.1816e-14, 6.7071e-15, 3.6474e-15, 2.0686e-15/
      data f1301/
     x 1.1925e-15, 6.8948e-16, 3.9661e-16, 2.2576e-16, 1.2669e-16,
     x 6.9908e-17, 3.7896e-17, 2.0280e-17, 1.1016e-17, 6.7816e-18,
     x 6.0958e-18, 8.9913e-18, 1.7201e-17, 3.4964e-17, 7.0722e-17,
     x 1.4020e-16, 2.7167e-16, 5.1478e-16, 9.5500e-16, 1.7376e-15,
     x 3.1074e-15, 5.4789e-15, 9.5640e-15, 1.6635e-14, 2.9145e-14,
     x 5.2179e-14, 8.8554e-14, 1.4764e-13, 2.3331e-13, 3.5996e-13,
     x 5.2132e-13, 6.3519e-13, 7.3174e-13, 8.3752e-13, 9.8916e-13,
     x 1.1515e-12, 1.4034e-12, 1.6594e-12, 2.1021e-12, 2.7416e-12,
     x 3.4135e-12, 4.5517e-12, 5.5832e-12, 7.2303e-12, 9.9484e-12,
     x 1.2724e-11, 1.6478e-11, 2.0588e-11, 2.5543e-11, 3.3625e-11/
      data f1351/
     x 4.1788e-11, 5.0081e-11, 6.0144e-11, 6.9599e-11, 8.4408e-11,
     x 9.7143e-11, 1.0805e-10, 1.1713e-10, 1.2711e-10, 1.3727e-10,
     x 1.4539e-10, 1.6049e-10, 1.7680e-10, 2.0557e-10, 2.4967e-10,
     x 3.0096e-10, 3.5816e-10, 4.0851e-10, 4.6111e-10, 5.2197e-10,
     x 5.5043e-10, 6.0324e-10, 6.4983e-10, 6.7498e-10, 7.0545e-10,
     x 7.0680e-10, 7.5218e-10, 7.5723e-10, 7.7840e-10, 8.0081e-10,
     x 8.0223e-10, 7.7271e-10, 7.1676e-10, 6.7819e-10, 6.4753e-10,
     x 6.5844e-10, 7.0163e-10, 7.7503e-10, 8.8152e-10, 9.9022e-10,
     x 1.0229e-09, 9.9296e-10, 8.9911e-10, 7.7813e-10, 6.3785e-10,
     x 4.7491e-10, 3.5280e-10, 2.4349e-10, 1.6502e-10, 1.1622e-10/
      data f1401/
     x 8.6715e-11, 6.7360e-11, 5.3910e-11, 4.5554e-11, 4.1300e-11,
     x 3.9728e-11, 3.9000e-11, 3.9803e-11, 4.1514e-11, 4.3374e-11,
     x 4.6831e-11, 4.8921e-11, 5.1995e-11, 5.7242e-11, 6.2759e-11,
     x 7.0801e-11, 7.4555e-11, 7.9754e-11, 8.7616e-11, 9.1171e-11,
     x 1.0349e-10, 1.1047e-10, 1.2024e-10, 1.2990e-10, 1.3725e-10,
     x 1.5005e-10, 1.5268e-10, 1.5535e-10, 1.5623e-10, 1.5009e-10,
     x 1.4034e-10, 1.3002e-10, 1.2225e-10, 1.1989e-10, 1.2411e-10,
     x 1.3612e-10, 1.5225e-10, 1.7202e-10, 1.9471e-10, 1.9931e-10,
     x 1.9079e-10, 1.7478e-10, 1.5259e-10, 1.2625e-10, 9.3332e-11,
     x 6.8796e-11, 4.6466e-11, 2.9723e-11, 1.8508e-11, 1.2106e-11/
      data f1451/
     x 8.0142e-12, 5.4066e-12, 3.9329e-12, 3.1665e-12, 2.7420e-12,
     x 2.3996e-12, 2.3804e-12, 2.3242e-12, 2.4476e-12, 2.5331e-12,
     x 2.3595e-12, 2.2575e-12, 2.1298e-12, 2.0088e-12, 1.8263e-12,
     x 1.6114e-12, 1.4422e-12, 1.2946e-12, 1.0837e-12, 9.1282e-13,
     x 7.2359e-13, 5.3307e-13, 3.8837e-13, 2.6678e-13, 1.6769e-13,
     x 1.0826e-13, 7.2364e-14, 4.5201e-14, 3.0808e-14, 2.2377e-14,
     x 1.7040e-14, 9.2181e-15, 5.2934e-15, 3.5774e-15, 3.1431e-15,
     x 3.7647e-15, 5.6428e-15, 9.5139e-15, 1.7322e-14, 2.8829e-14,
     x 4.7708e-14, 6.9789e-14, 9.7267e-14, 1.4662e-13, 1.9429e-13,
     x 2.5998e-13, 3.6636e-13, 4.7960e-13, 6.5129e-13, 7.7638e-13/
      data f1501/
     x 9.3774e-13, 1.1467e-12, 1.3547e-12, 1.5686e-12, 1.6893e-12,
     x 1.9069e-12, 2.1352e-12, 2.3071e-12, 2.4759e-12, 2.8247e-12,
     x 3.4365e-12, 4.3181e-12, 5.6107e-12, 7.0017e-12, 8.6408e-12,
     x 1.0974e-11, 1.3742e-11, 1.6337e-11, 2.0157e-11, 2.3441e-11,
     x 2.6733e-11, 3.0247e-11, 3.3737e-11, 3.8618e-11, 4.1343e-11,
     x 4.3870e-11, 4.4685e-11, 4.4881e-11, 4.5526e-11, 4.3628e-11,
     x 4.4268e-11, 4.6865e-11, 5.3426e-11, 5.4020e-11, 5.3218e-11,
     x 5.4587e-11, 5.6360e-11, 5.7740e-11, 5.6426e-11, 6.0399e-11,
     x 6.6981e-11, 7.4319e-11, 7.7977e-11, 7.5539e-11, 7.1610e-11,
     x 6.4606e-11, 5.5498e-11, 4.3944e-11, 3.3769e-11, 2.5771e-11/
      data f1551/
     x 1.9162e-11, 1.3698e-11, 1.0173e-11, 7.8925e-12, 6.1938e-12,
     x 4.7962e-12, 4.0811e-12, 3.3912e-12, 2.8625e-12, 2.4504e-12,
     x 2.2188e-12, 2.2139e-12, 2.2499e-12, 2.2766e-12, 2.3985e-12,
     x 2.5459e-12, 2.9295e-12, 3.4196e-12, 3.6155e-12, 4.0733e-12,
     x 4.4610e-12, 4.9372e-12, 5.4372e-12, 5.7304e-12, 6.1640e-12,
     x 6.1278e-12, 6.2940e-12, 6.4947e-12, 6.8174e-12, 7.5190e-12,
     x 8.2608e-12, 8.4971e-12, 8.3484e-12, 8.1888e-12, 7.8552e-12,
     x 7.8468e-12, 7.5943e-12, 7.9096e-12, 8.6869e-12, 9.1303e-12,
     x 9.2547e-12, 8.9322e-12, 8.2177e-12, 7.3408e-12, 5.7956e-12,
     x 4.4470e-12, 3.5881e-12, 2.6748e-12, 1.7074e-12, 9.6700e-13/
      data f1601/
     x 5.2645e-13, 2.9943e-13, 1.7316e-13, 1.0039e-13, 5.7859e-14,
     x 3.2968e-14, 1.8499e-14, 1.0192e-14, 5.5015e-15, 2.9040e-15,
     x 1.4968e-15, 7.5244e-16, 3.6852e-16, 1.7568e-16, 8.1464e-17,
     x 3.6717e-17, 1.6076e-17, 6.8341e-18, 2.8195e-18, 1.1286e-18,
     x  .0000e+00,  .0000e+00,  .0000e+00,  .0000e+00,  .0000e+00,
     x  .0000e+00,  .0000e+00,  .0000e+00,  .0000e+00, 1.4070e-18,
     x 3.0405e-18, 6.4059e-18, 1.3169e-17, 2.6443e-17, 5.1917e-17,
     x 9.9785e-17, 1.8802e-16, 3.4788e-16, 6.3328e-16, 1.1370e-15,
     x 2.0198e-15, 3.5665e-15, 6.3053e-15, 1.1309e-14, 2.1206e-14,
     x 3.2858e-14, 5.5165e-14, 8.6231e-14, 1.2776e-13, 1.7780e-13/
      data f1651/
     x 2.5266e-13, 3.6254e-13, 5.1398e-13, 6.8289e-13, 8.7481e-13,
     x 1.1914e-12, 1.6086e-12, 2.0469e-12, 2.5761e-12, 3.4964e-12,
     x 4.4980e-12, 5.5356e-12, 6.7963e-12, 8.5720e-12, 1.0700e-11,
     x 1.2983e-11, 1.6270e-11, 1.9609e-11, 2.2668e-11, 2.5963e-11,
     x 3.0918e-11, 3.4930e-11, 3.9330e-11, 4.4208e-11, 4.6431e-11,
     x 5.1141e-11, 5.4108e-11, 5.8077e-11, 6.5050e-11, 7.2126e-11,
     x 8.1064e-11, 8.1973e-11, 8.1694e-11, 8.3081e-11, 8.0240e-11,
     x 7.9225e-11, 7.6256e-11, 7.8468e-11, 8.0041e-11, 8.1585e-11,
     x 8.3485e-11, 8.3774e-11, 8.5870e-11, 8.6104e-11, 8.8516e-11,
     x 9.0814e-11, 9.2522e-11, 8.8913e-11, 7.8381e-11, 6.8568e-11/
      data f1701/
     x 5.6797e-11, 4.4163e-11, 3.2369e-11, 2.3259e-11, 1.6835e-11,
     x 1.1733e-11, 8.5273e-12, 6.3805e-12, 4.8983e-12, 3.8831e-12,
     x 3.2610e-12, 2.8577e-12, 2.5210e-12, 2.2913e-12, 2.0341e-12,
     x 1.8167e-12, 1.6395e-12, 1.4890e-12, 1.3516e-12, 1.2542e-12,
     x 1.2910e-12, 1.3471e-12, 1.4689e-12, 1.5889e-12, 1.6989e-12,
     x 1.8843e-12, 2.0902e-12, 2.3874e-12, 2.7294e-12, 3.3353e-12,
     x 4.0186e-12, 4.5868e-12, 5.2212e-12, 5.8856e-12, 6.5991e-12,
     x 7.2505e-12, 7.6637e-12, 8.5113e-12, 9.4832e-12, 9.9678e-12,
     x 1.0723e-11, 1.0749e-11, 1.1380e-11, 1.1774e-11, 1.1743e-11,
     x 1.2493e-11, 1.2559e-11, 1.2332e-11, 1.1782e-11, 1.1086e-11/
      data f1751/
     x 1.0945e-11, 1.1178e-11, 1.2083e-11, 1.3037e-11, 1.4730e-11,
     x 1.6450e-11, 1.7403e-11, 1.7004e-11, 1.5117e-11, 1.3339e-11,
     x 1.0844e-11, 8.0915e-12, 5.6615e-12, 3.7196e-12, 2.5194e-12,
     x 1.6569e-12, 1.1201e-12, 8.2335e-13, 6.0270e-13, 4.8205e-13,
     x 4.1313e-13, 3.6243e-13, 3.2575e-13, 2.7730e-13, 2.5292e-13,
     x 2.3062e-13, 2.1126e-13, 2.1556e-13, 2.1213e-13, 2.2103e-13,
     x 2.1927e-13, 2.0794e-13, 1.9533e-13, 1.6592e-13, 1.4521e-13,
     x 1.1393e-13, 8.3772e-14, 6.2077e-14, 4.3337e-14, 2.7165e-14,
     x 1.6821e-14, 9.5407e-15, 5.3093e-15, 3.0320e-15, 1.7429e-15,
     x 9.9828e-16, 5.6622e-16, 3.1672e-16, 1.7419e-16, 9.3985e-17/
      data f1801/
     x 4.9656e-17, 2.5652e-17, 1.2942e-17, 6.3695e-18, 3.0554e-18,
     c 1.4273e-18, -0.       , -0.       , -0.       , -0.       ,
     c -0.       , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        /
      data f1851/
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        /
      data f1901/
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        /
      data f1951/
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        ,
     c 0.        , 0.        , 0.        , 0.        , 0.        /
      data f2001/
     c 0.        /
c
      end
c=======================================================================
      block data c4d
c>    block data
      common /c4c8/ c401(114),c4115(19),c8(102)
c        n2 continuum absorption coefficients
c     c4 location  1    v =  2080 cm-1
c     c4 location  133  v =  2740 cm-1
      data c401 /
     1 2.93e-04, 3.86e-04, 5.09e-04, 6.56e-04, 8.85e-04, 1.06e-03,
     2 1.31e-03, 1.73e-03, 2.27e-03, 2.73e-03, 3.36e-03, 3.95e-03,
     3 5.46e-03, 7.19e-03, 9.00e-03, 1.13e-02, 1.36e-02, 1.66e-02,
     4 1.96e-02, 2.16e-02, 2.36e-02, 2.63e-02, 2.90e-02, 3.15e-02,
     5 3.40e-02, 3.66e-02, 3.92e-02, 4.26e-02, 4.60e-02, 4.95e-02,
     6 5.30e-02, 5.65e-02, 6.00e-02, 6.30e-02, 6.60e-02, 6.89e-02,
     7 7.18e-02, 7.39e-02, 7.60e-02, 7.84e-02, 8.08e-02, 8.39e-02,
     8 8.70e-02, 9.13e-02, 9.56e-02, 1.08e-01, 1.20e-01, 1.36e-01,
     9 1.52e-01, 1.60e-01, 1.69e-01, 1.60e-01, 1.51e-01, 1.37e-01,
     $ 1.23e-01, 1.19e-01, 1.16e-01, 1.14e-01, 1.12e-01, 1.12e-01,
     $ 1.11e-01, 1.11e-01, 1.12e-01, 1.14e-01, 1.13e-01, 1.12e-01,
     $ 1.09e-01, 1.07e-01, 1.02e-01, 9.90e-02, 9.50e-02, 9.00e-02,
     $ 8.65e-02, 8.20e-02, 7.65e-02, 7.05e-02, 6.50e-02, 6.10e-02,
     $ 5.50e-02, 4.95e-02, 4.50e-02, 4.00e-02, 3.75e-02, 3.50e-02,
     $ 3.10e-02, 2.65e-02, 2.50e-02, 2.20e-02, 1.95e-02, 1.75e-02,
     $ 1.60e-02, 1.40e-02, 1.20e-02, 1.05e-02, 9.50e-03, 9.00e-03,
     $ 8.00e-03, 7.00e-03, 6.50e-03, 6.00e-03, 5.50e-03, 4.75e-03,
     $ 4.00e-03, 3.75e-03, 3.50e-03, 3.00e-03, 2.50e-03, 2.25e-03,
     $ 2.00e-03, 1.85e-03, 1.70e-03, 1.60e-03, 1.50e-03, 1.50e-03/
      data c4115 /
     1 1.54e-03, 1.50e-03, 1.47e-03, 1.34e-03, 1.25e-03, 1.06e-03,
     2 9.06e-04, 7.53e-04, 6.41e-04, 5.09e-04, 4.04e-04, 3.36e-04,
     3 2.86e-04, 2.32e-04, 1.94e-04, 1.57e-04, 1.31e-04, 1.02e-04,
     4 8.07e-05/
c        4m  h2o continuum
c        ozone u.v. + visible band model absorption coeff
c     c8 location  1    v =  13000  cm-1
c     c8 location  56   v =  24200  cm-1
c        dv = 200  cm-1
c     c8 location  57   v =  27500  cm-1
c     c8 location  102  v =  50000  cm-1
c        dv = 500  cm-1
      data c8 /
     1 4.50e-03, 8.00e-03, 1.07e-02, 1.10e-02, 1.27e-02, 1.71e-02,
     2 2.00e-02, 2.45e-02, 3.07e-02, 3.84e-02, 4.78e-02, 5.67e-02,
     3 6.54e-02, 7.62e-02, 9.15e-02, 1.00e-01, 1.09e-01, 1.20e-01,
     4 1.28e-01, 1.12e-01, 1.11e-01, 1.16e-01, 1.19e-01, 1.13e-01,
     5 1.03e-01, 9.24e-02, 8.28e-02, 7.57e-02, 7.07e-02, 6.58e-02,
     6 5.56e-02, 4.77e-02, 4.06e-02, 3.87e-02, 3.82e-02, 2.94e-02,
     7 2.09e-02, 1.80e-02, 1.91e-02, 1.66e-02, 1.17e-02, 7.70e-03,
     8 6.10e-03, 8.50e-03, 6.10e-03, 3.70e-03, 3.20e-03, 3.10e-03,
     9 2.55e-03, 1.98e-03, 1.40e-03, 8.25e-04, 2.50e-04, 0.      ,
     $ 0.      , 0.      , 5.65e-04, 2.04e-03, 7.35e-03, 2.03e-02,
     $ 4.98e-02, 1.18e-01, 2.46e-01, 5.18e-01, 1.02e+00, 1.95e+00,
     $ 3.79e+00, 6.65e+00, 1.24e+01, 2.20e+01, 3.67e+01, 5.95e+01,
     $ 8.50e+01, 1.26e+02, 1.68e+02, 2.06e+02, 2.42e+02, 2.71e+02,
     $ 2.91e+02, 3.02e+02, 3.03e+02, 2.94e+02, 2.77e+02, 2.54e+02,
     $ 2.26e+02, 1.96e+02, 1.68e+02, 1.44e+02, 1.17e+02, 9.75e+01,
     $ 7.65e+01, 6.04e+01, 4.62e+01, 3.46e+01, 2.52e+01, 2.00e+01,
     $ 1.57e+01, 1.20e+01, 1.00e+01, 8.80e+00, 8.30e+00, 8.60e+00/
      end
c=======================================================================
      block data bo2c
c>    block data
c
c     block data   (identical to block data in fascod2)
c
      common/o2c/ o2dray(74),o2c001(74),o2s0(74),o2a(74),o2b(74),
     x v1o2,v2o2,dvo2,npto2
      data v1o2,v2o2,dvo2,npto2 /1395.0,1760.0,5.0,74/
      data o2s0/
     a0.       ,
     +  .110e-8, .220e-8, .440e-8, .881e-8, .176e-7, .353e-7, .705e-7,
     b .141e-06, .158e-06, .174e-06, .190e-06, .207e-06, .253e-06,
     b .307e-06, .357e-06, .401e-06, .445e-06, .508e-06, .570e-06,
     b .599e-06, .627e-06, .650e-06, .672e-06, .763e-06, .873e-06,
     b .101e-05, .109e-05, .121e-05, .133e-05, .139e-05, .145e-05,
     b .148e-05, .140e-05, .134e-05, .126e-05, .118e-05, .114e-05,
     b .109e-05, .105e-05, .105e-05, .105e-05, .104e-05, .103e-05,
     b .992e-06, .945e-06, .876e-06, .806e-06, .766e-06, .726e-06,
     b .640e-06, .555e-06, .469e-06, .416e-06, .364e-06, .311e-06,
     b .266e-06, .222e-06, .177e-06, .170e-06, .162e-06, .155e-06,
     b .143e-06, .130e-06, .118e-06, .905e-07, .629e-07,
     + .316e-7, .157e-7, .786e-8, .393e-8, .196e-8, .982e-9,
     + 0./
      data o2a /
     a 0.       ,
     +   .147e-3, .147e-3, .147e-3,  .147e-3, .147e-3, .147e-3, .147e-3,
     b  .147e-03,  .122e-02,  .204e-02,  .217e-02,  .226e-02,  .126e-02,
     b  .362e-03, -.198e-02, -.545e-02, -.786e-02, -.624e-02, -.475e-02,
     b -.506e-02, -.533e-02, -.586e-02, -.635e-02, -.644e-02, -.679e-02,
     b -.741e-02, -.769e-02, -.780e-02, -.788e-02, -.844e-02, -.894e-02,
     b -.899e-02, -.922e-02, -.892e-02, -.857e-02, -.839e-02, -.854e-02,
     b -.871e-02, -.889e-02, -.856e-02, -.823e-02, -.796e-02, -.768e-02,
     b -.715e-02, -.638e-02, -.570e-02, -.491e-02, -.468e-02, -.443e-02,
     b -.333e-02, -.184e-02,  .313e-03, -.164e-04, -.417e-03, -.916e-03,
     b -.206e-02, -.343e-02, -.515e-02, -.365e-02, -.172e-02,  .926e-03,
     b  .168e-02,  .262e-02,  .380e-02,  .551e-02,  .889e-02,
     + .889e-2,  .889e-2, .889e-2, .889e-2, .889e-2, .889e-2,
     +  0./
      data o2b  /
     a 0.       ,
     + .306e-4,-.306e-4,-.306e-4,-.306e-4,-.306e-4,-.306e-4,-.306e-4,
     b -.306e-04, -.218e-04, -.159e-04, -.346e-05,  .642e-05,  .360e-05,
     b -.140e-05,  .157e-04,  .471e-04,  .656e-04,  .303e-04, -.192e-05,
     b  .705e-05,  .149e-04,  .200e-04,  .245e-04,  .158e-04,  .841e-05,
     b  .201e-05,  .555e-05,  .108e-04,  .150e-04,  .193e-04,  .230e-04,
     b  .243e-04,  .226e-04,  .184e-04,  .157e-04,  .169e-04,  .197e-04,
     b  .226e-04,  .258e-04,  .235e-04,  .212e-04,  .185e-04,  .156e-04,
     b  .125e-04,  .872e-05,  .760e-05,  .577e-05,  .334e-07, -.652e-05,
     b -.977e-05, -.157e-04, -.273e-04, -.180e-04, -.641e-05,  .817e-05,
     b  .326e-04,  .626e-04,  .101e-03,  .755e-04,  .430e-04, -.113e-05,
     b -.578e-05, -.120e-04, -.208e-04, -.235e-04, -.364e-04,
     + .364e-4, -.364e-4,-.364e-4,-.364e-4,-.364e-4,-.364e-4,
     + 0./
c
      end
c=======================================================================
      block data bo3hh0
c>    block data
c
c
c     o3hh0 contains o3 hartley huggins cross sections for 273k
c               units of (cm**2/mol)*1.e-20
c
c     now includes molina & molina at 273k with the temperature
c     dependence determined from the 195k harvard measurements,
c     employing the bass algorithm (co(1+c1*t+c2*t2); this is
c     only for the wavelength range from .34 to .35 microns;
c     otherwise, the bass data alone have been employed between
c     .34 and .245 microns.
c
c     new t-dependent x-sections between .345 and .36 microns
c     have now been added, based on work by cacciani, disarra
c     and fiocco, university of rome, 1987.  quadratic temp
c     has been derived, as above.
c
c     molina & molina have again been used between .245 and .185
c     microns (no temperature dependence)
c
c     agreement amongst the four data sets is reasonable (<10%)
c     and often excellent (0-3%)
c
c
      common /o3hh0/  v1c,v2c,dvc,
     x           o30001(80),o30081(80),o30161(80),o30241(80),o30321(80),
     x           o30401( 7),
     x           c00001(80),c00081(80),c00161(80),c00241(80),c00321(80),
     x           c00401(80),c00481(80),c00561(80),c00641(80),c00721(80),
     x           c00801(80),c00881(80),c00961(80),c01041(80),c01121(80),
     x           c01201(80),c01281(80),c01361(80),c01441(80),c01521(80),
     x           c01601(80),c01681(80),c01761(80),c01841(80),c01921(80),
     x           c02001(80),c02081(80),c02161(80),c02241(40)
c
c     data v1c  /27370./,v2c  /29400./,dvc  /5./,     inn & tanaka
c         data from inn & tanaka, handbook of geophysics, 1957, p 16-24
c                linearly interpolated by sac, june 1985
c                conversion: (i&t)/(loschmidt 1 1987*1.2)
c
c     data v1c /29405./, v2c /40800./ ,dvc /5./, nc /2280/  bass
c         data from bass, june 1985
c
      data v1c /27370./, v2c /40800./ ,dvc /5./
c
      data o30001/
c    x 2.08858e-03, 1.98947e-03, 1.89037e-03, 1.79126e-03, 1.69215e-03,
c     this line of data has been replaced by montonically decreasing
c     values
     x 1.00000e-03, 1.15000e-03, 1.25000e-03, 1.40000e-03, 1.50000e-03,
     x 1.59304e-03, 1.62396e-03, 1.76216e-03, 1.90036e-03, 2.03856e-03,
     x 2.16538e-03, 2.02324e-03, 1.88110e-03, 1.73896e-03, 1.59682e-03,
     x 1.45468e-03, 1.31253e-03, 1.17039e-03, 1.02825e-03, 8.86108e-04,
     x 7.43963e-04, 6.01821e-04, 4.59679e-04, 5.14820e-04, 5.73044e-04,
     x 6.31269e-04, 6.89493e-04, 7.47718e-04, 8.05942e-04, 8.64167e-04,
     x 9.22392e-04, 9.80617e-04, 1.03884e-03, 1.09707e-03, 1.15528e-03,
     x 1.21351e-03, 1.27173e-03, 1.32996e-03, 1.38818e-03, 1.44641e-03,
     x 1.50463e-03, 1.56286e-03, 1.62108e-03, 1.67931e-03, 1.73753e-03,
     x 1.79575e-03, 1.85398e-03, 1.91220e-03, 1.97043e-03, 2.02865e-03,
     x 2.08688e-03, 2.14510e-03, 2.20333e-03, 2.26155e-03, 2.31978e-03,
     x 2.37800e-03, 2.43623e-03, 2.49444e-03, 2.55267e-03, 2.61089e-03,
     x 2.66912e-03, 2.72734e-03, 2.78557e-03, 2.84379e-03, 2.90202e-03,
     x 2.96024e-03, 3.01847e-03, 3.07669e-03, 3.13491e-03, 3.19313e-03,
     x 3.25136e-03, 3.30958e-03, 3.36781e-03, 3.31660e-03, 3.21583e-03,
     x 3.11505e-03, 3.22165e-03, 3.46058e-03, 3.69953e-03, 3.93846e-03/
      data o30081/
     x 4.17739e-03, 4.41633e-03, 4.42256e-03, 4.13791e-03, 4.17894e-03,
     x 4.25583e-03, 4.33273e-03, 4.40963e-03, 4.49259e-03, 4.44532e-03,
     x 4.17540e-03, 3.84814e-03, 3.41823e-03, 3.11003e-03, 2.86548e-03,
     x 2.73912e-03, 2.70800e-03, 2.70882e-03, 2.70866e-03, 2.70816e-03,
     x 2.71228e-03, 2.78044e-03, 2.86135e-03, 3.00163e-03, 3.15222e-03,
     x 3.33394e-03, 3.48231e-03, 3.64966e-03, 3.83242e-03, 3.97733e-03,
     x 4.10299e-03, 4.26332e-03, 4.41165e-03, 4.54040e-03, 4.65544e-03,
     x 4.91897e-03, 5.23429e-03, 5.45390e-03, 5.74420e-03, 5.96314e-03,
     x 6.07198e-03, 6.07338e-03, 5.99162e-03, 5.95079e-03, 6.04655e-03,
     x 6.18239e-03, 6.56998e-03, 6.93885e-03, 7.38561e-03, 7.73029e-03,
     x 7.90493e-03, 7.72072e-03, 7.40226e-03, 6.53860e-03, 5.30328e-03,
     x 4.23000e-03, 3.45735e-03, 3.21167e-03, 3.16694e-03, 3.30966e-03,
     x 3.47431e-03, 3.68089e-03, 3.92006e-03, 4.05246e-03, 4.16408e-03,
     x 4.08710e-03, 3.98224e-03, 4.07316e-03, 4.19498e-03, 4.44990e-03,
     x 4.77881e-03, 5.08270e-03, 5.37384e-03, 5.70240e-03, 5.91906e-03,
     x 5.96745e-03, 5.92363e-03, 5.80363e-03, 5.60812e-03, 5.37450e-03/
      data o30161/
     x 5.16202e-03, 4.98389e-03, 4.95294e-03, 5.04930e-03, 5.17576e-03,
     x 5.26042e-03, 5.22957e-03, 5.32404e-03, 5.39630e-03, 5.53353e-03,
     x 5.68057e-03, 5.78679e-03, 5.83795e-03, 5.93810e-03, 6.09330e-03,
     x 6.40001e-03, 6.69056e-03, 7.04863e-03, 7.41339e-03, 7.87421e-03,
     x 8.35570e-03, 8.97672e-03, 9.58486e-03, 1.01972e-02, 1.08463e-02,
     x 1.14105e-02, 1.18935e-02, 1.22404e-02, 1.25053e-02, 1.28759e-02,
     x 1.32169e-02, 1.37796e-02, 1.46488e-02, 1.57324e-02, 1.68897e-02,
     x 1.78560e-02, 1.87101e-02, 1.92197e-02, 1.94106e-02, 1.90711e-02,
     x 1.86585e-02, 1.82149e-02, 1.82219e-02, 1.85639e-02, 1.91924e-02,
     x 2.01342e-02, 2.12312e-02, 2.26362e-02, 2.39610e-02, 2.55156e-02,
     x 2.71338e-02, 2.87904e-02, 3.04268e-02, 3.17055e-02, 3.28248e-02,
     x 3.36026e-02, 3.36867e-02, 3.26393e-02, 2.99356e-02, 2.56607e-02,
     x 2.11545e-02, 1.79508e-02, 1.59757e-02, 1.49569e-02, 1.46214e-02,
     x 1.46214e-02, 1.48217e-02, 1.51379e-02, 1.53816e-02, 1.58087e-02,
     x 1.62186e-02, 1.66627e-02, 1.70961e-02, 1.76101e-02, 1.81759e-02,
     x 1.86154e-02, 1.88889e-02, 1.89577e-02, 1.89316e-02, 1.88826e-02/
      data o30241/
     x 1.90915e-02, 1.95550e-02, 2.02707e-02, 2.11620e-02, 2.21844e-02,
     x 2.30920e-02, 2.37270e-02, 2.37422e-02, 2.33578e-02, 2.20358e-02,
     x 1.96239e-02, 1.73329e-02, 1.57013e-02, 1.50566e-02, 1.49248e-02,
     x 1.52044e-02, 1.57658e-02, 1.63436e-02, 1.68986e-02, 1.74180e-02,
     x 1.78192e-02, 1.80677e-02, 1.79927e-02, 1.77900e-02, 1.75599e-02,
     x 1.74982e-02, 1.76674e-02, 1.81633e-02, 1.87826e-02, 1.96898e-02,
     x 2.06898e-02, 2.17167e-02, 2.28231e-02, 2.40702e-02, 2.55084e-02,
     x 2.69701e-02, 2.86915e-02, 3.05796e-02, 3.22328e-02, 3.42637e-02,
     x 3.61708e-02, 3.79118e-02, 3.94418e-02, 4.07333e-02, 4.17158e-02,
     x 4.17081e-02, 4.01127e-02, 3.65411e-02, 3.25123e-02, 2.98737e-02,
     x 2.83616e-02, 2.79907e-02, 2.80571e-02, 2.84778e-02, 2.91698e-02,
     x 2.99500e-02, 3.07468e-02, 3.13903e-02, 3.19811e-02, 3.24616e-02,
     x 3.26503e-02, 3.26829e-02, 3.27688e-02, 3.36446e-02, 3.55133e-02,
     x 3.88447e-02, 4.28854e-02, 4.55381e-02, 4.77161e-02, 4.93567e-02,
     x 4.95127e-02, 5.00492e-02, 5.06233e-02, 5.12739e-02, 5.20327e-02,
     x 5.29001e-02, 5.38677e-02, 5.49272e-02, 5.60703e-02, 5.72886e-02/
      data o30321/
     x 5.85739e-02, 5.99178e-02, 6.13170e-02, 6.28474e-02, 6.46499e-02,
     x 6.68672e-02, 6.96421e-02, 7.31174e-02, 7.74361e-02, 8.27413e-02,
     x 8.91756e-02, 9.67018e-02, 1.04844e-01, 1.13063e-01, 1.20818e-01,
     x 1.27567e-01, 1.32771e-01, 1.35888e-01, 1.36377e-01, 1.33780e-01,
     x 1.28385e-01, 1.20887e-01, 1.11978e-01, 1.02354e-01, 9.27108e-02,
     x 8.37418e-02, 7.61423e-02, 7.06032e-02, 6.74255e-02, 6.62092e-02,
     x 6.64813e-02, 6.77689e-02, 6.95995e-02, 7.15004e-02, 7.29991e-02,
     x 7.36229e-02, 7.29641e-02, 7.11015e-02, 6.83345e-02, 6.49638e-02,
     x 6.12897e-02, 5.76125e-02, 5.42326e-02, 5.14504e-02, 4.95645e-02,
     x 4.87078e-02, 4.87234e-02, 4.94254e-02, 5.06280e-02, 5.21454e-02,
     x 5.37919e-02, 5.53818e-02, 5.67293e-02, 5.76709e-02, 5.82319e-02,
     x 5.85334e-02, 5.86968e-02, 5.88439e-02, 5.90963e-02, 5.95756e-02,
     x 6.04035e-02, 6.17016e-02, 6.35548e-02, 6.59664e-02, 6.89282e-02,
     x 7.24326e-02, 7.64718e-02, 8.10380e-02, 8.61236e-02, 9.17211e-02,
     x 9.78192e-02, 1.04353e-01, 1.11218e-01, 1.18308e-01, 1.25519e-01,
     x 1.32745e-01, 1.39881e-01, 1.46821e-01, 1.53461e-01, 1.59687e-01/
      data o30401/
c    x 1.64187e-01, 1.69368e-01, 1.74549e-01, 1.79731e-01, 1.84912e-01,
c      1.90094e-01, 1.95275e-01/
c   the value at 29400. has been changed to provide a smooth transition
c    x 1.90094e-01, 1.85275e-01/
     x 1.65365e-01, 1.70353e-01, 1.74507e-01, 1.77686e-01, 1.79748e-01,
     x 1.80549e-01, 1.79948e-01/
c
c
c    following data are from bass june 1985
c
      data c00001 /
     x 1.81094e-01, 1.57760e-01, 1.37336e-01, 1.19475e-01, 1.17191e-01,
     x 1.14331e-01, 1.15984e-01, 1.10412e-01, 1.12660e-01, 1.16014e-01,
     x 1.15060e-01, 1.12041e-01, 1.11611e-01, 1.00378e-01, 9.54850e-02,
     x 9.87528e-02, 9.46153e-02, 9.53093e-02, 9.72653e-02, 9.66468e-02,
     x 9.39750e-02, 1.03552e-01, 1.01361e-01, 1.04315e-01, 1.12842e-01,
     x 1.02800e-01, 1.09576e-01, 1.05577e-01, 1.17334e-01, 1.25763e-01,
     x 1.27597e-01, 1.34267e-01, 1.44799e-01, 1.57366e-01, 1.67369e-01,
     x 1.81778e-01, 1.89207e-01, 2.01376e-01, 2.10310e-01, 2.21721e-01,
     x 2.43162e-01, 2.55542e-01, 2.75312e-01, 2.88576e-01, 3.02505e-01,
     x 3.15141e-01, 3.28908e-01, 3.49000e-01, 3.56620e-01, 3.59852e-01,
     x 3.57517e-01, 3.12924e-01, 2.63610e-01, 2.50854e-01, 2.25642e-01,
     x 2.15954e-01, 2.12099e-01, 2.13039e-01, 2.12286e-01, 2.17214e-01,
     x 2.28784e-01, 2.28276e-01, 2.34677e-01, 2.30730e-01, 2.16107e-01,
     x 1.99471e-01, 1.85629e-01, 1.72730e-01, 1.56229e-01, 1.38156e-01,
     x 1.37641e-01, 1.33169e-01, 1.32759e-01, 1.30102e-01, 1.35396e-01,
     x 1.37976e-01, 1.41571e-01, 1.46448e-01, 1.44508e-01, 1.47612e-01/
      data c00081 /
     x 1.47424e-01, 1.48173e-01, 1.52936e-01, 1.58908e-01, 1.58808e-01,
     x 1.59860e-01, 1.73936e-01, 1.84109e-01, 1.95143e-01, 2.08267e-01,
     x 2.19256e-01, 2.31653e-01, 2.46400e-01, 2.60437e-01, 2.70792e-01,
     x 2.79749e-01, 2.91068e-01, 2.98080e-01, 3.10421e-01, 3.24540e-01,
     x 3.39003e-01, 3.58322e-01, 3.81520e-01, 4.02798e-01, 4.35972e-01,
     x 4.56220e-01, 4.79037e-01, 5.02597e-01, 5.24648e-01, 5.33964e-01,
     x 5.39211e-01, 5.43613e-01, 5.28793e-01, 4.94103e-01, 4.34481e-01,
     x 3.76792e-01, 3.37161e-01, 3.15750e-01, 3.11042e-01, 3.08745e-01,
     x 3.09195e-01, 3.05859e-01, 3.01443e-01, 2.88111e-01, 2.81303e-01,
     x 2.75329e-01, 2.60812e-01, 2.59337e-01, 2.45576e-01, 2.40470e-01,
     x 2.39705e-01, 2.45389e-01, 2.49801e-01, 2.53235e-01, 2.54387e-01,
     x 2.64311e-01, 2.74146e-01, 2.89737e-01, 2.96673e-01, 3.07337e-01,
     x 3.24380e-01, 3.42266e-01, 3.59522e-01, 3.78005e-01, 3.97178e-01,
     x 4.23351e-01, 4.45925e-01, 4.63029e-01, 4.94843e-01, 5.19418e-01,
     x 5.49928e-01, 5.69115e-01, 6.02396e-01, 6.43471e-01, 6.76401e-01,
     x 7.14024e-01, 7.42425e-01, 7.60916e-01, 7.83319e-01, 7.98299e-01/
      data c00161 /
     x 7.76672e-01, 7.22769e-01, 6.45967e-01, 5.80850e-01, 5.76514e-01,
     x 5.79380e-01, 5.90359e-01, 6.21721e-01, 6.37540e-01, 6.52572e-01,
     x 6.63442e-01, 6.69026e-01, 6.69038e-01, 6.53319e-01, 6.21950e-01,
     x 5.47619e-01, 4.58994e-01, 4.14888e-01, 3.97736e-01, 3.88775e-01,
     x 3.87424e-01, 3.93567e-01, 4.03442e-01, 4.05217e-01, 4.12848e-01,
     x 4.12246e-01, 4.16620e-01, 4.13195e-01, 4.08467e-01, 4.13104e-01,
     x 4.24498e-01, 4.32002e-01, 4.46361e-01, 4.61131e-01, 4.77228e-01,
     x 4.96519e-01, 5.16764e-01, 5.38966e-01, 5.54187e-01, 5.73748e-01,
     x 6.07260e-01, 6.34358e-01, 6.60286e-01, 6.95533e-01, 7.37090e-01,
     x 7.83894e-01, 8.19557e-01, 8.49244e-01, 8.91832e-01, 9.44885e-01,
     x 9.86271e-01, 1.02262e+00, 1.07242e+00, 1.12162e+00, 1.18287e+00,
     x 1.22402e+00, 1.24978e+00, 1.24392e+00, 1.19668e+00, 1.11562e+00,
     x 1.03983e+00, 9.31884e-01, 8.35307e-01, 7.92620e-01, 7.81980e-01,
     x 7.89623e-01, 8.05987e-01, 8.27344e-01, 8.57514e-01, 8.66302e-01,
     x 8.72092e-01, 8.66840e-01, 8.40536e-01, 7.87360e-01, 7.35743e-01,
     x 6.92039e-01, 6.64032e-01, 6.48360e-01, 6.46288e-01, 6.49505e-01/
      data c00241 /
     x 6.69937e-01, 6.81006e-01, 7.00969e-01, 7.19834e-01, 7.26964e-01,
     x 7.50591e-01, 7.73600e-01, 8.00673e-01, 8.20347e-01, 8.37855e-01,
     x 8.66780e-01, 9.04297e-01, 9.46300e-01, 9.69134e-01, 9.97928e-01,
     x 1.06388e+00, 1.11032e+00, 1.15221e+00, 1.21324e+00, 1.24462e+00,
     x 1.31978e+00, 1.35617e+00, 1.38792e+00, 1.39196e+00, 1.35161e+00,
     x 1.29381e+00, 1.30295e+00, 1.32965e+00, 1.37024e+00, 1.44064e+00,
     x 1.50484e+00, 1.57200e+00, 1.62097e+00, 1.67874e+00, 1.72676e+00,
     x 1.73383e+00, 1.66091e+00, 1.54936e+00, 1.35454e+00, 1.20070e+00,
     x 1.14609e+00, 1.13642e+00, 1.13784e+00, 1.14609e+00, 1.14531e+00,
     x 1.16024e+00, 1.16891e+00, 1.16111e+00, 1.14192e+00, 1.09903e+00,
     x 1.05745e+00, 1.02341e+00, 1.00121e+00, 1.00036e+00, 1.00576e+00,
     x 1.02405e+00, 1.04379e+00, 1.07623e+00, 1.11347e+00, 1.17305e+00,
     x 1.20016e+00, 1.22697e+00, 1.27479e+00, 1.32572e+00, 1.38690e+00,
     x 1.43768e+00, 1.48379e+00, 1.55317e+00, 1.64020e+00, 1.71268e+00,
     x 1.77183e+00, 1.85824e+00, 1.95131e+00, 2.04609e+00, 2.13151e+00,
     x 2.17777e+00, 2.22832e+00, 2.26886e+00, 2.19775e+00, 2.05087e+00/
      data c00321 /
     x 1.96103e+00, 1.95554e+00, 1.98037e+00, 2.05440e+00, 2.11629e+00,
     x 2.17893e+00, 2.24384e+00, 2.30464e+00, 2.32525e+00, 2.29945e+00,
     x 2.21712e+00, 2.03430e+00, 1.82139e+00, 1.70354e+00, 1.64631e+00,
     x 1.62164e+00, 1.61356e+00, 1.63900e+00, 1.66313e+00, 1.67409e+00,
     x 1.69143e+00, 1.70181e+00, 1.69165e+00, 1.67699e+00, 1.67879e+00,
     x 1.67312e+00, 1.68133e+00, 1.70002e+00, 1.72500e+00, 1.76308e+00,
     x 1.80634e+00, 1.87548e+00, 1.94924e+00, 1.99812e+00, 2.05333e+00,
     x 2.14035e+00, 2.21847e+00, 2.27412e+00, 2.29752e+00, 2.30750e+00,
     x 2.36165e+00, 2.44394e+00, 2.52782e+00, 2.61343e+00, 2.71640e+00,
     x 2.81613e+00, 2.93679e+00, 3.01577e+00, 3.15995e+00, 3.15931e+00,
     x 2.96658e+00, 2.73295e+00, 2.67480e+00, 2.66652e+00, 2.69393e+00,
     x 2.75102e+00, 2.86503e+00, 2.99163e+00, 2.99576e+00, 3.02603e+00,
     x 2.98415e+00, 2.79309e+00, 2.65337e+00, 2.50962e+00, 2.43207e+00,
     x 2.34812e+00, 2.34872e+00, 2.35186e+00, 2.39477e+00, 2.42629e+00,
     x 2.48068e+00, 2.55087e+00, 2.55952e+00, 2.56497e+00, 2.64323e+00,
     x 2.67961e+00, 2.66263e+00, 2.70243e+00, 2.74911e+00, 2.81786e+00/
      data c00401 /
     x 2.88684e+00, 2.97790e+00, 3.04305e+00, 3.13053e+00, 3.23857e+00,
     x 3.35582e+00, 3.40654e+00, 3.38117e+00, 3.36296e+00, 3.39480e+00,
     x 3.49066e+00, 3.60832e+00, 3.71817e+00, 3.83924e+00, 3.96355e+00,
     x 4.03656e+00, 4.00518e+00, 3.90389e+00, 3.74790e+00, 3.61385e+00,
     x 3.57066e+00, 3.59438e+00, 3.66182e+00, 3.71176e+00, 3.75255e+00,
     x 3.79101e+00, 3.85278e+00, 3.85027e+00, 3.81112e+00, 3.72553e+00,
     x 3.61017e+00, 3.54384e+00, 3.52406e+00, 3.54097e+00, 3.59375e+00,
     x 3.66312e+00, 3.72632e+00, 3.76825e+00, 3.86798e+00, 3.92916e+00,
     x 3.95610e+00, 4.00120e+00, 4.05865e+00, 4.11981e+00, 4.14634e+00,
     x 4.19109e+00, 4.20317e+00, 4.25754e+00, 4.35131e+00, 4.48573e+00,
     x 4.58716e+00, 4.67462e+00, 4.78228e+00, 4.91196e+00, 5.01871e+00,
     x 5.10663e+00, 5.17780e+00, 5.21393e+00, 5.18144e+00, 5.04379e+00,
     x 4.86504e+00, 4.78569e+00, 4.72717e+00, 4.69132e+00, 4.65797e+00,
     x 4.60305e+00, 4.59798e+00, 4.65300e+00, 4.69707e+00, 4.74790e+00,
     x 4.82581e+00, 4.80953e+00, 4.80517e+00, 4.82685e+00, 4.82321e+00,
     x 4.84806e+00, 4.88591e+00, 4.91759e+00, 4.98074e+00, 5.07071e+00/
      data c00481 /
     x 5.18733e+00, 5.30567e+00, 5.38670e+00, 5.43942e+00, 5.51797e+00,
     x 5.62652e+00, 5.71228e+00, 5.82347e+00, 5.91434e+00, 6.00171e+00,
     x 6.06977e+00, 6.13040e+00, 6.21990e+00, 6.29980e+00, 6.37206e+00,
     x 6.48233e+00, 6.53068e+00, 6.53275e+00, 6.56858e+00, 6.54577e+00,
     x 6.50472e+00, 6.41504e+00, 6.33853e+00, 6.31184e+00, 6.21253e+00,
     x 6.22034e+00, 6.26918e+00, 6.28982e+00, 6.29461e+00, 6.35418e+00,
     x 6.40956e+00, 6.38020e+00, 6.39784e+00, 6.45383e+00, 6.50134e+00,
     x 6.56808e+00, 6.58850e+00, 6.58882e+00, 6.65097e+00, 6.75259e+00,
     x 6.83256e+00, 6.92593e+00, 6.98083e+00, 7.03632e+00, 7.11147e+00,
     x 7.15622e+00, 7.21106e+00, 7.27319e+00, 7.33382e+00, 7.38601e+00,
     x 7.48971e+00, 7.61459e+00, 7.70134e+00, 7.76194e+00, 7.85534e+00,
     x 7.99519e+00, 8.12227e+00, 8.25461e+00, 8.34670e+00, 8.42733e+00,
     x 8.51806e+00, 8.57638e+00, 8.56481e+00, 8.55461e+00, 8.55593e+00,
     x 8.58756e+00, 8.50070e+00, 8.54400e+00, 8.57575e+00, 8.62083e+00,
     x 8.60684e+00, 8.67824e+00, 8.72069e+00, 8.79127e+00, 8.85479e+00,
     x 8.86770e+00, 8.90574e+00, 8.91531e+00, 8.94800e+00, 9.00167e+00/
      data c00561 /
     x 9.14051e+00, 9.25421e+00, 9.39694e+00, 9.50896e+00, 9.53190e+00,
     x 9.55977e+00, 9.53482e+00, 9.49662e+00, 9.53359e+00, 9.54007e+00,
     x 9.49809e+00, 9.49373e+00, 9.53282e+00, 9.63757e+00, 9.67855e+00,
     x 9.67633e+00, 9.67045e+00, 9.79481e+00, 9.93420e+00, 1.00234e+01,
     x 1.01372e+01, 1.02577e+01, 1.05056e+01, 1.07873e+01, 1.09967e+01,
     x 1.10873e+01, 1.11624e+01, 1.13006e+01, 1.14875e+01, 1.16106e+01,
     x 1.16744e+01, 1.17582e+01, 1.17709e+01, 1.18537e+01, 1.19623e+01,
     x 1.19763e+01, 1.19879e+01, 1.20384e+01, 1.20763e+01, 1.20826e+01,
     x 1.20449e+01, 1.19747e+01, 1.20227e+01, 1.21805e+01, 1.23134e+01,
     x 1.24042e+01, 1.25614e+01, 1.26828e+01, 1.26645e+01, 1.26963e+01,
     x 1.28226e+01, 1.28720e+01, 1.28981e+01, 1.29462e+01, 1.29363e+01,
     x 1.29199e+01, 1.29797e+01, 1.28860e+01, 1.29126e+01, 1.30205e+01,
     x 1.31327e+01, 1.31722e+01, 1.31901e+01, 1.33189e+01, 1.34833e+01,
     x 1.36228e+01, 1.37474e+01, 1.38548e+01, 1.39450e+01, 1.40926e+01,
     x 1.43099e+01, 1.44836e+01, 1.46257e+01, 1.47755e+01, 1.49163e+01,
     x 1.51038e+01, 1.53308e+01, 1.54194e+01, 1.54852e+01, 1.55968e+01/
      data c00641 /
     x 1.57025e+01, 1.58667e+01, 1.60365e+01, 1.61427e+01, 1.62967e+01,
     x 1.64735e+01, 1.66123e+01, 1.67268e+01, 1.67673e+01, 1.67825e+01,
     x 1.68898e+01, 1.68178e+01, 1.68216e+01, 1.68574e+01, 1.68799e+01,
     x 1.70317e+01, 1.70767e+01, 1.71508e+01, 1.72965e+01, 1.73421e+01,
     x 1.73937e+01, 1.74420e+01, 1.74535e+01, 1.75110e+01, 1.75497e+01,
     x 1.75149e+01, 1.75955e+01, 1.78260e+01, 1.78271e+01, 1.79750e+01,
     x 1.80600e+01, 1.81597e+01, 1.83454e+01, 1.85243e+01, 1.87382e+01,
     x 1.88904e+01, 1.90395e+01, 1.92759e+01, 1.95398e+01, 1.97712e+01,
     x 1.98487e+01, 1.99522e+01, 2.02363e+01, 2.03271e+01, 2.07090e+01,
     x 2.09195e+01, 2.10974e+01, 2.11702e+01, 2.12964e+01, 2.14339e+01,
     x 2.15764e+01, 2.17351e+01, 2.18486e+01, 2.19700e+01, 2.21663e+01,
     x 2.24244e+01, 2.24813e+01, 2.25248e+01, 2.26357e+01, 2.26457e+01,
     x 2.27249e+01, 2.27172e+01, 2.27123e+01, 2.26859e+01, 2.27216e+01,
     x 2.29306e+01, 2.30711e+01, 2.31374e+01, 2.31815e+01, 2.33423e+01,
     x 2.33810e+01, 2.36430e+01, 2.36807e+01, 2.36676e+01, 2.38607e+01,
     x 2.41559e+01, 2.43413e+01, 2.44401e+01, 2.45968e+01, 2.47927e+01/
      data c00721 /
     x 2.50743e+01, 2.53667e+01, 2.55749e+01, 2.57357e+01, 2.58927e+01,
     x 2.61523e+01, 2.64110e+01, 2.66650e+01, 2.68829e+01, 2.70635e+01,
     x 2.72797e+01, 2.75064e+01, 2.77229e+01, 2.80341e+01, 2.82003e+01,
     x 2.83346e+01, 2.83909e+01, 2.86212e+01, 2.88006e+01, 2.89577e+01,
     x 2.90965e+01, 2.91834e+01, 2.93224e+01, 2.94094e+01, 2.94848e+01,
     x 2.96584e+01, 2.96749e+01, 2.97760e+01, 2.99163e+01, 3.00238e+01,
     x 3.01290e+01, 3.02307e+01, 3.03663e+01, 3.05897e+01, 3.07937e+01,
     x 3.10403e+01, 3.11778e+01, 3.13271e+01, 3.15799e+01, 3.18435e+01,
     x 3.21614e+01, 3.25097e+01, 3.27701e+01, 3.29600e+01, 3.32583e+01,
     x 3.36348e+01, 3.40282e+01, 3.41751e+01, 3.44128e+01, 3.46199e+01,
     x 3.49363e+01, 3.52087e+01, 3.54056e+01, 3.55596e+01, 3.56694e+01,
     x 3.58104e+01, 3.60276e+01, 3.62818e+01, 3.63505e+01, 3.66069e+01,
     x 3.67544e+01, 3.70664e+01, 3.72525e+01, 3.73491e+01, 3.76006e+01,
     x 3.77102e+01, 3.78970e+01, 3.81254e+01, 3.82728e+01, 3.81720e+01,
     x 3.82781e+01, 3.84982e+01, 3.87202e+01, 3.89958e+01, 3.94148e+01,
     x 3.98434e+01, 3.98952e+01, 4.01573e+01, 4.06014e+01, 4.09651e+01/
      data c00801 /
     x 4.12821e+01, 4.16849e+01, 4.19899e+01, 4.22719e+01, 4.27736e+01,
     x 4.32254e+01, 4.33883e+01, 4.39831e+01, 4.39414e+01, 4.42613e+01,
     x 4.46503e+01, 4.49027e+01, 4.50384e+01, 4.52929e+01, 4.57269e+01,
     x 4.56433e+01, 4.57350e+01, 4.60128e+01, 4.60487e+01, 4.61183e+01,
     x 4.64397e+01, 4.68211e+01, 4.70706e+01, 4.72821e+01, 4.74972e+01,
     x 4.78253e+01, 4.81615e+01, 4.84480e+01, 4.85703e+01, 4.87397e+01,
     x 4.90015e+01, 4.93673e+01, 4.97291e+01, 4.99836e+01, 5.02975e+01,
     x 5.05572e+01, 5.08226e+01, 5.13433e+01, 5.17112e+01, 5.19703e+01,
     x 5.23128e+01, 5.27305e+01, 5.30599e+01, 5.34555e+01, 5.39625e+01,
     x 5.43627e+01, 5.45446e+01, 5.49263e+01, 5.53511e+01, 5.57270e+01,
     x 5.60904e+01, 5.63875e+01, 5.68475e+01, 5.73172e+01, 5.81134e+01,
     x 5.86399e+01, 5.90384e+01, 5.91417e+01, 5.90883e+01, 5.93610e+01,
     x 5.95794e+01, 5.99600e+01, 5.98493e+01, 5.99441e+01, 6.02748e+01,
     x 6.04778e+01, 6.05233e+01, 6.07194e+01, 6.11589e+01, 6.13324e+01,
     x 6.17685e+01, 6.23166e+01, 6.31055e+01, 6.38211e+01, 6.42320e+01,
     x 6.45195e+01, 6.51125e+01, 6.56765e+01, 6.59286e+01, 6.62716e+01/
      data c00881 /
     x 6.65693e+01, 6.68906e+01, 6.72246e+01, 6.75177e+01, 6.78476e+01,
     x 6.82599e+01, 6.84400e+01, 6.89072e+01, 6.95720e+01, 7.01410e+01,
     x 7.05519e+01, 7.09367e+01, 7.13975e+01, 7.22128e+01, 7.28222e+01,
     x 7.33808e+01, 7.38828e+01, 7.44496e+01, 7.49983e+01, 7.54178e+01,
     x 7.60554e+01, 7.62484e+01, 7.67892e+01, 7.71262e+01, 7.76235e+01,
     x 7.81413e+01, 7.85694e+01, 7.91248e+01, 7.94715e+01, 7.96200e+01,
     x 8.00270e+01, 8.03783e+01, 8.07100e+01, 8.11929e+01, 8.17375e+01,
     x 8.18410e+01, 8.23341e+01, 8.26754e+01, 8.30893e+01, 8.34232e+01,
     x 8.35533e+01, 8.36017e+01, 8.38589e+01, 8.43366e+01, 8.47593e+01,
     x 8.51614e+01, 8.55271e+01, 8.58979e+01, 8.64892e+01, 8.74367e+01,
     x 8.82440e+01, 8.89105e+01, 8.90980e+01, 8.97266e+01, 9.04886e+01,
     x 9.12709e+01, 9.21243e+01, 9.26673e+01, 9.31331e+01, 9.38190e+01,
     x 9.44877e+01, 9.50636e+01, 9.57445e+01, 9.65211e+01, 9.68623e+01,
     x 9.75356e+01, 9.81991e+01, 9.88881e+01, 9.94554e+01, 9.99292e+01,
     x 1.00357e+02, 1.00670e+02, 1.01227e+02, 1.01529e+02, 1.01889e+02,
     x 1.02033e+02, 1.02254e+02, 1.02731e+02, 1.02914e+02, 1.03120e+02/
      data c00961 /
     x 1.03674e+02, 1.03768e+02, 1.04146e+02, 1.04850e+02, 1.05525e+02,
     x 1.06263e+02, 1.06653e+02, 1.07084e+02, 1.07461e+02, 1.08052e+02,
     x 1.08793e+02, 1.09395e+02, 1.09811e+02, 1.10079e+02, 1.10656e+02,
     x 1.11575e+02, 1.12544e+02, 1.13453e+02, 1.14440e+02, 1.15292e+02,
     x 1.15869e+02, 1.16925e+02, 1.17854e+02, 1.18723e+02, 1.19574e+02,
     x 1.19940e+02, 1.21108e+02, 1.21807e+02, 1.22490e+02, 1.23278e+02,
     x 1.24094e+02, 1.24816e+02, 1.25469e+02, 1.26217e+02, 1.26878e+02,
     x 1.27536e+02, 1.28168e+02, 1.28682e+02, 1.29076e+02, 1.30171e+02,
     x 1.30667e+02, 1.31242e+02, 1.31665e+02, 1.31961e+02, 1.32347e+02,
     x 1.32805e+02, 1.33152e+02, 1.33869e+02, 1.34261e+02, 1.34498e+02,
     x 1.35028e+02, 1.36049e+02, 1.36577e+02, 1.37491e+02, 1.38078e+02,
     x 1.38389e+02, 1.38819e+02, 1.39653e+02, 1.39770e+02, 1.40812e+02,
     x 1.40926e+02, 1.41267e+02, 1.41872e+02, 1.42233e+02, 1.43447e+02,
     x 1.44641e+02, 1.45500e+02, 1.45996e+02, 1.47040e+02, 1.48767e+02,
     x 1.48785e+02, 1.49525e+02, 1.50266e+02, 1.50814e+02, 1.51443e+02,
     x 1.52272e+02, 1.52846e+02, 1.54000e+02, 1.54629e+02, 1.54907e+02/
      data c01041 /
     x 1.55527e+02, 1.56642e+02, 1.57436e+02, 1.59036e+02, 1.59336e+02,
     x 1.59661e+02, 1.60287e+02, 1.61202e+02, 1.62410e+02, 1.63040e+02,
     x 1.62872e+02, 1.63248e+02, 1.63776e+02, 1.64313e+02, 1.65782e+02,
     x 1.65692e+02, 1.66049e+02, 1.66701e+02, 1.67786e+02, 1.69150e+02,
     x 1.69996e+02, 1.71634e+02, 1.71137e+02, 1.71372e+02, 1.72525e+02,
     x 1.73816e+02, 1.75219e+02, 1.76091e+02, 1.78260e+02, 1.79299e+02,
     x 1.79904e+02, 1.81718e+02, 1.83807e+02, 1.85488e+02, 1.85929e+02,
     x 1.86787e+02, 1.88282e+02, 1.89546e+02, 1.91489e+02, 1.92646e+02,
     x 1.93399e+02, 1.93838e+02, 1.94406e+02, 1.95829e+02, 1.96745e+02,
     x 1.96978e+02, 1.97243e+02, 1.97636e+02, 1.98025e+02, 1.98227e+02,
     x 1.99552e+02, 2.00304e+02, 2.01031e+02, 2.01788e+02, 2.02432e+02,
     x 2.03817e+02, 2.04866e+02, 2.05561e+02, 2.06180e+02, 2.07024e+02,
     x 2.08303e+02, 2.09426e+02, 2.10575e+02, 2.11637e+02, 2.12559e+02,
     x 2.13361e+02, 2.14191e+02, 2.15264e+02, 2.16366e+02, 2.17316e+02,
     x 2.17717e+02, 2.17154e+02, 2.19172e+02, 2.20346e+02, 2.20849e+02,
     x 2.21539e+02, 2.22810e+02, 2.22740e+02, 2.22824e+02, 2.23285e+02/
      data c01121 /
     x 2.23696e+02, 2.23864e+02, 2.23968e+02, 2.23544e+02, 2.24804e+02,
     x 2.25953e+02, 2.26753e+02, 2.27732e+02, 2.29505e+02, 2.30108e+02,
     x 2.31232e+02, 2.32552e+02, 2.33979e+02, 2.36677e+02, 2.38481e+02,
     x 2.41797e+02, 2.44025e+02, 2.45113e+02, 2.47373e+02, 2.47258e+02,
     x 2.48617e+02, 2.49790e+02, 2.50562e+02, 2.51198e+02, 2.51289e+02,
     x 2.52509e+02, 2.54136e+02, 2.55335e+02, 2.55808e+02, 2.56567e+02,
     x 2.57977e+02, 2.58987e+02, 2.59622e+02, 2.60170e+02, 2.61127e+02,
     x 2.60655e+02, 2.62129e+02, 2.64020e+02, 2.65659e+02, 2.67086e+02,
     x 2.67615e+02, 2.69800e+02, 2.71452e+02, 2.73314e+02, 2.76972e+02,
     x 2.78005e+02, 2.79815e+02, 2.81709e+02, 2.84043e+02, 2.87070e+02,
     x 2.88842e+02, 2.90555e+02, 2.92401e+02, 2.94314e+02, 2.96074e+02,
     x 2.97103e+02, 2.98037e+02, 2.98113e+02, 2.97705e+02, 2.97350e+02,
     x 2.97329e+02, 2.97016e+02, 2.96752e+02, 2.96599e+02, 2.96637e+02,
     x 2.97057e+02, 2.97585e+02, 2.98179e+02, 2.98997e+02, 3.00012e+02,
     x 3.00806e+02, 3.00908e+02, 3.02369e+02, 3.04063e+02, 3.05325e+02,
     x 3.06737e+02, 3.08066e+02, 3.09694e+02, 3.11530e+02, 3.13132e+02/
      data c01201 /
     x 3.13296e+02, 3.15513e+02, 3.16887e+02, 3.17682e+02, 3.18296e+02,
     x 3.18654e+02, 3.18912e+02, 3.19236e+02, 3.19626e+02, 3.20020e+02,
     x 3.20186e+02, 3.20709e+02, 3.21628e+02, 3.22625e+02, 3.23504e+02,
     x 3.25479e+02, 3.26825e+02, 3.28146e+02, 3.29404e+02, 3.30512e+02,
     x 3.32634e+02, 3.34422e+02, 3.35602e+02, 3.36833e+02, 3.39372e+02,
     x 3.43446e+02, 3.46374e+02, 3.48719e+02, 3.50881e+02, 3.53160e+02,
     x 3.54890e+02, 3.57162e+02, 3.59284e+02, 3.60876e+02, 3.62295e+02,
     x 3.63987e+02, 3.64835e+02, 3.65257e+02, 3.65738e+02, 3.65904e+02,
     x 3.65976e+02, 3.66460e+02, 3.67087e+02, 3.67377e+02, 3.69079e+02,
     x 3.70694e+02, 3.70940e+02, 3.70557e+02, 3.72693e+02, 3.73852e+02,
     x 3.75679e+02, 3.77863e+02, 3.79964e+02, 3.81368e+02, 3.82716e+02,
     x 3.85556e+02, 3.89072e+02, 3.91796e+02, 3.92766e+02, 3.96551e+02,
     x 3.97833e+02, 3.97285e+02, 4.01929e+02, 4.02158e+02, 4.04553e+02,
     x 4.06451e+02, 4.06236e+02, 4.08135e+02, 4.07797e+02, 4.08415e+02,
     x 4.10111e+02, 4.11781e+02, 4.12735e+02, 4.11547e+02, 4.11606e+02,
     x 4.13548e+02, 4.12557e+02, 4.12923e+02, 4.12866e+02, 4.13009e+02/
      data c01281 /
     x 4.14447e+02, 4.16032e+02, 4.17032e+02, 4.19064e+02, 4.22458e+02,
     x 4.26021e+02, 4.25192e+02, 4.25684e+02, 4.27536e+02, 4.29972e+02,
     x 4.31994e+02, 4.36037e+02, 4.39132e+02, 4.40363e+02, 4.40716e+02,
     x 4.40342e+02, 4.42063e+02, 4.44408e+02, 4.45454e+02, 4.47835e+02,
     x 4.48256e+02, 4.48831e+02, 4.50257e+02, 4.51427e+02, 4.52373e+02,
     x 4.53899e+02, 4.55496e+02, 4.56311e+02, 4.57314e+02, 4.59922e+02,
     x 4.61048e+02, 4.59840e+02, 4.62144e+02, 4.63152e+02, 4.64565e+02,
     x 4.66715e+02, 4.69380e+02, 4.70751e+02, 4.72012e+02, 4.73482e+02,
     x 4.75524e+02, 4.79307e+02, 4.82035e+02, 4.84423e+02, 4.86712e+02,
     x 4.88754e+02, 4.90102e+02, 4.92047e+02, 4.94150e+02, 4.95375e+02,
     x 4.95828e+02, 4.97555e+02, 4.98559e+02, 4.97618e+02, 4.99265e+02,
     x 4.99979e+02, 5.00681e+02, 5.01386e+02, 5.00868e+02, 5.01935e+02,
     x 5.03151e+02, 5.04329e+02, 5.05546e+02, 5.08259e+02, 5.09222e+02,
     x 5.09818e+02, 5.11397e+02, 5.12391e+02, 5.13326e+02, 5.14329e+02,
     x 5.15443e+02, 5.16533e+02, 5.21417e+02, 5.25071e+02, 5.26581e+02,
     x 5.27762e+02, 5.29274e+02, 5.31704e+02, 5.34310e+02, 5.35727e+02/
      data c01361 /
     x 5.36838e+02, 5.37082e+02, 5.36733e+02, 5.36170e+02, 5.36063e+02,
     x 5.36451e+02, 5.37870e+02, 5.40475e+02, 5.42268e+02, 5.41972e+02,
     x 5.42532e+02, 5.44764e+02, 5.46844e+02, 5.47525e+02, 5.49150e+02,
     x 5.52049e+02, 5.55423e+02, 5.56259e+02, 5.57424e+02, 5.59189e+02,
     x 5.61167e+02, 5.64512e+02, 5.66753e+02, 5.68183e+02, 5.69628e+02,
     x 5.73474e+02, 5.76192e+02, 5.78058e+02, 5.79588e+02, 5.81619e+02,
     x 5.83530e+02, 5.84852e+02, 5.85326e+02, 5.88130e+02, 5.90570e+02,
     x 5.91785e+02, 5.91371e+02, 5.90931e+02, 5.90942e+02, 5.91168e+02,
     x 5.91291e+02, 5.89791e+02, 5.91146e+02, 5.90804e+02, 5.87847e+02,
     x 5.89067e+02, 5.91027e+02, 5.90951e+02, 5.89227e+02, 5.93389e+02,
     x 5.92921e+02, 5.92739e+02, 5.94544e+02, 5.98941e+02, 6.02302e+02,
     x 6.03908e+02, 6.04265e+02, 6.06737e+02, 6.08560e+02, 6.11272e+02,
     x 6.14992e+02, 6.18595e+02, 6.20930e+02, 6.22107e+02, 6.22957e+02,
     x 6.26710e+02, 6.28657e+02, 6.30132e+02, 6.31543e+02, 6.33043e+02,
     x 6.36932e+02, 6.38248e+02, 6.37126e+02, 6.41648e+02, 6.48274e+02,
     x 6.52638e+02, 6.53922e+02, 6.56647e+02, 6.59351e+02, 6.60525e+02/
      data c01441 /
     x 6.60130e+02, 6.61375e+02, 6.62660e+02, 6.63976e+02, 6.65181e+02,
     x 6.64820e+02, 6.64458e+02, 6.64927e+02, 6.66555e+02, 6.66759e+02,
     x 6.68218e+02, 6.70323e+02, 6.72703e+02, 6.76085e+02, 6.79180e+02,
     x 6.80850e+02, 6.80017e+02, 6.79928e+02, 6.80886e+02, 6.82038e+02,
     x 6.82271e+02, 6.84057e+02, 6.85309e+02, 6.86816e+02, 6.90180e+02,
     x 6.93205e+02, 6.95870e+02, 6.98794e+02, 7.03776e+02, 7.04010e+02,
     x 7.05041e+02, 7.07254e+02, 7.07432e+02, 7.10736e+02, 7.13791e+02,
     x 7.15542e+02, 7.16468e+02, 7.17412e+02, 7.17783e+02, 7.17340e+02,
     x 7.18184e+02, 7.18716e+02, 7.18809e+02, 7.18282e+02, 7.20317e+02,
     x 7.18568e+02, 7.16274e+02, 7.19119e+02, 7.20852e+02, 7.21727e+02,
     x 7.22607e+02, 7.26369e+02, 7.26412e+02, 7.27101e+02, 7.29404e+02,
     x 7.30786e+02, 7.30910e+02, 7.30656e+02, 7.30566e+02, 7.33408e+02,
     x 7.37064e+02, 7.39178e+02, 7.36713e+02, 7.37365e+02, 7.40861e+02,
     x 7.45281e+02, 7.46178e+02, 7.46991e+02, 7.48035e+02, 7.49777e+02,
     x 7.54665e+02, 7.56585e+02, 7.57408e+02, 7.58131e+02, 7.58155e+02,
     x 7.60838e+02, 7.64792e+02, 7.68161e+02, 7.69263e+02, 7.73166e+02/
      data c01521 /
     x 7.79006e+02, 7.82037e+02, 7.83109e+02, 7.84674e+02, 7.87444e+02,
     x 7.89510e+02, 7.90130e+02, 7.91364e+02, 7.95225e+02, 8.03599e+02,
     x 8.06340e+02, 8.05105e+02, 8.05120e+02, 8.08515e+02, 8.10907e+02,
     x 8.11388e+02, 8.13432e+02, 8.12579e+02, 8.10564e+02, 8.08719e+02,
     x 8.07682e+02, 8.05009e+02, 8.01754e+02, 8.01013e+02, 7.99926e+02,
     x 7.99067e+02, 7.98369e+02, 7.94090e+02, 7.92883e+02, 7.94244e+02,
     x 7.98220e+02, 7.98201e+02, 7.98332e+02, 7.99289e+02, 8.02355e+02,
     x 8.03621e+02, 8.05302e+02, 8.08368e+02, 8.09983e+02, 8.11529e+02,
     x 8.13068e+02, 8.14717e+02, 8.16441e+02, 8.19241e+02, 8.22944e+02,
     x 8.23768e+02, 8.25030e+02, 8.26103e+02, 8.26374e+02, 8.28331e+02,
     x 8.32620e+02, 8.38618e+02, 8.43666e+02, 8.45212e+02, 8.46324e+02,
     x 8.48536e+02, 8.50192e+02, 8.53083e+02, 8.56653e+02, 8.59614e+02,
     x 8.62000e+02, 8.64593e+02, 8.67678e+02, 8.70908e+02, 8.73408e+02,
     x 8.74779e+02, 8.74005e+02, 8.76718e+02, 8.80445e+02, 8.84365e+02,
     x 8.83806e+02, 8.84292e+02, 8.85539e+02, 8.87474e+02, 8.84905e+02,
     x 8.84039e+02, 8.85105e+02, 8.83733e+02, 8.82224e+02, 8.79865e+02/
      data c01601 /
     x 8.75663e+02, 8.75575e+02, 8.73144e+02, 8.68602e+02, 8.70278e+02,
     x 8.69659e+02, 8.68701e+02, 8.69250e+02, 8.71057e+02, 8.72860e+02,
     x 8.74361e+02, 8.74458e+02, 8.77576e+02, 8.81613e+02, 8.84358e+02,
     x 8.87440e+02, 8.91549e+02, 8.96568e+02, 8.99836e+02, 9.02880e+02,
     x 9.05428e+02, 9.06891e+02, 9.07349e+02, 9.10151e+02, 9.15917e+02,
     x 9.16197e+02, 9.18571e+02, 9.21219e+02, 9.20292e+02, 9.21949e+02,
     x 9.24509e+02, 9.27454e+02, 9.29474e+02, 9.31348e+02, 9.32818e+02,
     x 9.32658e+02, 9.36280e+02, 9.39512e+02, 9.39667e+02, 9.44078e+02,
     x 9.47196e+02, 9.48291e+02, 9.46150e+02, 9.46918e+02, 9.49093e+02,
     x 9.51372e+02, 9.53109e+02, 9.56308e+02, 9.61335e+02, 9.58214e+02,
     x 9.56188e+02, 9.55660e+02, 9.58633e+02, 9.57541e+02, 9.54879e+02,
     x 9.51663e+02, 9.52839e+02, 9.52055e+02, 9.49253e+02, 9.50187e+02,
     x 9.50323e+02, 9.50937e+02, 9.54362e+02, 9.55855e+02, 9.56350e+02,
     x 9.55908e+02, 9.57963e+02, 9.61866e+02, 9.66948e+02, 9.69786e+02,
     x 9.74302e+02, 9.79061e+02, 9.82465e+02, 9.86019e+02, 9.89930e+02,
     x 9.94294e+02, 9.97011e+02, 9.98207e+02, 9.98607e+02, 1.00175e+03/
      data c01681 /
     x 1.00275e+03, 1.00284e+03, 1.00294e+03, 1.00485e+03, 1.00593e+03,
     x 1.00524e+03, 1.00415e+03, 1.00335e+03, 1.00278e+03, 1.00185e+03,
     x 9.99982e+02, 9.98177e+02, 9.97959e+02, 9.99161e+02, 9.98810e+02,
     x 9.95415e+02, 9.94342e+02, 9.92998e+02, 9.91340e+02, 9.90900e+02,
     x 9.90407e+02, 9.89232e+02, 9.85447e+02, 9.86312e+02, 9.87461e+02,
     x 9.86090e+02, 9.86670e+02, 9.85534e+02, 9.81877e+02, 9.84946e+02,
     x 9.86392e+02, 9.86709e+02, 9.88086e+02, 9.90269e+02, 9.92566e+02,
     x 9.94029e+02, 9.95795e+02, 9.97788e+02, 1.00005e+03, 1.00287e+03,
     x 1.00566e+03, 1.00833e+03, 1.00982e+03, 1.01348e+03, 1.01862e+03,
     x 1.02322e+03, 1.02786e+03, 1.03179e+03, 1.03339e+03, 1.03833e+03,
     x 1.04317e+03, 1.04598e+03, 1.04753e+03, 1.04981e+03, 1.05321e+03,
     x 1.05492e+03, 1.05721e+03, 1.05978e+03, 1.06033e+03, 1.06107e+03,
     x 1.06155e+03, 1.06035e+03, 1.05838e+03, 1.05649e+03, 1.05553e+03,
     x 1.05498e+03, 1.05387e+03, 1.05171e+03, 1.04877e+03, 1.04725e+03,
     x 1.04748e+03, 1.04733e+03, 1.04704e+03, 1.04643e+03, 1.04411e+03,
     x 1.04435e+03, 1.04520e+03, 1.04233e+03, 1.04047e+03, 1.03992e+03/
      data c01761 /
     x 1.04192e+03, 1.04171e+03, 1.04140e+03, 1.04197e+03, 1.04415e+03,
     x 1.04548e+03, 1.04533e+03, 1.04616e+03, 1.04705e+03, 1.04800e+03,
     x 1.05025e+03, 1.05219e+03, 1.05412e+03, 1.05808e+03, 1.06062e+03,
     x 1.06292e+03, 1.06780e+03, 1.07219e+03, 1.07610e+03, 1.07913e+03,
     x 1.08405e+03, 1.08798e+03, 1.08835e+03, 1.09140e+03, 1.09447e+03,
     x 1.09676e+03, 1.10015e+03, 1.10272e+03, 1.10410e+03, 1.10749e+03,
     x 1.10991e+03, 1.11121e+03, 1.10981e+03, 1.10981e+03, 1.11063e+03,
     x 1.10714e+03, 1.10500e+03, 1.10357e+03, 1.10093e+03, 1.09898e+03,
     x 1.09679e+03, 1.09188e+03, 1.09088e+03, 1.09040e+03, 1.08586e+03,
     x 1.08178e+03, 1.07752e+03, 1.07243e+03, 1.07178e+03, 1.07084e+03,
     x 1.06693e+03, 1.06527e+03, 1.06405e+03, 1.06285e+03, 1.06287e+03,
     x 1.06276e+03, 1.06221e+03, 1.06464e+03, 1.06579e+03, 1.06498e+03,
     x 1.06596e+03, 1.06812e+03, 1.07159e+03, 1.07361e+03, 1.07556e+03,
     x 1.07751e+03, 1.08128e+03, 1.08523e+03, 1.08927e+03, 1.09193e+03,
     x 1.09612e+03, 1.10133e+03, 1.10435e+03, 1.10781e+03, 1.11168e+03,
     x 1.11641e+03, 1.12217e+03, 1.12839e+03, 1.13298e+03, 1.13575e+03/
      data c01841 /
     x 1.13742e+03, 1.13929e+03, 1.14132e+03, 1.14340e+03, 1.14518e+03,
     x 1.14742e+03, 1.14943e+03, 1.14935e+03, 1.14975e+03, 1.15086e+03,
     x 1.15420e+03, 1.15267e+03, 1.15007e+03, 1.15155e+03, 1.14982e+03,
     x 1.14663e+03, 1.14301e+03, 1.13986e+03, 1.13676e+03, 1.13307e+03,
     x 1.12898e+03, 1.12516e+03, 1.12284e+03, 1.12068e+03, 1.11855e+03,
     x 1.11632e+03, 1.11464e+03, 1.11318e+03, 1.11180e+03, 1.11163e+03,
     x 1.11160e+03, 1.11035e+03, 1.11178e+03, 1.11395e+03, 1.11447e+03,
     x 1.11439e+03, 1.11440e+03, 1.11582e+03, 1.11560e+03, 1.11478e+03,
     x 1.11448e+03, 1.11454e+03, 1.11494e+03, 1.11607e+03, 1.11736e+03,
     x 1.11854e+03, 1.11875e+03, 1.11989e+03, 1.12165e+03, 1.12427e+03,
     x 1.12620e+03, 1.12758e+03, 1.12774e+03, 1.12870e+03, 1.13001e+03,
     x 1.13006e+03, 1.13078e+03, 1.13172e+03, 1.12971e+03, 1.12857e+03,
     x 1.12810e+03, 1.12740e+03, 1.12659e+03, 1.12564e+03, 1.12338e+03,
     x 1.12117e+03, 1.11902e+03, 1.11878e+03, 1.11855e+03, 1.11828e+03,
     x 1.11791e+03, 1.11784e+03, 1.11815e+03, 1.11957e+03, 1.12046e+03,
     x 1.12042e+03, 1.11929e+03, 1.12074e+03, 1.12708e+03, 1.12600e+03/
      data c01921 /
     x 1.12538e+03, 1.12871e+03, 1.13167e+03, 1.13388e+03, 1.13444e+03,
     x 1.13595e+03, 1.13801e+03, 1.14096e+03, 1.14230e+03, 1.14304e+03,
     x 1.14421e+03, 1.14580e+03, 1.14767e+03, 1.15000e+03, 1.15126e+03,
     x 1.15181e+03, 1.15197e+03, 1.15364e+03, 1.15626e+03, 1.15538e+03,
     x 1.15636e+03, 1.15908e+03, 1.16024e+03, 1.16188e+03, 1.16411e+03,
     x 1.16310e+03, 1.16430e+03, 1.16927e+03, 1.17035e+03, 1.17052e+03,
     x 1.17013e+03, 1.16968e+03, 1.16969e+03, 1.17106e+03, 1.17123e+03,
     x 1.17006e+03, 1.16536e+03, 1.16087e+03, 1.15691e+03, 1.15608e+03,
     x 1.15388e+03, 1.15077e+03, 1.14967e+03, 1.14793e+03, 1.14554e+03,
     x 1.14212e+03, 1.13908e+03, 1.13654e+03, 1.13499e+03, 1.13308e+03,
     x 1.13033e+03, 1.13051e+03, 1.13073e+03, 1.12898e+03, 1.12941e+03,
     x 1.13051e+03, 1.13086e+03, 1.13189e+03, 1.13304e+03, 1.13192e+03,
     x 1.13131e+03, 1.13110e+03, 1.13499e+03, 1.13914e+03, 1.14359e+03,
     x 1.14383e+03, 1.14390e+03, 1.14435e+03, 1.14540e+03, 1.14646e+03,
     x 1.14716e+03, 1.14880e+03, 1.15062e+03, 1.15170e+03, 1.15093e+03,
     x 1.14926e+03, 1.15133e+03, 1.15167e+03, 1.15043e+03, 1.15134e+03/
      data c02001 /
     x 1.15135e+03, 1.15000e+03, 1.15087e+03, 1.15118e+03, 1.14935e+03,
     x 1.14780e+03, 1.14647e+03, 1.14560e+03, 1.14404e+03, 1.14238e+03,
     x 1.14406e+03, 1.14245e+03, 1.13781e+03, 1.13664e+03, 1.13653e+03,
     x 1.13778e+03, 1.13813e+03, 1.13794e+03, 1.13681e+03, 1.13515e+03,
     x 1.13328e+03, 1.13132e+03, 1.13080e+03, 1.13130e+03, 1.13400e+03,
     x 1.13526e+03, 1.13494e+03, 1.13193e+03, 1.12898e+03, 1.12654e+03,
     x 1.12739e+03, 1.12849e+03, 1.12774e+03, 1.12733e+03, 1.12733e+03,
     x 1.12943e+03, 1.13014e+03, 1.12967e+03, 1.12731e+03, 1.12671e+03,
     x 1.12885e+03, 1.13050e+03, 1.13201e+03, 1.13345e+03, 1.13488e+03,
     x 1.13605e+03, 1.13530e+03, 1.13737e+03, 1.14186e+03, 1.14250e+03,
     x 1.14305e+03, 1.14383e+03, 1.14510e+03, 1.14659e+03, 1.14848e+03,
     x 1.14949e+03, 1.14995e+03, 1.14934e+03, 1.15058e+03, 1.15368e+03,
     x 1.15435e+03, 1.15422e+03, 1.15296e+03, 1.15228e+03, 1.15189e+03,
     x 1.15198e+03, 1.15081e+03, 1.14881e+03, 1.14562e+03, 1.14276e+03,
     x 1.14030e+03, 1.13637e+03, 1.13254e+03, 1.12942e+03, 1.12653e+03,
     x 1.12362e+03, 1.11987e+03, 1.11712e+03, 1.11522e+03, 1.11403e+03/
      data c02081 /
     x 1.11226e+03, 1.10947e+03, 1.10956e+03, 1.10976e+03, 1.10748e+03,
     x 1.10673e+03, 1.10688e+03, 1.10675e+03, 1.10533e+03, 1.10230e+03,
     x 1.10384e+03, 1.10496e+03, 1.10274e+03, 1.10197e+03, 1.10196e+03,
     x 1.10278e+03, 1.10257e+03, 1.10147e+03, 1.10205e+03, 1.10308e+03,
     x 1.10478e+03, 1.10358e+03, 1.10197e+03, 1.10305e+03, 1.10390e+03,
     x 1.10456e+03, 1.10526e+03, 1.10588e+03, 1.10640e+03, 1.10747e+03,
     x 1.10904e+03, 1.11214e+03, 1.11350e+03, 1.11359e+03, 1.11604e+03,
     x 1.11706e+03, 1.11594e+03, 1.11600e+03, 1.11616e+03, 1.11561e+03,
     x 1.11556e+03, 1.11547e+03, 1.11370e+03, 1.11289e+03, 1.11276e+03,
     x 1.11338e+03, 1.11437e+03, 1.11595e+03, 1.11309e+03, 1.10958e+03,
     x 1.10887e+03, 1.10573e+03, 1.10068e+03, 1.10194e+03, 1.10165e+03,
     x 1.09813e+03, 1.09973e+03, 1.10233e+03, 1.10121e+03, 1.10097e+03,
     x 1.10149e+03, 1.10162e+03, 1.10222e+03, 1.10389e+03, 1.10315e+03,
     x 1.10158e+03, 1.10193e+03, 1.10186e+03, 1.10135e+03, 1.10336e+03,
     x 1.10500e+03, 1.10459e+03, 1.10592e+03, 1.10784e+03, 1.10076e+03,
     x 1.09615e+03, 1.09496e+03, 1.09422e+03, 1.09350e+03, 1.09244e+03/
      data c02161 /
     x 1.08955e+03, 1.08535e+03, 1.08379e+03, 1.08184e+03, 1.07889e+03,
     x 1.07563e+03, 1.07238e+03, 1.07042e+03, 1.06882e+03, 1.06761e+03,
     x 1.06816e+03, 1.06772e+03, 1.06327e+03, 1.06313e+03, 1.06563e+03,
     x 1.06254e+03, 1.06072e+03, 1.06095e+03, 1.06173e+03, 1.06269e+03,
     x 1.06361e+03, 1.06438e+03, 1.06501e+03, 1.06465e+03, 1.06481e+03,
     x 1.06685e+03, 1.06642e+03, 1.06447e+03, 1.06701e+03, 1.06791e+03,
     x 1.06612e+03, 1.06471e+03, 1.06403e+03, 1.06774e+03, 1.06823e+03,
     x 1.06524e+03, 1.06479e+03, 1.06453e+03, 1.06346e+03, 1.06175e+03,
     x 1.05958e+03, 1.05941e+03, 1.05936e+03, 1.05938e+03, 1.05736e+03,
     x 1.05449e+03, 1.05307e+03, 1.05180e+03, 1.05074e+03, 1.04810e+03,
     x 1.04536e+03, 1.04477e+03, 1.04389e+03, 1.04272e+03, 1.04006e+03,
     x 1.03739e+03, 1.03533e+03, 1.03476e+03, 1.03516e+03, 1.03275e+03,
     x 1.03093e+03, 1.03062e+03, 1.02997e+03, 1.02919e+03, 1.02993e+03,
     x 1.02983e+03, 1.02837e+03, 1.02611e+03, 1.02386e+03, 1.02426e+03,
     x 1.02542e+03, 1.02750e+03, 1.02638e+03, 1.02496e+03, 1.02608e+03,
     x 1.02568e+03, 1.02388e+03, 1.02522e+03, 1.02692e+03, 1.02834e+03/
      data c02241 /
     x 1.02828e+03, 1.02716e+03, 1.02667e+03, 1.02607e+03, 1.02503e+03,
     x 1.02723e+03, 1.03143e+03, 1.02881e+03, 1.02646e+03, 1.02500e+03,
     x 1.02569e+03, 1.02743e+03, 1.02608e+03, 1.02548e+03, 1.02620e+03,
     x 1.02733e+03, 1.02839e+03, 1.02575e+03, 1.02432e+03, 1.02471e+03,
     x 1.02392e+03, 1.02267e+03, 1.02077e+03, 1.01964e+03, 1.01957e+03,
     x 1.01848e+03, 1.01704e+03, 1.01524e+03, 1.01352e+03, 1.01191e+03,
     x 1.01066e+03, 1.00952e+03, 1.00849e+03, 1.00660e+03, 1.00368e+03,
     x 9.99713e+02, 9.95921e+02, 9.94845e+02, 9.93286e+02, 9.91204e+02/
c
      end
c=======================================================================
      block data bo3hh1
c>    block data
c
c     ratio (c1/c0)
c     data from bass 1985
c
c     now includes molina & molina at 273k with the temperature
c     dependence determined from the 195k harvard measurements,
c     employing the bass algorithm (co(1+c1*t+c2*t2); this is
c     only for the wavelength range from .34 to .35 microns;
c     otherwise, the bass data alone have been employed between
c     .34 and .245 microns.
c
c     new t-dependent x-sections between .345 and .36 microns
c     have now been added, based on work by cacciani, disarra
c     and fiocco, university of rome, 1987.  quadratic temp
c     has been derived, as above.
c
c     agreement amongst the four data sets is reasonable (<10%)
c     and often excellent (0-3%)
c
c
      common /o3hh1/  v1c,v2c,dvc,
     x           o31001(88),c10086(80),c10166(80),c10246(65),c10311(16),
     x           c10327(80),c10407(1),
     x           c10001(80),c10081(80),c10161(80),c10241(80),c10321(80),
     x           c10401(80),c10481(80),c10561(80),c10641(80),c10721(80),
     x           c10801(80),c10881(80),c10961(80),c11041(80),c11121(80),
     x           c11201(80),c11281(80),c11361(80),c11441(80),c11521(80),
     x           c11601(80),c11681(80),c11761(80),c11841(80),c11921(80),
     x           c12001(80),c12081(80),c12161(80),c12241(40)
c
c     data v1c /29405./, v2c /40800./ ,dvc /5./, nc /2280/   bass
      data v1c /27370./, v2c /40800./ ,dvc /5./
c
      data o31001/88*1.3e-3/

      data c10086/
     x 1.37330e-03, 1.62821e-03, 2.01703e-03, 2.54574e-03, 3.20275e-03,
     x 3.89777e-03, 4.62165e-03, 5.26292e-03, 5.86986e-03, 6.41494e-03,
     x 6.96761e-03, 7.48539e-03, 7.89600e-03, 7.87305e-03, 7.81981e-03,
     x 7.63864e-03, 7.67455e-03, 7.72586e-03, 7.69784e-03, 7.57367e-03,
     x 7.27336e-03, 7.14064e-03, 7.24207e-03, 7.09851e-03, 6.93654e-03,
     x 6.89385e-03, 7.05768e-03, 6.85578e-03, 6.58301e-03, 6.50848e-03,
     x 6.52083e-03, 6.46590e-03, 6.70692e-03, 6.92053e-03, 7.17734e-03,
     x 7.05364e-03, 6.63440e-03, 6.54702e-03, 6.27173e-03, 5.98150e-03,
     x 5.66579e-03, 5.51549e-03, 5.50291e-03, 5.93271e-03, 6.36950e-03,
     x 7.18562e-03, 7.51767e-03, 6.53815e-03, 7.22341e-03, 8.63056e-03,
     x 9.11740e-03, 8.80903e-03, 8.59902e-03, 7.74287e-03, 7.33509e-03,
     x 7.50180e-03, 7.81686e-03, 7.85635e-03, 8.08554e-03, 7.21968e-03,
     x 7.99028e-03, 9.90724e-03, 1.29121e-02, 1.54686e-02, 1.60876e-02,
     x 1.59530e-02, 1.57040e-02, 1.59499e-02, 1.63961e-02, 1.72670e-02,
     x 1.81634e-02, 1.95519e-02, 2.14181e-02, 2.28670e-02, 2.33506e-02,
     x 2.22736e-02, 2.14296e-02, 2.15271e-02, 2.30730e-02, 2.36220e-02/
      data c10166/
     x 2.44466e-02, 2.44476e-02, 2.39223e-02, 2.41386e-02, 2.53687e-02,
     x 2.67491e-02, 2.80425e-02, 2.77558e-02, 2.82626e-02, 2.86776e-02,
     x 2.88781e-02, 2.89248e-02, 2.89983e-02, 2.85534e-02, 2.87102e-02,
     x 2.83695e-02, 2.76719e-02, 2.76091e-02, 2.90733e-02, 2.80388e-02,
     x 2.73706e-02, 2.65055e-02, 2.61268e-02, 2.45892e-02, 2.37213e-02,
     x 2.22542e-02, 2.10116e-02, 2.02852e-02, 1.97635e-02, 1.94079e-02,
     x 1.90997e-02, 1.85598e-02, 1.79221e-02, 1.77887e-02, 1.73709e-02,
     x 1.67263e-02, 1.60932e-02, 1.50775e-02, 1.39563e-02, 1.23691e-02,
     x 1.07402e-02, 9.35859e-03, 8.43786e-03, 7.92075e-03, 7.33239e-03,
     x 6.73638e-03, 6.28740e-03, 5.85640e-03, 5.85384e-03, 6.10577e-03,
     x 7.26050e-03, 9.66384e-03, 1.29629e-02, 1.69596e-02, 2.03465e-02,
     x 2.26429e-02, 2.39653e-02, 2.47970e-02, 2.51993e-02, 2.51383e-02,
     x 2.52014e-02, 2.47766e-02, 2.47171e-02, 2.47478e-02, 2.43986e-02,
     x 2.43498e-02, 2.40537e-02, 2.40574e-02, 2.40446e-02, 2.40847e-02,
     x 2.39400e-02, 2.42127e-02, 2.47123e-02, 2.52914e-02, 2.52103e-02,
     x 2.51421e-02, 2.43229e-02, 2.37902e-02, 2.30865e-02, 2.28174e-02/
      data c10246/
     x 2.28830e-02, 2.33671e-02, 2.38274e-02, 2.46699e-02, 2.56739e-02,
     x 2.61408e-02, 2.62898e-02, 2.64228e-02, 2.55561e-02, 2.47095e-02,
     x 2.39071e-02, 2.34319e-02, 2.28738e-02, 2.23434e-02, 2.18888e-02,
     x 2.13639e-02, 2.11937e-02, 2.10110e-02, 2.07672e-02, 2.00697e-02,
     x 1.97605e-02, 1.91208e-02, 1.82056e-02, 1.73945e-02, 1.64542e-02,
     x 1.53969e-02, 1.41816e-02, 1.35665e-02, 1.27109e-02, 1.18254e-02,
     x 1.11489e-02, 1.03984e-02, 1.00760e-02, 9.86649e-03, 9.76766e-03,
     x 9.41662e-03, 9.19082e-03, 9.44272e-03, 1.04547e-02, 1.24713e-02,
     x 1.49310e-02, 1.70272e-02, 1.86057e-02, 1.93555e-02, 1.98350e-02,
     x 2.00041e-02, 2.01233e-02, 2.01917e-02, 1.98918e-02, 1.96649e-02,
     x 1.95162e-02, 2.01044e-02, 2.06711e-02, 2.08881e-02, 2.04812e-02,
     x 1.92249e-02, 1.80188e-02, 1.69496e-02, 1.60488e-02, 1.52865e-02,
     x 1.46940e-02, 1.41067e-02, 1.35675e-02, 1.31094e-02, 1.27542e-02/
      data c10311/
     x                                                     1.3073e-02,
     x 1.2795e-02,  1.2753e-02,  1.2868e-02,  1.2885e-02,  1.2554e-02,
     x 1.2106e-02,  1.1616e-02,  1.1394e-02,  1.1092e-02,  1.0682e-02,
     x 1.0519e-02,  9.7219e-03,  9.3434e-03,  8.5260e-03,  8.3333e-03/
      data c10327/
     x 7.8582e-03,  6.8295e-03,  6.7963e-03,  6.7516e-03,  6.2930e-03,
     x 6.1615e-03,  6.1250e-03,  5.9011e-03,  5.7823e-03,  5.4688e-03,
     x 5.0978e-03,  4.4526e-03,  3.8090e-03,  3.2310e-03,  3.0128e-03,
     x 3.9063e-03,  6.7911e-03,  9.3161e-03,  1.0256e-02,  1.0183e-02,
     x 9.8289e-03,  9.5683e-03,  9.0406e-03,  8.7148e-03,  8.5284e-03,
     x 8.6149e-03,  8.7238e-03,  9.3679e-03,  1.0683e-02,  1.2016e-02,
     x 1.3097e-02,  1.3610e-02,  1.3588e-02,  1.3805e-02,  1.3928e-02,
     x 1.3903e-02,  1.3446e-02,  1.3258e-02,  1.3194e-02,  1.2703e-02,
     x 1.2393e-02,  1.2487e-02,  1.2341e-02,  1.2388e-02,  1.2061e-02,
     x 1.2122e-02,  1.1850e-02,  1.2032e-02,  1.1806e-02,  1.1810e-02,
     x 1.1572e-02,  1.1397e-02,  1.0980e-02,  1.1012e-02,  1.0524e-02,
     x 1.0518e-02,  1.0227e-02,  9.6837e-03,  9.6425e-03,  8.9938e-03,
     x 9.1488e-03,  8.8595e-03,  8.5976e-03,  8.4447e-03,  8.0731e-03,
     x 8.0283e-03,  7.7827e-03,  7.7638e-03,  7.2438e-03,  6.8246e-03,
     x 6.3457e-03,  5.6632e-03,  5.2500e-03,  4.3593e-03,  3.9431e-03,
     x 3.1580e-03,  2.2298e-03,  1.7818e-03,  1.4513e-03,  1.3188e-03/
      data c10407/
     x 2.1034e-03/
      data c10001 /
     x 6.45621e-03, 7.11308e-03, 1.06130e-02, 1.36338e-02, 1.27746e-02,
     x 1.42152e-02, 1.41144e-02, 1.64830e-02, 1.67110e-02, 1.57368e-02,
     x 1.54644e-02, 1.45248e-02, 1.43206e-02, 1.56946e-02, 1.54268e-02,
     x 1.37500e-02, 1.50224e-02, 1.60919e-02, 1.49099e-02, 1.53960e-02,
     x 1.61871e-02, 1.46539e-02, 1.38258e-02, 1.32571e-02, 1.21580e-02,
     x 1.39596e-02, 1.16029e-02, 1.47042e-02, 1.07441e-02, 1.08999e-02,
     x 1.05562e-02, 1.00589e-02, 9.60711e-03, 9.36950e-03, 7.65303e-03,
     x 6.86216e-03, 7.05344e-03, 6.90728e-03, 6.78627e-03, 6.97435e-03,
     x 5.75456e-03, 5.81685e-03, 5.00915e-03, 4.90259e-03, 4.42545e-03,
     x 4.14633e-03, 3.61657e-03, 3.08178e-03, 2.91680e-03, 2.94554e-03,
     x 3.35794e-03, 5.49025e-03, 7.09867e-03, 6.82592e-03, 8.84835e-03,
     x 9.15718e-03, 9.17935e-03, 8.31848e-03, 7.79481e-03, 7.75125e-03,
     x 6.95844e-03, 7.34506e-03, 7.53823e-03, 7.03272e-03, 7.57051e-03,
     x 9.20239e-03, 1.10864e-02, 1.16188e-02, 1.30029e-02, 1.44364e-02,
     x 1.29292e-02, 1.36031e-02, 1.35967e-02, 1.30412e-02, 1.29874e-02,
     x 1.14829e-02, 1.18009e-02, 1.20829e-02, 1.17831e-02, 1.21489e-02/
      data c10081 /
     x 1.27019e-02, 1.25557e-02, 1.23812e-02, 1.20158e-02, 1.26749e-02,
     x 1.17139e-02, 1.14552e-02, 1.11268e-02, 9.79143e-03, 8.79741e-03,
     x 8.85709e-03, 8.57653e-03, 8.93908e-03, 8.46205e-03, 8.56506e-03,
     x 8.14319e-03, 8.14415e-03, 7.74205e-03, 7.80727e-03, 7.49886e-03,
     x 7.71114e-03, 6.55963e-03, 6.87550e-03, 6.39162e-03, 5.55359e-03,
     x 5.43275e-03, 4.90649e-03, 4.41165e-03, 4.21875e-03, 3.62592e-03,
     x 3.40700e-03, 2.40267e-03, 2.61479e-03, 2.75677e-03, 4.10842e-03,
     x 5.79601e-03, 7.10708e-03, 8.07826e-03, 8.16166e-03, 8.72620e-03,
     x 8.85878e-03, 8.72755e-03, 8.25811e-03, 8.12100e-03, 7.78534e-03,
     x 7.39762e-03, 8.43880e-03, 8.53789e-03, 9.90072e-03, 1.01668e-02,
     x 1.00827e-02, 9.73556e-03, 9.57462e-03, 1.01289e-02, 1.10670e-02,
     x 1.03508e-02, 1.00929e-02, 9.10236e-03, 9.39459e-03, 8.79601e-03,
     x 8.67936e-03, 8.53862e-03, 7.95459e-03, 8.04037e-03, 7.95361e-03,
     x 7.87432e-03, 6.99165e-03, 7.37107e-03, 6.09187e-03, 6.21030e-03,
     x 5.33277e-03, 5.04633e-03, 4.45811e-03, 4.34153e-03, 3.98596e-03,
     x 3.84225e-03, 3.41943e-03, 3.60535e-03, 2.81691e-03, 2.49771e-03/
      data c10161 /
     x 2.35046e-03, 2.50947e-03, 3.75462e-03, 4.92349e-03, 5.09294e-03,
     x 4.98312e-03, 5.19325e-03, 4.41827e-03, 4.25192e-03, 4.46745e-03,
     x 4.08731e-03, 3.84776e-03, 3.67507e-03, 3.76845e-03, 3.69210e-03,
     x 4.59864e-03, 6.42677e-03, 7.83255e-03, 7.89247e-03, 8.10883e-03,
     x 8.00825e-03, 8.40322e-03, 7.97108e-03, 8.24714e-03, 8.39006e-03,
     x 8.68787e-03, 8.61108e-03, 8.81552e-03, 9.36996e-03, 9.08243e-03,
     x 9.69116e-03, 9.66185e-03, 9.22856e-03, 9.65086e-03, 9.35398e-03,
     x 9.06358e-03, 8.76851e-03, 8.43072e-03, 7.85659e-03, 7.93936e-03,
     x 7.49712e-03, 7.20199e-03, 6.94581e-03, 6.64086e-03, 6.12627e-03,
     x 6.13967e-03, 5.67310e-03, 5.09928e-03, 4.59112e-03, 3.95257e-03,
     x 3.67652e-03, 3.28781e-03, 2.77471e-03, 2.74494e-03, 2.15529e-03,
     x 1.95283e-03, 1.75043e-03, 1.60419e-03, 1.82688e-03, 2.34667e-03,
     x 2.92502e-03, 3.88322e-03, 4.39984e-03, 4.67814e-03, 4.80395e-03,
     x 4.69130e-03, 4.54564e-03, 4.46773e-03, 4.59178e-03, 4.37498e-03,
     x 4.12706e-03, 4.18299e-03, 4.57267e-03, 5.60127e-03, 6.51936e-03,
     x 7.10498e-03, 7.49870e-03, 7.89554e-03, 7.97428e-03, 8.21044e-03/
      data c10241 /
     x 8.06324e-03, 7.76648e-03, 7.62238e-03, 7.77675e-03, 7.46905e-03,
     x 7.61115e-03, 7.42715e-03, 7.28461e-03, 7.51514e-03, 7.38782e-03,
     x 6.97206e-03, 6.52738e-03, 6.10147e-03, 5.87553e-03, 5.49218e-03,
     x 4.94873e-03, 4.47920e-03, 4.25005e-03, 3.98094e-03, 3.92084e-03,
     x 3.41707e-03, 3.30501e-03, 3.09208e-03, 3.19686e-03, 3.55283e-03,
     x 4.20775e-03, 4.11155e-03, 3.72193e-03, 3.52000e-03, 3.13572e-03,
     x 2.87629e-03, 2.64251e-03, 2.33451e-03, 2.22426e-03, 2.05800e-03,
     x 1.75214e-03, 2.32530e-03, 2.68651e-03, 3.66315e-03, 4.93904e-03,
     x 5.32850e-03, 5.43978e-03, 5.32656e-03, 5.15649e-03, 5.42096e-03,
     x 5.37193e-03, 5.23454e-03, 5.34557e-03, 5.50533e-03, 6.13216e-03,
     x 6.65129e-03, 7.09357e-03, 7.46042e-03, 7.68605e-03, 7.91866e-03,
     x 7.52953e-03, 7.48272e-03, 7.17800e-03, 6.80060e-03, 6.60427e-03,
     x 6.43049e-03, 6.45975e-03, 6.20534e-03, 5.93094e-03, 5.67360e-03,
     x 5.38584e-03, 5.19364e-03, 4.92599e-03, 4.60655e-03, 4.24669e-03,
     x 3.94253e-03, 3.55894e-03, 3.24256e-03, 2.92974e-03, 2.62760e-03,
     x 2.52238e-03, 2.24714e-03, 2.26350e-03, 2.44380e-03, 3.03798e-03/
      data c10321 /
     x 3.50000e-03, 3.55416e-03, 3.43661e-03, 3.19814e-03, 3.02155e-03,
     x 2.73890e-03, 2.50078e-03, 2.34595e-03, 2.18282e-03, 2.19285e-03,
     x 2.49482e-03, 3.13434e-03, 4.18947e-03, 4.72069e-03, 5.29712e-03,
     x 5.39004e-03, 5.44846e-03, 5.37952e-03, 5.09935e-03, 5.08741e-03,
     x 5.05257e-03, 5.10339e-03, 5.17968e-03, 5.31841e-03, 5.58106e-03,
     x 5.65031e-03, 5.65680e-03, 5.76184e-03, 5.71213e-03, 5.48515e-03,
     x 5.32168e-03, 5.18505e-03, 4.99640e-03, 4.78746e-03, 4.57244e-03,
     x 4.32728e-03, 4.14464e-03, 3.97659e-03, 4.01874e-03, 4.10588e-03,
     x 3.99644e-03, 3.84584e-03, 3.64222e-03, 3.39590e-03, 3.00386e-03,
     x 2.73790e-03, 2.45095e-03, 2.29068e-03, 1.64530e-03, 1.68602e-03,
     x 2.32934e-03, 3.14851e-03, 3.65706e-03, 3.70878e-03, 3.75103e-03,
     x 3.79183e-03, 3.32032e-03, 2.42604e-03, 2.48775e-03, 2.34603e-03,
     x 2.36349e-03, 3.33744e-03, 3.44617e-03, 4.27280e-03, 4.61076e-03,
     x 5.20165e-03, 5.14851e-03, 5.22909e-03, 5.08278e-03, 5.16125e-03,
     x 5.01572e-03, 4.51685e-03, 4.67541e-03, 4.83421e-03, 4.57546e-03,
     x 4.55111e-03, 5.03093e-03, 4.67838e-03, 4.44282e-03, 4.40774e-03/
      data c10401 /
     x 4.48123e-03, 4.24410e-03, 4.03559e-03, 3.73969e-03, 3.45458e-03,
     x 3.18217e-03, 3.16115e-03, 3.36877e-03, 3.62026e-03, 3.69898e-03,
     x 3.49845e-03, 3.13839e-03, 2.77731e-03, 2.40106e-03, 2.03935e-03,
     x 1.84377e-03, 2.07757e-03, 2.39550e-03, 2.86272e-03, 3.27900e-03,
     x 3.42304e-03, 3.50211e-03, 3.29197e-03, 3.24784e-03, 3.20864e-03,
     x 3.28063e-03, 3.01328e-03, 3.00379e-03, 3.19562e-03, 3.45113e-03,
     x 3.75149e-03, 3.98520e-03, 4.19181e-03, 4.15773e-03, 4.02490e-03,
     x 3.95936e-03, 3.79001e-03, 3.77647e-03, 3.48528e-03, 3.55768e-03,
     x 3.62812e-03, 3.48650e-03, 3.35434e-03, 3.20088e-03, 3.25316e-03,
     x 3.04467e-03, 3.12633e-03, 3.23602e-03, 3.07723e-03, 2.80070e-03,
     x 2.72498e-03, 2.74752e-03, 2.58943e-03, 2.32482e-03, 2.20218e-03,
     x 2.10846e-03, 2.05991e-03, 2.01844e-03, 2.16224e-03, 2.48456e-03,
     x 2.88022e-03, 2.93939e-03, 3.01176e-03, 2.98886e-03, 2.96947e-03,
     x 3.38082e-03, 3.61657e-03, 3.42654e-03, 3.41274e-03, 3.22475e-03,
     x 2.97658e-03, 3.21944e-03, 3.32032e-03, 3.33273e-03, 3.58854e-03,
     x 3.67023e-03, 3.64069e-03, 3.74557e-03, 3.77703e-03, 3.64042e-03/
      data c10481 /
     x 3.39468e-03, 3.22657e-03, 3.16466e-03, 3.24224e-03, 3.24801e-03,
     x 3.19487e-03, 3.40155e-03, 3.16940e-03, 2.92293e-03, 3.00998e-03,
     x 2.82851e-03, 2.60381e-03, 2.59242e-03, 2.48530e-03, 2.76677e-03,
     x 2.45506e-03, 2.21845e-03, 2.30407e-03, 2.28136e-03, 2.37278e-03,
     x 2.25313e-03, 2.47836e-03, 2.77858e-03, 2.89803e-03, 2.86131e-03,
     x 3.14118e-03, 3.14119e-03, 2.88881e-03, 3.19502e-03, 2.99538e-03,
     x 2.91212e-03, 3.22739e-03, 3.05960e-03, 3.18901e-03, 3.05805e-03,
     x 3.12205e-03, 2.95636e-03, 3.24111e-03, 3.29433e-03, 3.09206e-03,
     x 3.06696e-03, 2.97735e-03, 2.90897e-03, 2.88979e-03, 2.75105e-03,
     x 2.92156e-03, 3.03445e-03, 2.91664e-03, 2.85559e-03, 2.98405e-03,
     x 2.95376e-03, 2.80234e-03, 2.78349e-03, 2.73421e-03, 2.70035e-03,
     x 2.60074e-03, 2.34840e-03, 2.37626e-03, 2.32927e-03, 2.20842e-03,
     x 2.31080e-03, 2.42771e-03, 2.43339e-03, 2.53280e-03, 2.37093e-03,
     x 2.37377e-03, 2.73453e-03, 2.60836e-03, 2.55568e-03, 2.44062e-03,
     x 2.71093e-03, 2.64421e-03, 2.66969e-03, 2.55560e-03, 2.71800e-03,
     x 2.79534e-03, 2.59070e-03, 2.55373e-03, 2.45272e-03, 2.55571e-03/
      data c10561 /
     x 2.54606e-03, 2.57349e-03, 2.46807e-03, 2.35634e-03, 2.44470e-03,
     x 2.47050e-03, 2.57131e-03, 2.71649e-03, 2.58800e-03, 2.54524e-03,
     x 2.69505e-03, 2.89122e-03, 2.77399e-03, 2.63306e-03, 2.82269e-03,
     x 2.95684e-03, 3.07415e-03, 2.70594e-03, 2.65650e-03, 2.90613e-03,
     x 2.96666e-03, 2.94767e-03, 2.81765e-03, 2.64829e-03, 2.43062e-03,
     x 2.33816e-03, 2.38210e-03, 2.45701e-03, 2.38508e-03, 2.40746e-03,
     x 2.49779e-03, 2.28209e-03, 2.26185e-03, 2.26604e-03, 2.19232e-03,
     x 2.19160e-03, 2.32246e-03, 2.11108e-03, 2.26220e-03, 2.26849e-03,
     x 2.34787e-03, 2.49323e-03, 2.46872e-03, 2.52974e-03, 2.35858e-03,
     x 2.36865e-03, 2.33533e-03, 2.21338e-03, 2.24610e-03, 2.24776e-03,
     x 2.24423e-03, 2.29276e-03, 2.18487e-03, 2.27621e-03, 2.31141e-03,
     x 2.44095e-03, 2.45198e-03, 2.56919e-03, 2.56823e-03, 2.41982e-03,
     x 2.39968e-03, 2.62447e-03, 2.55339e-03, 2.51556e-03, 2.47477e-03,
     x 2.50276e-03, 2.48381e-03, 2.48484e-03, 2.48316e-03, 2.38541e-03,
     x 2.41183e-03, 2.55888e-03, 2.42810e-03, 2.43356e-03, 2.25996e-03,
     x 2.34736e-03, 2.10305e-03, 2.13870e-03, 2.17472e-03, 2.05354e-03/
      data c10641 /
     x 2.11572e-03, 2.19557e-03, 2.09545e-03, 2.07831e-03, 1.94425e-03,
     x 1.89333e-03, 1.98025e-03, 1.98328e-03, 2.01702e-03, 1.98333e-03,
     x 2.01150e-03, 2.02484e-03, 2.10759e-03, 2.11892e-03, 2.10175e-03,
     x 2.05314e-03, 2.13338e-03, 2.25764e-03, 2.19055e-03, 2.10818e-03,
     x 2.05100e-03, 2.05685e-03, 2.10843e-03, 2.10228e-03, 2.10646e-03,
     x 2.22640e-03, 2.31253e-03, 2.31230e-03, 2.21885e-03, 2.19568e-03,
     x 2.23583e-03, 2.34754e-03, 2.28622e-03, 2.21876e-03, 2.26679e-03,
     x 2.30828e-03, 2.24944e-03, 2.13851e-03, 2.02938e-03, 1.96770e-03,
     x 2.05953e-03, 2.13814e-03, 2.03158e-03, 2.24655e-03, 1.95119e-03,
     x 2.12979e-03, 2.08581e-03, 2.02434e-03, 1.98926e-03, 1.98792e-03,
     x 1.97237e-03, 1.93397e-03, 1.92360e-03, 1.90805e-03, 1.89300e-03,
     x 1.83548e-03, 1.87215e-03, 1.85589e-03, 1.85718e-03, 1.79361e-03,
     x 1.77984e-03, 1.91506e-03, 2.04256e-03, 2.04095e-03, 1.94031e-03,
     x 1.90447e-03, 2.02049e-03, 1.98360e-03, 2.04364e-03, 2.02519e-03,
     x 2.20802e-03, 1.96964e-03, 1.94559e-03, 2.09922e-03, 2.11184e-03,
     x 2.05706e-03, 2.02257e-03, 2.01781e-03, 2.01055e-03, 1.86538e-03/
      data c10721 /
     x 1.86899e-03, 1.76798e-03, 1.85871e-03, 1.95363e-03, 1.96404e-03,
     x 1.84169e-03, 1.82851e-03, 1.84582e-03, 1.81997e-03, 1.76461e-03,
     x 1.68384e-03, 1.65530e-03, 1.73550e-03, 1.62463e-03, 1.68793e-03,
     x 1.60472e-03, 1.67560e-03, 1.67431e-03, 1.61779e-03, 1.66446e-03,
     x 1.66403e-03, 1.55724e-03, 1.62351e-03, 1.71545e-03, 1.69645e-03,
     x 1.59540e-03, 1.62948e-03, 1.66784e-03, 1.66416e-03, 1.66131e-03,
     x 1.71502e-03, 1.76555e-03, 1.75182e-03, 1.72327e-03, 1.72338e-03,
     x 1.69993e-03, 1.78819e-03, 1.73517e-03, 1.74802e-03, 1.81751e-03,
     x 1.70973e-03, 1.65075e-03, 1.70784e-03, 1.73655e-03, 1.71670e-03,
     x 1.67367e-03, 1.69338e-03, 1.61772e-03, 1.54914e-03, 1.56009e-03,
     x 1.59467e-03, 1.60761e-03, 1.57117e-03, 1.54045e-03, 1.53102e-03,
     x 1.44516e-03, 1.49898e-03, 1.56048e-03, 1.60087e-03, 1.62636e-03,
     x 1.62472e-03, 1.53931e-03, 1.55536e-03, 1.61649e-03, 1.66493e-03,
     x 1.86915e-03, 1.59984e-03, 1.60483e-03, 1.66549e-03, 1.73449e-03,
     x 1.73673e-03, 1.68393e-03, 1.67434e-03, 1.77880e-03, 1.76154e-03,
     x 1.43028e-03, 1.69651e-03, 1.60934e-03, 1.69413e-03, 1.70514e-03/
      data c10801 /
     x 1.62471e-03, 1.74854e-03, 1.76480e-03, 1.63495e-03, 1.59364e-03,
     x 1.39603e-03, 1.47897e-03, 1.49509e-03, 1.70002e-03, 1.63048e-03,
     x 1.44807e-03, 1.45071e-03, 1.53998e-03, 1.45276e-03, 1.29129e-03,
     x 1.52900e-03, 1.64444e-03, 1.37450e-03, 1.42574e-03, 1.47355e-03,
     x 1.51202e-03, 1.54376e-03, 1.51421e-03, 1.43989e-03, 1.45732e-03,
     x 1.42912e-03, 1.59906e-03, 1.56748e-03, 1.52383e-03, 1.47665e-03,
     x 1.51465e-03, 1.55582e-03, 1.54521e-03, 1.55189e-03, 1.56772e-03,
     x 1.45401e-03, 1.55775e-03, 1.43120e-03, 1.39659e-03, 1.41451e-03,
     x 1.45157e-03, 1.48303e-03, 1.42540e-03, 1.26387e-03, 1.37479e-03,
     x 1.46381e-03, 1.38134e-03, 1.32733e-03, 1.38030e-03, 1.44619e-03,
     x 1.41344e-03, 1.31982e-03, 1.24944e-03, 1.20096e-03, 1.21107e-03,
     x 1.27999e-03, 1.22523e-03, 1.22193e-03, 1.35957e-03, 1.41427e-03,
     x 1.35679e-03, 1.15438e-03, 1.41184e-03, 1.49093e-03, 1.32193e-03,
     x 1.25009e-03, 1.37625e-03, 1.49022e-03, 1.44180e-03, 1.27628e-03,
     x 1.29670e-03, 1.31636e-03, 1.28874e-03, 1.31177e-03, 1.35732e-03,
     x 1.33854e-03, 1.30253e-03, 1.31374e-03, 1.27379e-03, 1.18339e-03/
      data c10881 /
     x 1.22016e-03, 1.26551e-03, 1.26371e-03, 1.28180e-03, 1.36024e-03,
     x 1.45759e-03, 1.29413e-03, 1.35858e-03, 1.26528e-03, 1.18623e-03,
     x 1.21812e-03, 1.28799e-03, 1.37028e-03, 1.29268e-03, 1.27639e-03,
     x 1.19487e-03, 1.23542e-03, 1.25010e-03, 1.17418e-03, 1.13914e-03,
     x 1.21951e-03, 1.13780e-03, 1.16443e-03, 1.17883e-03, 1.11982e-03,
     x 1.05708e-03, 1.04865e-03, 1.05884e-03, 1.06599e-03, 1.13828e-03,
     x 1.10373e-03, 1.07739e-03, 1.04632e-03, 1.06118e-03, 1.15445e-03,
     x 1.17300e-03, 1.00675e-03, 1.04235e-03, 1.08398e-03, 1.06587e-03,
     x 1.05536e-03, 1.08614e-03, 1.09026e-03, 1.09141e-03, 1.13051e-03,
     x 1.08667e-03, 1.04016e-03, 1.04897e-03, 1.08894e-03, 1.09682e-03,
     x 1.09638e-03, 9.79254e-04, 1.00668e-03, 1.02569e-03, 1.00581e-03,
     x 9.74433e-04, 9.66321e-04, 9.78440e-04, 9.01587e-04, 1.02149e-03,
     x 9.87464e-04, 9.41872e-04, 9.05021e-04, 8.59547e-04, 9.03963e-04,
     x 8.66415e-04, 8.84726e-04, 8.77087e-04, 8.70584e-04, 8.81338e-04,
     x 8.97658e-04, 8.97586e-04, 9.19028e-04, 8.82438e-04, 9.00710e-04,
     x 9.54329e-04, 9.54490e-04, 9.10940e-04, 9.95472e-04, 9.50134e-04/
      data c10961 /
     x 9.17127e-04, 9.70916e-04, 9.87575e-04, 9.65026e-04, 9.71779e-04,
     x 1.00967e-03, 1.00053e-03, 9.26063e-04, 9.34721e-04, 9.76354e-04,
     x 9.78436e-04, 9.36012e-04, 9.64448e-04, 9.95903e-04, 9.89960e-04,
     x 9.41143e-04, 9.04393e-04, 8.84719e-04, 8.41396e-04, 8.67234e-04,
     x 8.55864e-04, 8.63314e-04, 8.72317e-04, 8.40899e-04, 7.79593e-04,
     x 7.88481e-04, 8.21075e-04, 7.38342e-04, 7.56537e-04, 7.57278e-04,
     x 7.35854e-04, 7.32765e-04, 6.67398e-04, 7.45338e-04, 7.33094e-04,
     x 7.01840e-04, 6.85595e-04, 6.95740e-04, 7.24015e-04, 7.00907e-04,
     x 7.28498e-04, 6.89410e-04, 6.91728e-04, 7.40601e-04, 7.62775e-04,
     x 7.40912e-04, 7.35021e-04, 7.07799e-04, 7.54113e-04, 8.44845e-04,
     x 8.53956e-04, 6.42186e-04, 7.40557e-04, 7.54340e-04, 7.55544e-04,
     x 7.88986e-04, 7.97902e-04, 6.98460e-04, 7.74873e-04, 6.81178e-04,
     x 7.15567e-04, 7.56723e-04, 7.98438e-04, 8.83150e-04, 8.45671e-04,
     x 7.40924e-04, 7.35498e-04, 7.77829e-04, 6.93566e-04, 5.10188e-04,
     x 7.52717e-04, 6.94185e-04, 6.71928e-04, 6.73286e-04, 6.89415e-04,
     x 7.22917e-04, 7.89448e-04, 8.53812e-04, 7.45132e-04, 7.68732e-04/
      data c11041 /
     x 8.10104e-04, 7.55615e-04, 7.09145e-04, 6.80676e-04, 7.54594e-04,
     x 7.89416e-04, 7.88579e-04, 7.49805e-04, 6.13534e-04, 7.22491e-04,
     x 7.95410e-04, 7.80604e-04, 7.74283e-04, 7.93224e-04, 6.86522e-04,
     x 8.06038e-04, 8.30285e-04, 8.37763e-04, 8.03863e-04, 7.33526e-04,
     x 7.42588e-04, 6.31046e-04, 8.16153e-04, 8.95391e-04, 8.61330e-04,
     x 8.38726e-04, 8.16761e-04, 8.16118e-04, 6.37058e-04, 6.30868e-04,
     x 7.26410e-04, 7.03464e-04, 5.93454e-04, 6.01985e-04, 6.51157e-04,
     x 6.68569e-04, 6.56297e-04, 6.58732e-04, 5.99721e-04, 5.34301e-04,
     x 5.33271e-04, 5.57992e-04, 5.70096e-04, 5.59932e-04, 5.32110e-04,
     x 5.64713e-04, 6.25026e-04, 6.38973e-04, 6.05323e-04, 7.17460e-04,
     x 6.19407e-04, 5.90228e-04, 5.43682e-04, 5.38446e-04, 6.56146e-04,
     x 6.09081e-04, 6.04737e-04, 6.45526e-04, 6.46978e-04, 5.89738e-04,
     x 5.63852e-04, 6.18018e-04, 5.71768e-04, 5.75433e-04, 6.05766e-04,
     x 5.93065e-04, 5.31708e-04, 5.41187e-04, 5.76985e-04, 5.78176e-04,
     x 5.75339e-04, 6.85426e-04, 5.51038e-04, 6.02049e-04, 6.20406e-04,
     x 5.80169e-04, 5.36399e-04, 5.59608e-04, 5.46575e-04, 5.66979e-04/
      data c11121 /
     x 5.94982e-04, 6.18469e-04, 6.56281e-04, 8.22124e-04, 7.81716e-04,
     x 7.29616e-04, 7.14460e-04, 7.08969e-04, 6.53794e-04, 7.33138e-04,
     x 8.29513e-04, 8.99395e-04, 9.05526e-04, 7.98257e-04, 7.86935e-04,
     x 6.10797e-04, 4.63912e-04, 4.05675e-04, 3.66230e-04, 4.86472e-04,
     x 5.31818e-04, 5.15865e-04, 4.87344e-04, 4.99857e-04, 5.35479e-04,
     x 5.27561e-04, 4.99000e-04, 4.77056e-04, 4.74242e-04, 4.66595e-04,
     x 4.66325e-04, 4.94704e-04, 5.12842e-04, 5.01795e-04, 4.80789e-04,
     x 5.73709e-04, 5.65214e-04, 5.11321e-04, 4.55242e-04, 4.29330e-04,
     x 5.09792e-04, 4.70489e-04, 4.82859e-04, 4.99195e-04, 4.07724e-04,
     x 4.99951e-04, 4.55755e-04, 4.42528e-04, 4.19433e-04, 3.31325e-04,
     x 3.70517e-04, 3.77708e-04, 2.97923e-04, 2.27470e-04, 2.47389e-04,
     x 2.38324e-04, 2.56706e-04, 2.45046e-04, 2.62539e-04, 3.37054e-04,
     x 3.33930e-04, 3.01390e-04, 3.08028e-04, 3.41464e-04, 3.70574e-04,
     x 3.47893e-04, 3.28433e-04, 3.46976e-04, 3.60351e-04, 3.50559e-04,
     x 3.56070e-04, 3.62782e-04, 3.37330e-04, 3.33763e-04, 3.57046e-04,
     x 3.08784e-04, 2.93898e-04, 2.80842e-04, 2.54114e-04, 2.38198e-04/
      data c11201 /
     x 3.48753e-04, 2.97334e-04, 2.82929e-04, 2.94150e-04, 3.07875e-04,
     x 3.21129e-04, 3.38335e-04, 3.49826e-04, 3.47647e-04, 3.35438e-04,
     x 3.58145e-04, 3.72391e-04, 3.59372e-04, 3.64755e-04, 4.16867e-04,
     x 3.43614e-04, 3.34932e-04, 3.12782e-04, 3.28220e-04, 4.32595e-04,
     x 3.49513e-04, 3.51861e-04, 3.81166e-04, 3.91194e-04, 3.38944e-04,
     x 2.63445e-04, 2.49520e-04, 2.46184e-04, 2.33203e-04, 2.16315e-04,
     x 1.89536e-04, 1.95730e-04, 1.99664e-04, 1.77139e-04, 1.27969e-04,
     x 5.17216e-05, 7.60445e-05, 1.24418e-04, 1.30989e-04, 2.31539e-04,
     x 2.21334e-04, 2.08757e-04, 2.18351e-04, 2.46202e-04, 2.29824e-04,
     x 2.28909e-04, 2.88826e-04, 3.58039e-04, 2.60800e-04, 2.33025e-04,
     x 2.52667e-04, 2.61394e-04, 2.31384e-04, 2.29388e-04, 2.54701e-04,
     x 2.21158e-04, 1.61506e-04, 1.36752e-04, 1.69481e-04, 8.64539e-05,
     x 1.64407e-04, 3.65674e-04, 3.18233e-04, 4.00755e-04, 3.33375e-04,
     x 2.62930e-04, 2.87052e-04, 2.51395e-04, 2.85274e-04, 2.66915e-04,
     x 2.10866e-04, 1.89517e-04, 1.67378e-04, 2.79951e-04, 2.97224e-04,
     x 1.89222e-04, 3.33825e-04, 3.56386e-04, 3.89727e-04, 4.30407e-04/
      data c11281 /
     x 4.45922e-04, 4.23446e-04, 4.41347e-04, 4.06723e-04, 3.00181e-04,
     x 1.85243e-04, 3.13176e-04, 4.08991e-04, 4.24776e-04, 3.56412e-04,
     x 3.84760e-04, 2.30602e-04, 1.77702e-04, 2.62329e-04, 2.49442e-04,
     x 3.76212e-04, 3.69176e-04, 2.97681e-04, 2.71662e-04, 2.05694e-04,
     x 2.11418e-04, 2.25439e-04, 2.27013e-04, 2.47845e-04, 3.14603e-04,
     x 2.68802e-04, 2.04334e-04, 2.77399e-04, 2.68273e-04, 2.04991e-04,
     x 2.24441e-04, 3.55074e-04, 2.90135e-04, 3.35680e-04, 3.59358e-04,
     x 3.44716e-04, 3.24496e-04, 3.48146e-04, 3.49042e-04, 3.54848e-04,
     x 3.86418e-04, 3.59198e-04, 3.47608e-04, 3.20522e-04, 2.78401e-04,
     x 2.64579e-04, 2.23694e-04, 2.34370e-04, 2.52559e-04, 1.88475e-04,
     x 2.01258e-04, 1.63979e-04, 1.45384e-04, 1.91215e-04, 1.76958e-04,
     x 1.69167e-04, 1.71767e-04, 1.86595e-04, 2.14969e-04, 2.48345e-04,
     x 2.46691e-04, 2.25234e-04, 2.26755e-04, 1.64112e-04, 1.87750e-04,
     x 2.22984e-04, 2.00443e-04, 2.38863e-04, 2.77590e-04, 2.91953e-04,
     x 2.80611e-04, 3.08215e-04, 1.79095e-04, 1.46920e-04, 2.29177e-04,
     x 2.54685e-04, 2.68866e-04, 2.13346e-04, 1.20122e-04, 5.55240e-05/
      data c11361 /
     x 5.99017e-05, 1.07768e-04, 1.67810e-04, 2.06886e-04, 2.36232e-04,
     x 2.24598e-04, 2.30792e-04, 2.71274e-04, 1.29062e-04, 1.92624e-04,
     x 2.38438e-04, 1.98994e-04, 1.81687e-04, 2.55733e-04, 2.84379e-04,
     x 2.54459e-04, 2.30884e-04, 2.68873e-04, 3.07231e-04, 3.15063e-04,
     x 2.46725e-04, 2.60370e-04, 2.66391e-04, 2.50708e-04, 2.04296e-04,
     x 1.66011e-04, 1.19164e-04, 1.06700e-04, 1.77576e-04, 1.91741e-04,
     x 1.66618e-04, 1.49824e-04, 1.80699e-04, 2.20905e-04, 1.38754e-04,
     x 6.27971e-05, 7.52567e-05, 1.89995e-04, 1.72489e-04, 1.40424e-04,
     x 1.52384e-04, 1.63942e-04, 1.19901e-04, 1.49234e-04, 2.68313e-04,
     x 2.08815e-04, 1.17218e-04, 1.42235e-04, 2.71237e-04, 1.38192e-04,
     x 2.15643e-04, 2.84476e-04, 2.78117e-04, 2.19234e-04, 1.59128e-04,
     x 1.78819e-04, 2.67785e-04, 2.66786e-04, 2.58545e-04, 2.68476e-04,
     x 2.88542e-04, 2.59726e-04, 3.00936e-04, 3.11237e-04, 2.61275e-04,
     x 1.37136e-04, 2.76566e-04, 3.82888e-04, 3.97564e-04, 4.43655e-04,
     x 3.15415e-04, 2.60869e-04, 3.19171e-04, 3.34205e-04, 2.02914e-04,
     x 1.16223e-04, 1.14737e-04, 6.10978e-05,-8.03695e-06,-1.07062e-05/
      data c11441 /
     x 6.50664e-05, 1.12586e-04, 1.56727e-04, 1.57927e-04, 1.05762e-04,
     x 1.03646e-04, 1.72520e-04, 2.23668e-04, 2.12775e-04, 2.33525e-04,
     x 2.75558e-04, 2.34256e-04, 5.10062e-05, 1.76007e-04, 1.70850e-04,
     x 1.43266e-04, 1.89626e-04, 2.97283e-04, 3.02773e-04, 2.74401e-04,
     x 3.00754e-04, 3.66813e-04, 3.54383e-04, 2.90580e-04, 2.32206e-04,
     x 1.58405e-04, 1.54663e-04, 1.84598e-04, 1.26408e-04, 2.14481e-04,
     x 2.00791e-04, 1.05796e-04, 2.39794e-04, 1.66105e-04, 7.88615e-05,
     x 4.30615e-05, 7.37518e-05, 1.24926e-04, 1.38295e-04, 8.54356e-05,
     x 6.12641e-05, 6.54466e-05, 6.17727e-05, 1.30688e-05, 6.00462e-05,
     x 1.52612e-04, 2.11656e-04, 9.67692e-05, 8.67858e-05, 1.34888e-04,
     x 1.90899e-04, 1.03234e-04, 1.03837e-04, 1.49767e-04, 2.19058e-04,
     x 2.26549e-04, 2.11506e-04, 1.85238e-04, 1.53774e-04, 1.32313e-04,
     x 6.10658e-05, 2.37782e-05, 1.24450e-04, 1.87610e-04, 1.44775e-04,
     x 5.60937e-05, 6.64032e-05, 1.28073e-04, 1.77512e-04, 1.84684e-04,
     x 5.73677e-05, 5.29679e-05, 9.95510e-05, 1.61423e-04, 3.19036e-04,
     x 3.17383e-04, 2.36505e-04, 1.80844e-04, 1.63722e-04, 1.21478e-04/
      data c11521 /
     x 6.85823e-05, 7.42058e-05, 1.14838e-04, 1.21131e-04, 8.01009e-05,
     x 1.52058e-04, 2.18368e-04, 2.53416e-04, 2.27116e-04, 1.25336e-04,
     x 6.26421e-05, 5.32471e-05, 1.34705e-04, 2.07005e-05,-5.18630e-05,
     x-3.25696e-05,-8.06171e-05,-1.09430e-04,-1.05637e-04,-4.96066e-05,
     x-7.76138e-05,-4.85930e-05, 3.65111e-06,-2.86933e-05,-4.61366e-05,
     x-4.88820e-05,-3.08816e-05, 8.43778e-05, 1.40484e-04, 1.31125e-04,
     x 3.55198e-05, 8.47412e-05, 1.23408e-04, 1.36799e-04, 1.21147e-04,
     x 1.25585e-04, 1.32337e-04, 1.34092e-04, 1.26652e-04, 1.12131e-04,
     x 1.00927e-04, 1.13828e-04, 1.06053e-04, 9.43643e-05, 8.33628e-05,
     x 8.65842e-05, 7.59315e-05, 8.28623e-05, 1.39681e-04, 1.80492e-04,
     x 1.65779e-04, 1.03843e-04, 3.10284e-05, 1.94408e-05, 4.57525e-05,
     x 1.02436e-04, 1.39750e-04, 1.43342e-04, 1.11999e-04, 2.94197e-05,
     x 2.76980e-05, 5.51685e-05, 9.39909e-05, 1.16108e-04, 7.72703e-05,
     x 4.37409e-05, 1.13925e-04, 8.18872e-05, 2.87657e-05,-2.41413e-05,
     x 1.24699e-05, 2.19589e-05,-5.88247e-06,-9.66151e-05,-2.06255e-05,
     x-1.83148e-06,-5.63625e-05,-8.65590e-05,-8.26020e-05,-5.06239e-05/
      data c11601 /
     x 1.28065e-05,-1.34669e-05, 1.59701e-05, 9.44755e-05, 1.63032e-05,
     x 2.51304e-05, 7.38226e-05, 1.28405e-04, 1.17413e-04, 9.92387e-05,
     x 9.51533e-05, 2.17008e-04, 2.25854e-04, 1.90448e-04, 1.77207e-04,
     x 1.80844e-04, 1.53501e-04, 9.80430e-05, 1.27404e-04, 1.16465e-04,
     x 9.98611e-05, 1.25556e-04, 1.73627e-04, 1.12347e-04,-7.73523e-05,
     x 5.66599e-05, 5.36347e-05, 1.20227e-06, 6.96325e-05, 4.79010e-05,
     x-1.09886e-05,-9.16457e-05,-7.09170e-05,-5.31410e-05,-2.68376e-05,
     x 6.32641e-05, 8.06052e-06,-4.99262e-05,-2.56644e-05,-8.76854e-05,
     x-8.21360e-05,-5.02403e-06, 4.66629e-05, 6.93127e-05, 5.53828e-05,
     x-2.32399e-05,-2.07514e-05,-7.33240e-05,-2.10483e-04,-1.53757e-04,
     x-7.13861e-05,-1.07356e-05,-1.26578e-04,-7.48854e-05, 3.25418e-06,
     x 2.97068e-05, 3.35685e-05, 3.15022e-05, 2.68904e-05, 3.87401e-05,
     x 5.12522e-05, 5.12172e-05, 1.05053e-05, 1.65321e-05, 3.47537e-05,
     x 5.62503e-05, 4.18666e-05, 3.13970e-05, 3.11750e-05, 7.21547e-05,
     x 2.55262e-05,-2.76061e-05, 5.43449e-06,-5.20575e-05,-1.08627e-04,
     x-1.40475e-04,-1.59926e-04,-1.32237e-04,-8.15458e-05,-1.31738e-04/
      data c11681 /
     x-1.64036e-04,-1.69351e-04,-1.24797e-04,-1.61950e-04,-2.01904e-04,
     x-2.22995e-04,-1.87647e-04,-1.70817e-04,-1.64583e-04,-1.12811e-04,
     x-8.38306e-05,-8.62707e-05,-1.54362e-04,-1.98090e-04,-2.12920e-04,
     x-1.89358e-04,-2.02988e-04,-1.72791e-04,-1.02863e-04,-1.09877e-04,
     x-1.04257e-04,-8.20734e-05,-2.18346e-05,-2.94593e-05,-4.18226e-05,
     x-1.86891e-05,-6.14620e-05,-3.21912e-05, 1.00844e-04, 6.92419e-05,
     x 3.16713e-05, 5.62042e-07, 5.18900e-05, 7.48835e-05, 8.03381e-05,
     x 7.24685e-05, 9.55588e-05, 9.22801e-05, 2.87159e-05, 2.26234e-05,
     x 2.62790e-05, 3.58332e-05, 6.23297e-05, 5.01998e-05, 1.81446e-05,
     x 3.33564e-05, 3.97765e-06,-2.60624e-05, 7.01802e-06,-4.16797e-05,
     x-8.70108e-05,-8.22182e-05,-6.64886e-05,-7.88704e-05,-1.28305e-04,
     x-1.29990e-04,-1.12646e-04,-8.68394e-05,-1.29584e-04,-1.44352e-04,
     x-1.42082e-04,-1.33790e-04,-1.27963e-04,-1.21233e-04,-1.09965e-04,
     x-1.02233e-04,-1.03804e-04,-1.19503e-04,-7.74707e-05,-4.66805e-05,
     x-3.52201e-05,-4.07406e-05,-4.66887e-05,-5.05962e-05,-3.30333e-05,
     x-3.47981e-05,-3.60962e-05, 1.44242e-05, 4.10478e-05, 3.68984e-05/
      data c11761 /
     x-2.81300e-05, 2.83171e-05, 7.48062e-05, 4.29333e-05, 8.50076e-06,
     x 4.98135e-06, 4.44854e-05, 2.51860e-05, 3.12189e-05, 6.39424e-05,
     x 7.20715e-05, 9.89688e-05, 1.33768e-04, 1.07781e-04, 9.76731e-05,
     x 9.21479e-05, 6.72624e-05, 5.41295e-05, 4.89022e-05, 5.28039e-05,
     x-4.48737e-06,-5.15409e-05,-3.57396e-05,-1.94752e-05,-2.09521e-05,
     x-5.13096e-05,-2.62781e-05,-2.75451e-05,-6.98423e-05,-1.25462e-04,
     x-1.68362e-04,-1.97456e-04,-1.90669e-04,-2.06890e-04,-2.36699e-04,
     x-1.97732e-04,-1.76504e-04,-1.67505e-04,-1.60694e-04,-1.85851e-04,
     x-2.01567e-04,-9.82507e-05,-1.33338e-04,-1.95199e-04,-1.40781e-04,
     x-8.90988e-05,-3.63239e-05, 2.16510e-05,-1.56807e-05,-4.21285e-05,
     x 5.50505e-06, 6.78937e-07, 3.12346e-06, 3.64202e-05, 3.50651e-05,
     x 6.20423e-05, 1.38667e-04, 7.74738e-05, 6.77036e-05, 1.38367e-04,
     x 1.17359e-04, 1.06637e-04, 1.12404e-04, 9.78586e-05, 1.03178e-04,
     x 1.28717e-04, 1.56642e-04, 1.62544e-04, 1.50109e-04, 1.43214e-04,
     x 1.33651e-04, 1.24352e-04, 1.41420e-04, 1.36340e-04, 1.18769e-04,
     x 1.31656e-04, 8.81533e-05, 1.55214e-05,-3.68736e-07,-1.76213e-05/
      data c11841 /
     x-2.85341e-05, 4.65155e-06, 5.41350e-06,-7.01247e-06, 6.57918e-06,
     x-2.45784e-05,-6.89104e-05,-6.90953e-05,-6.23937e-05,-6.72978e-05,
     x-1.39547e-04,-1.44228e-04,-1.42543e-04,-2.31080e-04,-2.12756e-04,
     x-1.62089e-04,-1.66063e-04,-1.61872e-04,-1.59764e-04,-1.80217e-04,
     x-1.38355e-04,-8.45661e-05,-7.58308e-05,-4.65144e-05,-2.76855e-05,
     x-7.48714e-05,-8.28561e-05,-6.45277e-05,-7.08509e-06,-1.05566e-05,
     x-1.96352e-05, 3.55561e-05, 2.24676e-05,-1.25648e-05,-1.87661e-05,
     x 6.99061e-06, 2.33676e-05,-5.25111e-05,-3.86758e-05, 1.03585e-06,
     x-1.65901e-05,-1.04855e-05, 5.03694e-06, 1.25937e-05,-8.31340e-06,
     x-4.37906e-05,-7.91444e-05,-4.62167e-05, 5.14238e-06,-4.52863e-05,
     x-5.86455e-05,-4.98093e-05,-3.03495e-05,-5.09377e-05,-8.88116e-05,
     x-6.21360e-05,-7.38148e-05,-1.07502e-04,-7.55276e-05,-6.39257e-05,
     x-6.86921e-05,-8.05504e-05,-9.24178e-05,-1.03991e-04,-1.00468e-04,
     x-6.71447e-05,-3.84897e-06,-5.99067e-06,-2.21894e-05,-5.21766e-05,
     x-3.93796e-05,-4.06712e-05,-6.21649e-05,-1.13073e-04,-1.20560e-04,
     x-5.92397e-05, 5.24432e-05, 9.41628e-05,-3.47458e-07, 5.33267e-05/
      data c11921 /
     x 8.92961e-05, 2.75694e-05,-7.48460e-06,-2.15504e-05, 1.05501e-06,
     x 6.30910e-06, 5.94620e-07,-2.45194e-05,-1.59657e-05, 7.93610e-07,
     x-1.05319e-05,-2.36584e-05,-3.95700e-05,-6.57225e-05,-5.23797e-05,
     x-1.82588e-05,-1.43240e-05,-3.29989e-05,-6.48909e-05,-2.41326e-05,
     x-1.89195e-05,-4.64607e-05,-1.00739e-05,-1.35033e-05,-6.49945e-05,
     x-5.19986e-05,-6.68505e-05,-1.31530e-04,-1.45464e-04,-1.46815e-04,
     x-1.39684e-04,-1.23205e-04,-1.26738e-04,-1.93822e-04,-2.37508e-04,
     x-2.52917e-04,-1.91110e-04,-1.36217e-04,-9.41093e-05,-1.20601e-04,
     x-1.17295e-04,-9.57420e-05,-1.57227e-04,-1.62795e-04,-1.12201e-04,
     x-1.20419e-04,-1.10597e-04,-7.61223e-05,-6.27167e-05,-5.54733e-05,
     x-5.50437e-05,-5.14148e-05,-3.59591e-05, 1.09906e-05, 5.94396e-06,
     x-1.38597e-05,-8.80857e-06,-3.13101e-05,-6.31715e-05,-4.04264e-05,
     x-1.66405e-05, 7.94396e-06,-3.41772e-06,-4.03175e-05,-1.06888e-04,
     x-9.50526e-05,-7.46111e-05,-5.09617e-05,-6.70981e-05,-7.93529e-05,
     x-5.58423e-05,-1.01523e-04,-1.62269e-04,-1.69958e-04,-1.37786e-04,
     x-8.79862e-05,-1.46838e-04,-1.66938e-04,-1.51380e-04,-1.62184e-04/
      data c12001 /
     x-1.61105e-04,-1.42088e-04,-1.57033e-04,-1.65294e-04,-1.45079e-04,
     x-9.76982e-05,-6.09891e-05,-1.01719e-04,-1.03049e-04,-8.85546e-05,
     x-1.47754e-04,-1.44542e-04,-8.34620e-05,-8.99440e-05,-7.11901e-05,
     x-1.57480e-05,-8.81797e-05,-1.56314e-04,-1.65952e-04,-1.80986e-04,
     x-2.04610e-04,-2.58669e-04,-2.16016e-04,-1.21582e-04,-1.44929e-04,
     x-1.72886e-04,-2.05950e-04,-1.93829e-04,-1.67518e-04,-1.22969e-04,
     x-1.13060e-04,-1.14854e-04,-1.26198e-04,-1.24288e-04,-1.19519e-04,
     x-1.50456e-04,-1.53286e-04,-1.32231e-04,-7.42672e-05,-2.23129e-05,
     x 1.79115e-05, 1.42073e-05,-1.21676e-05,-7.56567e-05,-1.03423e-04,
     x-1.10373e-04,-8.77244e-05,-6.43485e-05,-4.05156e-05,-6.24405e-05,
     x-5.70375e-05,-2.36695e-06,-3.75929e-05,-7.97119e-05,-6.70419e-05,
     x-6.99475e-05,-8.19748e-05,-1.06895e-04,-1.31422e-04,-1.55438e-04,
     x-1.61937e-04,-1.62626e-04,-1.54977e-04,-1.77814e-04,-2.00386e-04,
     x-1.87407e-04,-2.07243e-04,-2.44672e-04,-2.19014e-04,-2.13695e-04,
     x-2.32440e-04,-1.85194e-04,-1.51172e-04,-1.69834e-04,-1.73780e-04,
     x-1.75232e-04,-2.00698e-04,-1.82826e-04,-1.27786e-04,-1.33633e-04/
      data c12081 /
     x-1.21317e-04,-7.50390e-05,-1.06743e-04,-1.40805e-04,-1.06336e-04,
     x-9.46654e-05,-9.78182e-05,-1.19906e-04,-1.14160e-04,-7.28186e-05,
     x-1.07652e-04,-1.20978e-04,-3.79658e-05,-3.16113e-05,-6.02417e-05,
     x-7.51148e-05,-5.56145e-05,-6.77421e-06,-1.74321e-05,-4.67952e-05,
     x-1.05000e-04,-6.29932e-05,-4.74356e-06,-2.83397e-05,-4.65192e-05,
     x-6.04574e-05,-4.33970e-05,-3.18311e-05,-3.02321e-05,-4.49667e-05,
     x-6.85347e-05,-1.11375e-04,-1.16293e-04,-9.38757e-05,-1.38594e-04,
     x-1.60483e-04,-1.48344e-04,-1.33436e-04,-1.27387e-04,-1.59508e-04,
     x-1.74026e-04,-1.72170e-04,-1.49196e-04,-1.33233e-04,-1.22382e-04,
     x-1.78156e-04,-2.21349e-04,-2.41846e-04,-2.06549e-04,-1.68283e-04,
     x-1.89512e-04,-1.44523e-04,-4.67953e-05,-1.00334e-04,-1.23478e-04,
     x-8.14024e-05,-9.18016e-05,-1.17536e-04,-1.36160e-04,-1.38780e-04,
     x-1.27749e-04,-1.45598e-04,-1.55964e-04,-1.45120e-04,-1.25544e-04,
     x-1.05692e-04,-1.17639e-04,-1.24142e-04,-1.24749e-04,-1.63878e-04,
     x-1.97021e-04,-1.98617e-04,-2.69136e-04,-3.68357e-04,-2.33702e-04,
     x-1.61830e-04,-1.78578e-04,-2.01839e-04,-2.28731e-04,-2.63606e-04/
      data c12161 /
     x-2.44698e-04,-1.86451e-04,-2.20546e-04,-2.22752e-04,-1.55169e-04,
     x-1.25100e-04,-1.09794e-04,-9.59016e-05,-1.03857e-04,-1.35573e-04,
     x-1.73780e-04,-1.82457e-04,-9.39821e-05,-1.18245e-04,-2.11563e-04,
     x-1.37392e-04,-9.28173e-05,-9.71073e-05,-9.72535e-05,-9.39557e-05,
     x-7.50117e-05,-6.70754e-05,-7.01186e-05,-5.76151e-05,-5.18785e-05,
     x-7.14209e-05,-7.01682e-05,-5.61614e-05,-8.92769e-05,-1.06238e-04,
     x-9.70294e-05,-6.70229e-05,-4.69214e-05,-1.53105e-04,-2.02326e-04,
     x-1.90395e-04,-2.04367e-04,-2.16787e-04,-2.08725e-04,-1.78119e-04,
     x-1.31043e-04,-1.32204e-04,-1.51522e-04,-2.05143e-04,-1.77144e-04,
     x-1.16130e-04,-1.44440e-04,-1.66010e-04,-1.78206e-04,-1.61163e-04,
     x-1.46351e-04,-1.96722e-04,-2.27027e-04,-2.37243e-04,-2.25235e-04,
     x-1.99552e-04,-1.40238e-04,-1.26311e-04,-1.42746e-04,-1.19028e-04,
     x-1.18750e-04,-1.72076e-04,-1.72120e-04,-1.48285e-04,-1.85116e-04,
     x-1.98602e-04,-1.74016e-04,-1.37913e-04,-1.01221e-04,-9.69581e-05,
     x-1.08794e-04,-1.39433e-04,-1.38575e-04,-1.32088e-04,-1.37431e-04,
     x-1.30033e-04,-1.10829e-04,-1.35604e-04,-1.66515e-04,-1.98167e-04/
      data c12241 /
     x-1.97716e-04,-1.74019e-04,-1.64719e-04,-1.64779e-04,-1.85725e-04,
     x-2.28526e-04,-2.84329e-04,-1.82449e-04,-1.30747e-04,-1.93620e-04,
     x-2.28529e-04,-2.47361e-04,-1.90001e-04,-1.66278e-04,-2.02540e-04,
     x-2.31811e-04,-2.53772e-04,-2.08629e-04,-1.85021e-04,-1.93989e-04,
     x-2.16568e-04,-2.38288e-04,-1.94453e-04,-1.87154e-04,-2.30493e-04,
     x-2.34696e-04,-2.30351e-04,-2.60562e-04,-2.86427e-04,-3.06699e-04,
     x-2.79131e-04,-2.49392e-04,-3.03389e-04,-3.10346e-04,-2.61782e-04,
     x-2.30905e-04,-2.11669e-04,-2.37680e-04,-2.38194e-04,-2.10955e-04/
      end
c=======================================================================
      block data bo3hh2
c>    block data
c
c     ratio (c2/c0)
c     data from bass 1985
c
c     now includes molina & molina at 273k with the temperature
c     dependence determined from the 195k harvard measurements,
c     employing the bass algorithm (co(1+c1*t+c2*t2); this is
c     only for the wavelength range from .34 to .35 microns;
c     otherwise, the bass data alone have been employed between
c     .34 and .245 microns.
c
c     new t-dependent x-sections between .345 and .36 microns
c     have now been added, based on work by cacciani, disarra
c     and fiocco, university of rome, 1987.  quadratic temp
c     has been derived, as above.
c
c     agreement amongst the four data sets is reasonable (<10%)
c     and often excellent (0-3%)
c
      common /o3hh2/  v1c,v2c,dvc,
     x           o32001(88),c20086(80),c20166(80),c20246(65),c20311(16),
     x           c20327(80),c20407(1),
     x           c20001(80),c20081(80),c20161(80),c20241(80),c20321(80),
     x           c20401(80),c20481(80),c20561(80),c20641(80),c20721(80),
     x           c20801(80),c20881(80),c20961(80),c21041(80),c21121(80),
     x           c21201(80),c21281(80),c21361(80),c21441(80),c21521(80),
     x           c21601(80),c21681(80),c21761(80),c21841(80),c21921(80),
     x           c22001(80),c22081(80),c22161(80),c22241(40)
c
c     data v1c /29405./, v2c /40800./ ,dvc /5./, nc /2280/   bass
      data v1c /27370./, v2c /40800./ ,dvc /5./
c
      data o32001/88*1.0e-5/

      data c20086/
     x 1.29359e-05, 1.55806e-05, 2.00719e-05, 2.64912e-05, 3.48207e-05,
     x 4.36986e-05, 5.31318e-05, 6.13173e-05, 6.89465e-05, 7.56793e-05,
     x 8.26345e-05, 8.90916e-05, 9.38759e-05, 9.22998e-05, 9.03184e-05,
     x 8.65369e-05, 8.58531e-05, 8.55635e-05, 8.40418e-05, 8.11983e-05,
     x 7.58246e-05, 7.29282e-05, 7.32629e-05, 7.04060e-05, 6.71451e-05,
     x 6.56515e-05, 6.68943e-05, 6.32785e-05, 5.88386e-05, 5.70860e-05,
     x 5.64435e-05, 5.49441e-05, 5.70845e-05, 5.89357e-05, 6.14433e-05,
     x 5.91790e-05, 5.31727e-05, 5.14007e-05, 4.74318e-05, 4.35356e-05,
     x 3.93903e-05, 3.70963e-05, 3.63867e-05, 4.05296e-05, 4.48891e-05,
     x 5.37190e-05, 5.70440e-05, 4.60408e-05, 5.25778e-05, 6.81728e-05,
     x 7.27275e-05, 6.81353e-05, 6.48386e-05, 5.46521e-05, 4.93098e-05,
     x 5.04438e-05, 5.30309e-05, 5.28788e-05, 5.47387e-05, 4.52523e-05,
     x 5.29451e-05, 7.42215e-05, 1.08971e-04, 1.40085e-04, 1.46553e-04,
     x 1.43526e-04, 1.39051e-04, 1.40983e-04, 1.45564e-04, 1.55589e-04,
     x 1.66142e-04, 1.82840e-04, 2.06486e-04, 2.24339e-04, 2.29268e-04,
     x 2.13109e-04, 2.00305e-04, 1.99955e-04, 2.18566e-04, 2.24182e-04/
      data c20166/
     x 2.33505e-04, 2.31824e-04, 2.22666e-04, 2.23905e-04, 2.38131e-04,
     x 2.54322e-04, 2.69548e-04, 2.62953e-04, 2.67609e-04, 2.70567e-04,
     x 2.70689e-04, 2.68251e-04, 2.66029e-04, 2.60053e-04, 2.61689e-04,
     x 2.56582e-04, 2.43655e-04, 2.38792e-04, 2.45309e-04, 2.31061e-04,
     x 2.22837e-04, 2.16440e-04, 2.19032e-04, 1.85634e-04, 1.74638e-04,
     x 1.51767e-04, 1.38480e-04, 1.32506e-04, 1.28317e-04, 1.26855e-04,
     x 1.27123e-04, 1.24040e-04, 1.19202e-04, 1.28649e-04, 1.36271e-04,
     x 1.42080e-04, 1.47804e-04, 1.39534e-04, 1.27284e-04, 1.09554e-04,
     x 8.69470e-05, 6.72096e-05, 5.23407e-05, 5.12433e-05, 5.15794e-05,
     x 4.94683e-05, 4.95809e-05, 4.07499e-05, 3.14984e-05, 1.46457e-05,
     x 6.98660e-06, 1.85313e-05, 5.48879e-05, 1.09447e-04, 1.52536e-04,
     x 1.78778e-04, 1.91128e-04, 1.99161e-04, 2.02937e-04, 1.95527e-04,
     x 1.92214e-04, 1.83376e-04, 1.81710e-04, 1.82283e-04, 1.75182e-04,
     x 1.72406e-04, 1.68170e-04, 1.67400e-04, 1.69469e-04, 1.69092e-04,
     x 1.65985e-04, 1.66912e-04, 1.74226e-04, 1.85036e-04, 1.85517e-04,
     x 1.85805e-04, 1.73809e-04, 1.67628e-04, 1.57690e-04, 1.54952e-04/
      data c20246/
     x 1.53707e-04, 1.57710e-04, 1.58175e-04, 1.67253e-04, 1.82079e-04,
     x 1.91285e-04, 1.96564e-04, 2.03822e-04, 1.93736e-04, 1.82924e-04,
     x 1.73610e-04, 1.69904e-04, 1.66725e-04, 1.63747e-04, 1.63129e-04,
     x 1.62435e-04, 1.67218e-04, 1.69507e-04, 1.70744e-04, 1.65839e-04,
     x 1.72077e-04, 1.67734e-04, 1.51487e-04, 1.43770e-04, 1.37435e-04,
     x 1.25172e-04, 1.12395e-04, 1.07991e-04, 1.00345e-04, 9.36611e-05,
     x 9.59763e-05, 9.26600e-05, 1.00120e-04, 1.04746e-04, 1.10222e-04,
     x 1.03308e-04, 8.97457e-05, 7.91634e-05, 7.50275e-05, 8.30832e-05,
     x 1.01191e-04, 1.21560e-04, 1.34840e-04, 1.38712e-04, 1.41746e-04,
     x 1.39578e-04, 1.37052e-04, 1.33850e-04, 1.26641e-04, 1.21342e-04,
     x 1.17669e-04, 1.25973e-04, 1.33623e-04, 1.33839e-04, 1.24427e-04,
     x 1.02462e-04, 8.76101e-05, 8.27912e-05, 8.29040e-05, 7.78590e-05,
     x 7.39042e-05, 6.45765e-05, 5.70151e-05, 5.11846e-05, 4.83163e-05/
      data c20311/
     x                                                     5.4470e-05,
     x 5.3312e-05,  5.3135e-05,  5.3619e-05,  5.3686e-05,  5.2308e-05,
     x 5.0441e-05,  4.8402e-05,  4.7476e-05,  4.6215e-05,  4.4507e-05,
     x 4.3830e-05,  4.0508e-05,  3.8931e-05,  3.5525e-05,  3.4722e-05/
      data c20327/
     x 3.2743e-05,  2.8456e-05,  2.8318e-05,  2.8132e-05,  2.6221e-05,
     x 2.5673e-05,  2.5521e-05,  2.4588e-05,  2.4093e-05,  2.2787e-05,
     x 2.1241e-05,  1.8553e-05,  1.5871e-05,  1.3462e-05,  1.2553e-05,
     x 1.6276e-05,  2.8296e-05,  3.8817e-05,  4.2733e-05,  4.2429e-05,
     x 4.0954e-05,  3.9868e-05,  3.7669e-05,  3.6312e-05,  3.5535e-05,
     x 3.5895e-05,  3.6349e-05,  3.9033e-05,  4.4512e-05,  5.0066e-05,
     x 5.4572e-05,  5.6710e-05,  5.6615e-05,  5.7520e-05,  5.8034e-05,
     x 5.7927e-05,  5.6027e-05,  5.5242e-05,  5.4974e-05,  5.2927e-05,
     x 5.1638e-05,  5.2027e-05,  5.1420e-05,  5.1618e-05,  5.0253e-05,
     x 5.0509e-05,  4.9376e-05,  5.0135e-05,  4.9191e-05,  4.9210e-05,
     x 4.8216e-05,  4.7487e-05,  4.5749e-05,  4.5884e-05,  4.3852e-05,
     x 4.3824e-05,  4.2612e-05,  4.0349e-05,  4.0177e-05,  3.7474e-05,
     x 3.8120e-05,  3.6915e-05,  3.5823e-05,  3.5186e-05,  3.3638e-05,
     x 3.3451e-05,  3.2428e-05,  3.2349e-05,  3.0183e-05,  2.8436e-05,
     x 2.6440e-05,  2.3597e-05,  2.1875e-05,  1.8164e-05,  1.6430e-05,
     x 1.3159e-05,  9.2907e-06,  7.4243e-06,  6.0469e-06,  5.4951e-06/
      data c20407/
     x 8.7642e-06/
      data c20001 /
     x 2.16295e-05, 1.69111e-05, 5.39633e-05, 1.01866e-04, 8.28657e-05,
     x 9.16593e-05, 8.88666e-05, 1.37764e-04, 1.44322e-04, 1.20659e-04,
     x 1.10332e-04, 1.01317e-04, 9.09964e-05, 1.17148e-04, 1.18000e-04,
     x 7.21801e-05, 1.10550e-04, 1.32672e-04, 1.02474e-04, 1.10434e-04,
     x 1.38759e-04, 8.92135e-05, 9.18239e-05, 9.08256e-05, 7.02969e-05,
     x 1.12827e-04, 8.25561e-05, 1.39555e-04, 6.72239e-05, 7.82804e-05,
     x 8.56258e-05, 8.61068e-05, 7.16732e-05, 6.25720e-05, 5.23957e-05,
     x 3.78801e-05, 4.37281e-05, 4.99821e-05, 5.96976e-05, 7.19070e-05,
     x 3.89579e-05, 5.30171e-05, 3.92507e-05, 4.93901e-05, 4.53047e-05,
     x 4.89955e-05, 4.61649e-05, 3.75742e-05, 3.14124e-05, 2.37893e-05,
     x 3.34899e-06, 3.08080e-05, 5.35883e-05, 3.39838e-05, 7.02334e-05,
     x 7.24784e-05, 7.46533e-05, 6.22257e-05, 6.38945e-05, 6.73423e-05,
     x 4.51321e-05, 5.91854e-05, 5.51601e-05, 4.41923e-05, 3.59217e-05,
     x 4.08520e-05, 6.15981e-05, 6.66549e-05, 8.26031e-05, 1.13556e-04,
     x 8.72988e-05, 9.71052e-05, 9.31839e-05, 8.73745e-05, 8.61717e-05,
     x 6.05645e-05, 6.51131e-05, 6.93393e-05, 7.01096e-05, 6.43565e-05/
      data c20081 /
     x 7.36929e-05, 7.66881e-05, 7.60815e-05, 7.13570e-05, 8.40487e-05,
     x 8.51489e-05, 7.54168e-05, 6.72694e-05, 4.75508e-05, 3.59379e-05,
     x 4.24698e-05, 4.17850e-05, 4.56047e-05, 4.12779e-05, 4.55933e-05,
     x 4.27941e-05, 4.42230e-05, 3.68525e-05, 3.83392e-05, 3.83722e-05,
     x 4.64904e-05, 3.33878e-05, 3.53027e-05, 3.54694e-05, 2.36233e-05,
     x 2.99641e-05, 2.56097e-05, 2.14134e-05, 2.74403e-05, 2.83896e-05,
     x 3.17082e-05, 1.75526e-05, 2.80382e-05, 3.18009e-05, 4.08715e-05,
     x 4.77807e-05, 5.00609e-05, 5.12459e-05, 4.44062e-05, 4.74942e-05,
     x 4.99882e-05, 5.18837e-05, 5.03246e-05, 5.55168e-05, 5.35853e-05,
     x 4.81834e-05, 6.66231e-05, 5.26670e-05, 6.84700e-05, 6.53412e-05,
     x 5.71740e-05, 4.61076e-05, 3.90239e-05, 4.72924e-05, 6.32194e-05,
     x 5.20868e-05, 4.81039e-05, 3.71748e-05, 4.37492e-05, 3.63959e-05,
     x 3.79823e-05, 3.72225e-05, 3.02360e-05, 3.22961e-05, 3.43398e-05,
     x 3.57176e-05, 2.65446e-05, 3.29388e-05, 1.65455e-05, 2.66173e-05,
     x 1.74277e-05, 1.74324e-05, 1.27879e-05, 1.46247e-05, 1.92378e-05,
     x 2.20049e-05, 1.44790e-05, 2.49244e-05, 2.29209e-05, 1.76192e-05/
      data c20161 /
     x 1.84528e-05, 2.54350e-05, 3.33972e-05, 3.69190e-05, 2.92139e-05,
     x 2.47666e-05, 2.86764e-05, 1.48163e-05, 1.80461e-05, 2.84545e-05,
     x 2.41064e-05, 2.85721e-05, 3.31996e-05, 3.75973e-05, 3.73874e-05,
     x 4.69293e-05, 5.12665e-05, 5.35607e-05, 4.64577e-05, 3.59887e-05,
     x 3.39168e-05, 3.89746e-05, 3.12196e-05, 3.70907e-05, 3.95172e-05,
     x 4.61642e-05, 4.26029e-05, 4.17856e-05, 4.51437e-05, 4.04189e-05,
     x 4.19251e-05, 4.53977e-05, 3.69860e-05, 4.20904e-05, 3.69735e-05,
     x 3.57898e-05, 3.47729e-05, 3.14280e-05, 2.71197e-05, 3.34380e-05,
     x 2.69843e-05, 2.88036e-05, 2.51912e-05, 2.45699e-05, 2.23184e-05,
     x 2.50563e-05, 2.24493e-05, 1.77101e-05, 1.64763e-05, 1.34978e-05,
     x 1.57081e-05, 1.45966e-05, 1.02722e-05, 2.07177e-05, 1.47662e-05,
     x 1.50721e-05, 1.24431e-05, 1.51572e-05, 1.92210e-05, 2.06047e-05,
     x 2.02921e-05, 3.22062e-05, 2.37112e-05, 1.94803e-05, 2.40726e-05,
     x 2.11531e-05, 1.89158e-05, 2.46957e-05, 2.63175e-05, 2.57747e-05,
     x 2.22047e-05, 2.52755e-05, 2.80848e-05, 3.75157e-05, 4.09915e-05,
     x 4.04853e-05, 3.21661e-05, 3.15652e-05, 3.21576e-05, 3.67060e-05/
      data c20241 /
     x 3.13071e-05, 2.84939e-05, 2.71169e-05, 2.99559e-05, 2.94631e-05,
     x 3.26716e-05, 2.99028e-05, 2.60045e-05, 3.15375e-05, 3.12895e-05,
     x 2.77767e-05, 2.43976e-05, 2.10764e-05, 2.22725e-05, 2.04581e-05,
     x 1.63509e-05, 1.60028e-05, 1.60294e-05, 1.62366e-05, 1.89293e-05,
     x 1.79675e-05, 1.89259e-05, 1.68300e-05, 1.99460e-05, 2.42370e-05,
     x 2.64738e-05, 1.93137e-05, 1.39460e-05, 1.32222e-05, 1.38752e-05,
     x 1.62071e-05, 1.79652e-05, 1.63772e-05, 1.56251e-05, 1.81918e-05,
     x 1.46111e-05, 2.92174e-05, 2.94263e-05, 2.46180e-05, 2.93333e-05,
     x 3.13657e-05, 2.97686e-05, 2.78387e-05, 2.40924e-05, 2.93369e-05,
     x 2.93747e-05, 2.77665e-05, 3.00814e-05, 3.01068e-05, 3.62275e-05,
     x 3.56613e-05, 3.66913e-05, 3.56280e-05, 3.52856e-05, 3.63928e-05,
     x 2.96738e-05, 2.90314e-05, 2.62972e-05, 2.15250e-05, 1.97910e-05,
     x 2.02314e-05, 2.20209e-05, 2.05131e-05, 2.12017e-05, 1.96689e-05,
     x 1.61907e-05, 1.57662e-05, 1.58239e-05, 1.54650e-05, 1.46376e-05,
     x 1.32891e-05, 1.30511e-05, 1.17635e-05, 1.28585e-05, 1.12887e-05,
     x 1.32627e-05, 1.31833e-05, 1.68679e-05, 1.98092e-05, 2.70744e-05/
      data c20321 /
     x 2.22033e-05, 1.63430e-05, 1.61104e-05, 1.50865e-05, 1.54382e-05,
     x 1.55654e-05, 1.67924e-05, 1.89185e-05, 1.96791e-05, 2.14894e-05,
     x 2.76137e-05, 2.67339e-05, 2.79423e-05, 2.54664e-05, 3.10707e-05,
     x 2.72745e-05, 2.60940e-05, 2.47736e-05, 2.21105e-05, 2.20357e-05,
     x 2.26499e-05, 2.34137e-05, 2.29537e-05, 2.36157e-05, 2.48244e-05,
     x 2.26667e-05, 2.07781e-05, 2.11702e-05, 1.91214e-05, 1.62172e-05,
     x 1.61285e-05, 1.63952e-05, 1.68156e-05, 1.61236e-05, 1.56611e-05,
     x 1.47697e-05, 1.50856e-05, 1.44169e-05, 1.63816e-05, 1.74283e-05,
     x 1.49853e-05, 1.62444e-05, 1.70007e-05, 1.60371e-05, 1.22713e-05,
     x 1.45518e-05, 1.35051e-05, 1.40787e-05,-1.54925e-05,-2.15204e-05,
     x-4.04516e-06, 2.22439e-05, 3.21262e-05, 3.83792e-05, 4.44462e-05,
     x 4.44192e-05, 2.77328e-05, 4.10549e-06, 4.48758e-06,-1.27771e-05,
     x-2.17204e-05,-1.23979e-05,-1.04928e-05, 7.43085e-06, 1.55350e-05,
     x 3.15204e-05, 3.17601e-05, 2.93677e-05, 3.42485e-05, 3.87087e-05,
     x 3.61242e-05, 2.62406e-05, 3.31686e-05, 3.54314e-05, 2.50625e-05,
     x 2.60444e-05, 4.10729e-05, 3.47247e-05, 3.31716e-05, 3.34778e-05/
      data c20401 /
     x 4.03029e-05, 4.09241e-05, 3.96717e-05, 3.53410e-05, 2.81048e-05,
     x 1.98891e-05, 1.92314e-05, 2.82525e-05, 3.76641e-05, 4.34135e-05,
     x 4.24570e-05, 3.98429e-05, 3.29417e-05, 2.16679e-05, 8.88085e-06,
     x-5.05319e-06,-8.14815e-06,-5.01930e-06, 7.13565e-06, 2.00949e-05,
     x 2.65988e-05, 2.77656e-05, 2.09299e-05, 1.98968e-05, 2.04835e-05,
     x 1.75254e-05, 6.48674e-06, 3.14323e-06, 1.93242e-06, 3.86745e-06,
     x 1.39727e-05, 2.10731e-05, 2.66432e-05, 2.69551e-05, 2.57453e-05,
     x 2.72834e-05, 2.58860e-05, 2.51266e-05, 1.76048e-05, 2.03072e-05,
     x 2.61960e-05, 2.36230e-05, 1.81172e-05, 1.33972e-05, 1.60959e-05,
     x 1.61081e-05, 2.34099e-05, 2.64979e-05, 2.36894e-05, 2.13665e-05,
     x 2.16774e-05, 2.52566e-05, 1.99785e-05, 1.40414e-05, 1.39948e-05,
     x 1.32637e-05, 7.24742e-06, 1.11395e-06,-1.27323e-06, 4.56637e-07,
     x 6.93250e-06, 5.07198e-06, 7.90632e-06, 9.08149e-06, 1.03602e-05,
     x 2.17425e-05, 2.71741e-05, 2.16875e-05, 1.95088e-05, 1.56568e-05,
     x 8.41152e-06, 1.26749e-05, 1.17673e-05, 9.96037e-06, 1.21982e-05,
     x 1.31854e-05, 1.50216e-05, 1.72214e-05, 2.02773e-05, 2.09625e-05/
      data c20481 /
     x 1.66656e-05, 1.45666e-05, 1.66608e-05, 2.04989e-05, 2.21395e-05,
     x 2.35993e-05, 2.69390e-05, 2.13921e-05, 1.72643e-05, 1.70995e-05,
     x 1.78241e-05, 1.85308e-05, 1.80360e-05, 1.48619e-05, 1.90369e-05,
     x 1.51089e-05, 1.22705e-05, 1.62608e-05, 1.41637e-05, 1.23786e-05,
     x 7.02677e-06, 8.89811e-06, 1.07379e-05, 1.23677e-05, 1.48196e-05,
     x 2.05770e-05, 1.70994e-05, 1.00072e-05, 1.76119e-05, 1.41779e-05,
     x 1.34358e-05, 1.58674e-05, 1.65837e-05, 1.69569e-05, 1.40381e-05,
     x 1.46118e-05, 1.30556e-05, 1.97204e-05, 1.97488e-05, 1.64524e-05,
     x 1.73764e-05, 1.66355e-05, 1.64419e-05, 1.65486e-05, 1.21523e-05,
     x 1.51513e-05, 1.60354e-05, 1.38528e-05, 1.45538e-05, 1.71702e-05,
     x 1.56336e-05, 1.31279e-05, 1.47346e-05, 1.70719e-05, 1.75588e-05,
     x 1.55187e-05, 1.29598e-05, 1.38463e-05, 1.35382e-05, 1.16062e-05,
     x 1.37014e-05, 1.34487e-05, 1.15536e-05, 1.33597e-05, 9.24478e-06,
     x 7.28477e-06, 1.40321e-05, 1.31518e-05, 1.03118e-05, 8.59764e-06,
     x 1.57138e-05, 1.20792e-05, 1.49440e-05, 1.34375e-05, 1.54686e-05,
     x 1.65346e-05, 1.33823e-05, 1.37238e-05, 1.36128e-05, 1.46206e-05/
      data c20561 /
     x 1.40777e-05, 1.59980e-05, 1.30180e-05, 1.01390e-05, 1.12366e-05,
     x 9.86099e-06, 1.10702e-05, 1.26783e-05, 9.51072e-06, 8.07299e-06,
     x 1.22955e-05, 1.53506e-05, 1.29711e-05, 9.78759e-06, 1.28800e-05,
     x 1.39702e-05, 1.64832e-05, 1.06473e-05, 1.15419e-05, 1.63795e-05,
     x 1.69837e-05, 1.72726e-05, 1.77231e-05, 1.62337e-05, 1.20881e-05,
     x 1.13210e-05, 1.20531e-05, 1.31374e-05, 1.22259e-05, 1.27802e-05,
     x 1.38962e-05, 8.87355e-06, 9.42264e-06, 1.02075e-05, 7.91816e-06,
     x 9.66835e-06, 1.24921e-05, 8.43227e-06, 1.10637e-05, 1.03958e-05,
     x 9.40996e-06, 1.22922e-05, 1.21088e-05, 1.30116e-05, 1.18776e-05,
     x 1.42245e-05, 1.34745e-05, 1.11165e-05, 1.29914e-05, 1.29801e-05,
     x 1.10895e-05, 1.12331e-05, 9.03490e-06, 9.33726e-06, 9.63923e-06,
     x 1.11299e-05, 9.53481e-06, 1.21708e-05, 1.11951e-05, 7.22558e-06,
     x 6.66928e-06, 1.08926e-05, 1.07870e-05, 9.23485e-06, 8.50452e-06,
     x 9.41914e-06, 8.74027e-06, 8.93322e-06, 9.79061e-06, 8.26490e-06,
     x 8.37630e-06, 1.17064e-05, 1.10176e-05, 1.11587e-05, 9.45563e-06,
     x 1.18352e-05, 7.79327e-06, 9.22766e-06, 1.01868e-05, 8.23925e-06/
      data c20641 /
     x 9.23706e-06, 1.04428e-05, 8.80392e-06, 9.37098e-06, 7.43126e-06,
     x 7.01424e-06, 9.29360e-06, 8.97171e-06, 9.31718e-06, 9.87118e-06,
     x 8.11419e-06, 8.77416e-06, 9.96927e-06, 8.87533e-06, 9.33163e-06,
     x 7.41505e-06, 9.39988e-06, 1.17932e-05, 1.03287e-05, 9.17415e-06,
     x 8.43035e-06, 8.00040e-06, 8.33346e-06, 7.66787e-06, 7.18411e-06,
     x 1.06236e-05, 1.05559e-05, 8.49187e-06, 9.22472e-06, 8.16512e-06,
     x 8.35687e-06, 1.06325e-05, 9.80273e-06, 9.01599e-06, 9.20499e-06,
     x 9.98417e-06, 9.23191e-06, 6.98769e-06, 5.17748e-06, 4.57130e-06,
     x 8.18492e-06, 9.98095e-06, 7.52148e-06, 1.33038e-05, 8.17630e-06,
     x 1.02454e-05, 9.62706e-06, 9.44304e-06, 8.86704e-06, 8.88116e-06,
     x 8.79062e-06, 8.20042e-06, 8.55789e-06, 9.26249e-06, 1.00467e-05,
     x 7.96012e-06, 9.08773e-06, 1.01481e-05, 8.84360e-06, 7.94928e-06,
     x 6.68425e-06, 8.56576e-06, 1.05282e-05, 1.10647e-05, 9.91625e-06,
     x 7.95356e-06, 8.66443e-06, 9.13551e-06, 1.04870e-05, 9.79244e-06,
     x 1.26214e-05, 8.42148e-06, 8.13468e-06, 1.11338e-05, 1.06780e-05,
     x 8.54578e-06, 7.82119e-06, 8.33258e-06, 8.23644e-06, 5.95583e-06/
      data c20721 /
     x 5.85592e-06, 4.05898e-06, 6.39260e-06, 8.43280e-06, 8.76251e-06,
     x 6.70423e-06, 6.81368e-06, 7.43506e-06, 7.14376e-06, 6.51065e-06,
     x 5.65633e-06, 5.42394e-06, 7.10817e-06, 4.78831e-06, 6.29380e-06,
     x 4.87344e-06, 6.81764e-06, 6.51611e-06, 5.70526e-06, 6.50590e-06,
     x 6.61568e-06, 5.39248e-06, 6.32002e-06, 7.98976e-06, 7.73795e-06,
     x 4.85788e-06, 5.83443e-06, 6.11694e-06, 5.40408e-06, 5.00946e-06,
     x 5.62153e-06, 6.30263e-06, 6.05764e-06, 5.53274e-06, 5.80664e-06,
     x 5.18684e-06, 6.85555e-06, 6.22889e-06, 6.06959e-06, 6.49228e-06,
     x 5.64064e-06, 4.92690e-06, 5.77661e-06, 7.18450e-06, 7.38658e-06,
     x 6.77379e-06, 5.74668e-06, 6.68355e-06, 6.13655e-06, 6.43266e-06,
     x 7.08896e-06, 7.71187e-06, 7.37273e-06, 6.75882e-06, 6.39307e-06,
     x 4.59520e-06, 5.10323e-06, 5.80178e-06, 6.88172e-06, 6.68825e-06,
     x 7.50416e-06, 6.14975e-06, 6.51422e-06, 7.74942e-06, 8.11492e-06,
     x 1.19607e-05, 7.92722e-06, 4.47848e-06, 6.02524e-06, 9.74067e-06,
     x 1.02429e-05, 8.60819e-06, 8.57044e-06, 1.09196e-05, 1.02048e-05,
     x 3.86222e-06, 9.26104e-06, 7.33341e-06, 9.08181e-06, 1.05569e-05/
      data c20801 /
     x 1.06776e-05, 1.10247e-05, 1.04520e-05, 8.78328e-06, 7.60679e-06,
     x 7.27896e-06, 9.72776e-06, 5.16039e-06, 1.03134e-05, 1.09088e-05,
     x 8.12575e-06, 7.61685e-06, 8.16346e-06, 5.91269e-06, 3.61448e-06,
     x 8.74336e-06, 1.03990e-05, 6.25691e-06, 7.04541e-06, 7.94348e-06,
     x 8.39807e-06, 8.67342e-06, 8.32173e-06, 7.56015e-06, 8.31782e-06,
     x 6.36556e-06, 6.99328e-06, 6.24490e-06, 6.73080e-06, 6.95852e-06,
     x 7.55508e-06, 7.74168e-06, 7.90414e-06, 8.94934e-06, 7.99809e-06,
     x 6.12528e-06, 9.04115e-06, 7.14535e-06, 5.88625e-06, 6.43941e-06,
     x 7.11566e-06, 7.47425e-06, 8.23805e-06, 6.19919e-06, 7.31614e-06,
     x 8.24852e-06, 6.82172e-06, 5.45362e-06, 6.66115e-06, 8.44300e-06,
     x 8.07530e-06, 7.22735e-06, 5.85614e-06, 5.13900e-06, 6.03215e-06,
     x 6.59491e-06, 4.81592e-06, 4.48587e-06, 7.11525e-06, 8.36201e-06,
     x 7.11669e-06, 2.80033e-06, 6.50756e-06, 9.43974e-06, 5.22402e-06,
     x 3.82334e-06, 7.29963e-06, 8.62313e-06, 7.42018e-06, 4.56506e-06,
     x 5.29972e-06, 5.62787e-06, 4.63852e-06, 5.18329e-06, 7.01884e-06,
     x 7.24888e-06, 5.18157e-06, 5.40219e-06, 5.92412e-06, 4.97977e-06/
      data c20881 /
     x 5.29040e-06, 5.33812e-06, 4.76620e-06, 4.65759e-06, 5.10546e-06,
     x 6.49525e-06, 4.43416e-06, 5.30223e-06, 3.27044e-06, 2.55324e-06,
     x 4.85017e-06, 7.46556e-06, 8.04448e-06, 5.14009e-06, 6.09755e-06,
     x 5.38381e-06, 6.41959e-06, 6.59233e-06, 4.83160e-06, 3.81289e-06,
     x 5.37013e-06, 5.69212e-06, 5.54983e-06, 5.73495e-06, 4.00639e-06,
     x 2.33817e-06, 2.55751e-06, 3.29627e-06, 3.59845e-06, 6.20623e-06,
     x 4.47088e-06, 3.49267e-06, 3.09273e-06, 3.32506e-06, 4.83353e-06,
     x 6.39001e-06, 3.78074e-06, 4.07848e-06, 4.01811e-06, 3.19767e-06,
     x 3.34053e-06, 4.34246e-06, 3.68003e-06, 3.01090e-06, 3.98545e-06,
     x 2.72338e-06, 1.90024e-06, 2.77553e-06, 3.73381e-06, 2.58685e-06,
     x 1.70987e-06,-5.48480e-07, 1.64591e-06, 2.43481e-06, 2.52116e-06,
     x 2.19316e-06, 1.32392e-06, 1.75370e-06, 2.65409e-07, 2.22278e-06,
     x 2.53079e-06, 2.87260e-06, 1.87600e-06,-3.84453e-07, 1.80836e-06,
     x 9.28123e-07, 1.94986e-06, 2.40483e-06, 2.79865e-06, 2.86361e-06,
     x 2.63868e-06, 3.34704e-06, 3.32132e-06, 2.58463e-06, 2.45684e-06,
     x 3.35043e-06, 3.19848e-06, 1.73037e-06, 2.98206e-06, 2.77491e-06/
      data c20961 /
     x 6.51674e-07, 2.52219e-06, 2.97136e-06, 1.96700e-06, 2.29350e-06,
     x 3.01956e-06, 3.20811e-06, 1.30467e-06, 1.68172e-06, 2.56264e-06,
     x 2.46167e-06, 1.78221e-06, 2.31647e-06, 2.69480e-06, 2.63619e-06,
     x 1.81319e-06, 1.83448e-06, 2.23432e-06, 8.14045e-07, 8.75863e-07,
     x 1.61350e-06, 1.59796e-06, 2.08419e-06, 1.89665e-06, 6.93584e-07,
     x 1.09880e-06, 3.79031e-07,-3.36470e-07, 1.04326e-06, 1.06497e-06,
     x 2.15108e-07, 3.28774e-07,-5.17613e-07, 1.27762e-06, 8.22924e-07,
     x 4.92835e-07, 2.24698e-08,-1.99111e-07, 1.30262e-06,-3.81299e-07,
     x 9.55084e-07, 2.17641e-07,-6.03874e-08, 8.44121e-07, 1.72391e-06,
     x 1.66921e-06, 2.19855e-06, 1.17655e-06, 1.79637e-06, 3.31670e-06,
     x 3.40206e-06, 6.05670e-07, 2.08299e-06, 2.10121e-06, 1.68598e-06,
     x 2.21155e-06, 2.43221e-06, 5.81282e-08, 1.62613e-06,-5.49850e-07,
     x 2.14143e-07, 1.21751e-06, 2.30470e-06, 4.27911e-06, 2.96622e-06,
     x 8.67534e-07, 9.12041e-07, 2.48797e-06, 9.43519e-07,-3.60949e-06,
     x 2.01928e-06, 1.88873e-06, 8.06749e-07, 7.33519e-07, 1.17440e-06,
     x 1.69744e-06, 3.64492e-06, 3.11556e-06, 8.89471e-07, 1.93064e-06/
      data c21041 /
     x 3.02787e-06, 1.92575e-06, 1.73720e-06,-1.32700e-07, 1.41743e-06,
     x 2.24632e-06, 2.47945e-06, 2.05151e-06,-9.56031e-07, 2.57317e-07,
     x 3.00980e-06, 3.07981e-06, 2.78202e-06, 3.02555e-06, 5.48784e-09,
     x 2.37693e-06, 2.90011e-06, 2.93608e-06, 2.14837e-06, 6.55832e-07,
     x 3.41155e-07,-2.13884e-06, 2.52553e-06, 4.27109e-06, 3.33766e-06,
     x 3.07708e-06, 2.66405e-06, 3.22850e-06,-5.78879e-07,-6.06194e-07,
     x 1.72864e-06, 1.57072e-06,-3.39701e-07, 7.21540e-08, 1.67012e-06,
     x 2.48568e-06, 2.70214e-06, 3.62383e-06, 2.20408e-06, 1.19395e-06,
     x 1.53825e-06, 2.37511e-06, 2.66754e-06, 1.77020e-06, 5.40420e-07,
     x 2.01156e-06, 3.27498e-06, 3.04720e-06, 1.96213e-06, 3.71633e-06,
     x 2.07886e-06, 1.60069e-06, 5.33370e-07, 1.33966e-07, 2.16073e-06,
     x 8.81457e-07, 1.12880e-06, 2.40509e-06, 2.94252e-06, 2.22899e-06,
     x 1.80941e-06, 2.68577e-06, 2.44584e-06, 2.51720e-06, 2.64857e-06,
     x 2.24182e-06, 1.62007e-06, 2.60421e-06, 3.09782e-06, 3.11099e-06,
     x 3.81513e-06, 6.91606e-06, 3.28767e-06, 3.44175e-06, 4.16771e-06,
     x 3.75452e-06, 2.21050e-06, 2.99939e-06, 2.86993e-06, 2.47080e-06/
      data c21121 /
     x 2.33607e-06, 2.68568e-06, 3.39344e-06, 6.09518e-06, 5.10422e-06,
     x 4.04027e-06, 4.01363e-06, 4.53142e-06, 2.94424e-06, 4.76694e-06,
     x 6.44206e-06, 7.86435e-06, 8.55564e-06, 6.00857e-06, 5.48073e-06,
     x 1.56287e-06,-1.16619e-06,-1.85215e-06,-3.04762e-06,-3.45420e-07,
     x 2.48111e-07,-1.39302e-07,-6.27593e-07,-5.26792e-07, 4.81454e-08,
     x-3.08631e-08,-1.02976e-06,-1.54919e-06,-9.34044e-07,-1.02507e-06,
     x-1.39794e-06,-1.15709e-06,-1.04875e-06,-1.64379e-06,-2.97514e-06,
     x-3.22236e-07,-1.18978e-06,-2.85325e-06,-3.93143e-06,-4.15349e-06,
     x-2.33228e-06,-3.27125e-06,-2.44987e-06,-1.44460e-06,-3.59727e-06,
     x-7.18516e-07,-1.53237e-06,-1.53526e-06,-1.56450e-06,-2.91088e-06,
     x-8.52134e-07,-1.44575e-07,-1.50350e-06,-2.92806e-06,-2.47710e-06,
     x-9.71202e-07,-9.82754e-07,-1.09924e-06,-6.08199e-07, 3.62885e-07,
     x-6.67372e-07,-1.00033e-06,-1.12001e-06,-1.06624e-06,-9.23789e-07,
     x-9.83788e-07,-2.11656e-06,-2.45001e-06,-2.75874e-06,-3.36003e-06,
     x-3.38364e-06,-2.63747e-06,-3.11047e-06,-3.75258e-06,-3.83211e-06,
     x-3.52833e-06,-3.48464e-06,-3.77021e-06,-4.26887e-06,-4.23917e-06/
      data c21201 /
     x-1.42438e-06,-2.48477e-06,-2.84719e-06,-2.70247e-06,-2.50588e-06,
     x-2.22900e-06,-1.78393e-06,-1.76826e-06,-2.16396e-06,-2.67543e-06,
     x-2.23706e-06,-2.31793e-06,-2.87590e-06,-3.07803e-06,-2.50493e-06,
     x-4.54223e-06,-5.15511e-06,-5.39690e-06,-4.89633e-06,-3.33710e-06,
     x-4.56583e-06,-4.78877e-06,-3.93508e-06,-3.29027e-06,-4.95668e-06,
     x-6.01801e-06,-5.76016e-06,-5.34657e-06,-5.29080e-06,-5.57133e-06,
     x-5.73135e-06,-5.39374e-06,-5.09808e-06,-5.12874e-06,-5.20269e-06,
     x-7.30702e-06,-7.04220e-06,-5.96514e-06,-5.74802e-06,-4.53961e-06,
     x-4.42127e-06,-4.63922e-06,-4.80622e-06,-4.69659e-06,-5.96786e-06,
     x-6.29800e-06,-4.75452e-06,-2.85907e-06,-5.33662e-06,-5.31681e-06,
     x-5.04646e-06,-5.21729e-06,-5.93409e-06,-5.73462e-06,-5.44926e-06,
     x-6.43325e-06,-7.74451e-06,-7.83147e-06,-5.51568e-06,-7.37048e-06,
     x-4.25726e-06, 2.32917e-06,-5.61131e-07, 2.05234e-06, 3.74631e-07,
     x-7.66493e-07, 1.42689e-06,-7.79683e-07, 9.06809e-07, 5.13642e-07,
     x-1.52504e-06,-2.12058e-06,-2.50316e-06, 1.03637e-08, 5.60002e-07,
     x-1.48075e-06, 1.94155e-06, 1.91846e-06, 2.78507e-06, 3.90146e-06/
      data c21281 /
     x 3.61409e-06, 3.23677e-06, 4.00022e-06, 3.19157e-06, 4.03034e-07,
     x-2.03929e-06, 1.23366e-06, 3.28589e-06, 3.94168e-06, 3.94672e-06,
     x 3.84619e-06, 2.30400e-07,-2.07799e-06,-1.75115e-06,-5.71958e-07,
     x 2.33425e-06, 2.01664e-06, 6.05673e-07, 9.57363e-07,-8.89924e-07,
     x-4.71331e-07, 2.82826e-07, 5.10859e-07, 3.63512e-07, 9.86288e-07,
     x-4.86309e-07,-2.23163e-06,-1.23370e-06,-2.43131e-07,-2.11498e-06,
     x-1.56756e-06, 2.70905e-06, 1.87606e-08, 7.83721e-08, 1.58444e-06,
     x 2.88574e-06, 1.40306e-06, 2.40883e-06, 2.84063e-06, 3.13820e-06,
     x 3.71016e-06, 3.12975e-06, 3.21981e-06, 2.56191e-06, 1.04624e-06,
     x 1.87464e-07, 7.25329e-07, 1.03650e-06, 7.23663e-07,-4.18739e-07,
     x 9.95744e-07,-1.80878e-07,-1.04044e-06, 3.86965e-07,-9.36186e-07,
     x-4.02271e-07,-2.00231e-07,-5.94965e-07, 4.94038e-07, 3.34585e-07,
     x 4.82255e-07, 1.12599e-06, 2.11763e-06, 2.66807e-07, 2.29324e-07,
     x 7.07005e-07, 3.41907e-07,-1.17115e-07, 9.03089e-07, 1.76844e-06,
     x 1.87134e-06, 2.64057e-06, 4.00395e-07,-4.19679e-07, 6.30769e-07,
     x 1.02725e-06, 1.05876e-06,-4.08660e-07,-2.32668e-06,-2.73468e-06/
      data c21361 /
     x-2.40600e-06,-1.81203e-06,-7.96431e-07, 7.40789e-07, 2.73188e-07,
     x 1.68367e-07,-1.27227e-07,-1.05041e-06,-3.51726e-06,-1.64956e-06,
     x-5.63840e-07,-1.61242e-06,-1.33264e-06, 1.56604e-06, 2.35083e-06,
     x 9.26708e-07, 5.41983e-07, 3.54277e-07, 8.53743e-07, 1.54196e-06,
     x 1.19902e-06, 1.10552e-06, 1.63179e-06, 1.96366e-06, 7.82848e-07,
     x-3.34741e-08,-7.90842e-07,-6.45131e-07, 1.36158e-06, 1.62453e-06,
     x 6.68965e-07,-4.86203e-08, 6.83561e-07, 1.89652e-06,-2.80988e-07,
     x-2.30536e-06,-1.90777e-06, 1.31617e-06, 1.27309e-06, 5.90825e-07,
     x 5.65686e-07, 1.23631e-07,-1.70279e-06,-1.60768e-06, 9.69543e-07,
     x 1.01108e-07,-2.02473e-06,-1.75146e-06, 6.33201e-07,-3.59110e-06,
     x-9.71706e-07, 9.16822e-07, 1.40681e-07,-7.16745e-07,-2.11376e-06,
     x-1.00951e-06, 2.12465e-06, 1.06982e-06, 1.44032e-06, 1.49692e-06,
     x 1.07277e-06, 1.37006e-06, 1.66932e-06, 1.75820e-06, 1.41859e-06,
     x-5.84947e-08, 2.17349e-06, 4.27053e-06, 5.27286e-06, 5.87085e-06,
     x 2.42692e-06, 2.39305e-06, 6.19573e-06, 5.12518e-06, 1.27171e-06,
     x-6.81963e-07, 4.16199e-08,-1.36608e-06,-2.53272e-06,-2.37700e-06/
      data c21441 /
     x-7.96719e-07, 3.85367e-07,-1.08393e-07,-9.04587e-07,-1.54917e-06,
     x-3.11945e-06,-5.58484e-07, 1.61347e-06, 1.11736e-06, 2.11889e-06,
     x 2.43534e-06, 1.46709e-06,-1.05429e-06, 1.09978e-06, 7.22493e-07,
     x 8.53307e-08, 1.22733e-06, 2.99380e-06, 3.62416e-06, 3.81404e-06,
     x 4.46735e-06, 4.70753e-06, 4.54494e-06, 3.83002e-06, 2.28067e-06,
     x 2.03102e-06, 2.43844e-06, 2.93132e-06, 2.17555e-06, 3.92919e-06,
     x 3.53089e-06, 1.61388e-06, 5.09498e-06, 3.40067e-06, 1.58876e-06,
     x 1.17367e-06, 1.13344e-06, 1.17798e-06, 1.10976e-06, 7.90635e-07,
     x-4.15989e-07,-1.00581e-06,-9.60236e-07,-1.79111e-07,-5.70733e-07,
     x 1.49766e-06, 3.44374e-06, 6.45914e-07, 1.00532e-06, 2.01068e-06,
     x 2.59092e-06, 9.35770e-08, 6.00121e-07, 1.54409e-06, 2.03537e-06,
     x 8.10358e-07, 1.34126e-06, 1.88873e-06, 1.43283e-06,-2.05029e-07,
     x-1.09782e-06,-6.56149e-07, 2.01650e-06, 1.84770e-06, 4.39586e-08,
     x-2.03588e-06,-1.46366e-06,-3.45189e-07, 4.02577e-07, 3.10362e-07,
     x-2.16073e-06,-1.91861e-06,-2.90520e-07, 2.03692e-06, 3.47996e-06,
     x 4.21761e-06, 3.89000e-06, 1.86138e-06, 1.56143e-06, 4.88964e-07/
      data c21521 /
     x-9.28184e-07,-4.34315e-07, 8.74954e-07, 1.58417e-06, 1.36880e-06,
     x 2.65016e-06, 4.62623e-06, 5.81990e-06, 4.72139e-06, 1.95905e-06,
     x 1.54151e-06, 2.95768e-06, 4.71536e-06, 2.62359e-06, 9.11513e-07,
     x 4.75677e-07,-1.53801e-06,-2.32382e-06,-2.25220e-06,-1.46641e-06,
     x-2.23014e-06,-2.12604e-06,-1.66259e-06,-2.48856e-06,-2.38895e-06,
     x-2.18158e-06,-1.95841e-06, 4.43899e-07, 1.08517e-06, 1.66370e-07,
     x-2.42342e-06,-7.19331e-07, 3.19532e-07, 3.58690e-07,-2.01979e-07,
     x 5.07242e-07, 1.10562e-06, 1.00419e-06, 1.22379e-06, 7.05180e-07,
     x 1.42283e-07, 8.61092e-07, 8.95236e-07, 1.18043e-07,-1.23589e-06,
     x-6.16316e-07,-1.18947e-06,-1.45838e-06,-1.47522e-09, 1.33867e-06,
     x 9.18310e-07,-8.98949e-07,-2.27314e-06,-1.71510e-06,-7.16704e-07,
     x 8.60666e-09, 5.68015e-07, 1.31219e-06, 1.75478e-06, 5.11790e-07,
     x 3.35270e-07, 5.39243e-07, 9.08467e-07, 1.39382e-06, 1.08806e-06,
     x 1.18589e-06, 3.58461e-06, 2.78668e-06, 1.25964e-06,-2.72255e-07,
     x 1.72305e-06, 1.82937e-06, 7.46252e-07,-1.10555e-06, 2.24967e-07,
     x 6.45674e-07,-1.87591e-07,-8.84068e-07,-1.75433e-06,-2.17670e-06/
      data c21601 /
     x-1.37112e-06,-2.31722e-06,-2.23860e-06,-1.16796e-06,-2.23765e-06,
     x-1.86406e-06,-1.03517e-06,-5.90824e-07,-6.57710e-07,-7.00941e-07,
     x-4.46064e-07, 1.77205e-06, 2.45066e-06, 2.39371e-06, 2.30736e-06,
     x 2.35355e-06, 1.85070e-06, 9.62711e-07, 2.59644e-06, 2.05304e-06,
     x 9.70090e-07, 1.50942e-06, 3.79439e-06, 2.94597e-06,-1.91789e-06,
     x 6.44324e-08,-3.92094e-07,-1.55398e-06, 4.46701e-08,-4.78760e-07,
     x-1.70061e-06,-3.17252e-06,-2.93173e-06,-2.01455e-06,-7.76298e-07,
     x-2.74577e-07,-1.39907e-06,-2.16470e-06,-1.26010e-06,-2.76845e-06,
     x-2.38226e-06,-5.49068e-08, 9.65258e-07, 1.08650e-06, 5.64738e-07,
     x-5.78379e-07,-5.68918e-07,-1.90177e-06,-5.08874e-06,-3.03648e-06,
     x-1.30527e-06,-4.87669e-07,-2.83326e-06,-1.97823e-06,-5.94313e-07,
     x-1.50961e-07,-1.15908e-06,-1.43260e-06,-9.29331e-07,-1.39459e-06,
     x-1.27237e-06,-1.50189e-06,-3.79292e-06,-3.92038e-06,-3.58490e-06,
     x-3.26439e-06,-2.42138e-06,-2.70516e-06,-3.58080e-06,-1.71822e-06,
     x-2.41567e-06,-3.50193e-06,-2.62394e-06,-3.08424e-06,-3.89604e-06,
     x-4.84127e-06,-4.41385e-06,-3.22673e-06,-1.80987e-06,-2.93027e-06/
      data c21681 /
     x-3.17366e-06,-2.79721e-06,-1.78848e-06,-2.80254e-06,-3.55572e-06,
     x-3.34632e-06,-2.83979e-06,-2.48022e-06,-2.15090e-06,-1.08311e-06,
     x-6.15216e-07,-7.13008e-07,-1.70841e-06,-2.96098e-06,-3.57134e-06,
     x-3.04405e-06,-3.35280e-06,-2.97780e-06,-1.97966e-06,-2.33197e-06,
     x-2.76708e-06,-2.70409e-06,-4.51094e-07,-1.43068e-06,-2.83719e-06,
     x-2.98921e-06,-4.14949e-06,-3.63780e-06,-8.10138e-07,-1.61597e-06,
     x-2.25394e-06,-2.58110e-06,-1.57781e-06,-1.71520e-06,-2.30016e-06,
     x-2.61268e-06,-1.96696e-06,-1.86744e-06,-3.15645e-06,-3.59354e-06,
     x-3.61015e-06,-3.21793e-06,-2.57436e-06,-2.74347e-06,-3.33319e-06,
     x-2.93400e-06,-3.25986e-06,-3.46384e-06,-2.22114e-06,-2.92650e-06,
     x-3.73666e-06,-3.70485e-06,-2.75963e-06,-2.40652e-06,-2.93107e-06,
     x-1.77517e-06,-1.57096e-06,-2.17533e-06,-2.80190e-06,-2.27942e-06,
     x-1.37371e-06,-1.65974e-06,-1.26079e-06,-8.08050e-07,-8.41278e-07,
     x-1.53860e-06,-1.66687e-06,-6.56592e-07,-3.05110e-08, 1.08623e-07,
     x-2.87222e-07,-2.63555e-07,-7.89575e-07,-1.56059e-06,-6.42174e-07,
     x-9.43333e-07,-1.38671e-06, 6.50443e-07, 1.35301e-06, 9.27981e-07/
      data c21761 /
     x-1.21705e-06,-9.63848e-08, 8.73593e-07,-3.47278e-08,-1.79042e-06,
     x-2.15544e-06,-4.48668e-07,-1.17414e-06,-1.35437e-06,-8.90688e-07,
     x-4.54757e-07, 2.41484e-09, 3.88010e-07,-1.85349e-08, 1.58011e-07,
     x 3.70566e-07,-7.30268e-07,-8.42354e-07,-4.13738e-07, 3.96796e-07,
     x-5.55763e-07,-1.26877e-06,-2.89854e-07, 5.78676e-07, 9.51356e-07,
     x 5.56912e-07, 1.05014e-06, 9.75896e-07, 5.91573e-08,-6.15073e-07,
     x-1.48803e-06,-2.53397e-06,-1.77027e-06,-2.08546e-06,-3.10452e-06,
     x-1.65227e-06,-1.15981e-06,-1.25849e-06,-9.65711e-07,-1.90319e-06,
     x-2.71831e-06,-5.71559e-08,-1.20368e-06,-3.16820e-06,-2.22766e-06,
     x-1.19828e-06,-2.82573e-07, 2.53850e-07,-9.10547e-07,-1.65529e-06,
     x-6.00138e-07,-4.98898e-07,-3.45799e-07, 2.25160e-07, 1.14332e-07,
     x 3.16082e-07, 1.12681e-06,-6.04876e-07,-7.24616e-07, 1.48177e-06,
     x 1.05680e-06, 5.91076e-07, 2.07187e-07, 3.82385e-07, 5.91560e-07,
     x 8.26519e-07, 1.22139e-06, 1.63501e-06, 2.06423e-06, 2.50038e-06,
     x 2.38037e-06, 1.91688e-06, 2.46702e-06, 2.45066e-06, 2.16732e-06,
     x 3.13517e-06, 2.68221e-06, 1.39877e-06, 8.58945e-07, 6.83181e-07/
      data c21841 /
     x 8.46816e-07, 1.73491e-06, 1.98732e-06, 1.94059e-06, 2.19284e-06,
     x 1.73215e-06, 1.06865e-06, 1.14117e-06, 1.43213e-06, 1.42275e-06,
     x-4.15449e-07,-2.39911e-07, 3.46498e-08,-2.75022e-06,-2.43736e-06,
     x-1.06489e-06,-7.81941e-07,-8.04801e-07,-1.04984e-06,-1.65734e-06,
     x-1.03167e-06,-3.18255e-08, 5.70283e-07, 6.19050e-07, 2.92257e-07,
     x-6.01436e-07,-7.04005e-07,-3.70875e-07, 4.12830e-07, 1.31319e-07,
     x-1.61570e-07, 9.76170e-07, 7.99907e-07, 1.41860e-07,-1.98022e-07,
     x 3.13766e-07, 7.43982e-07,-6.11287e-07,-5.21146e-07, 1.11156e-07,
     x 3.91719e-07, 5.45566e-07, 6.39059e-07, 7.29515e-07, 4.59167e-07,
     x 6.13179e-08,-3.48146e-08, 5.32046e-07, 1.19736e-06, 3.83982e-07,
     x 1.73267e-07, 3.54304e-07, 9.34657e-07, 5.53819e-07,-2.86678e-07,
     x 2.01853e-08,-1.56159e-07,-6.08130e-07,-2.14929e-07, 1.66317e-08,
     x 9.32462e-08,-4.83623e-07,-9.16323e-07,-1.22772e-06,-1.61586e-06,
     x-1.27409e-06,-1.98119e-07,-3.69182e-08,-1.41061e-07,-5.12562e-07,
     x-4.55495e-07,-8.12132e-07,-1.71772e-06,-2.70741e-06,-2.98751e-06,
     x-2.19520e-06, 3.01900e-07, 1.17806e-06,-1.23067e-06, 4.17086e-07/
      data c21921 /
     x 1.68113e-06, 4.81677e-07,-1.55187e-07,-3.35287e-07, 2.94916e-07,
     x 4.57124e-07, 3.38692e-07,-2.49203e-07,-3.62585e-07,-2.39653e-07,
     x 3.72675e-08,-7.79964e-09,-2.83285e-07,-9.74713e-07,-6.91171e-07,
     x 1.21925e-07, 3.39940e-07, 3.68441e-08,-5.82188e-07, 2.12605e-07,
     x 4.65144e-07, 2.17190e-07, 7.50119e-07, 8.62008e-07, 4.63016e-07,
     x 1.25620e-06, 1.04567e-06,-8.17037e-07,-1.20023e-06,-1.06224e-06,
     x-3.77100e-07,-1.28057e-07,-2.76183e-07,-1.24304e-06,-2.56776e-06,
     x-3.36699e-06,-1.49408e-06,-1.01189e-07, 7.41870e-07,-6.45425e-07,
     x-7.47111e-07, 4.79055e-10,-1.32339e-06,-1.86135e-06,-1.61074e-06,
     x-1.82039e-06,-1.68040e-06,-1.08025e-06,-8.61965e-07,-7.00131e-07,
     x-5.63105e-07,-8.09843e-07,-8.09221e-07, 1.69474e-07,-1.33941e-07,
     x-7.49558e-07,-5.19013e-07,-8.53534e-07,-1.33703e-06,-3.11161e-07,
     x 8.99037e-07, 2.25330e-06, 1.44822e-06, 3.07437e-07,-1.22366e-06,
     x-7.64217e-07, 2.13156e-08, 1.07909e-06, 6.10755e-07, 1.81483e-07,
     x 8.12405e-07,-9.13283e-08,-1.35885e-06,-1.58366e-06,-7.88594e-07,
     x 4.48283e-07,-1.23754e-06,-1.65105e-06,-8.93014e-07,-1.48622e-06/
      data c22001 /
     x-1.67948e-06,-1.24310e-06,-1.54411e-06,-1.65677e-06,-1.04998e-06,
     x-1.46985e-07, 4.61778e-07,-4.87832e-07,-4.89452e-07,-1.24840e-07,
     x-1.70101e-06,-1.66976e-06,-1.48528e-07,-1.12621e-07,-2.30607e-08,
     x 1.82301e-07,-8.58152e-07,-1.89794e-06,-2.46464e-06,-2.32745e-06,
     x-2.02112e-06,-2.07656e-06,-1.43824e-06,-5.16583e-07,-1.80702e-06,
     x-2.93490e-06,-3.89216e-06,-3.36211e-06,-2.41393e-06,-9.53406e-07,
     x-1.16269e-06,-1.66431e-06,-1.77150e-06,-1.82496e-06,-1.93095e-06,
     x-2.75759e-06,-2.83618e-06,-2.27908e-06,-6.33348e-07, 5.61257e-07,
     x 1.00142e-06, 7.73337e-07, 3.17721e-07,-3.69804e-07,-8.82058e-07,
     x-1.17364e-06,-4.53480e-07,-2.47824e-07,-4.79624e-07,-5.17032e-07,
     x-3.46498e-07, 1.42669e-07,-1.59168e-07,-5.06580e-07,-3.18573e-07,
     x-2.74092e-07,-2.68860e-07, 1.32811e-07,-2.35567e-09,-6.71971e-07,
     x-9.75302e-07,-8.70978e-07,-3.59071e-08,-3.01726e-07,-8.27641e-07,
     x-1.14899e-06,-1.50160e-06,-1.83660e-06,-1.26290e-06,-1.07659e-06,
     x-1.34878e-06,-5.24626e-07,-7.85094e-08,-8.79473e-07,-1.19291e-06,
     x-1.33298e-06,-1.59750e-06,-1.31836e-06,-5.73079e-07,-1.10349e-06/
      data c22081 /
     x-1.11807e-06,-1.99530e-07,-8.10496e-07,-1.42679e-06,-5.34617e-07,
     x-2.05001e-07,-2.51690e-07,-1.01740e-06,-1.02841e-06,-7.48750e-08,
     x-1.01770e-06,-1.50413e-06, 1.80898e-07, 3.63788e-07,-1.97900e-07,
     x-1.16721e-06,-1.05497e-06,-2.07218e-08,-1.90590e-07,-8.25501e-07,
     x-2.21142e-06,-1.19905e-06, 2.16271e-07,-2.52574e-07,-4.35837e-07,
     x-3.95272e-07, 5.97065e-08, 2.76639e-07, 9.22569e-08, 1.20142e-07,
     x-2.95030e-09,-1.08216e-06,-1.32386e-06,-9.62248e-07,-1.99430e-06,
     x-2.13890e-06,-9.56082e-07,-6.94022e-07,-7.75721e-07,-1.31048e-06,
     x-1.50080e-06,-1.35873e-06,-7.48378e-07,-4.83436e-07,-4.69624e-07,
     x-1.51156e-06,-2.48221e-06,-3.30134e-06,-2.79114e-06,-2.08976e-06,
     x-2.24768e-06,-1.06947e-06, 1.17462e-06,-2.51423e-07,-7.85729e-07,
     x 5.37467e-07,-9.39876e-08,-1.11303e-06,-7.46860e-07,-9.36220e-07,
     x-1.59880e-06,-1.61420e-06,-1.54368e-06,-1.41036e-06,-7.20350e-07,
     x 1.35544e-07, 3.14481e-07, 6.29265e-07, 1.09161e-06,-1.36044e-07,
     x-1.22932e-06,-1.29847e-06,-3.26429e-06,-6.01062e-06,-2.09945e-06,
     x 1.26878e-07,-2.88050e-08,-6.82802e-07,-1.39340e-06,-1.82986e-06/
      data c22161 /
     x-1.67208e-06,-1.07994e-06,-1.89195e-06,-2.10782e-06,-1.04519e-06,
     x-3.27672e-07, 1.95516e-07, 1.63838e-07,-2.29575e-07,-1.01609e-06,
     x-2.19286e-06,-2.71850e-06,-9.77485e-07,-1.48830e-06,-3.37826e-06,
     x-1.59130e-06,-5.74498e-07,-8.27962e-07,-9.92211e-07,-1.14422e-06,
     x-1.41420e-06,-1.11629e-06,-2.51575e-07, 1.60805e-07, 1.82934e-07,
     x-7.28868e-07,-2.57062e-07, 1.06520e-06, 4.16488e-07, 2.97049e-08,
     x 6.62797e-08, 8.29435e-07, 1.29657e-06,-2.27961e-06,-3.40386e-06,
     x-1.88594e-06,-2.29732e-06,-2.72594e-06,-2.09847e-06,-1.31771e-06,
     x-4.23693e-07,-4.96348e-07,-9.40209e-07,-2.08707e-06,-1.21368e-06,
     x 4.79409e-07,-1.12548e-08,-4.57316e-07,-8.40885e-07,-5.03210e-07,
     x-1.61036e-07,-1.05835e-06,-1.66417e-06,-1.97827e-06,-1.63737e-06,
     x-1.11711e-06,-3.16081e-07,-6.81746e-07,-1.82599e-06,-1.12895e-06,
     x-9.19712e-07,-1.91707e-06,-2.14767e-06,-2.03629e-06,-2.86441e-06,
     x-3.07735e-06,-2.28656e-06,-1.40256e-06,-5.50649e-07,-3.11627e-07,
     x-7.90261e-07,-2.10728e-06,-1.89739e-06,-1.53762e-06,-2.39947e-06,
     x-2.28765e-06,-1.27564e-06,-2.15154e-06,-3.17932e-06,-3.84234e-06/
      data c22241 /
     x-3.65102e-06,-2.84055e-06,-2.48744e-06,-2.27683e-06,-2.33087e-06,
     x-3.44460e-06,-5.19613e-06,-2.85882e-06,-1.39921e-06,-2.00579e-06,
     x-2.80593e-06,-3.65940e-06,-2.39526e-06,-1.70389e-06,-2.03532e-06,
     x-2.71522e-06,-3.42227e-06,-2.23606e-06,-1.77845e-06,-2.42071e-06,
     x-2.61515e-06,-2.56413e-06,-1.49601e-06,-1.23245e-06,-2.08440e-06,
     x-2.11121e-06,-1.93424e-06,-2.27439e-06,-2.58183e-06,-2.84705e-06,
     x-2.32183e-06,-1.80966e-06,-3.04089e-06,-3.14334e-06,-1.91331e-06,
     x-1.51037e-06,-1.43610e-06,-2.11316e-06,-2.45184e-06,-2.42262e-06/
      end
c=======================================================================
      block data o3uvfd
c>    block data
      common /o3uvf / v1o1,v2o1,dvo1,c02281(80),c02361(53)
c
c        ozone uv  visible absorption coefficients
c                     (cm-atm)-1
c     data derived from molina & molina, jgr,91,14501-14508,1986.
c     values between 245 and 185nm (40800 and 54054cm-1) used as
c     direct average with no temperature dependence.
c
c     o3 location  1    v =  40800  cm-1
c     o3 location  133  v =  54054  cm-1
c        dv = 100  cm-1
c
      data v1o1,v2o1,dvo1/ 40800.,54000.,100./
      data c02281/
     c 9.91204e+02, 9.76325e+02, 9.72050e+02, 9.51049e+02, 9.23530e+02,
     c 9.02306e+02, 8.90510e+02, 8.60115e+02, 8.39094e+02, 8.27926e+02,
     c 7.95525e+02, 7.73583e+02, 7.55018e+02, 7.31076e+02, 7.10415e+02,
     c 6.87747e+02, 6.66639e+02, 6.39484e+02, 6.27101e+02, 6.01019e+02,
     c 5.77594e+02, 5.60403e+02, 5.40837e+02, 5.21289e+02, 4.99329e+02,
     c 4.81742e+02, 4.61608e+02, 4.45707e+02, 4.28261e+02, 4.09672e+02,
     c 3.93701e+02, 3.77835e+02, 3.61440e+02, 3.45194e+02, 3.30219e+02,
     c 3.15347e+02, 3.01164e+02, 2.87788e+02, 2.74224e+02, 2.61339e+02,
     c 2.48868e+02, 2.36872e+02, 2.25747e+02, 2.14782e+02, 2.03997e+02,
     c 1.94281e+02, 1.84525e+02, 1.75275e+02, 1.67151e+02, 1.58813e+02,
     c 1.50725e+02, 1.43019e+02, 1.35825e+02, 1.28878e+02, 1.22084e+02,
     c 1.15515e+02, 1.09465e+02, 1.03841e+02, 9.83780e+01, 9.31932e+01,
     c 8.83466e+01, 8.38631e+01, 7.96631e+01, 7.54331e+01, 7.13805e+01,
     c 6.78474e+01, 6.44340e+01, 6.13104e+01, 5.81777e+01, 5.53766e+01,
     c 5.27036e+01, 5.03555e+01, 4.82633e+01, 4.61483e+01, 4.42014e+01,
     c 4.23517e+01, 4.07774e+01, 3.93060e+01, 3.80135e+01, 3.66348e+01/
      data c02361/
     c 3.53665e+01, 3.47884e+01, 3.39690e+01, 3.34288e+01, 3.29135e+01,
     c 3.23104e+01, 3.18875e+01, 3.16800e+01, 3.15925e+01, 3.12932e+01,
     c 3.12956e+01, 3.15522e+01, 3.14950e+01, 3.15924e+01, 3.19059e+01,
     c 3.23109e+01, 3.27873e+01, 3.33788e+01, 3.39804e+01, 3.44925e+01,
     c 3.50502e+01, 3.55853e+01, 3.59416e+01, 3.68933e+01, 3.78284e+01,
     c 3.86413e+01, 3.98049e+01, 4.04700e+01, 4.12958e+01, 4.23482e+01,
     c 4.31203e+01, 4.41885e+01, 4.52651e+01, 4.61492e+01, 4.70493e+01,
     c 4.80497e+01, 4.90242e+01, 4.99652e+01, 5.10316e+01, 5.21510e+01,
     c 5.32130e+01, 5.43073e+01, 5.56207e+01, 5.61756e+01, 5.66799e+01,
     c 5.85545e+01, 5.92409e+01, 5.96168e+01, 6.12497e+01, 6.20231e+01,
     c 6.24621e+01, 6.34160e+01, 6.43622e+01/
      end
c=======================================================================
      block data shumg
c>    block data
c
c     schumann-runge o2 band model - sample coding
c
       common /shur/ shn001(70),shn076(75),shn151(75),
     x  shn226(75),shn301(75),shn376(54),shdum(6)
       data shn001/
     x  -8.00000,  -8.00000,  -8.00000,  -6.30103,  -6.00000,
     x  -5.94896,  -5.94896,  -5.55139,  -5.17613,  -4.90612,
     x  -4.56059,  -4.30010,  -4.30739,  -4.34455,  -4.35231,
     x  -4.50777,  -4.41705,  -3.93569,  -3.70298,  -3.84254,
     x  -4.01007,  -4.13821,  -3.92122,  -3.55006,  -3.22681,
     x  -3.17363,  -3.55224,  -3.66208,  -3.32331,  -3.00804,
     x  -2.99732,  -3.30951,  -3.20867,  -2.69141,  -2.49670,
     x  -2.74355,  -2.69834,  -2.67293,  -2.67371,  -2.89603,
     x  -3.13808,  -3.45473,  -3.54812,  -3.00636,  -2.72446,
     x  -2.90208,  -2.93847,  -3.03693,  -3.15944,  -3.43764,
     x  -3.67262,  -3.53970,  -2.84182,  -2.51909,  -2.50557,
     x  -2.44459,  -2.72040,  -2.95979,  -3.02842,  -2.92391,
     x  -2.61329,  -2.24839,  -2.03988,  -1.98147,  -1.97078,
     x  -2.14548,  -2.51734,  -2.47024,  -2.02579,  -1.70360/
       data shn076/
     x  -1.64178,  -2.05789,  -2.41111,  -2.30034,  -1.91818,
     x  -1.50450,  -1.32084,  -1.80380,  -2.13878,  -1.94658,
     x  -1.61627,  -1.55771,  -1.88813,  -1.64415,  -1.43970,
     x  -1.72633,  -1.50064,  -1.29499,  -1.47224,  -1.42286,
     x  -1.84903,  -2.42249,  -2.95877,  -3.43342,  -3.85023,
     x  -4.92183,  -4.92959,  -4.80852,  -4.67030,  -4.72573,
     x  -4.84445,  -4.86951,  -4.90354,  -4.80891,  -4.61211,
     x  -4.48205,  -4.51391,  -4.66502,  -4.84670,  -4.88606,
     x  -4.82391,  -4.69897,  -4.51203,  -4.13960,  -3.87805,
     x  -3.80311,  -3.77114,  -3.88260,  -4.14615,  -4.39649,
     x  -4.62899,  -4.78494,  -4.69514,  -4.27200,  -3.92731,
     x  -3.72681,  -3.60335,  -3.49142,  -3.38223,  -3.52349,
     x  -3.64037,  -3.58526,  -3.48978,  -3.36320,  -3.37270,
     x  -3.58359,  -3.83908,  -4.06157,  -3.96920,  -3.24875,
     x  -2.78627,  -2.54861,  -2.56192,  -2.79838,  -2.89008/
       data shn151/
     x  -2.97200,  -2.91496,  -2.85783,  -3.00554,  -3.22285,
     x  -3.17575,  -2.82405,  -2.44375,  -2.24512,  -2.13519,
     x  -2.17638,  -2.12548,  -2.24833,  -2.42286,  -2.48889,
     x  -2.57284,  -2.67481,  -2.84576,  -2.57849,  -2.23621,
     x  -1.97914,  -2.01655,  -2.08918,  -2.25852,  -2.60669,
     x  -2.91101,  -3.24343,  -3.54870,  -3.05507,  -2.41260,
     x  -1.97192,  -1.74591,  -1.70757,  -1.86170,  -2.21955,
     x  -2.52520,  -2.86220,  -2.96082,  -2.42138,  -1.96791,
     x  -1.71099,  -1.68871,  -1.86617,  -2.21148,  -2.51694,
     x  -2.77760,  -2.37949,  -1.89083,  -1.58900,  -1.52710,
     x  -1.68850,  -2.03635,  -2.31319,  -2.17366,  -1.60655,
     x  -1.27097,  -1.14262,  -1.34089,  -1.68119,  -1.78236,
     x  -1.45853,  -1.19063,  -1.11210,  -1.38628,  -1.48342,
     x  -1.12039,   -.85543,   -.77060,  -1.05684,  -1.05423,
     x   -.93689,   -.86922,   -.94306,   -.76850,   -.59062/
       data shn226/
     x   -.50208,   -.53499,   -.88884,  -1.18360,  -1.52243,
     x  -1.84564,  -2.17740,  -2.50559,  -2.83351,  -3.15308,
     x  -3.41587,  -3.41025,  -3.23752,  -3.13656,  -3.30149,
     x  -3.55280,  -3.77885,  -3.71929,  -3.36467,  -3.06275,
     x  -2.83782,  -2.68294,  -2.55793,  -2.63001,  -2.90714,
     x  -3.18561,  -3.46714,  -3.70067,  -3.62895,  -3.02605,
     x  -2.65584,  -2.46195,  -2.48991,  -2.44044,  -2.29494,
     x  -2.28839,  -2.29827,  -2.22063,  -2.12801,  -2.18940,
     x  -2.48029,  -2.74669,  -2.83833,  -2.45937,  -2.16507,
     x  -2.02067,  -2.03314,  -1.80888,  -1.51479,  -1.38580,
     x  -1.37993,  -1.63534,  -1.83905,  -1.87999,  -1.82492,
     x  -1.89398,  -1.90149,  -1.78545,  -1.65285,  -1.40144,
     x  -1.17488,  -1.07228,  -1.15343,  -1.37759,  -1.70025,
     x  -2.01075,  -2.33004,  -2.62771,  -2.87105,  -2.84082,
     x  -2.00293,  -1.31932,   -.92860,   -.76253,   -.84790/
       data shn301/
     x  -1.16306,  -1.46677,  -1.79051,  -2.09491,  -2.34556,
     x  -2.13867,  -1.37321,   -.82048,   -.53990,   -.47636,
     x   -.72816,  -1.03484,  -1.33688,  -1.61955,  -1.78843,
     x  -1.43388,   -.81369,   -.44878,   -.28512,   -.40431,
     x   -.72200,  -1.00945,  -1.28895,  -1.31856,   -.85686,
     x   -.42072,   -.19421,   -.18317,   -.46858,   -.73309,
     x   -.93390,   -.77552,   -.37922,   -.12965,   -.05480,
     x   -.26659,   -.48423,   -.50987,   -.24666,   -.01742,
     x    .07660,   -.06367,   -.20185,   -.11253,    .06726,
     x    .17955,    .14879,    .15975,    .28769,    .41632,
     x    .49995,    .61664,    .76706,    .82624,    .76615,
     x    .43165,    .13821,   -.18926,   -.48784,   -.77913,
     x  -1.08972,  -1.39948,  -1.70006,  -1.94700,  -1.96249,
     x  -1.67500,  -1.41241,  -1.29981,  -1.40100,  -1.69529,
     x  -1.96904,  -2.25253,  -2.44942,  -2.13985,  -1.80460/
       data shn376/
     x  -1.60216,  -1.72517,  -1.98472,  -2.08115,  -1.62632,
     x  -1.12971,   -.86160,   -.81141,  -1.07504,  -1.34407,
     x  -1.50074,  -1.47345,  -1.41077,  -1.59810,  -1.67103,
     x  -1.53208,  -1.36215,  -1.26724,   -.91307,   -.50826,
     x   -.27840,   -.24468,   -.46373,   -.76619,  -1.07304,
     x  -1.37968,  -1.66148,  -1.89046,  -2.02811,  -1.97679,
     x  -1.55840,   -.94089,   -.46463,   -.21757,   -.16985,
     x   -.41642,   -.69469,   -.98624,  -1.26028,  -1.48661,
     x  -1.58100,  -1.42675,  -1.01563,   -.52312,   -.13686,
     x    .06300,    .07682,   -.16825,   -.42809,   -.69506,
     x   -.91898,  -1.03253,   -.90609,   -.42809           /
      end
c=======================================================================
      subroutine volmix(zz,vfn2,vfo2,vfco2,vfch4,vfn2o,vfco,
     &                  vfno2,vfso2,vfnh3,vfno,vfhno3)
c
c   called by module absint
c
c volume fractions in ppm
c   input:   z         altitude in km
c
c   output:  vf??      volume fraction of atmospheric specie in ppm
c                      the volume fractions are based on LOWTRAN's 
c                      US standard atmosphere, 1976 
c
c
c***************************************************************
      parameter (mz=33)
      real alt(mz),n2(mz),o2(mz),co2(mz),ch4(mz),n2o(mz),co(mz),
     &     no2(mz),so2(mz),nh3(mz),no(mz),hno3(mz)

      data alt/
     &    0.0,  1.0,  2.0,  3.0, 4.0,   5.0,  6.0,  7.0,  8.0,  9.0,
     &   10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0,
     &   20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 30.0, 35.0, 40.0, 45.0,
     &   50.0, 70.0,100.0/
      data n2/
     &  7.81e+05,  7.81e+05,  7.81e+05,  7.81e+05,  7.81e+05,
     &  7.81e+05,  7.81e+05,  7.81e+05,  7.81e+05,  7.81e+05,
     &  7.81e+05,  7.81e+05,  7.81e+05,  7.81e+05,  7.81e+05,
     &  7.81e+05,  7.81e+05,  7.81e+05,  7.81e+05,  7.81e+05,
     &  7.81e+05,  7.81e+05,  7.81e+05,  7.81e+05,  7.81e+05,
     &  7.81e+05,  7.81e+05,  7.81e+05,  7.81e+05,  7.81e+05,
     &  7.81e+05,  7.81e+05,  7.77e+05/
      data o2/
     & 2.090e+05, 2.090e+05, 2.090e+05, 2.090e+05, 2.090e+05,
     & 2.090e+05, 2.090e+05, 2.090e+05, 2.090e+05, 2.090e+05,
     & 2.090e+05, 2.090e+05, 2.090e+05, 2.090e+05, 2.090e+05,
     & 2.090e+05, 2.090e+05, 2.090e+05, 2.090e+05, 2.090e+05,
     & 2.090e+05, 2.090e+05, 2.090e+05, 2.090e+05, 2.090e+05,
     & 2.090e+05, 2.090e+05, 2.090e+05, 2.090e+05, 2.090e+05,
     & 2.090e+05, 2.090e+05, 1.600e+05/

c Keeling Mouna Loa CO2 as of jan96

      data co2/
     & 3.600e+02, 3.600e+02, 3.600e+02, 3.600e+02, 3.600e+02,
     & 3.600e+02, 3.600e+02, 3.600e+02, 3.600e+02, 3.600e+02,
     & 3.600e+02, 3.600e+02, 3.600e+02, 3.600e+02, 3.600e+02,
     & 3.600e+02, 3.600e+02, 3.600e+02, 3.600e+02, 3.600e+02,
     & 3.600e+02, 3.600e+02, 3.600e+02, 3.600e+02, 3.600e+02,
     & 3.600e+02, 3.600e+02, 3.600e+02, 3.600e+02, 3.600e+02,
     & 3.600e+02, 3.600e+02, 2.130e+02/
      data  ch4/
     & 1.700e+00, 1.700e+00, 1.700e+00, 1.700e+00, 1.700e+00,
     & 1.700e+00, 1.700e+00, 1.699e+00, 1.697e+00, 1.693e+00,
     & 1.685e+00, 1.675e+00, 1.662e+00, 1.645e+00, 1.626e+00,
     & 1.605e+00, 1.582e+00, 1.553e+00, 1.521e+00, 1.480e+00,
     & 1.424e+00, 1.355e+00, 1.272e+00, 1.191e+00, 1.118e+00,
     & 1.055e+00, 9.136e-01, 7.460e-01, 5.638e-01, 3.631e-01,
     & 2.100e-01, 1.500e-01, 1.200e-01/
      data  n2o/
     & 3.200e-01, 3.200e-01, 3.200e-01, 3.200e-01, 3.200e-01,
     & 3.200e-01, 3.200e-01, 3.200e-01, 3.200e-01, 3.195e-01,
     & 3.179e-01, 3.140e-01, 3.095e-01, 3.048e-01, 2.999e-01,
     & 2.944e-01, 2.877e-01, 2.783e-01, 2.671e-01, 2.527e-01,
     & 2.365e-01, 2.194e-01, 2.051e-01, 1.967e-01, 1.875e-01,
     & 1.756e-01, 1.416e-01, 9.275e-02, 4.513e-02, 1.591e-02,
     & 4.752e-03, 1.149e-03, 3.323e-04/
      data co/
     & 1.500e-01, 1.450e-01, 1.399e-01, 1.349e-01, 1.312e-01,
     & 1.303e-01, 1.288e-01, 1.247e-01, 1.185e-01, 1.094e-01,
     & 9.962e-02, 8.964e-02, 7.814e-02, 6.374e-02, 5.025e-02,
     & 3.941e-02, 3.069e-02, 2.489e-02, 1.966e-02, 1.549e-02,
     & 1.331e-02, 1.232e-02, 1.232e-02, 1.307e-02, 1.400e-02,
     & 1.498e-02, 1.710e-02, 2.009e-02, 2.497e-02, 3.241e-02,
     & 4.597e-02, 3.059e-01, 1.692e+01/
      data no2/
     &  2.30e-05,  2.30e-05,  2.30e-05,  2.30e-05,  2.30e-05,
     &  2.30e-05,  2.30e-05,  2.30e-05,  2.30e-05,  2.32e-05,
     &  2.38e-05,  2.62e-05,  3.15e-05,  4.45e-05,  7.48e-05,
     &  1.71e-04,  3.19e-04,  5.19e-04,  7.71e-04,  1.06e-03,
     &  1.39e-03,  1.76e-03,  2.16e-03,  2.58e-03,  3.06e-03,
     &  3.74e-03,  6.16e-03,  7.28e-03,  4.03e-03,  1.15e-03,
     &  4.43e-04,  2.31e-04,  1.70e-04/
      data so2/
     &  3.00e-04,  2.74e-04,  2.36e-04,  1.90e-04,  1.46e-04,
     &  1.18e-04,  9.71e-05,  8.30e-05,  7.21e-05,  6.56e-05,
     &  6.08e-05,  5.79e-05,  5.60e-05,  5.59e-05,  5.64e-05,
     &  5.75e-05,  5.75e-05,  5.37e-05,  4.78e-05,  3.97e-05,
     &  3.19e-05,  2.67e-05,  2.28e-05,  2.07e-05,  1.90e-05,
     &  1.75e-05,  1.34e-05,  1.16e-05,  1.36e-05,  2.10e-05,
     &  3.56e-05,  4.32e-05,  3.58e-07/
      data nh3/
     &  5.00e-04,  5.00e-04,  4.63e-04,  3.80e-04,  2.88e-04,
     &  2.04e-04,  1.46e-04,  9.88e-05,  6.48e-05,  3.77e-05,
     &  2.03e-05,  1.09e-05,  6.30e-06,  3.12e-06,  1.11e-06,
     &  4.47e-07,  2.11e-07,  1.10e-07,  6.70e-08,  3.97e-08,
     &  2.41e-08,  1.92e-08,  1.72e-08,  1.59e-08,  1.44e-08,
     &  1.23e-08,  6.35e-09,  1.82e-09,  2.94e-10,  2.98e-11,
     &  7.13e-12,  2.57e-12,  1.48e-12/
      data no/
     &  3.00e-04,  3.00e-04,  3.00e-04,  3.00e-04,  3.00e-04,
     &  3.00e-04,  3.00e-04,  3.00e-04,  3.00e-04,  3.00e-04,
     &  3.00e-04,  3.00e-04,  3.00e-04,  2.99e-04,  2.95e-04,
     &  2.83e-04,  2.68e-04,  2.52e-04,  2.40e-04,  2.44e-04,
     &  2.55e-04,  2.77e-04,  3.07e-04,  3.60e-04,  4.51e-04,
     &  6.85e-04,  2.45e-03,  7.14e-03,  1.12e-02,  1.17e-02,
     &  1.03e-02,  1.15e-02,  2.08e+00/
      data hno3/
     &  5.00e-05,  5.96e-05,  6.93e-05,  7.91e-05,  8.87e-05,
     &  9.75e-05,  1.11e-04,  1.26e-04,  1.39e-04,  1.53e-04,
     &  1.74e-04,  2.02e-04,  2.41e-04,  2.76e-04,  3.33e-04,
     &  4.52e-04,  7.37e-04,  1.31e-03,  2.11e-03,  3.17e-03,
     &  4.20e-03,  4.94e-03,  5.46e-03,  5.74e-03,  5.84e-03,
     &  5.61e-03,  3.74e-03,  1.64e-03,  5.33e-04,  1.21e-04,
     &  5.55e-05,  3.27e-05,  2.73e-05/

      data un2,uo2,uco2,uch4,un2o,uco,uno2,uso2,unh3,uno,uhno3
     &   /  1., 1.,  1.,  1.,  1., 1.,  1.,  1.,  1., 1., 1./

      data modify/0/
c************************************************************

      z=max(0.,min(zz,100.))

      if(z.lt.25.) then
        k=int(z)+1
      elseif(z.lt.50.) then
        k=26+(z-25.)/5.
      elseif(z.lt.70.) then
        k=31
      elseif(z.le.100.) then
        k=32
      endif

      kp=k+1
      f=(z-alt(k))/(alt(kp)-alt(k))

      vfn2     = n2(k)  * (1.-f) + n2(kp)  * f 
      vfo2     = o2(k)  * (1.-f) + o2(kp)  * f 
      vfco2    = co2(k) * (1.-f) + co2(kp) * f 
      vfch4    = ch4(k) * (1.-f) + ch4(kp) * f 
      vfn2o    = n2o(k) * (1.-f) + n2o(kp) * f 
      vfco     = co(k)  * (1.-f) + co(kp)  * f 
      vfno2    = no2(k) * (1.-f) + no2(kp) * f 
      vfso2    = so2(k) * (1.-f) + so2(kp) * f 
      vfnh3    = nh3(k) * (1.-f) + nh3(kp) * f 
      vfno     = no(k)  * (1.-f) + no(kp)  * f 
      vfhno3   = hno3(k)* (1.-f) + hno3(kp)* f 

      if(modify.eq.1) then
        vfn2     =  vfn2  * un2
        vfo2     =  vfo2  * uo2
        vfco2    =  vfco2 * uco2
        vfch4    =  vfch4 * uch4
        vfn2o    =  vfn2o * un2o
        vfco     =  vfco  * uco
        vfno2    =  vfno2 * uno2
        vfso2    =  vfso2 * uso2
        vfnh3    =  vfnh3 * unh3
        vfno     =  vfno  * uno
        vfhno3   =  vfhno3* uhno3
      endif

c      if(z.lt. .5) then
c        write(*,'(a,/,1p(10e11.3))') 'alt',alt
c        write(*,'(a,/,1p(10e11.3))') 'o2',o2
c        write(*,'(a,/,1p(10e11.3))') 'n2',n2
c        write(*,'(a,/,1p(10e11.3))') 'co2',co2
c      endif
c
c      write(*,'(a,1p(10e11.3))') 'alt,o2,n2,co2 ',z,vfo2,vfn2,vfco2

      return
      
      entry modmix(xn2,xo2,xco2,xch4,xn2o,xco,xno2,xso2,xnh3,xno,xhno3)
c
c modify values of un2 uo2 uco2 uch4 un2o uco uno2 uso2 unh3 uno uhno3
c the values are saved after exit because these variables appear in 
c data statements
c

      if(xn2  .ge. 0. )  un2  = xn2  / n2(1)   
      if(xo2  .ge. 0. )  uo2  = xo2  / o2(1)   
      if(xco2 .ge. 0. )  uco2 = xco2 / co2(1)  
      if(xch4 .ge. 0. )  uch4 = xch4 / ch4(1)  
      if(xn2o .ge. 0. )  un2o = xn2o / n2o(1)  
      if(xco  .ge. 0. )  uco  = xco  / co(1)   
      if(xno2 .ge. 0. )  uno2 = xno2 / no2(1)  
      if(xso2 .ge. 0. )  uso2 = xso2 / so2(1)  
      if(xnh3 .ge. 0. )  unh3 = xnh3 / nh3(1)  
      if(xno  .ge. 0. )  uno  = xno  / no(1)   
      if(xhno3.ge. 0. )  uhno3= xhno3/ hno3(1) 

      test=max(xn2,xo2,xco2,xch4,xn2o,xco,xno2,xso2,xnh3,xno,xhno3)

      if(test .gt. -0.99) modify=1

c 1    format(a,1p11e11.3)
c      write(*,1) 'x',xn2,xo2,xco2,xch4,xn2o,xco,xno2,xso2,xnh3,xno,xhno3
c      write(*,1) 'u',un2,uo2,uco2,uch4,un2o,uco,uno2,uso2,unh3,uno,uhno3

      return
      end   
c=======================================================================
